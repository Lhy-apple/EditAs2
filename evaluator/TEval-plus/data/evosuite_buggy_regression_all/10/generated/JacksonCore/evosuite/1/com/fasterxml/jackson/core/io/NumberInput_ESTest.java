/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:18:36 GMT 2023
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.NumberInput;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberInput_ESTest extends NumberInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      try { 
        NumberInput.parseBigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        NumberInput.parseLong(charArray0, 0, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberInput.parseBigDecimal("2.2250738585072012e-308");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = NumberInput.parseInt(charArray0, (int) '\u0000', (int) '\u0000');
      assertEquals((-48), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = NumberInput.parseInt(charArray0, 1, 1762);
      assertEquals((-1038366032), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[17];
      int int0 = NumberInput.parseInt(charArray0, 2, 2);
      assertEquals((-528), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[23];
      int int0 = NumberInput.parseInt(charArray0, 0, 3);
      assertEquals((-5328), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = NumberInput.parseInt(charArray0, 4, 4);
      assertEquals((-53328), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = NumberInput.parseInt(charArray0, 5, 5);
      assertEquals((-533328), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = NumberInput.parseInt(charArray0, 1, 6);
      assertEquals((-5333328), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = NumberInput.parseInt(charArray0, 0, 7);
      assertEquals((-53333328), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = NumberInput.parseInt(charArray0, 0, 8);
      assertEquals((-533333328), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = NumberInput.parseInt("-0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("-K_y`\"5]r!4YVDy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-K_y`\"5]r!4YVDy\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("2.2250738585072012e-308");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2.2250738585072012e-308\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseLong("JE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("'Vhy9IG+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'Vhy9IG+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("83492'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"83492'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("6^j'W>|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6^j'W>|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("6/j'W>|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6/j'W>|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = NumberInput.parseInt("00");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("54VSLBagU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"54VSLBagU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("83!492D'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"83!492D'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = NumberInput.parseInt("120");
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("339jeD'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"339jeD'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = NumberInput.parseInt("83392");
      assertEquals(83392, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseLong("wtm~Sq1xQ)5KhR6`t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wtm~Sq1xQ)5KhR6`t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = NumberInput.inLongRange(charArray0, (int) '\u0000', (int) '\u0000', false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange((char[]) null, 876, 876, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      boolean boolean0 = NumberInput.inLongRange(charArray0, 0, 19, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = ';';
      boolean boolean0 = NumberInput.inLongRange(charArray0, 0, 19, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange("9yA:0MlsH+F2H8bkcg4", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange("83492'", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange(" 2[IrK!GK6`c<3NcYoL", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange(" [IrK!GK6`c<3NcYoL", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("0", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = NumberInput.parseAsInt((String) null, 43);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("+cA-0]A@sH+F2+8bkcgu", 3707);
      assertEquals(3707, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("-G", (-1825480420));
      assertEquals((-1825480420), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("6/j'W>|", (-934));
      assertEquals((-934), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = NumberInput.parseAsLong((String) null, 3608L);
      assertEquals(3608L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("+@Y(<|EV]r@#}bS,7", (-30L));
      assertEquals((-30L), long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("-_*", 2793L);
      assertEquals(2793L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("1", 3608L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("2.2250738585072012e-308", (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = NumberInput.parseAsDouble("'Vhy9IG+", 1320.409348);
      assertEquals(1320.409348, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = NumberInput.parseAsDouble((String) null, 1000000000L);
      assertEquals(1.0E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = NumberInput.parseAsDouble("", 1551.7659525186768);
      assertEquals(1551.7659525186768, double0, 0.01);
  }
}
