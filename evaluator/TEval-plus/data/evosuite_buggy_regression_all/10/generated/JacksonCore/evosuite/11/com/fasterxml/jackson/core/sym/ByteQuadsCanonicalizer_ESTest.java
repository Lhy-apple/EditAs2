/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:21:09 GMT 2023
 */

package com.fasterxml.jackson.core.sym;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteQuadsCanonicalizer_ESTest extends ByteQuadsCanonicalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1998);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1998);
      byteQuadsCanonicalizer1.findName(6, 6);
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(1998, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = byteQuadsCanonicalizer0.hashSeed();
      assertEquals(839877741, int0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = byteQuadsCanonicalizer0.bucketCount();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, int0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(32768);
      byteQuadsCanonicalizer1.addName("Q~fv4P?Yp", 32768, 32768, 32768);
      byteQuadsCanonicalizer1.release();
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      byteQuadsCanonicalizer0.release();
      assertEquals(1143, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(412);
      byteQuadsCanonicalizer1.release();
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(32768);
      byteQuadsCanonicalizer1._count = 32768;
      byteQuadsCanonicalizer1.addName("Q~fv4P?Yp", 32768, 32768, 32768);
      byteQuadsCanonicalizer1.release();
      assertEquals(32769, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-3622));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3622));
      int int0 = byteQuadsCanonicalizer1.size();
      assertEquals(0, int0);
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals((-3622), byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = byteQuadsCanonicalizer0.size();
      assertEquals(0, int0);
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("!JH8cbVX`TSa", 1143, 1143);
      byteQuadsCanonicalizer1.addName("!JH8cbVX`TSa", 1143, 1143);
      byteQuadsCanonicalizer1.toString();
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[9];
      intArray0[3] = 395;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._hashSize = 2;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(2058);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2058);
      byteQuadsCanonicalizer1.findName(5);
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(2058, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("}V", (-7));
      int[] intArray0 = new int[8];
      intArray0[0] = (-7);
      byteQuadsCanonicalizer1.findName(intArray0, (-7));
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("!JkcbVv`TSa(", 1143, 1143);
      byteQuadsCanonicalizer1.findName(1143);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("JSON", 4, 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("JSON", 4);
      byteQuadsCanonicalizer1.addName("JSON", 4);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.findName(intArray0, 1);
      assertEquals(2, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", 1143, 3229);
      byteQuadsCanonicalizer1.findName(1706, 1706);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("~", 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.findName(1143, 396);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1150);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1150);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", 1150, 1150);
      byteQuadsCanonicalizer1.findName(1150, 1150);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3132));
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("J", 1);
      byteQuadsCanonicalizer1.findName(1, 1);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-184));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-184));
      byteQuadsCanonicalizer1.addName("p", (-184), (-184));
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("p", 1);
      byteQuadsCanonicalizer1.addName("p", (-184));
      byteQuadsCanonicalizer1.findName((-184), (-184));
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1140);
      byteQuadsCanonicalizer1.addName("", 1140, 1140);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("", 1, 1140, 1140);
      byteQuadsCanonicalizer1.addName("", 1140);
      byteQuadsCanonicalizer1.findName(0, 1);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1140);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1140);
      byteQuadsCanonicalizer1.addName("", 1140, 1140);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("", 1, 1140, 1140);
      byteQuadsCanonicalizer1.addName("", 1140);
      byteQuadsCanonicalizer1.findName(1140, 1);
      assertEquals(3, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.findName(intArray0, 3);
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(1143, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1140);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1140);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("", 1, 4, 4);
      byteQuadsCanonicalizer1.findName(1, 4, 1140);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("~", 1, 1143, 1143);
      byteQuadsCanonicalizer1.findName(1, 1, 1143);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1145);
      byteQuadsCanonicalizer1.addName("{$", 1145, 1145, 1145);
      byteQuadsCanonicalizer1.findName(1145, 1145, 1145);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("~", 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("~", 1, 1143, 1143);
      byteQuadsCanonicalizer1.findName(1, 1143, 256);
      assertEquals(110, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("~", 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("~", 1, 1143, 1143);
      byteQuadsCanonicalizer1.findName(1, 1, 1);
      assertEquals(110, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("~", 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("~", 1, 1143, 1143);
      byteQuadsCanonicalizer1.findName(1, 1143, 1143);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1998);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1998);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 9);
      byteQuadsCanonicalizer1.findName(intArray0, 9);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      int[] intArray0 = new int[6];
      intArray0[0] = 1143;
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1143, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1998);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1998);
      int[] intArray0 = new int[9];
      intArray0[3] = 6;
      byteQuadsCanonicalizer1.addName((String) null, 332);
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 6);
      byteQuadsCanonicalizer1.findName(intArray0, 6);
      assertEquals(2, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("{=%;9J`C?lb", 4);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("JSON", 4, 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("JSON", 4);
      byteQuadsCanonicalizer1.addName("JSON", 4);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1._tertiaryShift = 2;
      byteQuadsCanonicalizer1.findName(intArray0, 1);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1131);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1131);
      byteQuadsCanonicalizer1.addName("", 1131, 1131);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("", 1, 1131, 1131);
      byteQuadsCanonicalizer1.addName("", 1131);
      byteQuadsCanonicalizer1.findName(1131);
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("JSON", 4, 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("JSON", 4);
      byteQuadsCanonicalizer1.addName("JSON", 4);
      byteQuadsCanonicalizer1._spilloverEnd = 1143;
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1._tertiaryShift = 2;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.findName(intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 521
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1085);
      byteQuadsCanonicalizer0._spilloverEnd = 1085;
      int[] intArray0 = new int[4];
      intArray0[3] = 1085;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(1085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(235);
      int[] intArray0 = new int[7];
      byteQuadsCanonicalizer0._hashArea = intArray0;
      assertEquals(235, byteQuadsCanonicalizer0.hashSeed());
      
      intArray0[3] = 235;
      byteQuadsCanonicalizer0.findName(235, 0);
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3132));
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("J", 1);
      byteQuadsCanonicalizer1.addName("J", 2, 2);
      byteQuadsCanonicalizer1.findName(1, 1);
      assertEquals(2, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(804);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("", 1);
      byteQuadsCanonicalizer1.addName("", 804);
      int[] intArray0 = new int[8];
      byteQuadsCanonicalizer1.findName(intArray0, 2);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(235);
      byteQuadsCanonicalizer0._spilloverEnd = 235;
      int[] intArray0 = new int[7];
      byteQuadsCanonicalizer0._hashArea = intArray0;
      intArray0[3] = 235;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(235, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("q2uT^", 1, (-3257), (-3257));
      byteQuadsCanonicalizer1.addName("q2uT^", (-1924));
      byteQuadsCanonicalizer1.findName(0, 1, 312);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1._hashSize = 1143;
      byteQuadsCanonicalizer1.addName("}V", (-7));
      byteQuadsCanonicalizer1.addName("_4ygu.PD`EOgb;klJ", (-7));
      byteQuadsCanonicalizer1.findName(0, 0, 4124);
      assertEquals((-1889), byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("SO", 4, 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("SO", 4);
      byteQuadsCanonicalizer1.addName("SO", 4);
      byteQuadsCanonicalizer1._spilloverEnd = 416;
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1._tertiaryShift = 1;
      byteQuadsCanonicalizer1.findName(intArray0, 3);
      assertEquals(2, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1178);
      int[] intArray0 = new int[8];
      byteQuadsCanonicalizer0._spilloverEnd = 1178;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      String[] stringArray0 = new String[13];
      byteQuadsCanonicalizer0._names = stringArray0;
      byteQuadsCanonicalizer0.addName("", 1178);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1998);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1998);
      int[] intArray0 = new int[9];
      intArray0[3] = 6;
      byteQuadsCanonicalizer1.addName((String) null, 332);
      byteQuadsCanonicalizer1.addName("B,s/'?=l-", 12);
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 6);
      byteQuadsCanonicalizer1.findName(intArray0, 6);
      assertEquals(3, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1.addName("SO", 4, 1143, 1143);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("SO", 4);
      byteQuadsCanonicalizer1.addName("SO", 4);
      byteQuadsCanonicalizer1._spilloverEnd = 416;
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1._tertiaryShift = 1;
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.secondaryCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1998);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1998);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 4);
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(2058);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2058);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 5);
      byteQuadsCanonicalizer1.findName(intArray0, 5);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2028);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 8);
      byteQuadsCanonicalizer1.findName(intArray0, 8);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("%Ze>]vT`^K)", 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1143);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1143);
      byteQuadsCanonicalizer1._count = 1143;
      byteQuadsCanonicalizer1._hashSize = 1444;
      byteQuadsCanonicalizer1.addName("q2VQT^", 1143);
      assertEquals(1144, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1178);
      int[] intArray0 = new int[10];
      intArray0[3] = 1178;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("Failed copy(): ", 1178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1998);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1998);
      int[] intArray0 = new int[8];
      byteQuadsCanonicalizer1._longNameOffset = 4;
      byteQuadsCanonicalizer1.addName((String) null, intArray0, 6);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.calcHash(intArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1148);
      byteQuadsCanonicalizer1._count = 1148;
      byteQuadsCanonicalizer1.addName("q2VQT^", 1148, 1148);
      int[] intArray0 = new int[25];
      intArray0[3] = 1148;
      byteQuadsCanonicalizer1._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("q2VQT^", 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1130);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1130);
      byteQuadsCanonicalizer1._count = 1130;
      byteQuadsCanonicalizer1.addName("q2VQT^", 1130, 1130);
      int[] intArray0 = new int[25];
      intArray0[3] = (-2542);
      byteQuadsCanonicalizer1._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("q2VQT^", 0, (-1734));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1155);
      byteQuadsCanonicalizer1._count = 1155;
      byteQuadsCanonicalizer1.addName("j2-TB", 1156);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("j2-TB", 1, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed rehash(): old count=1156, copyCount=1
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1180);
      byteQuadsCanonicalizer0._hashSize = 1180;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0._reportTooManyCollisions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spill-over slots in symbol table with 0 entries, hash area of 1180 slots is now full (all 147 slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(65599);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(340);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(1143);
      assertEquals(6, int0);
  }
}
