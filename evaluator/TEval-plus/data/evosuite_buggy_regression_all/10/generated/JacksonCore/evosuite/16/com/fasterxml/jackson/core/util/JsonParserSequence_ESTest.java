/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:21:01 GMT 2023
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonParserSequence_ESTest extends JsonParserSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)98, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      jsonParserSequence0.close();
      assertEquals(2, jsonParserSequence0.containedParsersCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[8];
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParserArray0[1], jsonParserArray0[2]);
      int int0 = jsonParserSequence0.containedParsersCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)57, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(jsonParserSequence0, uTF8StreamJsonParser0);
      assertEquals(3, jsonParserSequence1.containedParsersCount());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      JsonParserDelegate[] jsonParserDelegateArray0 = new JsonParserDelegate[8];
      jsonParserDelegateArray0[1] = (JsonParserDelegate) jsonParserSequence0;
      JsonParserSequence jsonParserSequence1 = new JsonParserSequence(jsonParserDelegateArray0);
      JsonParserSequence jsonParserSequence2 = JsonParserSequence.createFlattened(jsonParserDelegateArray0[3], jsonParserSequence1);
      assertEquals(10, jsonParserSequence2.containedParsersCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)57, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      jsonParserSequence0.nextToken();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)98, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      JsonToken jsonToken0 = jsonParserSequence0.nextToken();
      assertFalse(jsonToken0.isStructEnd());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      JsonParser[] jsonParserArray0 = new JsonParser[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1293), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      jsonParserArray0[0] = (JsonParser) readerBasedJsonParser0;
      JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
      ObjectCodec objectCodec1 = jsonParserSequence0.getCodec();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(readerBasedJsonParser1, readerBasedJsonParser0);
      jsonParserSequence1.nextToken();
      assertTrue(readerBasedJsonParser0.hasCurrentToken());
      assertTrue(readerBasedJsonParser1.isClosed());
  }
}
