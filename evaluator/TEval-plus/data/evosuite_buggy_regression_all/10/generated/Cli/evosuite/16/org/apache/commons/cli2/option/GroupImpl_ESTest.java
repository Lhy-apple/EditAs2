/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:24:09 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.ClassValidator;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "qM|c2V7B", (-602), (-602));
      groupImpl0.getAnonymous();
      assertEquals("", groupImpl0.getPreferredName());
      assertEquals("qM|c2V7B", groupImpl0.getDescription());
      assertEquals((-602), groupImpl0.getMinimum());
      assertEquals((-602), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Xdc@qT)Am`", "", 0, (-719));
      int int0 = groupImpl0.getMaximum();
      assertEquals((-719), int0);
      assertEquals("Xdc@qT)Am`", groupImpl0.getPreferredName());
      assertEquals("", groupImpl0.getDescription());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", (-2), (-4387));
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      linkedList1.add(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "Passes properties and values to the application", (-2), (-2));
      try { 
        groupImpl1.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected Unexpected.token while processing 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("]pcp`H=7%t9o>iO", "]pcp`H=7%t9o>iO", (-3267), (-3267), 'X', 'X', dateValidator0, ">&_XF5b", linkedList0, (-3267));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'A', '\u0000', ">&_XF5b", linkedList0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.GroupImpl", "org.apache.commons.cli2.option.GroupImpl", (-3267), (-3267));
      String string0 = groupImpl0.toString();
      assertFalse(linkedList0.contains(sourceDestArgument0));
      assertEquals("org.apache.commons.cli2.option.GroupImpl () ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, (-434), (-434));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals((-434), groupImpl0.getMinimum());
      assertEquals((-434), groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedHashSet<List<String>> linkedHashSet0 = new LinkedHashSet<List<String>>();
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-", "-", 0, 2181, '<', 'D', classValidator0, "-", linkedList0, 874);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "/jdYfAl<c", "z/>V", 1, 1);
      Command command0 = new Command("org.apache.commons.cli2.option.GroupImpl", "-", linkedHashSet0, false, argumentImpl0, groupImpl0, (-602));
      linkedList0.add(command0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.GroupImpl", "org.apache.commons.cli2.option.GroupImpl", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
      boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.option.GroupImpl");
      assertTrue(linkedList0.contains(command0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("_<_k]\"<\"ESIlW2W?", "_<_k]\"<\"ESIlW2W?", 68);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 68, 68);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "_<_k]\"<\"ESIlW2W?<property>=<value>");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", " ...", (-24), 41);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "{%dh&SYLx>k");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      PropertyOption propertyOption0 = new PropertyOption("", "S", 68);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "d[=", "Passes properties and values to the application", 68, 68);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList1);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, " (");
      assertEquals(68, groupImpl0.getMinimum());
      assertEquals("d[=", groupImpl0.getPreferredName());
      assertFalse(boolean0);
      assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
      assertEquals(68, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "RTb<", 0, 0, 'c', ')', numberValidator0, "Switch.already.set", linkedList0, (-1710));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, ')', 'c', "org.apache.commons.cli2.resource.bundle", linkedList0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.GroupImpl", "org.apache.commons.cli2.option.GroupImpl", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.option.GroupImpl");
      assertFalse(linkedList0.contains(sourceDestArgument0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "lPL@%6", "lPL@%6", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<Command> listIterator0 = linkedList0.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 1, 1);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("arg");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(1, groupImpl0.getMinimum());
      assertEquals(1, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<List<String>> listIterator0 = (ListIterator<List<String>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("_<_k]\"<\"ESIlW2W?", "_<_k]\"<\"ESIlW2W?", 68);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 68, 68);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "S", "", 955, 955);
      linkedList0.add(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(groupImpl0);
      // Undeclared exception!
      groupImpl0.validate(writeableCommandLineImpl0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      DateValidator dateValidator0 = new DateValidator(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("^u", "^u", 0, 0, '/', 'K', dateValidator0, "", linkedList1, (-2698));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "k@", "k@", (-598), (-598));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertFalse(linkedList0.contains(sourceDestArgument0));
      assertEquals((-598), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "_<_k]\"<\"ESIlW2W?", 0, (-2830));
      String string0 = groupImpl0.toString();
      assertEquals("[ ()]", string0);
      assertEquals((-2830), groupImpl0.getMaximum());
      assertEquals("_<_k]\"<\"ESIlW2W?", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
      LinkedHashSet<DisplaySetting> linkedHashSet0 = new LinkedHashSet<DisplaySetting>();
      Comparator<DefaultOption> comparator0 = (Comparator<DefaultOption>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(", "(", 0, 1910);
      linkedList1.add(groupImpl0);
      linkedList1.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "(", "", 46, 0);
      String string0 = groupImpl1.toString();
      assertEquals(2, linkedList1.size());
      assertEquals("( (( ()|( ())", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 1, 1);
      LinkedHashSet<Command> linkedHashSet0 = new LinkedHashSet<Command>();
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(1, linkedHashSet0, comparator0);
      assertEquals(1, groupImpl0.getMaximum());
      assertEquals(1, groupImpl0.getMinimum());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("_<_k]\"<\"ESIlW2W?", "_<_k]\"<\"ESIlW2W?", 68);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 68, 68);
      groupImpl0.findOption("_<_k]\"<\"ESIlW2W?");
      assertEquals(1, linkedList0.size());
      assertEquals(68, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("_<_k]\"<\"ESIlW2W?", "_<_k]\"<\"ESIlW2W?", 68);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 68, 68);
      groupImpl0.findOption("x*1[");
      assertEquals(1, linkedList0.size());
      assertEquals(68, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("qM|c2V7B", "qM|c2V7B", (-602));
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "qM|c2V7B", "qM|c2V7B", (-1693), 2876);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(1, linkedList0.size());
      assertEquals(2876, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      UrlValidator urlValidator0 = new UrlValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("s_ugEE<l(\"`_rl", "s_ugEE<l(\"`_rl", 0, 0, '\"', '\"', urlValidator0, "s_ugEE<l(\"`_rl", linkedList0, 46);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.minimum.exceeds.maximum", "LB&}cR^ 3d", (-864), (-864));
      // Undeclared exception!
      try { 
        groupImpl0.defaults((WriteableCommandLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }
}
