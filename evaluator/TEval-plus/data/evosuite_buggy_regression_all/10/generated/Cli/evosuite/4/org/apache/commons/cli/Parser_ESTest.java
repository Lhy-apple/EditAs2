/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:22:59 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      CommandLine commandLine0 = posixParser0.parse(options0, (String[]) null, (Properties) null);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      GnuParser gnuParser0 = new GnuParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      stringArray0[1] = "-1";
      stringArray0[2] = "-1";
      stringArray0[3] = "-1";
      try { 
        gnuParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -1
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("1", "-1", true, "-1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-1";
      stringArray0[1] = "1";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = posixParser0.parse(options1, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[15];
      stringArray0[0] = "-`8.~q D8A6)3MR0v>$u";
      BasicParser basicParser0 = new BasicParser();
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[26];
      stringArray0[0] = "%g(Lp -1bv3V7";
      BasicParser basicParser0 = new BasicParser();
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[26];
      stringArray0[0] = "-8.~q D8A6)3MR0v>$Iu";
      PosixParser posixParser0 = new PosixParser();
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, (Properties) null, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("1", false, "-1");
      GnuParser gnuParser0 = new GnuParser();
      Properties properties0 = new Properties();
      properties0.put("1", options1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      stringArray0[1] = "-1";
      stringArray0[2] = "-1";
      stringArray0[3] = "-1";
      // Undeclared exception!
      try { 
        gnuParser0.parse(options1, stringArray0, properties0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1";
      try { 
        posixParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // []
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption("1", "-1", true, "-1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-1";
      stringArray0[1] = "org.apache.commons.cli.Parser";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("1", "-1", true, "-1");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-1";
      stringArray0[1] = "-1";
      Properties properties0 = new Properties();
      try { 
        posixParser0.parse(options1, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option:1
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Option option0 = new Option("", true, "}Q\bgYUmBQ`au}G$4");
      option0.setOptionalArg(true);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      ListIterator<Option> listIterator0 = linkedList0.listIterator();
      posixParser0.processArgs(option0, listIterator0);
      assertTrue(option0.hasOptionalArg());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("1", "-1", false, "1");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      GnuParser gnuParser0 = new GnuParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[4];
      option0.setRequired(true);
      stringArray0[0] = "-";
      stringArray0[1] = "-1";
      stringArray0[2] = "-1";
      stringArray0[3] = "-1";
      CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("1", "-1", false, "17");
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      GnuParser gnuParser0 = new GnuParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "17";
      stringArray0[1] = "-1";
      stringArray0[2] = "-1";
      stringArray0[3] = "17";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, false);
      assertNotNull(commandLine0);
  }
}
