/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:25:22 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-1), (-1), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.setDefaultValues(groupImpl0, linkedList0);
      assertEquals((-1), groupImpl0.getMinimum());
      assertEquals((-1), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 54, 54, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("").when(listIterator0).next();
      doReturn(writeableCommandLineImpl0).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(54, groupImpl0.getMinimum());
      assertEquals(54, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "+r`]JP#D2W~'),gf#", 0, 95, true);
      groupImpl0.getAnonymous();
      assertEquals(95, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "}Ao/-^TSf|b~0]", "}Ao/-^TSf|b~0]", 0, (-945), false);
      int int0 = groupImpl0.getMaximum();
      assertEquals((-945), int0);
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 3559, 2, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D<property>=<value>");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Bv`${#2hrg", "Bv`${#2hrg", 68, 68, '5', '5', numberValidator0, "Missing.option", linkedList1, 3926);
      LinkedList<PropertyOption> linkedList2 = new LinkedList<PropertyOption>();
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '|', "Missing.option", linkedList2);
      linkedList0.add((Object) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "}LguW!", "org.apache.commons.cli2.option.GroupImpl", 68, 2325, true);
      groupImpl0.toString();
      assertEquals(0, linkedList0.size());
      assertEquals(68, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-1), (-1), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals((-1), groupImpl0.getMinimum());
      assertEquals((-1), groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("org.apache.commons.cli2.option.GroupImpl", "DISPLAY_PARENT_ARGUMENT", 1441);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "Budmi2.LM3f3_yWtJ", 1441, 233, true);
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) null, "org.apache.commons.cli2.option.GroupImpl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-1), (-1), true);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
      assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
      assertEquals((-1), groupImpl0.getMinimum());
      assertFalse(boolean0);
      assertEquals((-1), groupImpl0.getMaximum());
      assertEquals("-D", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-2978), (-2978), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals((-2978), groupImpl0.getMinimum());
      assertFalse(boolean0);
      assertEquals((-2978), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "XHtMb9y ", (-2978), (-2978), '?', '?', numberValidator0, " (", linkedList0, 1833);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.add((Object) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2978), (-2978), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "6t|K");
      assertEquals((-2978), groupImpl0.getMinimum());
      assertEquals((-2978), groupImpl0.getMaximum());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 3559, 2, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<Locale.LanguageRange> listIterator0 = (ListIterator<Locale.LanguageRange>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(3559, groupImpl0.getMinimum());
      assertEquals(2, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-1), (-1), true);
      ListIterator<DefaultOption> listIterator0 = (ListIterator<DefaultOption>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process((WriteableCommandLine) null, listIterator0);
      assertEquals((-1), groupImpl0.getMaximum());
      assertEquals((-1), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("org.apache.commons.cli2.option.GroupImpl", "DISPLAY_PARENT_ARGUMENT", 1441);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DISPLAY_PARENT_ARGUMENT", "org.apache.commons.cli2.option.GroupImpl", 1441, 2, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("org.apache.commons.cli2.option.GroupImpl", (Object) null).when(listIterator0).next();
      doReturn("DISPLAY_PARENT_ARGUMENT").when(listIterator0).previous();
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected {0} while processing 
         //
         verifyException("org.apache.commons.cli2.option.PropertyOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 3559, 2, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", ")JqbWC>+/", 486, 93, true);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option Passes properties and values to the application
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 486, (-2953), true);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected -D while processing 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-1), (-1), true);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals((-1), groupImpl0.getMinimum());
      assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
      assertEquals("-D", groupImpl0.getPreferredName());
      assertEquals((-1), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      LinkedList<ArgumentImpl> linkedList1 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("L!9", "L!9", 1, 1, 'G', 's', dateValidator0, "", linkedList0, (-534));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList1.add((ArgumentImpl) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, (String) null, "U;nptN/V6R[s0Z0mS", (-1811), (-2555), false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) L!9
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "PQ535#TSB2(", "PQ535#TSB2(", (-374), (-374), false);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) null, "PQ535#TSB2(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 1043, (-251), false);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "", 1317, (-251), true);
      String string0 = groupImpl1.toString();
      assertEquals(" ([ ()])", string0);
      assertEquals((-251), groupImpl1.getMaximum());
      assertEquals(1317, groupImpl1.getMinimum());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "+r`]JP#D2W~'),gf#", 0, 95, true);
      LinkedHashSet<Command> linkedHashSet0 = new LinkedHashSet<Command>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
      assertFalse(groupImpl0.isRequired());
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(95, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "X", 95, (-1), true);
      linkedList1.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "X", "", (-1), 95, true);
      linkedList1.offerLast(groupImpl0);
      String string0 = groupImpl1.toString();
      assertEquals(95, groupImpl1.getMaximum());
      assertEquals("", groupImpl1.getDescription());
      assertEquals((-1), groupImpl1.getMinimum());
      assertEquals("[X ( ()| ())]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "}LguW!", "org.apache.commons.cli2.option.GroupImpl", 68, 2325, true);
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      Comparator<GroupImpl> comparator0 = (Comparator<GroupImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(2325, linkedHashSet0, comparator0);
      assertTrue(list0.isEmpty());
      assertEquals("org.apache.commons.cli2.option.GroupImpl", groupImpl0.getDescription());
      assertEquals(2325, groupImpl0.getMaximum());
      assertEquals(68, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", ")JqbWC>+/", 486, 93, true);
      groupImpl0.findOption("");
      assertEquals(")JqbWC>+/", groupImpl0.getDescription());
      assertEquals(486, groupImpl0.getMinimum());
      assertEquals(93, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-24), (-24), true);
      Option option0 = groupImpl0.findOption("-D");
      assertNotNull(option0);
      assertEquals((-24), groupImpl0.getMaximum());
      assertEquals((-24), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("org.apache.commons.cli2.option.GroupImpl", "DISPLAY_PARENT_ARGUMENT", 1441);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "Budmi2.LM3f3_yWtJ", 1441, 233, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals("Budmi2.LM3f3_yWtJ", groupImpl0.getDescription());
      assertEquals(233, groupImpl0.getMaximum());
      assertEquals(1441, groupImpl0.getMinimum());
  }
}
