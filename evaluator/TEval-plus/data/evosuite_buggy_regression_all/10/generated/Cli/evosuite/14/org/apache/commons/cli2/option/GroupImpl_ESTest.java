/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:24:50 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "x", "x", Integer.MAX_VALUE, Integer.MAX_VALUE);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.getValues((Option) groupImpl0);
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMinimum());
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "$!\u0005?K+=,?l\"Au+w", "$!\u0005?K+=,?l\"Au+w", 0, 0);
      groupImpl0.getAnonymous();
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "$!\u0005?K+=,?l\"Au+w", "$!\u0005?K+=,?l\"Au+w", 0, 0);
      int int0 = groupImpl0.getMaximum();
      assertEquals(0, int0);
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberValidator numberValidator0 = new NumberValidator(decimalFormat0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("_T5jg94", "", Integer.MAX_VALUE, Integer.MAX_VALUE, '=', '=', numberValidator0, "", linkedList0, Integer.MAX_VALUE);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '=', '\u0000', "", linkedList0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.pache.commons.cli2.option.GroupImpl", "org.pache.commons.cli2.option.GroupImpl", Integer.MAX_VALUE, Integer.MAX_VALUE);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "DISPLAY_PARENT_CHILDREN");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "{Y[<Y%X) <^y", (String) null, 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertFalse(boolean0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "", 41, 41);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "", (String) null, 0, (-2612));
      boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
      PropertyOption propertyOption0 = new PropertyOption("", "", 0);
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "", (String) null, 0, (-2612));
      boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
      PropertyOption propertyOption0 = new PropertyOption();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(0, groupImpl0.getMaximum());
      assertFalse(boolean0);
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "huS1wz{", "huS1wz{", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "$!\u0005?Kb=,?l\"Au5>w", "$!\u0005?Kb=,?l\"Au5>w", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(p![):", "(p![):", 1409, 1409);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("(p![):").when(listIterator0).next();
      doReturn("(p![):").when(listIterator0).previous();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(1409, groupImpl0.getMinimum());
      assertEquals(1409, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberValidator numberValidator0 = new NumberValidator(decimalFormat0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl(":z,^1l4^Q`#U+XH.G", ":z,^1l4^Q`#U+XH.G", 4, 237, '5', 'p', numberValidator0, ":z,^1l4^Q`#U+XH.G", linkedList0, 4);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "8b^hg^", "MRm89C&5g8<X+$ql", 237, 4);
      Command command0 = new Command("(p![):", "(p![):", linkedHashSet0, true, argumentImpl0, groupImpl0, 237);
      linkedList0.add(command0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "(p![):", "(p![):", 1419, 1419);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("(p![):", (Object) null).when(listIterator0).next();
      doReturn("URLValidator.malformed.URL").when(listIterator0).previous();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl1.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.ParentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", 0, 0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Pgcx%~>IU^nIV", "Pgcx%~>IU^nIV", 28, 28);
      linkedList0.add((Object) groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "$!\u0005?Kb=,?l\"Au5>w", "$!\u0005?Kb=,?l\"Au5>w", 0, 0);
      linkedList0.add((Object) groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addSwitch(propertyOption0, true);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", 0, 0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected -D while processing Passes properties and values to the application
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addSwitch(propertyOption0, true);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 927, 93);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option Passes properties and values to the application
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      DateValidator dateValidator0 = new DateValidator(linkedList0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("5C},s``-3gZ9", "Passes properties and values to the application", (-1065), (-1065), 'Q', '7', dateValidator0, "5C},s``-3gZ9", linkedList0, (-3640));
      linkedList0.add((Object) argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-3640), (-3640));
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1065
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 5, 1464);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 143, 143);
      StringBuffer stringBuffer0 = new StringBuffer(143);
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage(stringBuffer0, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
      assertEquals(143, groupImpl0.getMinimum());
      assertEquals(143, groupImpl0.getMaximum());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
      String string0 = groupImpl0.toString();
      assertEquals(2, linkedList0.size());
      assertEquals("[ (-D<property>=<value>|-D<property>=<value>)]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberValidator numberValidator0 = new NumberValidator(decimalFormat0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("_T5jg94", "", Integer.MAX_VALUE, Integer.MAX_VALUE, '=', '=', numberValidator0, "", linkedList0, Integer.MAX_VALUE);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '=', '\u0000', "", linkedList0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.pache.commons.cli2.option.GroupImpl", "org.pache.commons.cli2.option.GroupImpl", Integer.MAX_VALUE, Integer.MAX_VALUE);
      groupImpl0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "$!\u0005?Kb=,?ll\"Au5>w", "$!\u0005?Kb=,?ll\"Au5>w", 0, 0);
      LinkedHashSet<SourceDestArgument> linkedHashSet0 = new LinkedHashSet<SourceDestArgument>();
      List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 10, 10);
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      groupImpl0.findOption("Passes properties and values to the application");
      assertEquals(10, groupImpl0.getMaximum());
      assertEquals(10, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 10, 10);
      PropertyOption propertyOption0 = new PropertyOption("Passes properties and values to the application", "-D", (-1538));
      linkedList0.add((Object) propertyOption0);
      Option option0 = groupImpl0.findOption("Passes properties and values to the application");
      assertEquals(10, groupImpl0.getMinimum());
      assertNotNull(option0);
      assertEquals(10, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateValidator dateValidator0 = new DateValidator(dateFormat0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("!3a-", (String) null, (-430), (-430), 'd', 'd', dateValidator0, "!3a-", linkedList0, 93);
      linkedList0.add((Object) argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, '\u0000', '\u0000');
      // Undeclared exception!
      try { 
        groupImpl0.defaults((WriteableCommandLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }
}
