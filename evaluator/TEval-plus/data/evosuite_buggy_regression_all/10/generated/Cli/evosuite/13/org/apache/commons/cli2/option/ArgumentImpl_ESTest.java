/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:24:27 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.ClassValidator;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.EnumValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("7wg\"", "", (-1844), Integer.MAX_VALUE, '<', '<', dateValidator0, "", linkedList0, (-1844));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals('<', argumentImpl0.getInitialSeparator());
      assertEquals('<', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals(Integer.MAX_VALUE, argumentImpl0.getMaximum());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("7wg\"", argumentImpl0.getPreferredName());
      assertEquals((-1844), argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "}*M", 3100, 3100, 'v', 'v', numberValidator0, "", (List) null, 2915);
      assertEquals(3100, argumentImpl0.getMaximum());
      assertEquals(3100, argumentImpl0.getMinimum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '=', 'x', "}*M", (List) null);
      char char0 = sourceDestArgument0.getInitialSeparator();
      assertEquals("}*M", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('=', char0);
      assertEquals('x', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("}*M", sourceDestArgument0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("yPZqQdHg", "yPZqQdHg", 0, 0, 'm', 'm', urlValidator0, "yPZqQdHg", linkedList0, (-1));
      argumentImpl0.getDefaultValues();
      assertEquals('m', argumentImpl0.getInitialSeparator());
      assertEquals("yPZqQdHg", argumentImpl0.getDescription());
      assertEquals("yPZqQdHg", argumentImpl0.getConsumeRemaining());
      assertEquals('m', argumentImpl0.getSubsequentSeparator());
      assertEquals("yPZqQdHg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("7wg\"", "", (-1844), Integer.MAX_VALUE, '<', '<', dateValidator0, "", linkedList0, (-1844));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      boolean boolean0 = argumentImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "");
      assertFalse(argumentImpl0.isRequired());
      assertEquals(Integer.MAX_VALUE, argumentImpl0.getMaximum());
      assertTrue(boolean0);
      assertEquals('<', argumentImpl0.getInitialSeparator());
      assertEquals("7wg\"", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals('<', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("^e<}X&\"PZ\"z=", "tsjm=rQn;ALV09%F!a", 0, 0, '$', '$', fileValidator0, "+8j)N0V#", linkedList0, 0);
      char char0 = argumentImpl0.getSubsequentSeparator();
      assertEquals('$', argumentImpl0.getInitialSeparator());
      assertEquals("+8j)N0V#", argumentImpl0.getConsumeRemaining());
      assertEquals('$', char0);
      assertEquals("^e<}X&\"PZ\"z=", argumentImpl0.getPreferredName());
      assertEquals("tsjm=rQn;ALV09%F!a", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("7wg\"", "", (-1844), (-1844), '<', '<', dateValidator0, "", linkedList0, 0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      argumentImpl0.helpLines(1543, linkedHashSet0, (Comparator) null);
      assertEquals('<', argumentImpl0.getSubsequentSeparator());
      assertEquals('<', argumentImpl0.getInitialSeparator());
      assertEquals("7wg\"", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "ZBTF]/gOmQ<I}>R", (-1280), (-1280), '8', 'k', enumValidator0, (String) null, linkedList0, 2675);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1280
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.minimum.exceeds.maximum", "Argument.minimum.exceeds.maximum", 3, 1102, 'S', '~', classValidator0, "Argument.minimum.exceeds.maximum", linkedList0, (-234));
      String string0 = argumentImpl0.getConsumeRemaining();
      assertEquals("Argument.minimum.exceeds.maximum", argumentImpl0.getDescription());
      assertEquals(3, argumentImpl0.getMinimum());
      assertEquals('~', argumentImpl0.getSubsequentSeparator());
      assertEquals("Argument.minimum.exceeds.maximum", string0);
      assertEquals("Argument.minimum.exceeds.maximum", argumentImpl0.getPreferredName());
      assertEquals('S', argumentImpl0.getInitialSeparator());
      assertEquals(1102, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "}*M", 3100, 3100, 'v', 'v', numberValidator0, "", (List) null, 2915);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '=', 'x', "}*M", (List) null);
      sourceDestArgument0.getValidator();
      assertEquals("}*M", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('=', sourceDestArgument0.getInitialSeparator());
      assertEquals("}*M", sourceDestArgument0.getConsumeRemaining());
      assertEquals('x', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("", "J;k9BzE", 32, (-1), ' ', ' ', fileValidator0, "", linkedList0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.offerLast((Integer) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&xQ<oI*2CP4", "&xQ<oI*2CP4", (-1834), 4513, 'k', 'k', enumValidator0, "&xQ<oI*2CP4", linkedList0, (-1834));
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getDescription());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getConsumeRemaining());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getPreferredName());
      assertEquals('k', argumentImpl0.getInitialSeparator());
      assertEquals((-1834), argumentImpl0.getMinimum());
      assertEquals('k', argumentImpl0.getSubsequentSeparator());
      assertEquals(4513, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(60);
      linkedList0.add((Object) integer0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("Kt^Uf}{[x*/P", "DateValidator.date.OutOfRange", 60, 60, '', '', numberValidator0, "Kt^Uf}{[x*/P", linkedList0, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1830);
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("UX@8:`R7?kG<UCT0o", "UX@8:`R7?kG<UCT0o", (-1835), (-1835), 'k', 'k', enumValidator0, "\"", linkedList0, (-1835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("S2pJWfUbQ+O?Qv.", "S2pJWfUbQ+O?Qv.", 0, 4, 'O', 'O', urlValidator0, "org.apache.commons.cli2.option.ArgumentImpl", linkedList0, (-1848));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("Argument.unexpected.value");
      linkedList1.addLast("org.apache.commons.cli2.option.ArgumentImpl");
      linkedList1.add("Zp#KK3~<");
      linkedList1.addLast("org.apache.commons.cli2.option.ArgumentImpl");
      linkedList1.add("A");
      linkedList1.addLast("!TClwMY'{ta\">RTQe=");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("S2pJWfUbQ+O?Qv.", "S2pJWfUbQ+O?Qv.", 0, 4, 'O', 'O', urlValidator0, "org.apache.commons.cli2.option.ArgumentImpl", linkedList0, (-1848));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("org.apache.commons.cli2.option.ArgumentImpl");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals('O', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.defaults", "\"org.apache.commons.cli2.option.ArgumentImpl", (-1183), 62, 'o', 'Y', urlValidator0, "Argument.too.many.defaults", linkedList0, (-1913));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("MT<}MM");
      Switch switch0 = new Switch("SourceDestArgument", "\"org.apache.commons.cli2.option.ArgumentImpl", "Argument.too.many.defaults", linkedHashSet0, ";9_b", true, argumentImpl0, (Group) null, (-1913), boolean0);
      linkedList1.addLast("SourceDestArgument");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("Argument.too.many.defaults", argumentImpl0.getConsumeRemaining());
      assertEquals('o', argumentImpl0.getInitialSeparator());
      assertEquals('Y', argumentImpl0.getSubsequentSeparator());
      assertEquals("\"org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getDescription());
      assertFalse(argumentImpl0.isRequired());
      assertEquals(62, argumentImpl0.getMaximum());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("Argument.too.many.defaults", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("B<7X", "S=BlH", 1197, 1197, 'E', 'G', fileValidator0, "S=BlH", linkedList0, 1197);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      SourceDestArgument sourceDestArgument1 = new SourceDestArgument(sourceDestArgument0, sourceDestArgument0, '\u0000', '\u0000', "-", linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.addLast("--");
      ListIterator<String> listIterator0 = linkedList2.listIterator();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument1, linkedList1);
      sourceDestArgument1.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, 0, 4, 'a', 'a', urlValidator0, (String) null, list0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("--");
      linkedList1.addLast("org.apache.commons.cli.rsource.CLIMessageBundle_en_US");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      try { 
        argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected value \"geBundle_en_US\" found while processing  arg [arg [arg [arg]]]
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.minimum.exceeds.maximum", "Argument.minimum.exceeds.maximum", 3, 1102, 'S', '~', classValidator0, "Argument.minimum.exceeds.maximum", linkedList0, (-234));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) Argument.minimum.exceeds.maximum Argument.minimum.exceeds.maximum Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum [Argument.minimum.exceeds.maximum
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&xQ<oI*2CP4", "&xQ<oI*2CP4", (-1834), 4513, 'k', 'k', enumValidator0, "&xQ<oI*2CP4", linkedList0, (-1834));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals((-1834), argumentImpl0.getMinimum());
      assertEquals(4513, argumentImpl0.getMaximum());
      
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getDescription());
      assertEquals('k', argumentImpl0.getInitialSeparator());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getPreferredName());
      assertEquals('k', argumentImpl0.getSubsequentSeparator());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, 0, 0, 'O', 'O', urlValidator0, (String) null, list0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
      ArgumentImpl argumentImpl1 = new ArgumentImpl("--", "+", 0, 0, ';', 'O', (Validator) null, "org.apache.commons.cli2.option.ArgumentImpl", linkedList0, 2965);
      argumentImpl1.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals(';', argumentImpl1.getInitialSeparator());
      assertEquals('O', argumentImpl1.getSubsequentSeparator());
      assertEquals("org.apache.commons.cli2.option.ArgumentImpl", argumentImpl1.getConsumeRemaining());
      assertEquals("--", argumentImpl1.getPreferredName());
      assertEquals("+", argumentImpl1.getDescription());
      assertEquals("arg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&xQ<oI*2CP4", "&xQ<oI*2CP4", (-1834), 4513, 'k', 'k', enumValidator0, "&xQ<oI*2CP4", linkedList0, (-1834));
      argumentImpl0.toString();
      assertEquals('k', argumentImpl0.getSubsequentSeparator());
      assertEquals('k', argumentImpl0.getInitialSeparator());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getPreferredName());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("UX@8:`R7?kG<UCT0o", "UX@8:`R7?kG<UCT0o", (-1835), (-1835), 'k', 'k', enumValidator0, "\"", linkedList0, (-1835));
      argumentImpl0.appendUsage((StringBuffer) null, linkedHashSet0, (Comparator) null);
      assertEquals('k', argumentImpl0.getSubsequentSeparator());
      assertEquals('k', argumentImpl0.getInitialSeparator());
      assertEquals("\"", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("E", "E", Integer.MAX_VALUE, Integer.MAX_VALUE, 'c', '}', dateValidator0, "E", linkedList0, Integer.MAX_VALUE);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, ')', 'Y', "yG59IUA!|5ojNs;yv^", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) sourceDestArgument0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) E E ...
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, 1, 'O', 'O', 'O', urlValidator0, (String) null, linkedList0, 1);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      linkedList0.add("\"Argument.too.many.defaults");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("UX@8:`R7?kG<UCT0o", "UX@8:`R7?kG<UCT0o", (-1835), (-1835), 'k', 'k', enumValidator0, "\"", linkedList0, (-1835));
      // Undeclared exception!
      try { 
        argumentImpl0.stripBoundaryQuotes("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("S-itch.no.disabledPrefix", "S-itch.no.disabledPrefix", (-277), 815, 'C', 'C', classValidator0, "S-itch.no.disabledPrefix", linkedList0, 3);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals('C', argumentImpl0.getInitialSeparator());
      assertEquals("S-itch.no.disabledPrefix", argumentImpl0.getConsumeRemaining());
      assertFalse(boolean0);
      assertEquals("S-itch.no.disabledPrefix", argumentImpl0.getPreferredName());
      assertEquals("S-itch.no.disabledPrefix", argumentImpl0.getDescription());
      assertEquals('C', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-", " T", 791, 791, 'Q', 'Q', fileValidator0, "-", linkedList0, 791);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Q', 'Q', "--", linkedList0);
      boolean boolean0 = sourceDestArgument0.isRequired();
      assertTrue(boolean0);
      assertEquals(" T", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('Q', sourceDestArgument0.getInitialSeparator());
      assertEquals("-", argumentImpl0.getConsumeRemaining());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('Q', sourceDestArgument0.getSubsequentSeparator());
  }
}
