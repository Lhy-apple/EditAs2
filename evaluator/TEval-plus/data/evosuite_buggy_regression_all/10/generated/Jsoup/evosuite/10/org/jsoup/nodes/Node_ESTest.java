/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:48:52 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("abs:id");
      Elements elements0 = document0.getElementsByAttributeValueNot("abs:id", "abs:id");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("sdote");
      document0.setBaseUri("sdote");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("wof");
      Element element0 = document0.attr("wof", "wof");
      Elements elements0 = element0.getElementsByAttributeValueNot("wof", "wof");
      assertEquals(3, elements0.size());
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("g:,8", "g:,8");
      assertEquals("g:,8", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("g:,8", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("g:,8", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("k#:\"c%^\"u?A");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("k#:\"c%^\"u?A", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.prepend("k#:\"c%^\"u?A");
      assertSame(document0, element0);
      assertSame(element0, document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("k#:\"c%^\"u?A", document0.baseUri());
      assertEquals("#document", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("k#:\"c%^\"u?A", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("wof");
      assertFalse(document0.isBlock());
      assertEquals("wof", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      assertEquals("org.jsoup.nodes.Node", comment0.baseUri());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      boolean boolean0 = comment0.equals(comment0);
      assertEquals("org.jsoup.nodes.Node", comment0.baseUri());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("k#:\"c%[\"3A");
      assertFalse(document0.isBlock());
      assertEquals("k#:\"c%[\"3A", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.clone();
      assertNotSame(document0, element0);
      assertNotSame(element0, document0);
      assertFalse(element0.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("k#:\"c%[\"3A", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("k#:\"c%[\"3A", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertNotNull(comment0);
      
      String string0 = comment0.toString();
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertNotNull(string0);
      assertEquals("\n<!--org.jsoup.nodes.Node$OuterHtmlVisitor-->", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataNode dataNode0 = new DataNode("1DW$", "1DW$");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("1DW$", dataNode0.baseUri());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      // Undeclared exception!
      try { 
        dataNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:", "abs:");
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("abs:", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.attr("abs:", "abs:");
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("abs:", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("abs:", node0.baseUri());
      assertNotNull(node0);
      
      String string0 = textNode0.absUrl("abs:");
      assertSame(textNode0, node0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("abs:", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("lg9I)O\"wfpGc");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lg9I)O\"wfpGc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = document0.toString();
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lg9I)O\"wfpGc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("Bo3#c&k");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo3#c&k", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo3#c&k", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals(0, (int)document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Bo3#c&k", document1.baseUri());
      assertNotNull(document1);
      
      document1.setParentNode(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo3#c&k", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals(0, (int)document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Bo3#c&k", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("lg9I)O\"wfpGc");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lg9I)O\"wfpGc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("lg9s)O\"wfpG");
      assertEquals("#document", document0.nodeName());
      assertEquals("lg9s)O\"wfpG", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertEquals("lg9s)O\"wfpG", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lg9s)O\"wfpG", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, (int)document1.siblingIndex());
      assertNotNull(document1);
      
      document1.replaceWith(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertEquals("lg9s)O\"wfpG", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lg9s)O\"wfpG", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, (int)document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("3#/c&k");
      assertEquals("3#/c&k", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("3#/c&k", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("3#/c&k", document1.baseUri());
      assertEquals(0, (int)document1.siblingIndex());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.replaceWith(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("g9I)O\"wfpGc");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("g9I)O\"wfpGc", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("3#/c&k");
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("3#/c&k", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("3#/c&k", document0.baseUri());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("3#/c&k", document1.baseUri());
      assertNotNull(document1);
      
      Node node0 = document1.previousSibling();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("3#/c&k", document0.baseUri());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("3#/c&k", document1.baseUri());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendChild(document0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(1, (int)element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Node", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = (Element)document0.previousSibling();
      assertSame(document0, element0);
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(0, (int)element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("# mu", "# mu");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("# mu", comment0.baseUri());
      assertNotNull(comment0);
      
      boolean boolean0 = comment0.equals("# mu");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("# mu", comment0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("lg9I)O\"wfpGc");
      assertEquals("#document", document0.nodeName());
      assertEquals("lg9I)O\"wfpGc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertEquals("lg9I)O\"wfpGc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("lg9I)O\"wfpGc", document1.baseUri());
      assertNotNull(document1);
      
      document1.hashCode();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertEquals("lg9I)O\"wfpGc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("lg9I)O\"wfpGc", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("g:,8", "g:,8");
      assertEquals("g:,8", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      textNode0.hashCode();
      assertEquals("g:,8", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("Bo3#c&k");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo3#c&k", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.prependText("Bo3#c&k");
      assertSame(document0, element0);
      assertSame(element0, document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo3#c&k", document0.baseUri());
      assertEquals("Bo3#c&k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, (int)element0.siblingIndex());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.doClone(element0);
      assertNotSame(document0, document1);
      assertSame(document0, element0);
      assertSame(element0, document0);
      assertNotSame(element0, document1);
      assertNotSame(document1, element0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)element0));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo3#c&k", document0.baseUri());
      assertEquals("Bo3#c&k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Bo3#c&k", document1.baseUri());
      assertEquals(0, (int)document1.siblingIndex());
      assertNotNull(document1);
  }
}
