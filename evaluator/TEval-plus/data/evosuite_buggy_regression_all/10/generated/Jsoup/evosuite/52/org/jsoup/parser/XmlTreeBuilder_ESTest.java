/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:54:57 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Token;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTreeBuilder_ESTest extends XmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_Doctype0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      List<Node> list0 = xmlTreeBuilder0.parseFragment(":n%_DDQ#G#", ":n%_DDQ#G#", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("sup", "sup", (ParseErrorList) null);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.appendTagName("sup");
      boolean boolean0 = xmlTreeBuilder0.process(token_StartTag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("5*`,9_3#>", "5*`,9_3#>", (ParseErrorList) null);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.appendTagName("5*`,9_3#>");
      Element element0 = xmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("5_`,,9_3#>}", "5_`,,9_3#>}", (ParseErrorList) null);
      Token.Comment token_Comment0 = new Token.Comment();
      xmlTreeBuilder0.insert(token_Comment0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("5*`,9_3#>", "5*`,9_3#>", (ParseErrorList) null);
      Token.Comment token_Comment0 = new Token.Comment();
      token_Comment0.bogus = true;
      xmlTreeBuilder0.insert(token_Comment0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("5*`,9_3#>", "5*`,9_3#>", (ParseErrorList) null);
      Token.Comment token_Comment0 = new Token.Comment();
      token_Comment0.bogus = true;
      StringBuilder stringBuilder0 = token_Comment0.data;
      stringBuilder0.append((-2367.8F));
      xmlTreeBuilder0.insert(token_Comment0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("5*`,9_3#>", "5*`,9_3#>", (ParseErrorList) null);
      Token.Comment token_Comment0 = new Token.Comment();
      token_Comment0.bogus = true;
      StringBuilder stringBuilder0 = token_Comment0.data;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      stringBuilder0.append(charArray0);
      boolean boolean0 = xmlTreeBuilder0.process(token_Comment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("5*`,9_3#>", "5*`,9_3#>", (ParseErrorList) null);
      Token.Comment token_Comment0 = new Token.Comment();
      token_Comment0.bogus = true;
      StringBuilder stringBuilder0 = token_Comment0.data;
      stringBuilder0.append((Object) "?");
      stringBuilder0.append((-2367.8F));
      xmlTreeBuilder0.insert(token_Comment0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("5*`,9_3#>", "5*`,9_3#>", (ParseErrorList) null);
      boolean boolean0 = xmlTreeBuilder0.processEndTag("5*`,9_3#>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse("pcX,@+|m^dR=;)", "pcX,@+|m^dR=;)", (ParseErrorList) null);
      xmlTreeBuilder0.processStartTag("pcX,@+|m^dR=;)");
      boolean boolean0 = xmlTreeBuilder0.processEndTag("#document");
      assertTrue(boolean0);
  }
}
