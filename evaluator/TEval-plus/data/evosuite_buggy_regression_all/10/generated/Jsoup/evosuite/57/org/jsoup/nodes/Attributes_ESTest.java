/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:55:46 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      String string0 = attributes0.get("data-");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("insert position out of bounds.", "insert position out of bounds.");
      attributes0.addAll(attributes0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("(_Y@:#[Kz7[0NElG+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("data-", "data-");
      String string0 = attributes0.get("data-");
      assertEquals("data-", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("_ 4;w*Fn8n`n8", "");
      String string0 = attributes0.getIgnoreCase("_ 4;w*Fn8n`n8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase("_ 4;w*Fn8n`n8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("j8u dSDyQ(j", "j8u dSDyQ(j");
      String string0 = attributes0.getIgnoreCase("3`IK\"U_KO{");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("A-4ri6rx2kiI),!", false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("_ 4;w*Fn8n`n8", true);
      Attributes attributes1 = new Attributes();
      boolean boolean0 = attributes1.equals(attributes0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      attributes0.put("dymPXm7VuaJ2[Ik", "dymPXm7VuaJ2[Ik");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      attributes0.remove("decfr}");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("insert position out of bounds.", "insert position out of bounds.");
      attributes0.put(attribute0);
      attributes0.removeIgnoreCase("insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("_ 4;w*Fn8n`n8");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("org.jsoup.nodes.Attributes$1", "org.jsoup.nodes.Attributes$1");
      attributes0.removeIgnoreCase("t9vw$m]`7 -");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("*jU.L;%HD\"674");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("a\"-4ri6rx2kii),!", "a\"-4ri6rx2kii),!");
      boolean boolean0 = attributes0.hasKey("a\"-4ri6rx2kii),!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      boolean boolean0 = attributes0.hasKey("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("a\"-4ri6rkii),!", "a\"-4ri6rkii),!");
      boolean boolean0 = attributes0.hasKeyIgnoreCase("a\"-4ri6rkii),!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("6w|]Nx,m`dM}yFO1rM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("lpvyds^?", "lpvyds^?");
      boolean boolean0 = attributes0.hasKeyIgnoreCase("6w|]Nx,m`dM}yFO1rM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put(":o", ":o");
      Attributes attributes1 = new Attributes();
      attributes1.addAll(attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("%<<:JOh]r:lM6b$", "%<<:JOh]r:lM6b$");
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("j8u dSDyQ(j", "j8u dSDyQ(j");
      List<Attribute> list0 = attributes0.asList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      List<Attribute> list0 = attributes0.asList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put(">BeB33A.r-H7$`", ">BeB33A.r-H7$`");
      String string0 = attributes0.toString();
      assertEquals(" >BeB33A.r-H7$`=\">BeB33A.r-H7$`\"", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      boolean boolean0 = attributes1.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Object object0 = new Object();
      boolean boolean0 = attributes0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      attributes0.dataset();
      boolean boolean0 = attributes0.equals(attributes1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      attributes1.dataset();
      assertFalse(attributes1.equals((Object)attributes0));
      
      attributes0.dataset();
      boolean boolean0 = attributes0.equals(attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      attributes0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      Map<String, String> map1 = attributes0.dataset();
      assertTrue(map1.equals((Object)map0));
  }
}
