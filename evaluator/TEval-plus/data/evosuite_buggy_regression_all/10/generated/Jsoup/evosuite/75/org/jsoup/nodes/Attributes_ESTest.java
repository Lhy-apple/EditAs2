/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:59:23 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      boolean boolean0 = attributes0.equals(attributes1);
      assertTrue(boolean0);
      assertNotSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("=\"", "nowrap");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes0.putIgnoreCase("1", "RawtextLssOthnSigkn");
      Attributes attributes2 = attributes0.put("RawtextLssOthnSigkn", "RawtextLssOthnSigkn");
      attributes2.addAll(attributes1);
      assertEquals(3, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.parser.Token$EOF", ")Ch{*TF62/");
      Attributes attributes2 = attributes1.put(")Ch{*TF62/", true);
      Attributes attributes3 = attributes2.clone();
      attributes3.putIgnoreCase(" |Qqi}n9hr", "hay/4xe4)~#nf");
      attributes2.addAll(attributes3);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes3.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("RawtextLssOthnSigkn", "RawtextLssOthnSigkn");
      assertEquals(1, attributes0.size());
      
      attributes1.removeIgnoreCase("RawtextLssOthnSigkn");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("R/ZQ'O+$gD<G(", "R/ZQ'O+$gD<G(");
      String string0 = attributes1.get("R/ZQ'O+$gD<G(");
      assertEquals(1, attributes0.size());
      assertEquals("R/ZQ'O+$gD<G(", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = Attributes.checkNotNull((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("T5H'Wy>RAO");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("vw)a;FHqT", "vw)a;FHqT");
      String string0 = attributes1.getIgnoreCase("vw)a;FHqT");
      assertEquals(1, attributes0.size());
      assertEquals("vw)a;FHqT", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase("Childrncollection to Ye inserted must not be null.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put(".VE z[]\"==_c", ".VE z[]\"==_c");
      attributes0.putIgnoreCase(".VE z[]\"==_c", ".VE z[]\"==_c");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      attributes1.normalize();
      attributes1.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", true);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(" #CNFgd@>Bf3?s*oz", false);
      assertEquals(0, attributes1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(" #CNFgd@>Bf3?s*oz", " #CNFgd@>Bf3?s*oz");
      attributes1.addAll(attributes0);
      attributes0.put(" #CNFgd@>Bf3?s*oz", false);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase(">4mI`b;N}b");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("R/ZQ'O+$gD<G(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("R/ZQ'O+$gD<G(", "R/ZQ'O+$gD<G(");
      boolean boolean0 = attributes1.hasKey("R/ZQ'O+$gD<G(");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("#%L-E#4\tG8jqT\"u-o.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(">4mI`b;N}b", ">4mI`b;N}b");
      boolean boolean0 = attributes1.hasKeyIgnoreCase(">4mI`b;N}b");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("ScriptDataEndTagOpen", true);
      attributes0.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("em", "em");
      List<Attribute> list0 = attributes1.asList();
      assertEquals(1, attributes0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("(xQO*MxM", true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attributes1.html((Appendable) charArrayWriter0, document_OutputSettings0);
      assertEquals(" (xQO*MxM", charArrayWriter0.toString());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("(xQO*MxM", true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes1.html((Appendable) charArrayWriter0, document_OutputSettings1);
      assertEquals(1, attributes0.size());
      assertEquals(13, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put(">4mI`b;N}b", ">4mI`b;N}b");
      attributes0.html();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("data-", "Children collection to be inserted must not be null.");
      String string0 = attributes1.html();
      assertEquals(1, attributes0.size());
      assertEquals(" data-=\"Children collection to be inserted must not be null.\"", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("sortable", "sortable");
      String string0 = attributes1.html();
      assertEquals(1, attributes0.size());
      assertEquals(" sortable", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Object object0 = new Object();
      boolean boolean0 = attributes0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes0.put("width must be > 0", "width must be > 0");
      boolean boolean0 = attributes0.equals(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("N!afjav", "N!afjav", attributes1);
      attributes1.put(attribute0);
      attributes0.put("width must be > 0", "width must be > 0");
      boolean boolean0 = attributes0.equals(attributes1);
      assertEquals(1, attributes1.size());
      assertFalse(boolean0);
  }
}
