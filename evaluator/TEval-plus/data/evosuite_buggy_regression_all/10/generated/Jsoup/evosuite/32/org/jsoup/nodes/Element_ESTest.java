/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:51:52 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      document0.appendText(" ");
      Elements elements0 = document0.getElementsContainingText("g\"v&djfxdo");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Elements elements0 = document0.getElementsMatchingText("Insert position out of bounds.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("form");
      Comment comment0 = new Comment("InRow", "InRow");
      Element element0 = document0.prependChild(comment0);
      String string0 = element0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      Element element0 = document0.appendText(" ");
      Element element1 = document0.appendElement("ol");
      assertEquals("ol", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      
      String string0 = element0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Rtextarea");
      // Undeclared exception!
      try { 
        document0.child(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("^ mBWWR%'4@f|");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("[P!CA");
      Elements elements0 = document0.getElementsContainingOwnText("[P!CA");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("[9iw+k4v");
      Element element0 = document0.addClass("[9iw+k4v");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("[9iWkV");
      // Undeclared exception!
      try { 
        document0.html("[9iWkV");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("N!KY4;4kldX\"x#W])");
      Elements elements0 = document0.getElementsByAttributeValueStarting("N!KY4;4kldX\"x#W])", "N!KY4;4kldX\"x#W])");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.select("s+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("M-GB,o}a&p");
      Element element0 = document0.prepend("M-GB,o}a&p");
      assertEquals("M-GB,o}a&p", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("^ mBWWR%'4@f|");
      Elements elements0 = document0.getElementsMatchingOwnText("^ mBWWR%'4@f|");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("[9iw+k4v");
      // Undeclared exception!
      try { 
        document0.after("[9iw+k4v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document(";>");
      Elements elements0 = document0.getElementsByIndexLessThan(2);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("texOar~a");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("d");
      Element element0 = document0.prependElement("d");
      element0.prependText("d");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      Elements elements0 = document0.getElementsByAttributeStarting("i>~'Oq<Kldm^q]P");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("r{3ER?]{ZVLsT21j_%");
      Elements elements0 = document0.getElementsByIndexEquals(59);
      Element element0 = document0.insertChildren((-1), elements0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("j");
      // Undeclared exception!
      try { 
        document0.wrap("j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.val("id");
      assertEquals("id", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", "");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("M-GB.o}a&p");
      Elements elements0 = document0.getElementsByAttributeValueEnding("M-GB.o}a&p", "M-GB.o}a&p");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("\n\n");
      Elements elements0 = document0.getElementsByClass("\n\n");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(" ");
      Elements elements0 = document0.getElementsByAttributeValueContaining(" ", " ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("MV/b>iN<TY^");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("M-GB,o}a&p");
      Elements elements0 = document0.getElementsByAttributeValueNot("M-GB,o}a&p", "M-GB,o}a&p");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("^ mBWWR%'4@f|");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("[9iw+k4v");
      Elements elements0 = document0.getElementsByAttribute("[9iw+k4v");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("^ mBWWR%'4@fO|");
      // Undeclared exception!
      try { 
        document0.before("^ mBWWR%'4@fO|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("cq3n:m'siksvpb+yduj");
      Element element0 = document0.removeClass("cq3n:m'siksvpb+yduj");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("tex`Farea");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      Elements elements0 = document0.getElementsByTag("Children collection to be inserted must not be null.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("d");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1804);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      Element element0 = document0.getElementById("ruby");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("^ mBWWR%'4@f|");
      Element element0 = document0.appendChild(document0);
      Elements elements0 = element0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("sup");
      Element element0 = document0.appendChild(document0);
      document0.tagName("meta");
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("r{3ER?]{ZVLsT21j_%");
      Element element0 = document0.appendText("r{3ER?]{ZVLsT21j_%");
      Element element1 = element0.appendElement("r{3ER?]{ZVLsT21j_%");
      element1.getElementsByIndexEquals(59);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("form");
      Element element0 = document0.appendText("form");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("-d)`92h");
      Element element0 = document0.appendElement("id");
      assertEquals("id", element0.tagName());
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("form");
      Element element0 = document0.appendText("form");
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("#b]MA_wstA\"5hg");
      DataNode dataNode0 = new DataNode("", "");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("\n\n");
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2890, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("[9iW+k4V");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-276), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("x;3-X)>,tvom");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendElement("ol");
      document0.appendChild(document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("M-GB,o}a&p");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependChild(document0);
      document0.appendElement("ZKowo&]NeHX");
      element0.nextElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("form");
      Element element0 = document0.appendElement("ol");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("zN8");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("S47{%n\"34`");
      Element element0 = document0.prependElement("`xy_g{d\"i");
      Element element1 = element0.before((Node) document0);
      Element element2 = element1.previousElementSibling();
      assertNotNull(element2);
      assertEquals("`xy_g{d\"i", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("</");
      Element element0 = document0.prependElement("</");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("Y=.ruX1?|g8\r-");
      document0.appendElement("Y=.ruX1?|g8\r-");
      document0.appendChild(document0);
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("3");
      Element element0 = document0.prependElement("3");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendElement("ol");
      document0.appendChild(document0);
      document0.lastElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("form");
      Element element0 = document0.appendElement("ol");
      document0.empty();
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendText("textarea");
      String string0 = element0.ownText();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("#b]MA_wstA\"5hg");
      document0.prependElement("org.jsoup.safety.Cleaner$CleaningVisitor");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("#b]MA_wstA\"5hg");
      DataNode dataNode0 = new DataNode("", "");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.appendText("WT4,H!!BqN/Ax");
      String string0 = element1.text();
      assertEquals("WT4,H!!BqN/Ax", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("form");
      document0.appendText("form");
      Element element0 = document0.appendElement("form");
      Element element1 = element0.text("form");
      assertEquals(1, element1.siblingIndex());
      
      String string0 = document0.text();
      assertEquals("form form", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.prependChild(document0);
      // Undeclared exception!
      try { 
        element1.text();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      element0.appendChild(document0);
      boolean boolean0 = document0.preserveWhitespace();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      document0.appendText(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      document0.appendElement("ol");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("#b]MA_wstA\"5hg");
      DataNode dataNode0 = new DataNode("", "");
      Element element0 = document0.appendChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("#b]MA_wstA\"5hg");
      Element element0 = document0.prependElement("org.jsoup.safety.Cleaner$CleaningVisitor");
      assertEquals("org.jsoup.safety.cleaner$cleaningvisitor", element0.nodeName());
      
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("#b]MA_wstA\"5hg");
      DataNode dataNode0 = new DataNode("", "");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("d");
      document0.prependText("d");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("^ mBWWR%'4@fO|");
      Element element0 = document0.toggleClass("^ mBWWR%'4@fO|");
      Document document1 = document0.clone();
      assertNotSame(document1, element0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("1-m;2cR;2");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("S47{%n\"34`");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      Element element0 = document0.appendText(" ");
      document0.appendElement("ol");
      String string0 = element0.outerHtml();
      assertEquals("<ol></ol>", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("D[Z9iKW+r4V");
      StringBuilder stringBuilder0 = new StringBuilder("O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-2269), document_OutputSettings1);
      assertEquals("O<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.prependElement("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      document0.outerHtml(stringBuilder0);
      assertEquals("textarea\n<#root>\n <textarea></textarea>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      document0.prependElement("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      document0.outerHtml(stringBuilder0);
      assertEquals("textarea<textarea><textarea></textarea></textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      String string0 = document0.html();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("/vZ:r[*+U*cx-Jn");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 97, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("i>~'Oq<Kldm^q]P");
      document0.hashCode();
  }
}
