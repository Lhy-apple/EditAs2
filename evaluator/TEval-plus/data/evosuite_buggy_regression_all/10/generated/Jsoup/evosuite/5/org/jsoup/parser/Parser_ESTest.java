/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:47:11 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M9`<MX pQ</RaZ", "M9`<MX pQ</RaZ");
      assertEquals("M9`<MX pQ</RaZ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!@--", "<!@--");
      assertEquals("<!@--", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<![CDATA[", "<![CDATA[");
      assertEquals("<![CDATA[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("9`<MX pQ</RaZ", "9`<MX pQ</RaZ");
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<!--h-", "a");
      assertEquals("a", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<?", "<?");
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "<!--");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("E|M<a_Og<pt.N7i", "E|M<a_Og<pt.N7i");
      assertEquals("E|M<a_Og<pt.N7i", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("U<I}Ch/>w\"`~?", "U<I}Ch/>w\"`~?");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parse("U<d}Ch/>?", "U<d}Ch/>?");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("e)VS>$<BASd\u0004i=\"", "e)VS>$<BASd\u0004i=\"");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse(")]C<a_s0= a>7", ")]C<a_s0= a>7");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parse("E|M<a_O=\t.7", "E|M<a_O=\t.7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<<J`wi&", "<<J`wi&");
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("D<CoL!", "D<CoL!");
      assertEquals("#document", document0.nodeName());
  }
}
