/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:45:56 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("+kd{e'");
      Element element0 = document0.appendElement("+kd{e'");
      boolean boolean0 = element0.preserveWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      Element element0 = document0.appendText("oWasz2rN");
      Element element1 = element0.getElementById("i-");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Element element0 = document0.val("C!E;]]`:o{ 6to`oXqL");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated string is empty
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("O,$");
      Elements elements0 = document0.getElementsByClass("8216");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("+kd{ev");
      // Undeclared exception!
      try { 
        document0.child(121);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("210");
      Elements elements0 = document0.getElementsByAttributeValueContaining("Mg/Jo.>X@m", "210");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.val("textarea");
      String string0 = element0.val();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Elements elements0 = document0.getElementsByAttributeValueNot("C!E;]]`:o{ 6to`oXqL", "C!E;]]`:o{ 6to`oXqL");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("~)");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("210");
      Elements elements0 = document0.getElementsByAttribute("CZk l[");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("210");
      // Undeclared exception!
      try { 
        document0.html("210");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Elements elements0 = document0.getElementsByAttributeValue("C!E;]]`:o{ 6to`oXqL", "C!E;]]`:o{ 6to`oXqL");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("210");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("210");
      Elements elements0 = document0.getElementsByAttributeValueStarting("210", "e>%vK7MX=gHE");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">E o*w114WH");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ">E o*w114WH", attributes0);
      String string0 = element0.nodeName();
      assertEquals(">e o*w114wh", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("C!E;]`:o{ 6to`oXqL");
      Element element0 = document0.removeClass("C!E;]`:o{ 6to`oXqL");
      assertEquals("C!E;]`:o{ 6to`oXqL", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("oWaszSrN");
      Elements elements0 = document0.getElementsByIndexLessThan((-1799093619));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("210");
      Elements elements0 = document0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("!");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2795);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      Elements elements0 = document0.getElementsByIndexEquals((-333));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("oWaszSrN");
      Element element0 = document0.getElementById("oWaszSrN");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("210");
      Element element0 = document0.appendElement("210");
      element0.addChild(document0);
      Elements elements0 = document0.parents();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.appendChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("C!E;]]g:o: 6to`oXqL");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.prependElement(">");
      Element element2 = element1.nextElementSibling();
      assertNotNull(element2);
      assertEquals(">", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Element element0 = document0.prependElement("C!E;]]`:o{ 6to`oXqL");
      document0.appendChild(document0);
      Element element1 = document0.previousElementSibling();
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Element element0 = document0.appendChild(document0);
      document0.appendElement("C!E;]]`:o{ 6to`oXqL");
      Element element1 = element0.firstElementSibling();
      assertEquals("#root", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("210");
      Element element0 = document0.appendElement("210");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("210");
      Element element0 = document0.appendElement("210");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.appendElement("8659");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      assertEquals("8659", element0.nodeName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      document0.appendElement("oWasz2rN");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      document0.prependText("oWasz2rN");
      document0.appendElement("oWasz2rN");
      String string0 = document0.text();
      assertEquals("oWasz2rN", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      Element element0 = document0.appendElement("}b[_");
      assertEquals("}b[_", element0.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("oWaszSrN");
      Comment comment0 = new Comment("oWaszSrN", "oWaszSrN");
      document0.appendChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      Element element0 = document0.appendElement("}b[_");
      Element element1 = element0.appendText("oWasz2rN");
      assertEquals("}b[_", element1.nodeName());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("epbhm9->v_,z");
      DataNode dataNode0 = new DataNode(".%a}R7K`=0]O>`%M%R", "epbhm9->v_,z");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals(".%a}R7K`=0]O>`%M%R", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Element element0 = document0.prependText("C!E;]]`:o{ 6to`oXqL");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oWasz2rN");
      Element element0 = new Element(tag0, "oWasz2rN");
      Element element1 = element0.toggleClass("oWasz2rN");
      String string0 = element1.className();
      assertEquals(" oWasz2rN", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.toggleClass("&|KF=y");
      Element element0 = document0.addClass("&|KF=y");
      assertEquals("C!E;]]`:o{ 6to`oXqL", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n:r");
      Element element0 = new Element(tag0, "n:r");
      Element element1 = element0.toggleClass("");
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("210");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("#z$H5^");
      Element element0 = document0.prependText("#z$H5^");
      document0.appendElement("#z$H5^");
      String string0 = element0.outerHtml();
      assertEquals("#z$H5^<#z$h5^>\n</#z$h5^>", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("+kd{e'");
      document0.appendElement("+kd{e'");
      StringBuilder stringBuilder0 = new StringBuilder("+kd{e'");
      document0.outerHtml(stringBuilder0);
      assertEquals("+kd{e'<#root>\n<+kd{e'>\n</+kd{e'>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      Element element0 = document0.appendElement("BASE");
      String string0 = element0.outerHtml();
      assertEquals("\n<base />", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("210");
      boolean boolean0 = document0.equals("210");
      assertFalse(boolean0);
  }
}
