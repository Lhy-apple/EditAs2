/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:49:40 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsMatchingText("Tag name must not be empty.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("(%E`YM}");
      Document document1 = document0.clone();
      Element element0 = document0.appendText("(%E`YM}");
      Element element1 = element0.appendChild(document1);
      assertEquals(0, element1.siblingIndex());
      
      Elements elements0 = element1.getElementsContainingText("(%E`YM}");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("W?@");
      // Undeclared exception!
      try { 
        document0.child((-1415));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("c9}mU-f4Jaa9j^?;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Tagnae mst not be empy.");
      // Undeclared exception!
      try { 
        document0.html("Tagnae mst not be empy.");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("textarea");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("42W=3V%opXx/");
      Element element0 = document0.addClass("42W=3V%opXx/");
      assertEquals("42W=3V%opXx/", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "Tag name must not be empty.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeValueStarting("Tag name must not be empty.", "[%s^=%s]");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.select("Tag name must not be empty.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.prepend("Tag name must not be empty.");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("D|}IaS:kBnWf<");
      Elements elements0 = document0.getElementsMatchingOwnText("tn");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("7$PfVMw(A_");
      // Undeclared exception!
      try { 
        document0.after("7$PfVMw(A_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByIndexLessThan((-2040109463));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("bs");
      Elements elements0 = document0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("D|}IaS:kBnWf<");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeStarting("Tag name must not be empty.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByIndexEquals(2);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.wrap("Tag name must not be empty.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.val("");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("Tag name must not be emptsT");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("Tag name must not be emptsT", "6{bq&yv3e<a~ujyxp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 6{bq&yv3e<a~ujyxp
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Tag name must not be empty.", "Ou2OhJPsxY\"&/u?+9");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByClass("Tag name must not be empty.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeValueMatching("Tag name must not be empty.", (Pattern) null);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("7X6w");
      Elements elements0 = document0.getElementsByAttributeValueContaining("k{l{^M|P{Eqq/1N9om", "7X6w");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("AQ");
      Element element0 = new Element(tag0, "AQ");
      Element element1 = element0.text("AQ");
      List<TextNode> list0 = element1.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeValueNot("Tag name must not be empty.", "Tag name must not be empty.");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttribute("Tag name must not be empty.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.before("Tag name must not be empty.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.removeClass("Tag name must not be empty.");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-395));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("Tagnae mst not be empy.");
      Element element0 = document0.getElementById("Tagnae mst not be empy.");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("bs");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("bs");
      Element element0 = document0.createElement("bs");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      element0.addChildren(nodeArray0);
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("(%E`YM}");
      Element element0 = document0.appendText("(%E`YM}");
      element0.appendChild(document0);
      Element element1 = document0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.appendChild(document0);
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      DataNode dataNode0 = new DataNode("3@TNM'$xou?Os-c", "Tag name must not be empty.");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.appendChild(document0);
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.appendChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      document0.appendChild(document0);
      document0.after((Node) element0);
      Element element1 = document0.nextElementSibling();
      assertEquals("textarea", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("]");
      Document document1 = document0.clone();
      Element element0 = document0.appendChild(document1);
      document0.appendChild(element0);
      document0.previousElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("Tag[name must not be empty.");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.appendElement("Tag[name must not be empty.");
      Element element2 = element1.firstElementSibling();
      assertEquals("#document", element2.nodeName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.appendChild(document0);
      document0.getElementsByIndexGreaterThan((-395));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("(%E`YM}");
      Document document1 = document0.clone();
      Element element0 = document0.appendChild(document1);
      Element element1 = document0.appendChild(element0);
      Element element2 = element1.lastElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, element2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("]onE'%20--$oXXL");
      DocumentType documentType0 = new DocumentType("/>", "", "", "/>");
      Element element0 = document0.appendChild(documentType0);
      Elements elements0 = element0.getElementsContainingText("2GJTf:%^$vG");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("Tag name must not be empty.");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Tag tag0 = Tag.valueOf("AQ");
      Element element0 = new Element(tag0, "AQ");
      Element element1 = element0.text("AQ");
      Elements elements0 = element1.getElementsContainingOwnText("xtar[?ea");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("bs");
      Comment comment0 = new Comment("^!/Yxxx8k<<Kr!:*b?7", "bs");
      Element element0 = document0.appendChild(comment0);
      Elements elements0 = element0.getElementsContainingOwnText("{*8qKv$:;");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.getElementsContainingOwnText("{*8qKv$:;");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("bs");
      Element element0 = document0.createElement("bs");
      element0.appendText("bs");
      document0.appendChild(element0);
      Elements elements0 = element0.getElementsContainingText("bs");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("bs");
      Comment comment0 = new Comment("^!/Yxxx8k<<Kr!:*b?7", "bs");
      document0.appendChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.prependText(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.clone();
      Element element1 = document0.appendChild(element0);
      assertNotSame(element1, element0);
      
      boolean boolean0 = element1.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("<");
      Document document1 = document0.clone();
      Element element0 = document1.appendText("<");
      document0.appendChild(element0);
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("<");
      DataNode dataNode0 = DataNode.createFromEncoded("]$M", "s+");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("]$M", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("bs");
      Comment comment0 = new Comment("^!/Yxxx8k<<Kr!:*b?7", "bs");
      document0.appendChild(comment0);
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("wb>_DFF+C[YhL&");
      Element element0 = document0.toggleClass("textarea");
      boolean boolean0 = element0.hasClass("textarea");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("bs");
      Element element0 = document0.toggleClass("");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("Tagnae mst not be empy.");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("a,Qq`tvm1/R~'*");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "a,Qq`tvm1/R~'*");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 4063, document_OutputSettings1);
      assertEquals("a,Qq`tvm1/R~'*<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("a,Qq`tvm1/R~'*");
      Document document1 = document0.clone();
      document0.appendText("a,Qq`tvm1/R~'*");
      Element element0 = document1.appendChild(document0);
      String string0 = element0.toString();
      assertEquals("<#root>\n a,Qq`tvm1/R~'*\n</#root>", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("(%E`YM}");
      Document document1 = document0.clone();
      Element element0 = document0.appendText("(%E`YM}");
      element0.appendChild(document1);
      String string0 = element0.toString();
      assertEquals("(%E`YM}\n<#root></#root>", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Tag name must not be empty.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-648), document_OutputSettings1);
      assertEquals("Tag name must not be empty.</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.hashCode();
  }
}
