/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:53:05 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("LiufId1OB");
      Element element0 = document0.prependText("LiufId1OB");
      String string0 = element0.toString();
      assertEquals("LiufId1OB", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("mnb");
      Element element0 = document0.appendText("mnb");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("Lu5fI^dlO<nB0");
      Element element0 = document0.removeClass("User agent must not be null");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      // Undeclared exception!
      try { 
        document0.child((-372));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val(":nth-child(%d)");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("\n * ");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      Element element0 = document0.addClass("s$4vv'SE");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000005");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByAttributeValue("textarea", "textarea");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("zxLo>QYFf;A0|c$<");
      Elements elements0 = document0.getElementsByAttributeValueStarting("zxLo>QYFf;A0|c$<", "zxLo>QYFf;A0|c$<");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("embed");
      // Undeclared exception!
      try { 
        document0.after("embed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("zsbt>Q'`>$_");
      Elements elements0 = document0.getElementsByIndexLessThan((-815));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("t e!0kd`dh(atr,z(");
      Elements elements0 = document0.getElementsByAttributeStarting("t e!0kd`dh(atr,z(");
      Element element0 = document0.insertChildren(0, elements0);
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("yjw");
      Elements elements0 = document0.getElementsByIndexEquals(62);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("//kQqb");
      Elements elements0 = document0.getElementsMatchingOwnText("//kQqb");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("amp");
      // Undeclared exception!
      try { 
        document0.wrap("amp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("z'zprxlng");
      Elements elements0 = document0.getElementsByAttributeValueMatching("z'zprxlng", "z'zprxlng");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("GvA%G8W9");
      Elements elements0 = document0.getElementsByAttributeValueEnding("GvA%G8W9", "GvA%G8W9");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("+;Tv 3tj[_G]#0N");
      Elements elements0 = document0.getElementsByClass("+;Tv 3tj[_G]#0N");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("x\"_b8>, /adc<k'l.!");
      Elements elements0 = document0.getElementsByAttributeValueContaining("x\"_b8>, /adc<k'l.!", "x\"_b8>, /adc<k'l.!");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("Lu5fI^dlO<nB0");
      Document document1 = document0.clone();
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Elements elements0 = document0.getElementsByAttributeValueNot("v/|m22JgyK7KL,}Yh", "v/|m22JgyK7KL,}Yh");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("eRs");
      Elements elements0 = document0.getElementsByAttribute("eRs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("z'zprxlng");
      // Undeclared exception!
      try { 
        document0.before("z'zprxlng");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(")|");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("v/|xm22jgyk7kl,}yh");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("yjw");
      Elements elements0 = document0.getElementsByIndexGreaterThan(5966);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("s$4Nvv'SE");
      document0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.html(":qek|7liu`j");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("ke)7/d]GKd|!B/aN9#9v");
      document0.tagName("ke)7/d]GKd|!B/aN9#9v");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.prepend("v/|L22Jgy,7KL,}Hh");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("eRs");
      Node[] nodeArray0 = new Node[7];
      TextNode textNode0 = TextNode.createFromEncoded("eRs", "eRs");
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("\"");
      Element element0 = document0.appendElement("\"");
      assertEquals(0, element0.siblingIndex());
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("2'ZprXln>w");
      document0.prepend("2'ZprXln>w");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("&eWK8<b");
      DataNode dataNode0 = new DataNode("aw$W", "&eWK8<b");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("&eWK8<b");
      document0.prependText("&eWK8<b");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-464), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("Lu5fITF^d*O<znB0");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>(646);
      // Undeclared exception!
      try { 
        document0.insertChildren(646, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      Element element0 = document0.toggleClass("s$4vv'SE");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Element element0 = document0.appendElement("v/|m22JgyK7KL,}Yh");
      String string0 = element0.cssSelector();
      assertEquals("v/|m22jgyk7kl,}yh", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.createElement("embed");
      element0.prependChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("embed > #root", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.createElement("embed");
      Element element1 = document0.createElement("embed");
      Element element2 = element1.prependElement("embed");
      Element element3 = element1.prependChild(element0);
      assertEquals(0, element3.siblingIndex());
      assertNotSame(element3, element2);
      
      String string0 = element0.cssSelector();
      assertEquals("embed > embed:nth-child(1)", string0);
      assertFalse(element0.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document(".p[m50n8],lem");
      Element element0 = document0.appendElement(".p[m50n8],lem");
      element0.before((Node) document0);
      Elements elements0 = element0.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("yjw");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("(,^(`)]grK5/;E");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("yjw");
      document0.appendElement("yjw");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("yjw", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("yjw");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("eRs");
      Element element0 = document0.appendElement("eRs");
      Node[] nodeArray0 = new Node[7];
      TextNode textNode0 = TextNode.createFromEncoded("eRs", "eRs");
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.previousElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Element element0 = document0.appendElement("v/|m22JgyK7KL,}Yh");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("s$4Nvv'SE");
      Element element0 = document0.prependChild(document0);
      element0.prependElement("s$4Nvv'SE");
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Element element0 = document0.appendElement("v/|m22JgyK7KL,}Yh");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("Z'ZprXlng");
      Element element0 = document0.prependChild(document0);
      element0.prependElement("Z'ZprXlng");
      document0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("2'ZprXln>w");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document(")|");
      Element element0 = document0.getElementById(")|");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("8&% &VQW/d");
      DataNode dataNode0 = DataNode.createFromEncoded("8&% &VQW/d", ",JzG&dfpY*<r");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsContainingText(":nth-child(%d)");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("<");
      Element element0 = document0.prependText("<");
      document0.appendElement("br");
      Elements elements0 = element0.getElementsMatchingText("<");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("Lu5fITF^d*O<znB0");
      document0.appendElement("Lu5fITF^d*O<znB0");
      document0.prependText("Lu5fITF^d*O<znB0");
      Elements elements0 = document0.getElementsMatchingText("Lu5fITF^d*O<znB0");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("<");
      document0.prependText(" ");
      Element element0 = document0.appendElement("ol");
      assertEquals("ol", element0.nodeName());
      
      Elements elements0 = document0.getElementsMatchingText("<");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("Lu5fI^dlO<nB0");
      document0.prependText("Lu5fI^dlO<nB0");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsop.sel}ct.Collector");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("br");
      Node[] nodeArray0 = new Node[1];
      Comment comment0 = new Comment(".CgR(E$:gT'5'7xval", "reversed");
      nodeArray0[0] = (Node) comment0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element element0 = formElement0.prependText("textarea");
      Elements elements0 = element0.getElementsMatchingText("textarea");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("Lu5fI^dlO<nB0");
      Element element0 = document0.createElement("br");
      document0.prependChild(element0);
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("+27Lo&GG(");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("@jo*=e2Wo lq`c%Rl", "t$q/'l,@qsw1'#=U");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("Lu5fI^dlO<nB0");
      Element element0 = document0.prependText("Lu5fI^dlO<nB0");
      document0.prependChild(element0);
      document0.getElementsContainingOwnText("org.jsop.sel}ct.Collector");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "a-/,{ui%", attributes0);
      Document document0 = new Document("textarea");
      formElement0.prependChild(document0);
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      document0.appendElement("v/|m22JgyK7KL,}Yh");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("yjw");
      document0.prependText((String) null);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document(":contains(%s");
      Comment comment0 = new Comment(":contains(%s", "ScB3%");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Element element0 = document0.appendElement("v/|m22JgyK7KL,}Yh");
      element0.prependText("v/|m22JgyK7KL,}Yh");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      Element element0 = document0.appendElement("datalist");
      assertEquals("datalist", element0.tagName());
      
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("]]>");
      DataNode dataNode0 = DataNode.createFromEncoded("]]>", "\"ftDRB20?7");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("]]>", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      document0.prependText("v/|m22JgyK7KL,}Yh");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("zsPt>Q'`>o$_");
      document0.toggleClass("ol");
      boolean boolean0 = document0.hasClass("textarea");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("Lu5fI^dlO<nB0");
      Element element0 = document0.toggleClass("org.jsop.sel}ct.Collector");
      element0.toggleClass("+27Lo&GG(");
      Element element1 = document0.toggleClass("+27Lo&GG(");
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("x\"_bf8>, /adc<k'l.!");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("v/|Xm22JgyK7KL,}Yh");
      Element element0 = document0.val("v/|Xm22JgyK7KL,}Yh");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.elemnt$1");
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.nodes.elemnt$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-2473), document_OutputSettings1);
      assertEquals("org.jsoup.nodes.elemnt$1<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.appendElement("embed");
      Element element1 = document0.createElement("embed");
      Element element2 = element1.prependChild(element0);
      // Undeclared exception!
      try { 
        element2.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("LiufId1OB");
      StringBuilder stringBuilder0 = new StringBuilder("LiufId1OB");
      Element element0 = document0.createElement("br");
      Element element1 = element0.prependText("LiufId1OB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element1.outerHtmlHead(stringBuilder0, 900, document_OutputSettings1);
      assertEquals("LiufId1OB\nbr>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      StringBuilder stringBuilder0 = new StringBuilder("<br>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 612, document_OutputSettings1);
      assertEquals("<br>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 3867, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      StringBuilder stringBuilder0 = new StringBuilder("s$4vv'SE");
      document0.appendElement("datalist");
      document0.outerHtml(stringBuilder0);
      assertEquals("s$4vv'SE\n<#root>\n <datalist></datalist>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("LiufId1OB");
      StringBuilder stringBuilder0 = new StringBuilder("LiufId1OB");
      Element element0 = document0.createElement("br");
      Element element1 = element0.prependText("LiufId1OB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element1.outerHtmlTail(stringBuilder0, 900, document_OutputSettings1);
      assertEquals("LiufId1OB</br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.createElement("br");
      Element element1 = element0.prependText("br");
      element1.prependElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((StringBuilder) null, 447, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("Lyu5fI^dlOCnB");
      StringBuilder stringBuilder0 = new StringBuilder();
      Element element0 = document0.createElement("br");
      Element element1 = element0.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element1.outerHtmlTail(stringBuilder0, 31, document_OutputSettings1);
      assertEquals("\n                               </br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document(":contains(%s");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("TkLtW$7^_i!");
      Document document1 = new Document("TkLtW$7^_i!");
      document1.prependChild(document0);
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("Lu5fI^dlO<nB0");
      document0.hashCode();
  }
}
