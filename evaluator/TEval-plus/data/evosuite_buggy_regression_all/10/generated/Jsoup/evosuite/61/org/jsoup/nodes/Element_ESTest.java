/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:56:31 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = new Element("VLE$Fx+` . ;oye61g");
      element0.appendText("VLE$Fx+` . ;oye61g");
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Element element0 = new Element("col");
      Elements elements0 = element0.getElementsMatchingText("col");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("v4>p0k)o#t");
      Element element0 = document0.prependText("v4>p0k)o#t");
      document0.appendChild(document0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("mVR>y,edUjqLDC");
      // Undeclared exception!
      try { 
        document0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Element element0 = new Element("OM$:$%l3C'W{$d");
      Element element1 = element0.tagName("OM$:$%l3C'W{$d");
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Element element0 = new Element("2G> (8i0x3\u0003=8;");
      Map<String, String> map0 = element0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Element element0 = new Element("col");
      Elements elements0 = element0.getElementsContainingOwnText("col");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("col");
      Document document1 = (Document)document0.addClass("col");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("=zQ/e_1(~6r8v$5ClqR");
      // Undeclared exception!
      try { 
        document0.html("=zQ/e_1(~6r8v$5ClqR");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Element element0 = new Element("col");
      Element element1 = element0.attr("col", false);
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttributeValue("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("col");
      Elements elements0 = document0.getElementsByAttributeValueStarting("col", "col");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      String string0 = element1.cssSelector();
      assertEquals(0, element1.siblingIndex());
      assertEquals("br > br", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Element element0 = new Element("r6S92@!f$H52");
      Elements elements0 = element0.getElementsMatchingOwnText("r6S92@!f$H52");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      // Undeclared exception!
      try { 
        document0.after("VLE$Fx+` . ;oye61g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      Elements elements0 = document0.getElementsByIndexLessThan((-2061584300));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("DoctypeName");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element element0 = new Element("VLE$Fx+` . ;oye61g");
      Elements elements0 = element0.getElementsByAttributeStarting("VLE$Fx+` . ;oye61g");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      Elements elements0 = document0.getElementsByIndexEquals((-1625949436));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Element element0 = new Element("br");
      // Undeclared exception!
      try { 
        element0.wrap("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.val("br");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element element0 = new Element("VLE$Fx+` . ;oye61g");
      Elements elements0 = element0.getElementsByAttributeValueMatching("VLE$Fx+` . ;oye61g", "VLE$Fx+` . ;oye61g");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("br");
      boolean boolean0 = document0.is("br");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("=zQ/e_1(~6r8v$5ClqR");
      Elements elements0 = document0.getElementsByAttributeValueEnding("=zQ/e_1(~6r8v$5ClqR", "=zQ/e_1(~6r8v$5ClqR");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("[H");
      Elements elements0 = document0.getElementsByClass("[H");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("<");
      Elements elements0 = document0.getElementsByAttributeValueContaining("<", "<");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("DoctypeName");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      assertEquals(0, document1.siblingIndex());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element element0 = new Element("col");
      Elements elements0 = element0.getElementsByAttributeValueNot("col", "col");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("[H");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("HJm<Osa&H.x");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("F}");
      // Undeclared exception!
      try { 
        document0.before("F}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Element element0 = new Element("InFrameset");
      Element element1 = element0.removeClass("InFrameset");
      assertEquals("", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("F}");
      Elements elements0 = document0.getElementsByTag("F}");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByIndexGreaterThan(48);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      Elements elements0 = element1.parents();
      assertFalse(elements0.isEmpty());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("HJm<Osa&H.x");
      Element element0 = document0.appendChild(document0);
      element0.parents();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      document0.prependText("VLE$Fx+` . ;oye61g");
      document0.appendChild(document0);
      document0.lastElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Element element0 = new Element("textarea");
      DataNode dataNode0 = DataNode.createFromEncoded("textarea", "textarea");
      Element element1 = element0.prependChild(dataNode0);
      List<TextNode> list0 = element1.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("tr");
      Element element0 = document0.appendText("3s*'Y]exH0dw-sh#]");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("@!xi)U[Cw?7u^");
      DataNode dataNode0 = DataNode.createFromEncoded("Children collection to be inserted must not be null.", "VLE$Fx+` . ;oye61g");
      document0.appendChild(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(16, elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("br");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      Element element0 = document0.insertChildren((-1), linkedHashSet0);
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("8r' M4jBf[>!1av])bv");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("[H");
      document0.toggleClass("[H");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.appendElement("b");
      String string0 = element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      Document document0 = new Document("br");
      Element element2 = document0.createElement("br");
      element0.appendChild(element2);
      assertEquals(1, element2.siblingIndex());
      
      String string0 = element1.cssSelector();
      assertEquals("br > br:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("rg<X");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("tr");
      Document document1 = document0.clone();
      Element element0 = document1.appendText("tr");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      Element element2 = element1.nextElementSibling();
      assertEquals(0, element1.siblingIndex());
      assertNull(element2);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("tr");
      Document document1 = document0.clone();
      Element element0 = document1.appendText("tr");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element1 = element0.nextElementSibling();
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.previousElementSibling();
      assertEquals(0, element0.siblingIndex());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("/G/f/NRT_c");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("tr");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.previousElementSibling();
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token$Doctype");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("tr");
      Document document1 = document0.clone();
      Element element0 = document1.appendText("tr");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element1 = document1.firstElementSibling();
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      Document document1 = document0.clone();
      document0.prependChild(document1);
      document0.appendChild(document0);
      document0.lastElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("HJm<Osa&H.x");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.getElementById("br");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Element element0 = new Element("textarea");
      DataNode dataNode0 = DataNode.createFromEncoded("textarea", "textarea");
      element0.prependChild(dataNode0);
      Elements elements0 = element0.getElementsContainingText("textarea");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependText("br");
      Tag tag0 = Tag.valueOf("br");
      Element element1 = new Element(tag0, "br");
      element0.appendChild(element1);
      String string0 = document0.text();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Element element0 = new Element("</");
      element0.prependText("java.lang.string@0000000028 (9xr null");
      Tag tag0 = Tag.valueOf("caption");
      Element element1 = new Element(tag0, "java.lang.string@0000000028 (9xr null");
      element0.appendChild(element1);
      Document document0 = new Document("java.lang.string@0000000028 (9xr null");
      Element element2 = document0.appendChild(element0);
      Element element3 = new Element(tag0, "</");
      element1.appendChild(element3);
      assertEquals(1, element1.siblingIndex());
      
      element2.text();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.appendText("[H");
      String string0 = element1.ownText();
      assertEquals("[H", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Element element0 = new Element("textarea");
      DataNode dataNode0 = DataNode.createFromEncoded("textarea", "textarea");
      element0.prependChild(dataNode0);
      String string0 = element0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("HJm<Osa&H.x");
      Element element0 = document0.appendChild(document0);
      element0.ownText();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element1.after((Node) element0);
      String string0 = element0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("[H", "[H");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Element element0 = new Element("textarea");
      Tag tag0 = Tag.valueOf("caption");
      Element element1 = new Element(tag0, "caption");
      element0.prependChild(element1);
      boolean boolean0 = Element.preserveWhitespace(element1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      document0.appendText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("@!xi)U[Cw?7u^");
      DataNode dataNode0 = DataNode.createFromEncoded("Children collection to be inserted must not be null.", "VLE$Fx+` . ;oye61g");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("DoctypeName");
      Document document1 = document0.clone();
      document1.prepend("eoC5|.%by^");
      document0.appendChild(document1);
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Element element0 = new Element("l[zyo,@;~]*");
      Comment comment0 = new Comment("l[zyo,@;~]*", "/q2`");
      element0.prependChild(comment0);
      String string0 = element0.data();
      assertEquals("l[zyo,@;~]*", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("_m']");
      DataNode dataNode0 = new DataNode("_m']", "Y(7Q");
      Element element0 = document0.prependChild(dataNode0);
      String string0 = element0.data();
      assertEquals("_m']", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      document0.appendText("VLE$Fx+` . ;oye61g");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("DoctypeName");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("!");
      document0.toggleClass("!");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000005 utf8 (9xr [h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000012");
      element0.toggleClass("java.lang.string@0000000012");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000012");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("I");
      document0.toggleClass("I");
      document0.toggleClass("I");
      boolean boolean0 = document0.hasClass("I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("I");
      Element element0 = document0.toggleClass("java.lang.string@0000000004");
      Element element1 = element0.toggleClass("\n * ");
      boolean boolean0 = element1.hasClass("23O\"Vdmq/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("br");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      boolean boolean0 = element0.hasClass("java.lang.string@0000000032");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("+");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      boolean boolean0 = element0.hasClass("java.lang.string@0000000005");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.toggleClass("textarea");
      element0.toggleClass("[");
      Element element1 = element0.toggleClass("[");
      assertEquals("textarea", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("#");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("textarea");
      element0.outerHtml();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Element element0 = new Element("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 10, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      String string0 = document0.outerHtml();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("8VLE$Fxh` . ;oye61g");
      // Undeclared exception!
      try { 
        document0.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      StringBuilder stringBuilder0 = new StringBuilder(1524);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 62, document_OutputSettings1);
      element1.outerHtmlHead(stringBuilder0, 1524, document_OutputSettings0);
      assertEquals("br", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, (-133), document_OutputSettings1);
      assertEquals("<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Element element0 = new Element("m{z`RtflCDat");
      StringBuilder stringBuilder0 = new StringBuilder("@(}f;;1)V;d5");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlTail(stringBuilder0, 57343, document_OutputSettings1);
      assertEquals("@(}f;;1)V;d5</m{z`RtflCDat>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Element element0 = new Element("i]eHTRpm=l");
      element0.appendElement("i]eHTRpm=l");
      String string0 = element0.outerHtml();
      assertEquals("<i]eHTRpm=l>\n <i]eHTRpm=l></i]eHTRpm=l>\n</i]eHTRpm=l>", string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Element element0 = new Element("b");
      element0.text("b");
      element0.appendElement("b");
      StringBuilder stringBuilder0 = new StringBuilder("b");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(stringBuilder0, (-3), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder(1524);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.text("class");
      element0.outerHtmlTail(stringBuilder0, (byte)3, document_OutputSettings0);
      assertEquals("</br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Document document0 = new Document("tr");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Element element0 = new Element("col");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = element0.html(charArrayWriter0);
      assertEquals("", charArrayWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendChild(element0);
      MockFile mockFile0 = new MockFile("br", "br");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      // Undeclared exception!
      element1.html((OutputStreamWriter) mockFileWriter0);
  }
}
