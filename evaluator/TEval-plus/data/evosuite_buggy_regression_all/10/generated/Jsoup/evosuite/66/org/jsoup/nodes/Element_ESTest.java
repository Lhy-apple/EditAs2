/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:57:34 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("Data");
      // Undeclared exception!
      try { 
        document0.wrap("Data");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.sring@000000000");
      document0.appendText("java.lang.sring@000000000");
      document0.getElementsByIndexLessThan(3205);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^5_");
      // Undeclared exception!
      try { 
        document0.child(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("jLV<");
      Element element0 = document0.tagName("jLV<");
      assertEquals("jLV<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "f2", attributes0);
      formElement0.dataset();
      assertEquals("f2", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("            F?    ");
      Element element0 = document0.addClass("            F?    ");
      assertFalse(element0.hasParent());
      assertEquals("            F?    ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("ep");
      TextNode textNode0 = new TextNode("ep");
      // Undeclared exception!
      try { 
        document0.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("W+&l/L");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.html("W+&l/L");
      assertEquals(1, document0.childNodeSize());
      assertEquals("W+&l/L", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("(([+l](d+?)n(s*([+-])?s*+)?");
      Element element0 = document0.attr("(([+l](d+?)n(s*([+-])?s*+)?", false);
      assertEquals("(([+l](d+?)n(s*([+-])?s*+)?", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("jLV<bd");
      document0.getElementsByAttributeValue("jLV<bd", "jLV<bd");
      assertEquals("jLV<bd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.getElementsByAttributeValueStarting("textarea", "textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("/s$fEa+~~f[Vg[Ej'");
      document0.prepend("/s$fEa+~~f[Vg[Ej'");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("I~:WKn");
      Elements elements0 = document0.getElementsMatchingOwnText("I~:WKn");
      assertEquals("I~:WKn", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^5_");
      // Undeclared exception!
      try { 
        document0.after("-@x=Z^5_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.sring@000000000");
      Elements elements0 = document0.getElementsByIndexLessThan(3205);
      assertFalse(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("|&ttc] oL4k;t}q.z");
      document0.getElementsByAttributeStarting("|&ttc] oL4k;t}q.z");
      assertEquals("|&ttc] oL4k;t}q.z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("java.lang.sting@0&00000007");
      Elements elements0 = document0.getElementsByIndexEquals((-1612));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("n[@x=Z^5_");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("jLV<");
      Elements elements0 = document0.getElementsByClass("jLV<");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("jLV<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("&hTY-iZ78n");
      Elements elements0 = document0.getElementsContainingText("&hTY-iZ78n");
      assertEquals("&hTY-iZ78n", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings$Syntax");
      document0.getElementsByAttributeValueMatching("YX|FZ\"zbL<4N(6", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("9/v;b*8gi");
      document0.getElementsByAttributeValueContaining("9/v;b*8gi", "9/v;b*8gi");
      assertEquals("9/v;b*8gi", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("                   ");
      document0.doSetBaseUri("                   ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("                   ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("-@x=Z^5_");
      Element element0 = document0.appendTo(document0);
      assertEquals("-@x=Z^5_", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("fd");
      document0.getElementsByAttributeValueNot("fd", "fd");
      assertEquals("fd", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("&TY-iZ78n");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("&TY-iZ78n", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("j+\"");
      document0.getElementsByAttribute("j+\"");
      assertEquals("j+\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("ScriptDataDoubleEscapedLessthanSign");
      Element element0 = document0.removeClass("ScriptDataDoubleEscapedLessthanSign");
      assertEquals("ScriptDataDoubleEscapedLessthanSign", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("(([+l](d+)?)n(s*([+-])?s*+)?");
      document0.getAllElements();
      assertEquals("(([+l](d+)?)n(s*([+-])?s*+)?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("A)+U!");
      // Undeclared exception!
      try { 
        document0.is("A)+U!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'A)+U!': unexpected token at ')+U!'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("I~:WKn");
      // Undeclared exception!
      try { 
        document0.selectFirst("java.lang.sting@0000000007");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'java.lang.sting@0000000007': unexpected token at '@0000000007'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.sting@0&00000007");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2194);
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Element element0 = document0.body();
      Elements elements0 = element0.parents();
      assertEquals("f", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.sring@000000000");
      Element element0 = document0.appendText("java.lang.sring@000000000");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("novalidate");
      DataNode dataNode0 = new DataNode("3Z6n ECb$a3I+IC8K)");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("LEE");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("LEE", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("W+&l/L");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-842), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("~nh,,w$0c66~");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(20, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("eajy1&l4eh'");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(3479, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("/s$fEa+~~f[Vg[Ej'");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2412), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("BogusDocftype");
      document0.toggleClass("BogusDocftype");
      document0.cssSelector();
      assertEquals("BogusDocftype", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("~nh,w$c66~");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      document0.cssSelector();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("`i>cMN`i ");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("`i>cMN`i ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell(":containsData(text) query must not be empty");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before(":containsData(text) query must not be empty");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("/s$fEa+~~f[Vg[Ej'");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("/s$fEa+~~f[Vg[Ej'", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.sting@0000000007");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("qm]HO\">`flSuyNM-25");
      Element element0 = document0.body();
      element0.after((Node) document0);
      element0.nextElementSibling();
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("fd");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertEquals("fd", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^5_");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("-@x=Z^5_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("WfA=v$n)]Ux/_NU");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals("WfA=v$n)]Ux/_NU", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell(">op");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      Element element1 = element0.firstElementSibling();
      assertEquals(">op", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell(">op");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertEquals(">op", element1.baseUri());
      assertNotNull(element1);
      assertEquals("head", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell(" \"");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) document0;
      Element element0 = document1.lastElementSibling();
      assertNull(element0);
      assertEquals(" \"", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell(">op");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals(">op", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("title");
      document0.reparentChild(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("title", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("!*<r");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("!*<r", "!*<r", true);
      document0.appendChild(xmlDeclaration0);
      document0.getElementsMatchingText("!*<r");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.prependText("br");
      document0.getElementsMatchingText("77C/Gtf}b<");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("~nh,,w$c66~");
      document0.appendElement("~nh,,w$c66~");
      document0.prependText("~nh,,w$c66~");
      document0.getElementsMatchingText("~nh,,w$c66~");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell(":atchAN");
      Element element0 = document0.text(":atchAN");
      Elements elements0 = element0.getElementsContainingOwnText(":atchAN");
      assertEquals(":atchAN", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("fd");
      Comment comment0 = new Comment("QKj6Ajy!SH;");
      document0.appendChild(comment0);
      document0.ownText();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("~nh,,w$0c66~");
      document0.title("~nh,,w$0c66~");
      Elements elements0 = document0.getElementsMatchingText("~nh,,w$0c66~");
      assertEquals(0, elements0.size());
      assertEquals("~nh,,w$0c66~", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("f2");
      Tag tag0 = Tag.valueOf("br", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "f2", attributes0);
      Element element0 = document0.appendChild(formElement0);
      Element element1 = new Element("br");
      element0.appendChild(element1);
      document0.ownText();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DataNode dataNode0 = new DataNode((String) null);
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("                   ");
      document0.title("                   ");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
      assertEquals("                   ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^5_");
      document0.title("-@x=Z^5_");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("-@x=Z^5_", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("fd");
      Comment comment0 = new Comment("QKj6Ajy!SH;");
      Element element0 = document0.appendChild(comment0);
      boolean boolean0 = element0.hasText();
      assertEquals(1, comment0.siblingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell(":Rp~P`PT-)$Jr[$QV");
      DataNode dataNode0 = DataNode.createFromEncoded("r", ":Rp~P`PT-)$Jr[$QV");
      document0.appendChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("f");
      Comment comment0 = new Comment("NSVeDvzQ", "8hW8P");
      document0.appendChild(comment0);
      String string0 = document0.data();
      assertEquals("f", document0.baseUri());
      assertEquals("NSVeDvzQ", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("g/'");
      document0.appendText("g/'");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000007");
      document0.toggleClass("9FNm'9?*8|^s@-");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^5_");
      document0.toggleClass("-@x=Z^5_");
      boolean boolean0 = document0.hasClass("Children collection to be inserted must not be null.");
      assertEquals("-@x=Z^5_", document0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^5_");
      Element element0 = document0.toggleClass("-@x=Z^5_");
      element0.toggleClass("-@x=Z^5_");
      boolean boolean0 = document0.hasClass("-@x=Z^5_");
      assertEquals("-@x=Z^5_", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("ic%aqmJ!jzaD");
      document0.toggleClass("s+");
      document0.toggleClass(" > ");
      document0.hasClass("0dc<sjaSHneUUGg");
      assertEquals("ic%aqmJ!jzaD", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("#HQ;MD");
      Element element0 = document0.toggleClass("#HQ;MD");
      element0.toggleClass("@S-AcC2kkHm?7J\"F");
      document0.toggleClass("9FNmm'g?*8?^s@-");
      boolean boolean0 = document0.hasClass("@S-AcC2kkHm?7J\"F");
      assertTrue(boolean0);
      assertEquals("#HQ;MD", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("Q[{91[vhZ,q3=-Wu");
      document0.toggleClass("Q[{91[vhZ,q3=-Wu");
      document0.toggleClass("0uB>");
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertEquals("Q[{91[vhZ,q3=-Wu", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("ic%aqmJ!jzaD");
      Element element0 = document0.toggleClass("ic%aqmJ!jzaD");
      element0.toggleClass("ic%aqmJ!jzaD");
      Element element1 = element0.toggleClass("ic%aqmJ!jzaD");
      assertEquals("ic%aqmJ!jzaD", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000007");
      document0.val();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("YTRvnD_Q_H9:");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "v:3d2", attributes0);
      formElement0.val();
      assertEquals("v:3d2", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell(")Du>F^f4PUV<|KDs+9");
      Element element0 = document0.val(")Du>F^f4PUV<|KDs+9");
      assertEquals(")Du>F^f4PUV<|KDs+9", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "html", (Attributes) null);
      element0.val("html");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("(([+l](d+)?)n(s*([+-])?s*+)?");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("(([+l](d+)?)n(s*([+-])?s*+)?", document0.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("jLV<");
      document0.title("jLV<");
      String string0 = document0.html();
      assertEquals("jLV<", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>jLV&lt;</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Tag tag0 = Tag.valueOf("br", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "fd", attributes0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f~IA9>PZQ=S~Z");
      formElement0.outerHtmlHead(mockPrintStream0, 1764, document_OutputSettings0);
      assertEquals("fd", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("s>_C;WBYR.w");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(mockPrintStream0, 1764, document_OutputSettings0);
      assertEquals("br", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("~Q&eerSg*;JH;8");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("~Q&eerSg*;JH;8", document1.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\" />\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell(">?saC?F1YQChoCRN");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      document0.title(">?saC?F1YQChoCRN");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>&gt;?saC?F1YQChoCRN</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals(">?saC?F1YQChoCRN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("&C6j$Rer^");
      document0.html((CharArrayWriter) null);
      assertEquals("&C6j$Rer^", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell("&C6j$Rer^");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      boolean boolean0 = document0.hasClass("textarea");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertEquals("textarea", document1.baseUri());
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
  }
}
