/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:46:52 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parse("<!P-", "<!P-");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "}i`<bGTG>M)j{sKmGw");
      assertEquals("}i`<bGTG>M)j{sKmGw", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("<?", "<?");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<html>\n<head>\n</head>\n<body>\n base\n</body>\n</html><base class=\"\" />", "<html>\n<head>\n</head>\n<body>\n base\n</body>\n</html><base class=\"\" />");
      assertEquals("<html>\n<head>\n</head>\n<body>\n base\n</body>\n</html><base class=\"\" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!---->\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "I@Z");
      assertEquals("I@Z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse(";Y?z@c[</", ";Y?z@c[</");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<-;", "<-;");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<html>\n<head>\n <title>}iL$&lt;bGTG,&gt;)jsKqG</title>\n</head>\n<body>\n</body>\n</html>", "<html>\n<head>\n <title>}iL$&lt;bGTG,&gt;)jsKqG</title>\n</head>\n<body>\n</body>\n</html>");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("<x{*3Q=1Aw?G7", "<x{*3Q=1Aw?G7");
      assertEquals("<x{*3Q=1Aw?G7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<xD{*R Q=>X& A7?", "<xD{*R Q=>X& A7?");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("<xD{*R Q=b A7?", "<xD{*R Q=b A7?");
      assertEquals("<xD{*R Q=b A7?", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("<base />\n<html>\n<head>\n</head>\n<body>\n base\n</body>\n</html><base />", "<base />\n<html>\n<head>\n</head>\n<body>\n base\n</body>\n</html><base />");
      assertEquals("<base />\n<html>\n<head>\n</head>\n<body>\n base\n</body>\n</html><base />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parse("</I", "</I");
      assertEquals("</I", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parse("<S</I", "<S</I");
      assertEquals("#root", document0.tagName());
  }
}
