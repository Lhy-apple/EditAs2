/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:49:00 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">@9@aG");
      characterReader0.rewindToMark();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">@9@aG");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase(">@9@aG");
      assertTrue(boolean0);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      characterReader0.mark();
      assertEquals("zO:rH~\".O)", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3,??t]ja");
      String string0 = characterReader0.toString();
      assertEquals("3,??t]ja", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">@9@aG");
      characterReader0.consumeTo('M');
      characterReader0.unconsume();
      characterReader0.unconsume();
      characterReader0.consumeHexSequence();
      assertEquals("G", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">@9@aG");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("+es;}k");
      char char0 = characterReader0.current();
      assertEquals('+', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      characterReader0.consumeTo('z');
      assertEquals("zO:rH~\".O)", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(",");
      String string0 = characterReader0.consumeTo("TjM9w");
      assertEquals(",", string0);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consumeTo("");
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("x4n=L8E_h)ug(c4L:e");
      char[] charArray0 = new char[1];
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeHexSequence();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("XCW]+!");
      char[] charArray0 = new char[7];
      charArray0[2] = ']';
      characterReader0.consumeToAny(charArray0);
      assertEquals("]+!", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char[] charArray0 = new char[4];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("x4n=L8E_h)ug(c4L:e");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeHexSequence();
      assertEquals("n=L8E_h)ug(c4L:e", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">@9@aG");
      characterReader0.consumeTo('-');
      characterReader0.unconsume();
      assertEquals("G", characterReader0.toString());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("G", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\"%c:pAi4@oi");
      characterReader0.consumeHexSequence();
      assertEquals("\"%c:pAi4@oi", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      characterReader0.consumeHexSequence();
      assertEquals("rray must not contain any null objects", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consumeDigitSequence();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(",");
      characterReader0.consumeDigitSequence();
      assertEquals(",", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("vE2yOm;INjl@UGU");
      characterReader0.advance();
      characterReader0.consume();
      characterReader0.consumeDigitSequence();
      assertEquals("yOm;INjl@UGU", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("x4n=L8E_h)ug(c4L:e");
      char[] charArray0 = new char[1];
      characterReader0.consumeToAny(charArray0);
      boolean boolean0 = characterReader0.matches('m');
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      boolean boolean0 = characterReader0.matches('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matches('z');
      assertEquals(":rH~\".O)", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      char[] charArray0 = new char[8];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals("zO:rH~\".O)", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("OQd&1");
      assertEquals("OQd&1", characterReader0.toString());
      
      char[] charArray0 = new char[2];
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@9G");
      assertEquals("@9G", characterReader0.toString());
      
      characterReader0.consumeTo('z');
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("MiKqxW|J");
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeAsString();
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("~\".O)", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("zO:rH~\".O)");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals("zO:rH~\".O)", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("+eS;}kZ");
      assertEquals("+eS;}kZ", characterReader0.toString());
      
      characterReader0.consumeTo('&');
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("+es;}kz? {`5y07");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("+es;}kz? {`5y07", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("x4n=L8E_h)ug(c4L:e");
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("4n=L8E_h)ug(c4L:e", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("x4n=L8E_h)ug(c4L:e");
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchConsume("x");
      assertEquals("4n=L8E_h)ug(c4L:e", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      boolean boolean0 = characterReader0.matchConsume("");
      assertTrue(boolean0);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">@9@aG");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("+es;}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(")X<O");
      boolean boolean0 = characterReader0.containsIgnoreCase("");
      assertTrue(boolean0);
      assertEquals(")X<O", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(">@9>aG");
      boolean boolean0 = characterReader0.containsIgnoreCase("6");
      assertEquals(">@9>aG", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("QQ*[~");
      boolean boolean0 = characterReader0.containsIgnoreCase("QQ*[~");
      assertTrue(boolean0);
  }
}
