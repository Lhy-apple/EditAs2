/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:50:48 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("0u9K/_P:");
      DataNode dataNode0 = new DataNode("0u9K/_P:", "0u9K/_P:");
      // Undeclared exception!
      try { 
        document0.before((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("K6))-S7S;m-");
      document0.setBaseUri("K6))-S7S;m-");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("abs:o#1w'?`h33r`a");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("subsim", "subsim");
      Document document0 = Document.createShell("subsim");
      dataNode0.setParentNode(document0);
      document0.replaceChild(dataNode0, document0);
      document0.unwrap();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:8", "abs:8");
      textNode0.clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("d%KL)[gd7-x}MNo8%,!", "d%KL)[gd7-x}MNo8%,!", "d%KL)[gd7-x}MNo8%,!", "d%KL)[gd7-x}MNo8%,!");
      documentType0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("{gM");
      // Undeclared exception!
      try { 
        document0.before("{gM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("z%xm");
      document0.removeAttr("z%xm");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:gtrless", "abs:gtrless");
      textNode0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        textNode0.after("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:gqbGrjN", "abs:gqbGrjN");
      // Undeclared exception!
      try { 
        textNode0.replaceWith(textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:8", "abs:8");
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("?");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("5c-Q&2D]x5XQqFmkO", "5c-Q&2D]x5XQqFmkO");
      textNode0.attributes();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:8", "abs:8");
      textNode0.absUrl("abs:8");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:gtrless", "abs:gtrless");
      textNode0.attr("abs:gtrless", "abs:gtrless");
      textNode0.absUrl("abs:gtrless");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("cap");
      Element element0 = document0.body();
      element0.after("cap");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("K6))-S7S;m-");
      // Undeclared exception!
      try { 
        document0.wrap("K6))-S7S;m-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("subsim", "subsim");
      Document document0 = Document.createShell("subsim");
      dataNode0.setParentNode(document0);
      document0.replaceChild(dataNode0, document0);
      document0.wrap("subsim");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("ee");
      Element element0 = document0.body();
      element0.wrap("ee");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("subsim", "subsim");
      Document document0 = Document.createShell("subsim");
      dataNode0.setParentNode(document0);
      dataNode0.unwrap();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("abs:gqGrje");
      Element element0 = document0.body();
      element0.setParentNode(document0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell(" e!YXi");
      DataNode dataNode0 = DataNode.createFromEncoded("(", "(");
      // Undeclared exception!
      try { 
        dataNode0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:gqGrje", "abs:gqGrje");
      // Undeclared exception!
      try { 
        textNode0.removeChild(textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("\"L&/pV");
      document0.prependChild(document0);
      document0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("ee");
      Element element0 = document0.body();
      element0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = new TextNode("cap", "cap");
      textNode0.equals("dmy]");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("head", "<X<SS5?%V@<rJ!tF");
      textNode0.equals(textNode0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:8", "abs:8");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("K6))-S7S;m-");
      DataNode dataNode0 = DataNode.createFromEncoded("K6))-S7S;m-", "InHead");
      dataNode0.setParentNode(document0);
      dataNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("abs:o#1w'?`h33r`a");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("\n", "\n");
      textNode0.outerHtml();
  }
}
