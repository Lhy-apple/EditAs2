/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:55:00 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("]?'t{n/<pI|=l!;");
      tokenQueue0.chompTo("]?'t{n/<pI|=l!;");
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("HNCv:@e");
      boolean boolean0 = tokenQueue0.matchesCS("HNCv:@e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("g+o]ojj wo^c)2\"s49");
      Character character0 = Character.valueOf('E');
      tokenQueue0.addFirst(character0);
      assertEquals('E', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
      tokenQueue0.chompToIgnoreCase(" ");
      assertEquals("must not be empty", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil");
      String string0 = tokenQueue0.toString();
      assertEquals("org.jsoup.helper.StringUtil", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";\nbi*x");
      char char0 = tokenQueue0.peek();
      assertEquals(';', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";\nbi*x");
      assertEquals(";\nbi*x", tokenQueue0.toString());
      
      tokenQueue0.remainder();
      assertTrue(tokenQueue0.isEmpty());
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("fr<'%'`]k");
      String[] stringArray0 = new String[1];
      tokenQueue0.consume();
      stringArray0[0] = "fr<'%'`]k";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "?Gnb\\u*";
      TokenQueue tokenQueue0 = new TokenQueue(string0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals('?', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("IKT[HzMo{)T\"1");
      tokenQueue0.consumeTagName();
      assertEquals("[HzMo{)T\"1", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("{~AgRAi!");
      tokenQueue0.chompToIgnoreCase("{~AgRAi!");
      char[] charArray0 = new char[0];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("O-GdpR~d^p");
      tokenQueue0.consumeAttributeKey();
      assertEquals('~', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<5g4HKQl[a");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("       ", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<Gg4#KnQl<[a");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";kn^`iIx");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertEquals(';', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";G*bCi(x");
      tokenQueue0.consume(";G*bCi(x");
      boolean boolean0 = tokenQueue0.matchesWord();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil");
      tokenQueue0.advance();
      assertEquals('r', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("fr<'%'`]k");
      tokenQueue0.consume();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("fr<'%'`]k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("]?'t{n/<pI|=l!;");
      tokenQueue0.consume();
      tokenQueue0.chompTo("]?'t{n/<pI|=l!;");
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";YnbiVg*x");
      tokenQueue0.chompToIgnoreCase(";gn");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";YnbiVg*x");
      tokenQueue0.chompToIgnoreCase("V(mboc%=^2Htq>Q!");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<IQqRBB>EU<#");
      tokenQueue0.chompBalanced('<', 'N');
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("dt1G`ZaH\"HR&KF(");
      tokenQueue0.chompBalanced('N', 'd');
      assertEquals("t1G`ZaH\"HR&KF(", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = TokenQueue.unescape("\\<L2}keV;e3}DLn");
      assertEquals("<L2}keV;e3}DLn", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TokenQueue.unescape("@{^iixx");
      assertEquals("@{^iixx", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Must be fassb");
      tokenQueue0.consumeWord();
      assertEquals(" be fassb", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("O7:JhQVf1q");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Xd7Z7q6y");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("O-GdpR~d^p");
      tokenQueue0.consumeElementSelector();
      assertEquals('~', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("O-Gdp~d^p");
      tokenQueue0.consumeCssIdentifier();
      assertEquals('~', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3HcFE");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }
}
