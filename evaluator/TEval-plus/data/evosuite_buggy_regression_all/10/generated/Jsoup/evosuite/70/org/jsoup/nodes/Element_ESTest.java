/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:58:38 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("g07U:[=;=@w<U");
      document0.appendText("g07U:[=;=@w<U");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("r.");
      DataNode dataNode0 = DataNode.createFromEncoded("r.", (String) null);
      document0.prependChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("uKOIY.4Gb$sgvA ?E");
      document0.text("uKOIY.4Gb$sgvA ?E");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Pattern pattern0 = Pattern.compile("uKOIY.4Gb$sgvA ?E");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("j");
      // Undeclared exception!
      try { 
        document0.child(62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("4~Sp5tJ&");
      document0.prependText("4~Sp5tJ&");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.tagName("textarea");
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("_!NL");
      document0.dataset();
      assertEquals("_!NL", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("E");
      Elements elements0 = document0.getElementsContainingOwnText("P");
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("uKOIY.4Gb$sgvA ?E");
      Element element0 = document0.addClass("uKOIY.4Gb$sgvA ?E");
      assertEquals("uKOIY.4Gb$sgvA ?E", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("_!NL");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.html("");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.attr("Children collection to be inserted must not be null.", true);
      assertEquals("textarea", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element element0 = new Element("eFS/{EAH");
      Elements elements0 = element0.getElementsByAttributeValue("eFS/{EAH", "eFS/{EAH");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("!J>");
      document0.getElementsByAttributeValueStarting("details", "7])3Mq.OJ#//5E\"");
      assertEquals(1, document0.childNodeSize());
      assertEquals("!J>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell(",r'ot");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      String string0 = document0.toString();
      assertEquals(",r'ot", document0.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("2yv'<?%P!?}aeWP");
      document0.prepend("2yv'<?%P!?}aeWP");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("L06d_3;T`*k#~2>");
      // Undeclared exception!
      try { 
        document0.after("id");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("mV[mv&J!&<");
      Elements elements0 = document0.getElementsByIndexLessThan((-907));
      assertEquals("mV[mv&J!&<", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("#");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("B@E<k}&`P3!N");
      document0.getElementsByAttributeStarting("B@E<k}&`P3!N");
      assertEquals("B@E<k}&`P3!N", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("B@E-^<k}&`P3!N");
      Elements elements0 = document0.getElementsByIndexEquals(17);
      assertEquals(1, document0.childNodeSize());
      assertEquals("B@E-^<k}&`P3!N", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.getElementsByAttributeValueMatching("6Nv@ope]d&]x/", "#");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("_!Np");
      document0.is("br");
      assertEquals("_!Np", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("B@E-^<k}&`P3!N");
      Elements elements0 = document0.getElementsByClass("B@E-^<k}&`P3!N");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B@E-^<k}&`P3!N", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("5t B}");
      Elements elements0 = document0.getElementsContainingText("5t B}");
      assertTrue(elements0.isEmpty());
      assertEquals("5t B}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("uo");
      document0.getElementsByAttributeValueContaining("uo", "java.lang.string@0000000007 java.lang.string@0000000020 big head");
      assertEquals("uo", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("boMy");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("lvi?:rm~dgz2");
      document0.setBaseUri("lvi?:rm~dgz2");
      assertEquals("lvi?:rm~dgz2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("b{S)0%G)/&.Z*Eu");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("b{S)0%G)/&.Z*Eu", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("~");
      document0.appendTo(document0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("`;,=LWom");
      document0.getElementsByAttributeValueNot("`;,=LWom", "`;,=LWom");
      assertEquals("`;,=LWom", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("27|qBGg7{wU=z");
      document0.getElementsByAttribute("27|qBGg7{wU=z");
      assertEquals("27|qBGg7{wU=z", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("`;,=!LuWom");
      // Undeclared exception!
      try { 
        document0.before("`;,=!LuWom");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("g07U:[=;=@w<U");
      Element element0 = document0.removeClass("g07U:[=;=@w<U");
      assertEquals("g07U:[=;=@w<U", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("D#{}U?C");
      document0.getAllElements();
      assertEquals("D#{}U?C", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document(".");
      Elements elements0 = document0.getElementsMatchingText(".");
      assertEquals(".", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("mV[mv&J!&<");
      // Undeclared exception!
      try { 
        document0.selectFirst("mV[mv&J!&<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'mv&J!&<'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Element element0 = new Element("s");
      Elements elements0 = element0.getElementsByIndexGreaterThan(0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("$Ll(8(s!g;Hzm^a");
      Element element0 = document0.body();
      element0.wrap("$Ll(8(s!g;Hzm^a");
      element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("$Ll(8(s!g;Hzm^a");
      Element element0 = document0.body();
      element0.append("$Ll(8(s!g;Hzm^a");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
      try { 
        document0.wrap("<html>\n <head></head>\n <body></body>\n</html>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("textarea");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("1CE2KY/T~Cm[{@%VWV");
      document0.append("1CE2KY/T~Cm[{@%VWV");
      document0.textNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("#");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("!J>");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("!J>", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("Mt!Ct`$a{1");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-152), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("#");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2138, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("J4X >q9HAZc");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("_!kL");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2824), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("d/Z~9@ L!3l0");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(148, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.toggleClass("textarea");
      document0.cssSelector();
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("$Ll(8(s!g;Hzm^a");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("$Ll(8(s!g;Hzm^a", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("x");
      document0.siblingElements();
      assertEquals("x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = new Element("textarea");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document0.siblingElements();
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell(")l'3)`%`KlN}n");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals(")l'3)`%`KlN}n", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document(".");
      document0.nextElementSibling();
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("uody");
      Element element0 = document0.head();
      Element element1 = element0.wrap("uody");
      assertNotNull(element1);
      
      Element element2 = element1.nextElementSibling();
      assertEquals("body", element2.tagName());
      assertEquals("uody", element2.baseUri());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("j?.X_");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals(0, element1.siblingIndex());
      assertEquals("j?.X_", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("~");
      document0.previousElementSibling();
      assertEquals("~", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("d/Z~@ L!3l0");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("d/Z~@ L!3l0", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document(".");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(".\"sZ}n>49j+", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ".\"sZ}n>49j+", attributes0);
      formElement0.prependChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals(".", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("textarea");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = new Element("textarea");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element1 = document0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("textarea", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("f>1Hg#sbsXUWk5Uv.");
      document0.reparentChild(document0);
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("f>1Hg#sbsXUWk5Uv.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Comment comment0 = new Comment("D$q/I;=Y9&g", "/`M\"AR[)$}e0Ep&!5N");
      Document document0 = new Document("D$q/I;=Y9&g");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) comment0;
      document0.addChildren(nodeArray0);
      Pattern pattern0 = Pattern.compile("Wsjb!MFw", 30);
      document0.getElementsMatchingText(pattern0);
      assertEquals("D$q/I;=Y9&g", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.title("#root");
      Elements elements0 = document0.getElementsMatchingOwnText("#root");
      assertEquals(1, elements0.size());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("uKOIY.4Gb$sgvA ?E");
      Comment comment0 = new Comment("#root");
      Element element0 = document0.appendChild(comment0);
      Elements elements0 = element0.getElementsMatchingOwnText("uKOIY.4Gb$sgvA ?E");
      assertTrue(elements0.isEmpty());
      assertEquals("uKOIY.4Gb$sgvA ?E", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Comment comment0 = new Comment("head");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("~");
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertEquals("~", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.text("");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Comment comment0 = new Comment("<#@16O`M", "#");
      Element element0 = document0.prependChild(comment0);
      boolean boolean0 = element0.hasText();
      assertEquals("#", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("uody");
      Element element0 = document0.text("uody");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals("uody", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("B@E-^<k}&`P3!N");
      document0.data();
      assertEquals("B@E-^<k}&`P3!N", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.toggleClass("<html>\n <head></head>\n <body></body>\n</html>");
      boolean boolean0 = element0.hasClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals("#", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(",r'oFAt");
      FormElement formElement0 = new FormElement(tag0, ",r'oFAt", attributes0);
      Element element0 = formElement0.toggleClass("-9R-d,Z&#YpR<CGd]");
      formElement0.toggleClass("zQ3QB9*|");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000020 e_& head");
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("_!NL");
      FormElement formElement0 = new FormElement(tag0, "_!NL", attributes0);
      formElement0.toggleClass("java.lang.string@0000000020 e_& head");
      formElement0.toggleClass("java.lang.string@0000000020 e_& head");
      boolean boolean0 = formElement0.hasClass("big");
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("B@E<k}&`P3!N");
      FormElement formElement0 = new FormElement(tag0, "B@E<k}&`P3!N", attributes0);
      formElement0.toggleClass("            ");
      formElement0.toggleClass("            ");
      formElement0.hasClass("B@E<k}&`P3!N");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("_!NL");
      FormElement formElement0 = new FormElement(tag0, "_!NL", attributes0);
      formElement0.toggleClass("java.lang.string@0000000020 e_& head");
      formElement0.toggleClass("java.lang.string@0000000020 e_& head");
      formElement0.hasClass("_!NL");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000020 e_& head");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("nullChar");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell(">r@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.toString();
      assertEquals(">r@", document0.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Element element0 = new Element("textarea");
      File file0 = MockFile.createTempFile("nullChar", "textarea", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      element0.outerHtml((Appendable) mockFileWriter0);
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell(">r@");
      document0.title(">r@");
      String string0 = document0.toString();
      assertEquals(">r@", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>&gt;r@</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Element element0 = new Element("textarea");
      File file0 = MockFile.createTempFile("nullChar", "textarea", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlHead(mockFileWriter0, 25, document_OutputSettings1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell(">r@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      document0.title(">r@");
      String string0 = document0.toString();
      assertEquals(">r@", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>&gt;r@</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("mV[mv&J!&<");
      MockFileWriter mockFileWriter0 = new MockFileWriter("mV[mv&J!&<");
      document0.html(mockFileWriter0);
      assertEquals("mV[mv&J!&<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell("uody");
      Element element0 = document0.val("uody");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, element0);
      assertEquals("uody", document1.baseUri());
  }
}
