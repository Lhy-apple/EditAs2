/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:53:35 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("+'");
      Element element0 = document0.getElementById("+'");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("F#h`<NH>gIjs");
      Element element0 = document0.append("F#h`<NH>gIjs");
      element0.getElementsMatchingText("F#h`<NH>gIjs");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("Qy_");
      // Undeclared exception!
      try { 
        document0.child(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("F^#t&^J|)D\"+:\"3");
      Element element0 = document0.tagName("F^#t&^J|)D\"+:\"3");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.text("br");
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("#root");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("vWG0~fz(-.ASYI3VRp]");
      Element element0 = document0.addClass("vWG0~fz(-.ASYI3VRp]");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("q=IiHCM");
      // Undeclared exception!
      try { 
        document0.html("q=IiHCM");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("checked");
      Elements elements0 = document0.getElementsByAttributeValue("checked", "checked");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("l=+m(S_ak\"5KX+uS|o");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "l=+m(S_ak\"5KX+uS|o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.prependElement("br");
      String string0 = element0.cssSelector();
      assertEquals("br > br", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document(",($`.XKJ|");
      Document document1 = (Document)document0.prepend(",($`.XKJ|");
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("zG2RFWlL@");
      Elements elements0 = document0.getElementsMatchingOwnText("zG2RFWlL@");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("org.jsoup.node.Document");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.node.Document");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("t&iyfoama> x(1B'GW");
      Elements elements0 = document0.getElementsByIndexLessThan(5523);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("org.jsoupnodes.Elem|nt");
      Elements elements0 = document0.getElementsByAttributeStarting("org.jsoupnodes.Elem|nt");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("disabled");
      Elements elements0 = document0.getElementsByIndexEquals((-1772));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("Must be false");
      // Undeclared exception!
      try { 
        document0.wrap("Must be false");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Document");
      Element element0 = document0.val("org.jsoup.nodes.Document");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document(" ");
      Elements elements0 = document0.getElementsByAttributeValueMatching(" ", " ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("X`1_K");
      Elements elements0 = document0.getElementsByAttributeValueEnding("X`1_K", "X`1_K");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("yZ46kk)?p:Yqi{A");
      Elements elements0 = document0.getElementsByClass("yZ46kk)?p:Yqi{A");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("q69Kz)");
      Elements elements0 = document0.getElementsContainingText("q69Kz)");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("disbled");
      Elements elements0 = document0.getElementsByAttributeValueContaining("disbled", "disbled");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Document document1 = document0.clone();
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("F.&`=r#=2}JbuzpJVz");
      Elements elements0 = document0.getElementsByAttributeValueNot("F.&`=r#=2}JbuzpJVz", "F.&`=r#=2}JbuzpJVz");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Elem|nt");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("XAH/");
      Elements elements0 = document0.getElementsByAttribute("XAH/");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1801), elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.before("org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("F#h`<NH>gIjs");
      document0.append("F#h`<NH>gIjs");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("q=IiHCM");
      Element element0 = document0.removeClass("q=IiHCM");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("checked");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.prependElement("br");
      // Undeclared exception!
      try { 
        element0.append("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Elem|nt");
      Element element0 = document0.appendElement("org.jsoup.nodes.Elem|nt");
      document0.prependText("org.jsoup.nodes.Elem|nt");
      element0.nextElementSibling();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.append("br");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document(".");
      document0.appendElement(".");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("W");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(4879, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("i2v");
      List<DataNode> list0 = document0.dataNodes();
      Element element0 = document0.insertChildren((-1), list0);
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.toggleClass(" ");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document(".");
      Element element0 = document0.appendElement(".");
      String string0 = element0.cssSelector();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("Qy_");
      Element element0 = document0.appendElement("Qy_");
      document0.appendChild(document0);
      element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("}/3zED");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("qk9Kz)Z");
      Element element0 = document0.appendElement("qk9Kz)Z");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.nextElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("@j]j&g>*f4e)t/ge:");
      Element element0 = document0.appendElement("@j]j&g>*f4e)t/ge:");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("@j]j&g>*f4e)t/ge:");
      Element element0 = document0.appendElement("@j]j&g>*f4e)t/ge:");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      Comment comment0 = new Comment("@j]j&g>*f4e)t/ge:", "@j]j&g>*f4e)t/ge:");
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) element0;
      nodeArray0[8] = (Node) element0;
      element0.addChildren(nodeArray0);
      Document document1 = (Document)element0.previousElementSibling();
      assertEquals("@j]j&g>*f4e)t/ge:", document1.location());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("Qy_");
      Element element0 = document0.appendElement("Qy_");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("Qy_");
      Element element0 = document0.appendElement("Qy_");
      document0.appendChild(document0);
      element0.firstElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("qFw-LLw'OR5s`");
      document0.appendElement("qFw-LLw'OR5s`");
      Elements elements0 = document0.getElementsByIndexGreaterThan(8089);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("yZ4B6kk)?p:Yqi{A");
      document0.appendElement("yZ4B6kk)?p:Yqi{A");
      Tag tag0 = Tag.valueOf("yZ4B6kk)?p:Yqi{A");
      TextNode textNode0 = TextNode.createFromEncoded("yZ4B6kk)?p:Yqi{A", "yZ4B6kk)?p:Yqi{A");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "_", attributes0);
      document0.appendChild(formElement0);
      formElement0.lastElementSibling();
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("F#h`<NH>gIjs");
      document0.append(",$~4wl9/9)aI<?SEBD");
      Elements elements0 = document0.getElementsMatchingText("F#h`<NH>gIjs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("qxv>z)Z");
      document0.appendElement("P");
      document0.prependText("qxv>z)Z");
      Elements elements0 = document0.getElementsMatchingText("P");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("q@xv>Kz)Z");
      document0.appendElement("br");
      document0.prependText(" > ");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("9KFh`<BNH>gIjs");
      Element element0 = document0.append("9KFh`<BNH>gIjs");
      Elements elements0 = element0.getElementsContainingOwnText("9KFh`<BNH>gIjs");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("<}");
      Comment comment0 = new Comment("<}", "<}");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsContainingOwnText("<}");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("T`yG.eF>3oM:t27}9");
      Element element0 = document0.appendElement("textarea");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("x3A/v=X`4R");
      document0.appendElement("x3A/v=X`4R");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "yZ46kk)?p:Yqi{A");
      Document document0 = new Document("textarea");
      document0.appendChild(textNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("hOroup");
      Comment comment0 = new Comment("4h", "}|lM^W");
      document0.appendChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("jb8)nhxv,XB:v *b/");
      Element element0 = document0.appendElement("jb8)nhxv,XB:v *b/");
      element0.appendText("]Ww3Qz(3@k.q");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document(".qO;enG");
      Element element0 = document0.prependText(".qO;enG");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("4h");
      DataNode dataNode0 = new DataNode("4h", "");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("4h", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("yZ46kk)?p:Yqi{A");
      document0.appendElement("yZ46kk)?p:Yqi{A");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ".", attributes0);
      formElement0.toggleClass(" > ");
      boolean boolean0 = formElement0.hasClass("java.lang.String@0000000016");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!e/jXGMJAgZk7~0</\"b");
      Element element0 = new Element(tag0, "!e/jXGMJAgZk7~0</\"b");
      element0.toggleClass("!e/jXGMJAgZk7~0</\"b");
      boolean boolean0 = element0.hasClass("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document(".");
      document0.appendElement(".");
      Tag tag0 = Tag.valueOf(".");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, ".", attributes1);
      formElement0.siblingElements();
      FormElement formElement1 = new FormElement(tag0, "java.lang.String@0000000016", attributes1);
      formElement1.toggleClass(" > ");
      boolean boolean0 = formElement1.hasClass("java.lang.String@0000000016");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("l=+m(S_ak\"5KX+uS|o");
      document0.toggleClass("l=+m(S_ak\"5KX+uS|o");
      document0.toggleClass("class");
      Element element0 = document0.toggleClass("class");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("disabled");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("vWG0~fz(-.ASYI3VRp]");
      Element element0 = document0.createElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("[y_");
      Element element0 = document0.appendElement("textarea");
      element0.val("[y_");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0");
      Element element0 = new Element(tag0, "0");
      StringBuilder stringBuilder0 = new StringBuilder("0");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlHead(stringBuilder0, 417, document_OutputSettings1);
      assertEquals("0<0>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Element element0 = document0.prependText("br");
      String string0 = element0.html();
      assertEquals("br\n<br>", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependElement("br");
      String string0 = formElement0.outerHtml();
      assertEquals("<br><br></br>", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Z4", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "br");
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead(stringBuilder0, (-2138), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      formElement0.outerHtmlHead(stringBuilder0, 65536, document_OutputSettings1);
      assertEquals("<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("@j]j&g>*f4e)t/ge:");
      document0.appendElement("@j]j&g>*f4e)t/ge:");
      String string0 = document0.html();
      assertEquals("<@j]j&g>*f4e)t/ge:></@j]j&g>*f4e)t/ge:>", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("9KFh`<BNH>gIjs");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, (-348), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail((StringBuilder) null, 3120, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.prependElement("br");
      element0.after((Node) formElement0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail((StringBuilder) null, (-1933129104), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.prependText("br");
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail((StringBuilder) null, (-3229), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("q=IiHCM");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("+'");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("qk9Kz)Z");
      Document document1 = new Document("qk9Kz)Z");
      boolean boolean0 = document0.equals(document1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document("qk9Kz)Z");
      Document document1 = new Document("qk9Kz)Z");
      assertTrue(document1.equals((Object)document0));
      
      document1.toggleClass("qk9Kz)Z");
      boolean boolean0 = document0.equals(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("zG2RFWlL@");
      document0.hashCode();
  }
}
