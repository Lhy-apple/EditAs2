/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 14:30:01 GMT 2023
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      EventState eventState0 = new EventState(eventHandler0, 1895.1111184, 1895.1111184, (-29));
      eventState0.getEventHandler();
      assertEquals((-29), eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1895.1111184, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.0, (-2310), (-2310));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-2310), int0);
      assertEquals(2310.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 3547.537746531, (-2292));
      double double0 = eventState0.getEventTime();
      assertEquals(2.2250738585072014E-308, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-2292), eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3547.537746531, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 2.2250738585072014E-308, (-2310));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(2.2250738585072014E-308, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-2310), eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 2.2250738585072014E-308, (-2310));
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2.2250738585072014E-308, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-2310), eventState0.getMaxIterationCount());
      assertEquals(2.2250738585072014E-308, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, Double.NaN, (-5724));
      eventState0.reinitializeBegin((-5724), (double[]) null);
      assertEquals((-5724), eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2999.10949).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 2.2250738585072014E-308, (-2310));
      double[] doubleArray0 = new double[1];
      eventState0.reinitializeBegin((-3247.7729958846485), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2.2250738585072014E-308, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-2310), eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(3547.537746531, 3547.537746531, (-3247.7729958846485), 1.0, 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 3547.537746531, (-2292));
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(3547.537746531, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(2.2250738585072014E-308, doubleArray0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(2.2250738585072014E-308, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1610).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(3547.537746531, 3547.537746531, (-3247.7729958846485), 1.0, 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 3547.537746531, (-2292));
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(3547.537746531, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      dummyStepInterpolator1.storeTime(1.0);
      eventState0.evaluateStep(dummyStepInterpolator1);
      eventState0.stepAccepted(2.2250738585072014E-308, doubleArray0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(2.2250738585072014E-308, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1610).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(3547.537746531, 3547.537746531, (-3247.7729958846485), 1.0, 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 3547.537746531, (-2292));
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(3547.537746531, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator0.storeTime(1610);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted((-3247.7729958846485), doubleArray0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(299.76475290842814, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1569).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(3547.538, 3547.538, (-3247.7729958846485), 1.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, 3547.538, (-2292));
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(3547.538, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      dummyStepInterpolator1.storeTime(1.0);
      eventState0.evaluateStep(dummyStepInterpolator1);
      eventState0.stepAccepted(0.0, doubleArray0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(0.0, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, Double.NaN, Double.NaN, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, Double.NaN, (-5724));
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      
      boolean boolean1 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-5724), eventState0.getMaxIterationCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2999.10949, 2999.10949, (-3247.7729958846485), 1.0, 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 2.2250738585072014E-308, (-2310));
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(2.2250738585072014E-308, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.storeTime((-3247.7729958846485));
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(1.0, doubleArray0);
      assertEquals((-1.512362154851207E-6), eventState0.getEventTime(), 0.01);
      
      boolean boolean0 = eventState0.reset((-2271.001064063145), doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 2.2250738585072014E-308, (-2310));
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2.2250738585072014E-308, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals((-2310), eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, Double.NaN, Double.NaN, Double.NaN).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, Double.NaN, (-5724));
      double[] doubleArray0 = new double[25];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted(Double.NaN, doubleArray0);
      boolean boolean0 = eventState0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2999.10949, 2999.10949, (-3247.7729958846485), 1.0, 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 2.2250738585072014E-308, (-2310));
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(2.2250738585072014E-308, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.storeTime((-3247.7729958846485));
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals((-1.512362154851207E-6), dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      boolean boolean0 = eventState0.reset((-2271.001064063145), doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 3, (-591.9609041), 3);
      boolean boolean0 = eventState0.reset(2423.9094724900156, (double[]) null);
      assertEquals(3, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals(591.9609041, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(3.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2999.10949, 2999.10949, (-3247.7729958846485), 1.0, 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, 2.2250738585072014E-308, (-2310));
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(2.2250738585072014E-308, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.storeTime((-3247.7729958846485));
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(1.0, doubleArray0);
      assertEquals((-1.512362154851207E-6), eventState0.getEventTime(), 0.01);
      
      boolean boolean0 = eventState0.reset((-2271.001064063145), doubleArray0);
      assertTrue(boolean0);
  }
}
