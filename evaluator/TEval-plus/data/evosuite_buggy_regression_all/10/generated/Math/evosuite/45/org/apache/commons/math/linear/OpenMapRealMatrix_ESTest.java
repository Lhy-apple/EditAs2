/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 14:23:50 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3259, 3259);
      openMapRealMatrix0.addToEntry(0, 0, 3259);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(3259, openMapRealMatrix0.getRowDimension());
      assertEquals(3259, openMapRealMatrix1.getColumnDimension());
      assertEquals(3259, openMapRealMatrix0.getColumnDimension());
      assertEquals(3259, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1091, 1091);
      // Undeclared exception!
      openMapRealMatrix0.scalarMultiply(0.0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1091, 1091);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(1091, openMapRealMatrix1.getRowDimension());
      assertEquals(1091, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3259, 3259);
      openMapRealMatrix0.addToEntry(0, 0, 3259);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(3259, openMapRealMatrix0.getColumnDimension());
      assertEquals(3259, openMapRealMatrix1.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(3259, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1091, 1091);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1091, 791);
      openMapRealMatrix0.addToEntry(791, 0, 1091);
      assertEquals(1091, openMapRealMatrix0.getColumnDimension());
      
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) blockRealMatrix0);
      assertEquals(1091, realMatrix0.getRowDimension());
      assertEquals(1091, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(284, 284);
      openMapRealMatrix0.addToEntry(36, 36, (-7.9E-9));
      RealMatrix realMatrix0 = openMapRealMatrix0.power(284);
      assertEquals(284, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3259, 3259);
      openMapRealMatrix0.addToEntry(0, 582, 0);
      assertEquals(3259, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3259, 3259);
      openMapRealMatrix0.addToEntry(0, 0, (-2337.9924593507244));
      openMapRealMatrix0.multiplyEntry(0, 0, (-2113.0));
      assertEquals(3259, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3259, 3259);
      openMapRealMatrix0.multiplyEntry(3244, 3244, (-2337.9924593507244));
      assertEquals(3259, openMapRealMatrix0.getRowDimension());
  }
}
