/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 14:26:00 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Asinh asinh0 = new Asinh();
      regulaFalsiSolver0.solve(1056836250, (UnivariateRealFunction) asinh0, (-0.9542431023349962), (double) 1056836250, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(18.310155551702444, 18.310155551702444, 18.310155551702444);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) tanh0, (-39.08686901), 2.8372086888473323E-28, 18.310155551702444, allowedSolution0);
      assertEquals(2.8372086888473323E-28, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.080603956861622E-26), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(18.310155551702444, 18.310155551702444);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) tanh0, (-39.08686901), 18.310155551702444, 18.310155551702444, allowedSolution0);
      assertEquals(18.310155551702444, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-10.388356729148775), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Log10 log10_0 = new Log10();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(1073800599, (UnivariateRealFunction) log10_0, 1.3500584531745999E-15, 1746.0073584, 1.3500584531745999E-15);
      assertEquals(1.3500584531745999E-15, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1529);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1529, (UnivariateRealFunction) log10_0, 1.0, 1.0, allowedSolution0);
      assertEquals(1.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(451, (UnivariateRealFunction) log10_0, (double) 451, 1.0, (double) 451, allowedSolution0);
      assertEquals(451.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800600, (UnivariateRealFunction) log10_0, 2.314385919727883E-15, (double) 1073800600, 2.314385919727883E-15, allowedSolution0);
      assertEquals(2.314385919727883E-15, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1376.6792084444));
      Sinh sinh0 = new Sinh();
      illinoisSolver0.setup(327, sinh0, (-2475.43323387), 683.0, (-1376.6792084444));
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (327) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) log10_0, 1.3500584531745999E-15, (double) 1073800599, (double) 1073800599, allowedSolution0);
      assertEquals(1.073800599E9, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.8807178037150152E-13, (double) 3130, allowedSolution0);
      assertEquals(1565.0000000000002, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Log10 log10_0 = new Log10();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(3078, (UnivariateRealFunction) log10_0, 0.0, 2.3879683207, allowedSolution0);
      assertEquals(1.19398416035, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000013, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(18.310155551702444, 18.310155551702444, 18.310155551702444);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) tanh0, (-39.08686901), 2.8372086888473323E-28, 18.310155551702444, allowedSolution0);
      assertEquals(18.310155551702444, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.8372086888473323E-28, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-969.8));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Expm1 expm1_0 = new Expm1();
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) expm1_0, (-3773.0), 1.5830993332061267E-10, (-969.8), allowedSolution0);
      assertEquals((-969.8), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4.726708543475013E-17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(30.57878608003736, 30.57878608003736, 30.57878608003736);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Tanh tanh0 = new Tanh();
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) tanh0, (-1246.819748345356), 2.2179531730725548E-15, 30.57878608003736, allowedSolution0);
      assertEquals(30.57878608003736, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.2179531730725548E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.3500584531745999E-15, (double) 3130, (double) 3130, allowedSolution0);
      assertEquals(3130.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2534.250501902452, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.8807178037150152E-13, (double) 3130, allowedSolution0);
      assertEquals(1565.0000000000002, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.8807178037150152E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.8807178037150152E-13, (double) 3130, allowedSolution0);
      assertEquals(1565.0000000000002, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2455.5098381501643, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.8807178037150152E-13, (double) 3130, allowedSolution0);
      assertEquals(1565.0000000000002, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.8807178037150152E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.3500584531745999E-15, (double) 3130, (double) 3130, allowedSolution0);
      assertEquals(3130.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2534.250501902452, double0, 0.01);
  }
}
