/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 14:24:58 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2146960254), (-2146960254), (-2146960254));
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-2146960254), (UnivariateRealFunction) inverse0, (double) (-2146960254), (double) (-2146960254), (double) (-2146960254));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,146,960,254) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4136, 4136, 4136);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(4136, (UnivariateRealFunction) inverse0, (-5.547150891860202E-7), (double) 4136, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(0.0, 0.0, 59);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(59, (UnivariateRealFunction) harmonicOscillator0, 0.0, (double) 59, (-19.07284068361427), allowedSolution0);
      assertEquals((-19.07284068361427), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Ceil ceil0 = new Ceil();
      double double0 = illinoisSolver0.solve(85, (UnivariateRealFunction) ceil0, (double) 85, 0.0, (double) 85, allowedSolution0);
      assertEquals(85.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Identity identity0 = new Identity();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-59.761), 619, (-59.761));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(619, (UnivariateRealFunction) identity0, (-59.761), 4.9E-324, (double) 619, allowedSolution0);
      assertEquals(619.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4136, 4136, 4136);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(4136, (UnivariateRealFunction) inverse0, (-4404.589), (double) 4136, (-4404.589), allowedSolution0);
      assertEquals(4136.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0036, (-1.0));
      Tan tan0 = new Tan();
      regulaFalsiSolver0.setup(2022, tan0, 0.0036, 2022, (-1.0));
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(1.5762651070709688, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(611, 611, 611);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(611, (UnivariateRealFunction) inverse0, (-2423.1572654612014), (double) 611, (double) 611, allowedSolution0);
      assertEquals(611.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1812.1572654612019), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4136, 4136, 4136);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(4136, (UnivariateRealFunction) inverse0, (-2422.8792050132506), (double) 4136, (double) 4136, allowedSolution0);
      assertEquals(4136.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2422.8792050132506), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4102, 4102, 4102);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(4102, (UnivariateRealFunction) inverse0, (-288.9695488), (double) 4102, (-288.9695488), allowedSolution0);
      assertEquals((-288.9695488), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-288.9695488), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(611, 611, 611);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(611, (UnivariateRealFunction) inverse0, (-2423.1572654612014), (double) 611, (double) 611, allowedSolution0);
      assertEquals(611.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1812.1572654612019), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4136, 4136, 4136);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(4136, (UnivariateRealFunction) inverse0, (-2422.8792050132506), (double) 4136, (double) 4136, allowedSolution0);
      assertEquals(4136.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1713.1207949867494, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(597, 597, 597);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(597, (UnivariateRealFunction) inverse0, (-2423.1572654612014), (double) 597, (double) 597, allowedSolution0);
      assertEquals(597.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1826.1572654612014), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(596, 596, 596);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(596, (UnivariateRealFunction) inverse0, (-2423.1572654612014), (double) 596, (double) 596, allowedSolution0);
      assertEquals(596.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(596.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1879.76317), 588);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(588, (UnivariateRealFunction) inverse0, (-1879.76317), (double) 588, (double) 588, allowedSolution0);
      assertEquals(588.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-317.21356960899016), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4120, (-1123.240900531), (-1123.240900531));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(4120, (UnivariateRealFunction) inverse0, (-1123.240900531), (double) 4120, (double) 4120, allowedSolution0);
      assertEquals(4120.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2996.759099469, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2390.194831374593), 4131);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(4131, (UnivariateRealFunction) inverse0, (-2390.194831374593), (double) 4131, (double) 4131, allowedSolution0);
      assertEquals(4131.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1287.4419866055423), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(594, (UnivariateRealFunction) inverse0, (-1884.2720906898946), (double) 594, (double) 594, allowedSolution0);
      assertEquals(594.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(7.436366446436359E-7, double0, 0.01);
  }
}
