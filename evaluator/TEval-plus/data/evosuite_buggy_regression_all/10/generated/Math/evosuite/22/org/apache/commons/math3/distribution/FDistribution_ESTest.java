/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 14:19:12 GMT 2023
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN);
      double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 0.5, 2.0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(2780.7277876602907, double0, 0.01);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      FDistribution fDistribution0 = new FDistribution(jDKRandomGenerator0, 8.711129287069315E-8, 0.5, (-2175.3674));
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(8.711129287069315E-8, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      FDistribution fDistribution0 = new FDistribution(jDKRandomGenerator0, 8.711129287069315E-8, 0.5, (-2175.3674));
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(8.711129287069315E-8, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 0.5, 2.0);
      double double0 = fDistribution0.density(2.0);
      assertEquals(0.0641500299099584, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-1660.39345), (-1660.39345), (-1660.39345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,660.393)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(762.1316, (-2227.19267434), (-2227.19267434));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,227.193)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1721);
      FDistribution fDistribution0 = new FDistribution(well19937a0, 0.5, 1721, 1721);
      // Undeclared exception!
      fDistribution0.sample(1721);
  }
}
