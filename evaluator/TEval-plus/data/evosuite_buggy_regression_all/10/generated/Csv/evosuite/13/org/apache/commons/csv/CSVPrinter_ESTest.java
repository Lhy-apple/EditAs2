/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:15:48 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTransactionRollbackException;
import java.util.PriorityQueue;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintWriter0, appendable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(938);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A;>rB%wMA";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(4805);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=5OvAJ4$&k^{$rM";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.print(charBuffer0);
      assertEquals(4775, charBuffer0.remaining());
      assertEquals(4775, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.print(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(4805);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(4805);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":wQ}_'l5rO'{%9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\":wQ}_'l5rO'{%9\"\r\n\":wQ}_'l5rO'{%9\"\r\n\":wQ}_'l5rO'{%9\"\r\n\":wQ}_'l5rO'{%9\"\r\n\":wQ}_'l5rO'{%9\"\r\n\":wQ}_'l5rO'{%9\"\r\n\":wQ}_'l5rO'{%9\"\r\n", charArrayWriter0.toString());
      assertEquals(126, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(12, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("The comment sart haracter and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('i');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "The comment sart haracter and the delimiter cannot be the same ('";
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(938);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A;>rB%wMA";
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(32, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(12, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z@d");
      Object[] objectArray0 = new Object[20];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(20, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Float float0 = new Float((-1736.7551F));
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      objectArray0[1] = (Object) "The comment start character and the delimiter cannot be the same ('";
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = cSVFormat0.format(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(Mine ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("\"(Mine \"\r\n\"(Mine \"\r\n\"(Mine \"\r\n\"(Mine \"\r\n\"(Mine \"\r\n", charArrayWriter0.toString());
      assertEquals(50, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1$*+E");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(12, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[RCl;-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"[RCl;-\"\r\n\"[RCl;-\"\r\n\"[RCl;-\"\r\n\"[RCl;-\"\r\n\"[RCl;-\"\r\n\"[RCl;-\"\r\n\"[RCl;-\"\r\n", charArrayWriter0.toString());
      assertEquals(70, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment sart haracter and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[18];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~Ca");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(18, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("|AX|\"8RnA<N");
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      priorityQueue0.add(mockFileWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("oSs,GxE)A$rHYAX%q");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(12, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment sart haracter and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(12, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment("\r\n");
      assertEquals(53, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("O\n");
      assertEquals(9, charArrayWriter0.size());
      assertEquals("$ O\r\n$ \r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Parameter '");
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      priorityQueue0.add(mockFileWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) priorityQueue0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ws$MTuSFA}b$T*:<C1");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.csv.CSVPrinter$1", sQLTransactionRollbackException0);
      priorityQueue0.add(sQLIntegrityConstraintViolationException0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(35).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n", charArrayWriter0.toString());
      assertEquals(35, charArrayWriter0.size());
  }
}
