/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:32:28 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber((float) 16);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._last;
      tokenBuffer_Segment0.next();
      Integer integer0 = new Integer((-3301));
      Float float0 = new Float(164.855F);
      tokenBuffer1.writeObject(float0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer0.writeRawValue("Called operation not supported for TokenBuffer");
      tokenBuffer1.configure(jsonGenerator_Feature0, false);
      assertEquals(29, tokenBuffer1.getFeatureMask());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getTextCharacters();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeEndArray();
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals("[TokenBuffer: END_ARRAY]", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((-970.45337F));
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeObjectId(tokenBuffer_Segment0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      tokenBuffer2.firstToken();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      tokenBuffer0.configure(jsonGenerator_Feature0, true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toByteArray();
      tokenBuffer0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((-970.45337F));
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer_Parser0.close();
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter((PrettyPrinter) null);
      Class<Double> class0 = Double.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature1;
      objectReader0.with(deserializationFeature1, deserializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((-19));
      tokenBuffer0.writeNumber(bigDecimal1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer_Segment0.append(2364, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
      tokenBuffer_Segment0.append((-3072), jsonToken1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((-970.45337F));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeObjectId((Object) null);
      tokenBuffer0.writeNumber((float) 16);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.canWriteTypeId();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.getOutputContext();
      tokenBuffer1.flush();
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.asParser((ObjectCodec) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", at char #");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.toString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Double double0 = new Double(838.73909739);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(36, jsonToken0, (Object) double0, (Object) null, (Object) double0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeObjectId(tokenBuffer_Segment0);
      tokenBuffer0.writeNumber((-970.41614F));
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer_Parser0.close();
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 123);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(42, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[6] = mapperFeature6;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      Double double0 = new Double(0.0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("q2'}keD:G1]#F%ns]", (Object) double0);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('~');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("'ggC5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getCurrentValue();
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      tokenBuffer0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.getCurrentValue();
      tokenBuffer_Segment0.appendRaw(2182, 2182, (Object) null, (Object) null, (Object) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      jsonParser0.getCurrentValue();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Float float0 = new Float((double) 16);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-1208), 3207, (Object) float0, (Object) float0, (Object) float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1208
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((BigDecimal) null);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Float float0 = new Float((-1.0));
      tokenBuffer_Segment0.append((-1058), jsonToken0, (Object) tokenBuffer_Parser0, (Object) float0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer1.isClosed();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext0);
      tokenBuffer0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.writeObject((Object) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.append(tokenBuffer1);
      jsonParser0.close();
      tokenBuffer_Parser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.nextFieldName();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer_Parser0.close();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.nextFieldName();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObject((Object) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((float) 16);
      tokenBuffer_Parser0.overrideCurrentName("297Z\"9BmBw,|cst");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer_Parser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      tokenBuffer0.writeTypeId(beanDeserializerFactory0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(42, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeNumber((float) (-1449));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      objectMapper1.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.useDefaultPrettyPrinter();
      try { 
        tokenBuffer0.writeObject(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.next();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      tokenBuffer1.configure(jsonGenerator_Feature0, false);
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0._appendRaw(16, (Object) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.getCurrentValue();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2182, 2182, (Object) null, (Object) null, (Object) null);
      tokenBuffer_Segment1.type(2182);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.canWriteTypeId();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.getOutputContext();
      tokenBuffer1.asParser((JsonParser) tokenBuffer_Parser0);
      tokenBuffer1.flush();
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.asParser((ObjectCodec) null);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Short short0 = new Short((short)2643);
      tokenBuffer0.writeObject(short0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      String string0 = " ... (truncated ";
      // Undeclared exception!
      try { 
        tokenBuffer0.asParser((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.append(tokenBuffer0);
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber(0.0F);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      tokenBuffer_Parser0._codec = null;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer1.append(tokenBuffer0);
      tokenBuffer1.toString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigDecimal bigDecimal0 = new BigDecimal((double) (-3301));
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append((-3301), jsonToken0);
      DecimalNode.valueOf(bigDecimal0);
      JsonToken jsonToken1 = JsonToken.VALUE_TRUE;
      tokenBuffer_Segment0.append((-3301), jsonToken1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.getCodec();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((-970.45337F));
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer0.useDefaultPrettyPrinter();
      tokenBuffer0.writeObject((Object) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((-970.45337F));
      tokenBuffer_Parser0.getTextLength();
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber((float) 16);
      tokenBuffer0._appendRaw(16, jsonToken0);
      tokenBuffer_Parser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      objectMapper0.configure(jsonGenerator_Feature0, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.peekNextToken();
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0._typeId = (Object) null;
      tokenBuffer0.toString();
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      byte[] byteArray0 = new byte[0];
      tokenBuffer0.writeBinaryField("[objectId=", byteArray0);
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumberField("=SI#_}Q;!B,Gb", (float) 16);
      tokenBuffer0.writeNumber((-970.45337F));
      tokenBuffer_Parser0.getTextLength();
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(16);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.writeNumber((float) 16);
      tokenBuffer0._appendRaw(2437, tokenBuffer1);
      tokenBuffer_Parser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      objectMapper0.configure(jsonGenerator_Feature0, true);
      SimpleModule simpleModule0 = new SimpleModule();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) tokenBuffer_Parser0, (Object) jsonGenerator_Feature0, (Object) simpleModule0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper1);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Parser0.setCodec(objectMapper2);
      tokenBuffer_Parser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.getCurrentValue();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2182, 2182, (Object) null, (Object) null, (Object) null);
      tokenBuffer_Segment1.type(2182);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.canWriteTypeId();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.getOutputContext();
      tokenBuffer1.asParser((JsonParser) tokenBuffer_Parser0);
      tokenBuffer1.flush();
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.toString();
      tokenBuffer1._appendRaw(3, "");
      tokenBuffer2.writeNumber("[TokenBuffer: ]");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer_Segment0.append(2364, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
      tokenBuffer_Segment0.append((-3072), jsonToken1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((BigDecimal) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '#';
      // Undeclared exception!
      try { 
        tokenBuffer1.writeString(charArray0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser0.enable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, deserializationContext0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (byte) (-108), 452);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Byte byte0 = new Byte((byte)9);
      tokenBuffer_Segment0.next();
      Integer integer0 = new Integer(16);
      Float float0 = new Float((-0.6294018F));
      Float float1 = new Float((-799.6998684257582));
      tokenBuffer0.writeObjectId(objectMapper1);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeObjectFieldStart("s.'&@y");
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("s.'&@y", (-1744), 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(42, jsonToken0);
      Integer integer0 = new Integer(42);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      tokenBuffer_Segment1.append(15, jsonToken0, (Object) tokenBuffer_Segment0, (Object) integer0, (Object) bigDecimal0);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.append((-625), jsonToken0, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2364, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      tokenBuffer_Segment1.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext0);
      tokenBuffer1.writeObjectId((Object) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)14;
      tokenBuffer1.writeBinaryField("", byteArray0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, 52, (byte)14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      objectMapper0.configure(jsonGenerator_Feature0, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      int int0 = tokenBuffer0._appendAt;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      tokenBuffer0.isEnabled(jsonGenerator_Feature1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((float) 16);
      tokenBuffer_Parser0.getTextLength();
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer_Parser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(0L);
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = true;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      Float float0 = new Float((float) 16);
      try { 
        tokenBuffer0.writeObject(beanDeserializerFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"factoryConfig\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      Float float0 = new Float((-1097.5037F));
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeString(":O;B9@Xk((<'.xIl~^");
      tokenBuffer_Parser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      Float float0 = new Float((-1097.5037F));
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.close();
      tokenBuffer_Parser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      tokenBuffer0.close();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("", (int) (byte)44, 240);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.nextFieldName();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeEndObject();
      BigDecimal bigDecimal0 = new BigDecimal((double) 16);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer_Segment0.append(2364, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
      tokenBuffer_Segment0.append((-3072), jsonToken1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((BigDecimal) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      objectMapper0.configure(jsonGenerator_Feature0, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      int int0 = tokenBuffer_Parser1._segmentPtr;
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      tokenBuffer2.firstToken();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      objectMapper0.registerSubtypes(classArray0);
      tokenBuffer0.writeNull();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.readValueAsTree();
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer_Segment0.get(0);
      tokenBuffer_Parser0.getCurrentName();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer0.enable(jsonGenerator_Feature0);
      tokenBuffer0.writeStartObject();
      tokenBuffer_Parser0.hasTextCharacters();
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser1 = jsonParser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser1, (DeserializationContext) null);
      tokenBuffer0.writeBoolean(true);
      tokenBuffer0.useDefaultPrettyPrinter();
      Integer integer0 = new Integer(16);
      tokenBuffer0.writeObject(integer0);
      tokenBuffer_Parser0.overrideCurrentName("Problem with definition of ");
      tokenBuffer_Segment0.appendRaw(13, 13, (Object) null);
      tokenBuffer_Parser0.version();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      tokenBuffer0.writeNumber((float) 16);
      tokenBuffer0._appendRaw(16, jsonToken0);
      tokenBuffer1.writeObject(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer_Segment0._tokenTypes = (-1902L);
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.writeNumber((float) 16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      tokenBuffer_Parser0.overrideCurrentName("297Z\"9BmBw,|cst");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getCurrentName();
      tokenBuffer0.version();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      ObjectMapper objectMapper2 = objectMapper0.enableDefaultTyping();
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, deserializationContext0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer1.writeBoolean(true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.useDefaultPrettyPrinter();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      tokenBuffer0.writeObject(jsonFactory_Feature0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeBoolean(true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.useDefaultPrettyPrinter();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      tokenBuffer1.writeObject(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      Integer integer0 = new Integer(16);
      Float float0 = new Float(1316.58F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.writeObject(bigInteger0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      tokenBuffer_Segment0.appendRaw(483, (-1058), (Object) jsonFactory_Feature0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer0.writeNumber((-124.793304F));
      tokenBuffer0._appendRaw(16, (Object) null);
      tokenBuffer_Parser1.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.setFeatureMask((-1617));
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._last;
      tokenBuffer_Segment0.next();
      Integer integer0 = new Integer((-3301));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenBuffer tokenBuffer2 = null;
      try {
        tokenBuffer2 = new TokenBuffer((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      tokenBuffer_Parser0.getEmbeddedObject();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.next();
      tokenBuffer_Segment0._tokenTypes = (long) 16;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer_Segment0.rawType(10);
      tokenBuffer1.isClosed();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      Integer integer0 = new Integer(538);
      Float float0 = new Float(1788.6798F);
      tokenBuffer0.writeStartArray(538);
      tokenBuffer1.writeObject(float0);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      Integer integer0 = new Integer(538);
      Float float0 = new Float(1788.6798F);
      tokenBuffer0.writeStartArray(538);
      tokenBuffer1.writeObject(float0);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((float) 16);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      jsonGeneratorDelegate0.writeNumberField("$)Eq5z", 3020.563F);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Double double0 = new Double((-706.50343148));
      tokenBuffer0._append(jsonToken0, double0);
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(" ... (truncated ", 15, 603);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(4083);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      Integer integer0 = new Integer(2437);
      Float float0 = new Float((float) 2437);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer1.writeObject(bigInteger0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer1.configure(jsonGenerator_Feature0, true);
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      Float float0 = new Float((float) 16);
      tokenBuffer0.writeObject(tokenBuffer_Segment1);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.append(tokenBuffer0);
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((float) 16);
      tokenBuffer0._appendRaw(16, jsonToken0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._last;
      tokenBuffer_Segment0.next();
      Integer integer0 = new Integer((-3301));
      Float float0 = new Float(164.855F);
      tokenBuffer1.writeObject(float0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer0.writeRawValue("Called operation not supported for TokenBuffer");
      tokenBuffer1.configure(jsonGenerator_Feature0, false);
      tokenBuffer0.serialize(tokenBuffer1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      tokenBuffer0.writeObjectFieldStart("[TokenBuffer: FIELD_NAME(Unrecognized value type for VALUE_NUMBER_FLOAT: ), START_OBJECT]");
      tokenBuffer0.toString();
      tokenBuffer0.writeObject("[TokenBuffer: FIELD_NAME(Unrecognized value type for VALUE_NUMBER_FLOAT: ), START_OBJECT, VALUE_NUMBER_INT, FIELD_NAME([TokenBuffer: FIELD_NAME(Unrecognized value type for VALUE_NUMBER_FLOAT: ), START_OBJECT]), START_OBJECT]");
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(" ... (truncated ", (-1088), (-1088));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.append(3, jsonToken0, (Object) "[TokenBuffer: ]", (Object) "[TokenBuffer: ]");
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      tokenBuffer0.writeTree(arrayNode0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      tokenBuffer0.writeObjectFieldStart("[TokenBuffer: FIELD_NAME(Unrecognized value type for VALUE_NUMBER_FLOAT: ), START_OBJECT]");
      tokenBuffer0.toString();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      Float float0 = new Float((float) (-2661));
      tokenBuffer0.writeObject(16);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, false);
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      System.setCurrentTimeMillis((-2209L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedReader pipedReader0 = new PipedReader(2640);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'R';
      charArray0[2] = 'D';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[3] = '[';
      charArray0[4] = '*';
      charArray0[5] = 'S';
      charArray0[6] = '.';
      charArray0[7] = '2';
      charArray0[8] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1737), pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 1387, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      Class<String> class0 = String.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      tokenBuffer0.writeString((SerializableString) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(tokenBuffer0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.writeNumberField("JSON", (float) 16);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec(objectMapper1);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer_Segment0.append(2364, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
      tokenBuffer_Segment0.append((-3072), jsonToken1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)14;
      tokenBuffer1.writeBinaryField("", byteArray0);
      tokenBuffer0.writeBoolean(true);
      tokenBuffer0.firstToken();
      System.setCurrentTimeMillis((byte)14);
      tokenBuffer0.getFeatureMask();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.isClosed();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer2.serialize(tokenBuffer1);
      tokenBuffer_Segment0.rawType(16);
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = 'l';
      charArray0[2] = '!';
      charArray0[3] = '@';
      charArray0[4] = '*';
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue(charArray0, 1310, 1217);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      try { 
        tokenBuffer_Parser0.readBinaryValue((OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      objectMapper0.configure(jsonGenerator_Feature0, true);
      Integer integer0 = new Integer(65536);
      Float float0 = new Float(1.0F);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeObject("");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer_Segment0.rawType((-342));
      tokenBuffer1.isClosed();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, (DeserializationContext) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<SerializedString> class0 = SerializedString.class;
      Class<Module> class1 = Module.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      ArrayNode arrayNode0 = objectMapper3.createArrayNode();
      tokenBuffer1.writeTree(arrayNode0);
      tokenBuffer_Parser0.getTextLength();
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.deserializerModifiers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext0);
      tokenBuffer1.writeNull();
      byte[] byteArray0 = new byte[0];
      tokenBuffer0.writeBinaryField("[objectId=", byteArray0);
      tokenBuffer1.writeBoolean(true);
      tokenBuffer0.firstToken();
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRaw(charArray0, 16, (-174));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float0 = new Float((-1097.5037F));
      Short short0 = new Short((short) (-696));
      tokenBuffer0.writeObject((Object) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(tokenBuffer_Parser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Float float0 = new Float((float) 16);
      Short short0 = new Short((short) (-299));
      tokenBuffer0.writeObject(short0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.append(tokenBuffer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Integer integer0 = new Integer((short) (-299));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      RawValue rawValue0 = new RawValue(tokenBuffer0, false);
      tokenBuffer_Segment0.append(538, jsonToken0, (Object) "[TokenBuffer: ]", (Object) rawValue0, (Object) rawValue0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      Float float0 = new Float((double) 538);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(101, 101, (Object) float0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, false, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber(0.0F);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      tokenBuffer1._appendRaw(538, "[TokenBuffer: ]");
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer0.firstToken();
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      tokenBuffer0.writeObjectFieldStart("[TokenBuffer: FIELD_NAME(Unrecognized value type for VALUE_NUMBER_FLOAT: ), START_OBJECT]");
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.peekNextToken();
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (START_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      RawValue rawValue0 = new RawValue(tokenBuffer0, false);
      tokenBuffer_Segment0.append(538, jsonToken0, (Object) "[TokenBuffer: ]", (Object) rawValue0, (Object) rawValue0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      Float float0 = new Float((double) 538);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(101, 101, (Object) float0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, false, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber(0.0F);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      tokenBuffer1._appendRaw(538, "[TokenBuffer: ]");
      tokenBuffer_Parser0.nextFieldName();
      JsonLocation jsonLocation0 = tokenBuffer_Parser1.getCurrentLocation();
      tokenBuffer_Parser1._location = jsonLocation0;
      tokenBuffer0.append(tokenBuffer1);
      tokenBuffer0.firstToken();
      try { 
        tokenBuffer_Parser1.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      tokenBuffer0.writeRawValue("", (-1088), 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeObjectFieldStart("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      tokenBuffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeNumber(538);
      tokenBuffer0.canWriteBinaryNatively();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      Integer integer0 = new Integer(538);
      Float float0 = new Float(1788.6798F);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeStartArray(538);
      tokenBuffer1.writeObject(float0);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      tokenBuffer0.writeTree(arrayNode0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)92;
      tokenBuffer0.toString();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature1);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      File file0 = MockFile.createTempFile("zr!L ziC&#j&]9>", "K", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "{{>?y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      try { 
        jsonFactory3.createGenerator((File) mockFile1, jsonEncoding0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(36, 76, (Object) bigDecimal0, (Object) bigDecimal0, (Object) jsonFactory_Feature0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature1, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer_Parser1.enable(jsonParser_Feature0);
      objectMapper1.getDeserializationContext();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.useDefaultPrettyPrinter();
      tokenBuffer1.writeObject(jsonGenerator_Feature0);
      tokenBuffer0.writeTree((TreeNode) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      Float float0 = new Float((-653.72F));
      Short short0 = new Short((short) (-2243));
      Long long0 = new Long(0L);
      tokenBuffer1.writeObject(long0);
      Float float1 = new Float((float) 0L);
      tokenBuffer0.writeObject(tokenBuffer1);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      objectMapper1.getDeserializationContext();
      TokenBuffer tokenBuffer3 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer4 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer5 = tokenBuffer2.append(tokenBuffer4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      tokenBuffer5.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      Float float0 = new Float((-653.72F));
      Short short0 = new Short((short) (-2243));
      Long long0 = new Long(0L);
      tokenBuffer1.writeObject(long0);
      Float float1 = new Float((float) 0L);
      tokenBuffer0.writeObject(tokenBuffer1);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "Missing property '%s' for external type id '%s'");
      TokenBuffer tokenBuffer3 = new TokenBuffer(tokenBuffer_Parser0, deserializationContext0);
      TokenBuffer tokenBuffer4 = tokenBuffer3.append(tokenBuffer1);
      tokenBuffer4.writeObject(jsonInclude_Include0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParserDelegate0);
      tokenBuffer1.append(tokenBuffer0);
      tokenBuffer1.firstToken();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      Float float0 = new Float((-1095.818F));
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumberField("h", 0.0F);
      tokenBuffer0.writeNumber((BigInteger) null);
      tokenBuffer0.toString();
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000490; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float0 = new Float((-1097.5037F));
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeNumber((float) (short) (-696));
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      tokenBuffer1.writeString((String) null);
      System.setCurrentTimeMillis(1644L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2364, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      tokenBuffer_Segment0._tokenTypes = (long) 16;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeObject(tokenBuffer_Segment0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer2.append(tokenBuffer0);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.peekNextToken();
      Random.setNextRandom(16);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.nextFieldName();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeEndObject();
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      tokenBuffer2.firstToken();
      BigDecimal bigDecimal0 = new BigDecimal((double) 16);
      tokenBuffer2.writeObject(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumberField((String) null, 248L);
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Float float0 = new Float((float) 16);
      Short short0 = new Short((short) (-299));
      tokenBuffer0.writeObject(short0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "\"P=c");
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0, deserializationContext0);
      TokenBuffer tokenBuffer3 = tokenBuffer2.append(tokenBuffer0);
      // Undeclared exception!
      tokenBuffer3.append(tokenBuffer2);
  }
}
