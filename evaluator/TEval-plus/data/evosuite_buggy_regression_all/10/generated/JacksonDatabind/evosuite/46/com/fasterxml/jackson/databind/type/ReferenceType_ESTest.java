/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:31:49 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) "XxD[#05eTP':$?\"", object0);
      ReferenceType referenceType1 = new ReferenceType(class0, simpleType0, (Object) null, referenceType0, false);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = typeFactory0.constructMapType(class1, javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) class1);
      StringBuilder stringBuilder0 = new StringBuilder(937);
      referenceType0.getGenericSignature(stringBuilder0);
      assertEquals("Ljava/lang/String<Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, object0, true);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      String string0 = referenceType0.getTypeName();
      assertEquals("[reference type, class java.lang.Object<java.lang.Object<long,long><[map type; class java.lang.Object, [simple type, class long] -> [simple type, class long]]>]", string0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) class0, (Object) javaType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      referenceType0.getErasedSignature(stringBuilder0);
      assertEquals("Ljava/lang/Integer;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<String> class1 = String.class;
      Integer integer0 = new Integer(2186);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class1, (Object) integer0);
      referenceType0.getParameterSource();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<String> class1 = String.class;
      Integer integer0 = new Integer(2186);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class1, (Object) integer0);
      JavaType javaType0 = referenceType0._narrow(class2);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      int int0 = referenceType0.containedTypeCount();
      assertFalse(referenceType0.useStaticType());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<String> class1 = String.class;
      Integer integer0 = new Integer(2186);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class1, (Object) integer0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(class1);
      assertFalse(referenceType1.useStaticType());
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, object0, true);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(object0);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<String> class1 = String.class;
      Integer integer0 = new Integer(2186);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class1, (Object) integer0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(".WZ8Dj9?5:uV~090m");
      assertFalse(referenceType1.useStaticType());
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<String> class1 = String.class;
      Integer integer0 = new Integer(2186);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class1, (Object) integer0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(class2);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, (Object) null, class0, true);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, object0, true);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(object0);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, class0, true);
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, (JavaType) referenceType0, (Object) class0, (Object) null);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, object0, true);
      JavaType javaType0 = referenceType0.containedType(3313);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) "");
      JavaType javaType0 = referenceType0.containedTypeOrUnknown(0);
      assertTrue(javaType0.isFinal());
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      String string0 = referenceType0.containedTypeName(1);
      assertFalse(referenceType0.useStaticType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<String> class1 = String.class;
      Integer integer0 = new Integer(2186);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class1, (Object) integer0);
      String string0 = referenceType0.containedTypeName(0);
      assertFalse(referenceType0.useStaticType());
      assertEquals("T", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<String> class1 = String.class;
      Integer integer0 = new Integer(2186);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class1, (Object) integer0);
      boolean boolean0 = referenceType0.equals(class0);
      assertFalse(referenceType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, object0, true);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Integer integer0 = new Integer(62);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) integer0, (Object) "XxD[#05eTP':$?\"");
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      Class<Integer> class1 = Integer.class;
      ReferenceType referenceType1 = new ReferenceType(class1, referenceType0, mapType0, class0, true);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }
}
