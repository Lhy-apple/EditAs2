/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:42:13 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.annotation.Annotation;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExternalTypeHandler_ESTest extends ExternalTypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "UZ[~6~7d/R`MH*~dXNV", false, javaType0);
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 82, propertyName0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "", annotationCollector_OneAnnotation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder((JavaType) null);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build((BeanPropertyMap) null);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler0.start();
      assertNotSame(externalTypeHandler0, externalTypeHandler1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = ExternalTypeHandler.builder((JavaType) null);
      assertNotNull(externalTypeHandler_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "UZ6[~6~7d/R`MH*~dXNV", true, javaType0);
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 73, propertyName0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 73, 73);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = classNameIdResolver0.getMechanism();
      // Undeclared exception!
      try { 
        externalTypeHandler0.handleTypePropertyValue(jsonParser0, deserializationContext0, "UZ6[~6~7d/R`MH*~dXNV", jsonTypeInfo_Id0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build((BeanPropertyMap) null);
      boolean boolean0 = externalTypeHandler0.handleTypePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, (String) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "UZ6[~6~7d/R`MH*~dXNV", true, javaType0);
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 73, propertyName0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 73, 73);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = classNameIdResolver0.getMechanism();
      // Undeclared exception!
      try { 
        externalTypeHandler0.handleTypePropertyValue(jsonParser0, deserializationContext0, "UZ6[~6~7d/R`MH*~dXNV", jsonTypeInfo_Id0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build((BeanPropertyMap) null);
      boolean boolean0 = externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "k!&B5YeYs( n|_yE_Z.", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "UZ[~6~7d/R`MH*~dXNV", false, javaType0);
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 82, propertyName0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "", annotationCollector_OneAnnotation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "UZ[~6~7d/R`MH*~dXNV", true, javaType0);
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 73, propertyName0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "UZ[~6~7d/R`MH*~dXNV", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "UZ[~6~7d/R`MH*~dXNV", false, javaType0);
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 82, propertyName0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "UZ[~6~7d/R`MH*~dXNV", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "v42", true, javaType0);
      Class<PropertyName> class0 = PropertyName.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 62, javaType0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
      Object object0 = externalTypeHandler1.complete((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "v42", true, javaType0);
      Class<PropertyName> class0 = PropertyName.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 62, javaType0, (PropertyMetadata) null);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asWrapperTypeDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0, hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
      // Undeclared exception!
      try { 
        externalTypeHandler1.complete((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0, (PropertyValueBuffer) null, (PropertyBasedCreator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder(javaType0);
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "", false, javaType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, externalTypeHandler_Builder0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      assertFalse(creatorProperty0.hasValueDeserializer());
  }
}
