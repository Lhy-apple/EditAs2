/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:40:46 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class0, (TypeBindings) null, referenceType0, javaTypeArray0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class java.lang.Object<$1<$1>]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      referenceType0.getErasedSignature(stringBuilder0);
      assertEquals("Ljava/lang/Class;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0._narrow(class0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.hasContentType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-181));
      // Undeclared exception!
      try { 
        ReferenceType.construct((Class<?>) class0, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      referenceType0.getGenericSignature(stringBuilder0);
      assertEquals("Ljava/lang/Class<Ljava/lang/Class;>;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = new MapLikeType(placeholderForType0, referenceType0, referenceType0);
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) mapLikeType0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(boolean0);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      JavaType javaType0 = referenceType0.getAnchorType();
      assertSame(javaType0, referenceType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      JavaType javaType0 = referenceType0.getContentType();
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      MapType mapType0 = new MapType(simpleType0, collectionType0, collectionType0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(mapType0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      MapType mapType0 = new MapType(placeholderForType0, placeholderForType0, placeholderForType0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, mapType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(referenceType0);
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(simpleType0);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = new MapLikeType(placeholderForType0, referenceType0, referenceType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withTypeHandler(mapLikeType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      SimpleType simpleType0 = new SimpleType(class0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      ReferenceType referenceType0 = new ReferenceType(simpleType0, (JavaType) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler((Object) null);
      assertTrue(referenceType2.isAnchorType());
      assertFalse(referenceType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = new MapLikeType(placeholderForType0, referenceType0, referenceType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler((Object) null);
      assertTrue(mapLikeType1.isConcrete());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(referenceType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertTrue(referenceType1.isConcrete());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      MapType mapType1 = mapType0.withStaticTyping();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(mapType0);
      boolean boolean0 = referenceType1.isAnchorType();
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      boolean boolean0 = referenceType0.isAnchorType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      boolean boolean0 = referenceType0.equals(collectionLikeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = new MapLikeType(placeholderForType0, referenceType0, referenceType0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, mapLikeType0);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertFalse(boolean0);
  }
}
