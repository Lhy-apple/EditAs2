/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:34:41 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      boolean boolean0 = resolvedRecursiveType0.hasContentType();
      assertTrue(boolean0);
      assertFalse(resolvedRecursiveType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      arrayType0.getKeyType();
      assertFalse(arrayType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      Class<JsonTypeInfo.As> class1 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      boolean boolean0 = referenceType0.useStaticType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      collectionType0.isFinal();
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      JavaType javaType0 = typeFactory0.constructSimpleType(class0, (JavaType[]) null);
      Object object0 = javaType0.getContentTypeHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      referenceType0.getContentValueHandler();
      assertFalse(referenceType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getGenericSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getErasedSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<?> class1 = mapType0.getParameterSource();
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType javaType0 = mapType0.forcedNarrowBy(class0);
      assertSame(javaType0, mapType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withTypeHandler(mapType0);
      Class<ClassNameIdResolver> class2 = ClassNameIdResolver.class;
      JavaType javaType0 = collectionType1.forcedNarrowBy(class2);
      assertFalse(javaType0.equals((Object)collectionType0));
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.isTypeOrSubTypeOf(class0);
      assertFalse(simpleType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = mapType0.isTypeOrSubTypeOf(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = mapType0.isTypeOrSubTypeOf(class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.isJavaLangObject();
      assertFalse(boolean0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.isJavaLangObject();
      assertTrue(boolean0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.hasGenericTypes();
      assertFalse(boolean0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.hasGenericTypes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType javaType0 = mapType0.containedTypeOrUnknown(1);
      assertFalse(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType javaType0 = mapType0.containedTypeOrUnknown(2);
      assertEquals(0, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      boolean boolean0 = mapLikeType0.hasValueHandler();
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(boolean0);
      assertTrue(mapLikeType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withValueHandler(mapType0);
      boolean boolean0 = mapLikeType0.hasValueHandler();
      assertTrue(boolean0);
      assertFalse(mapLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler("eQ`<~m5Df_qrcN");
      Class<Throwable> class1 = Throwable.class;
      MapLikeType mapLikeType1 = typeFactory0.constructMapLikeType((Class<?>) class1, (JavaType) mapLikeType0, (JavaType) mapLikeType0);
      mapLikeType1.isMapLikeType();
      assertTrue(mapLikeType1.hasHandlers());
      
      Class<Object> class2 = Object.class;
      JavaType javaType0 = mapType0.forcedNarrowBy(class2);
      assertTrue(javaType0.isJavaLangObject());
      
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      CollectionType collectionType1 = collectionType0.withTypeHandler(mapType0);
      typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) collectionType1, (JavaType) collectionType0);
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.hasHandlers());
      assertNotSame(mapType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Object object0 = new Object();
      CollectionType collectionType1 = collectionType0.withContentValueHandler(object0);
      boolean boolean0 = collectionType1.hasHandlers();
      assertFalse(collectionType1.useStaticType());
      assertTrue(boolean0);
      assertFalse(collectionType0.hasHandlers());
  }
}
