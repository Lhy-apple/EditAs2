/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 14:43:04 GMT 2023
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withEra(0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Interval interval0 = localDate0.toInterval();
      assertEquals(1392451200000L, interval0.getEndMillis());
      assertEquals(1392364800000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withDayOfYear(90);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withMonthOfYear(3124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3124 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Date date0 = localDate0.toDate();
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Days days0 = Days.daysBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      localDate0.minus(days0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toDateMidnight();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withCenturyOfEra((-255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -255 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toDateTimeAtMidnight();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear((-2234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2234 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getCenturyOfEra();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withDayOfMonth((-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -27 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.withYear((-1321));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.getYearOfCentury();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.yearOfEra();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.getDayOfYear();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withYearOfCentury((-355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -355 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.monthOfYear();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(612L, (DateTimeZone) fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = new LocalDate(localDate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.getWeekyear();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.year();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      localDate_Property0.getChronology();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getYearOfEra();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalTime localTime0 = new LocalTime((-2045L));
      localDate0.toDateTime(localTime0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -880 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.getWeekOfWeekyear();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toDateTimeAtStartOfDay();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.getEra();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Seconds seconds0 = Seconds.ONE;
      localDate0.plus(seconds0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withWeekyear((-1));
      localDate1.toDate();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(copticChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.CopticChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      localDate_Property0.withMaximumValue();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate_Property0.roundHalfCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      LocalDate localDate0 = monthDay0.toLocalDate(2);
      LocalDate.Property localDate_Property0 = localDate0.era();
      localDate_Property0.addWrapFieldToCopy(2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-376L), (Chronology) buddhistChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("q^x6%2pSi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"q^x6%2pSi\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2018L);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      localDate_Property0.roundHalfFloorCopy();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2018L);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      localDate_Property0.getLocalDate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, (Chronology) copticChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      localDate_Property0.roundFloorCopy();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      localDate_Property0.roundHalfEvenCopy();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockDate mockDate0 = new MockDate(47, 47, 47, 47, 47);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      localDate_Property0.roundCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2018L);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      localDate_Property0.withMinimumValue();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1587), (-783), 47);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      localDate_Property0.addToCopy((-2769));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate.fromCalendarFields(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.getFieldType(623);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 623
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.getValue(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 7
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.isSupported((DateTimeFieldType) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.isSupported((DurationFieldType) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.equals(localDate0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      localDate0.equals(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      localDate0.toDate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2018L);
      localDate0.hashCode();
      localDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.isEqual(localDate0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      MonthDay monthDay0 = new MonthDay(localDate0);
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) monthDay0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.plusYears(3177);
      localDate0.isEqual(localDate1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalTime localTime0 = new LocalTime();
      localDate0.toLocalDateTime(localTime0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1310601600000L, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTime((LocalTime) null, (DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      localDate0.withFields(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.withFields((ReadablePartial) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, (-1036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1036 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withField((DateTimeFieldType) null, (-516));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 1582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      localDate0.withFieldAdded(durationFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, 354);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      localDate0.withFieldAdded(durationFieldType0, 5);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.plus((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      Minutes minutes0 = Minutes.minutesIn(mutableInterval0);
      localDate0.withPeriodAdded(minutes0, 0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.plusYears(0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.plusMonths(2147483646);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.plusMonths(0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, (Chronology) copticChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      localDate0.plusWeeks(1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.plusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.plusDays(0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      localDate0.minusYears(1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.minusYears(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, (Chronology) copticChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      localDate0.minusMonths(1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(2018L);
      localDate0.minusMonths(0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.minusWeeks((-3889));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.minusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.minusDays((-46));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      localDate0.property(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toString((String) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      try { 
        localDate0.toString("", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Locale locale0 = Locale.ENGLISH;
      localDate0.toString((String) null, locale0);
  }
}
