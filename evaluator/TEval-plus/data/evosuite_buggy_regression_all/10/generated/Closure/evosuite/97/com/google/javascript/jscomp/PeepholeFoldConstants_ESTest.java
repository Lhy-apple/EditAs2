/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:47:16 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node((-2213), (-2213), (-2213));
      Node node1 = new Node(29, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node((-2234));
      Node node1 = new Node(32, node0, node0, node0, 12, 3);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(12, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(34, (-1), 2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = new Node(36, node0, node0, node0, 45, 34);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(37, "}3Z", 27, 47);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node((-2138), (-2138), (-2138));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(16, node1, node1, node0, 10, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node((-2213), (-2213), (-2213));
      Node node1 = new Node(11);
      Node node2 = new Node(9, node1, node0, node0, 45, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(10, node1, node0, node0, 45, 3);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(3, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 10);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(11, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((double) 3);
      Node node2 = new Node(14, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(14, node3.getType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(15, node0, node1, node1, 4, 81);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(17, node1, node1, node0, (-1), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(17, node3.getType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(19, node1, node0, node0, 2, 11);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      Node node1 = Node.newNumber((double) 2);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node1);
      Node node3 = new Node(20, node2, node1, node0, 2, 21);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node((-2202));
      Node node1 = Node.newNumber((-377.901));
      Node node2 = new Node(21, node1, node1, node0, 28, 59);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(24, node1, node1, node0, 47, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = new Node(0);
      Node node2 = new Node(25, node0, node0, node1, 0, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(28, node1, node0, node0, 45, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(30, node1, node0, node0, 26, 7);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(31, node0, node0, node1, 42, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(42, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node((-2232), (-2232), (-2232));
      Node node1 = new Node(11);
      Node node2 = new Node(33, node1, node0, node0, 45, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node((-2232));
      Node node1 = Node.newNumber((double) (-1));
      Node node2 = new Node(34, node0, node0, node1, 103, 10);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(34, node3.getType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node((-2213));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(35, node1, node1, node0, node0, 32, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(36, node1, node0, node0, 45, 34);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(45, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      Node node1 = Node.newNumber((double) 26);
      Node node2 = new Node(38, node1, node1, node0, 35, 2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("A=-#s2$ (a");
      Node node1 = new Node(0);
      Node node2 = new Node(39, node0, node1, node1, 1, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(40, node1, node1, node0, (-1), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(41, node0, node1, 37, (-2));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node((-17), (-17), (-17));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(42, node0, node1, node1, 29, 24);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(43, node0, node1, node0, node1, 43, 43);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(43, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("A=-#s2$ (a");
      Node node1 = new Node(46);
      Node node2 = new Node(44, node1, node1, node0, 35, 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node((-2213), (-2213), (-2213));
      Node node1 = new Node(11);
      Node node2 = new Node(46, node0, node1, node1, 24, 41);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node((-2232));
      Node node1 = Node.newNumber((double) (-1));
      Node node2 = new Node(47, node0, node0, node1, 103, 10);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("JSC_BITWISE_OPERAND_OUT_OF_RANGE", (-2217), (-2217));
      Node node1 = Node.newNumber((double) 50);
      Node node2 = new Node(48, node0, node0, node1, 24, 9);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node((-2235));
      Node node1 = Node.newNumber((double) 34);
      Node node2 = new Node(49, node1, node1, node0, 3269, 24);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node((-2224));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(50, node1, node0, node0, 45, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(50, node3.getType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(";  ");
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(51, node0, node1, node1, 1, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(52, node1, node1, node0, 2, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString((-900), "}3Z");
      Node node1 = Node.newString(37, "}3Z", 27, 47);
      Node node2 = new Node(53, node0, node0, node1, (-900), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("b>Vs%<{Oyyy4Pi");
      Node node1 = Node.newNumber((double) 11);
      Node node2 = new Node(54, node0, node0, node1, (-866), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node((-2138), (-2138), (-2138));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(57, node1, node0, node0, 2702, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(57, node3.getType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = new Node(40, 0, 46);
      Node node2 = new Node(58, node0, node0, node1, 4, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node((-2232), (-2232), (-2232));
      Node node1 = Node.newNumber((double) (-1));
      Node node2 = new Node(60, node0, node0, node1, 80, 10);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(80, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(69, 69, 69);
      Node node1 = Node.newNumber((double) 26);
      Node node2 = new Node(61, node1, node1, node0, 35, 2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("l:!kU0,E~V");
      Node node1 = Node.newNumber((double) 11);
      Node node2 = new Node(62, node0, node0, node1, (-2224), 16);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("b9ji*?&%v Bu%RV-cg");
      Node node1 = Node.newNumber((double) (-3));
      Node node2 = new Node(63, node1, node0, node0, 39, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(39, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node((-2234));
      Node node1 = new Node((-836), 41, (-1110));
      Node node2 = new Node(64, node1, node1, node0, 4095, 67);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(65, node1, node0, node0, 95, (-1));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(69, 69, 69);
      Node node1 = Node.newNumber((double) 26);
      Node node2 = new Node(66, node1, node1, node0, 35, 2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = Node.newNumber((double) 25);
      Node node2 = new Node(67, node1, node1, node0, 2, (-1495));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(67, node3.getType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString((-866), "}3Z");
      Node node1 = Node.newString(37, "}3Z", 27, 47);
      Node node2 = new Node(68, node0, node0, node1, (-866), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(69, node1, node1, node0, (-1), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(";  ");
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(70, node0, node1, node1, 1, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(70, node3.getType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(502, 502, 502);
      Node node1 = Node.newNumber(351.32);
      Node node2 = new Node(71, node0, node0, node1, 2051, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("boolean", 86, 86);
      Node node1 = Node.newNumber((double) 0);
      Node node2 = new Node(72, node1, node1, node0, 33, 6);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(72, node3.getType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString("l:!kU0,E~V");
      Node node1 = Node.newNumber((double) 11);
      Node node2 = new Node(73, node0, node0, node1, (-2224), (-1091));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      Node node1 = Node.newNumber((double) 26);
      Node node2 = new Node(74, node1, node1, node0, 35, 2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString((-866), "}3Z");
      Node node1 = Node.newString(51, "}3Z");
      Node node2 = new Node(75, node0, node0, node1, (-866), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2009);
      Node node1 = Node.newNumber((double) 17);
      Node node2 = new Node(76, node0, node1, node1, 18, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = Node.newNumber((double) (-1));
      Node node2 = new Node(77, node0, node0, node1, 87, 10);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(78, node1, node1, node0, 31, (-4956));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(78, node3.getType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node((-2208), (-2208), (-2208));
      Node node1 = new Node(38, 1, 98);
      Node node2 = new Node(79, node0, node0, node1, 29, 33);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = new Node(38, 1, 98);
      Node node2 = new Node(80, node0, node0, node1, 29, 33);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(33, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(81, node1, node0, node0, 2, (-1));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(82, node1, node0, node0, 45, 15);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node((-2146), (-2146), (-2146));
      Node node1 = Node.newNumber((double) 49);
      Node node2 = new Node(83, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(84, 84, 84);
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(84, node1, node1, node0, 2, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(86, node1, node1, node0, (-1), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("}3Z");
      Node node1 = Node.newString(37, "}3Z", 27, 47);
      Node node2 = new Node(87, node0, node0, node1, 32, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(78, 78, 78);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(88, node0, node1, node1, 37, 51);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(89, node1, node1, node0, (-1), 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("b9ji*?&%v Bu%RV-cg");
      Node node1 = Node.newString("b9ji*?&%v Bu%RV-cg");
      Node node2 = new Node(90, node0, node1, node1, node1, 1, 28);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("~}V4u@lWfg7VnSTP");
      Node node1 = new Node(19);
      Node node2 = new Node(91, node1, node0, node0, 51, 25);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node((-2210));
      Node node1 = Node.newNumber((double) (-1));
      Node node2 = new Node(92, node0, node0, node1, 103, 10);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("b9ji*?&%v Bu%RV-cg");
      Node node1 = Node.newString(2, "b9ji*?&%v Bu%RV-cg");
      Node node2 = new Node(93, node1, node1, node0, node0, 29, 30);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString(78, "boolean");
      Node node1 = Node.newNumber((double) 0);
      Node node2 = new Node(94, node1, node1, node0, 32, 6);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("JSC_BITWISE_OPERAND_OUT_OF_RANGE", (-2224), 54);
      Node node1 = Node.newNumber((double) 20);
      Node node2 = new Node(95, node0, node0, node1, 37, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(469, 469, 469);
      Node node1 = Node.newNumber(351.32);
      Node node2 = new Node(96, node0, node0, node1, 2051, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node((-2213), (-2213), (-2213));
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(97, node1, node1, node0, 96, 15);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(";  ");
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(98, node0, node1, node1, 1, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node((-2215));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = new Node(99, node1, node0, node0, 45, (-1106));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(99, node3.getType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node((-2146), (-2146), (-2146));
      Node node1 = Node.newNumber((double) 49);
      Node node2 = new Node(101, node0, node0, node1, 24, 42);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("z#GebO");
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(4, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(32, "");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(32, node0, node0, node0, 22, 17);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2224));
      Node node1 = new Node(32, node0, node0, node0, 12, 3);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(65, "booclean", 65, 65);
      Node node1 = new Node(26, node0, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node((-1437), node1, node1, 47, (-2323));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(26, node3.getType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber((double) 69);
      Node node1 = Node.newNumber((double) 21);
      Node node2 = new Node(27, node1, 64, 1);
      Node node3 = new Node(48, node0, node0, node2, 0, 825);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(52, node1, node1, node0, 2, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(101, node1, node1, node0, 2, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(78, 78, 78);
      Node node1 = Node.newNumber((double) 24);
      Node node2 = new Node(21, node0, node1, node1, 45, 22);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("K", (-3799), (-3799));
      Node node1 = Node.newNumber((double) 26);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(21, node0, node0, node1, 12, 1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber((double) 30);
      Node node1 = Node.newNumber((-377.901));
      Node node2 = new Node(21, node1, node1, node0, 28, 59);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("K", (-3799), (-3799));
      Node node1 = Node.newNumber((double) 26);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(21, node1, node0, 15, 51);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node((-2217));
      Node node1 = new Node(23, 50, 1);
      Node node2 = new Node(22, node1, node0, node0, node0, 33, 29);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node((-55), (-55), (-55));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber((double) 48);
      Node node3 = new Node(23, node1, node2, node0, 2753, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      Node node1 = Node.newNumber((double) 4);
      Node node2 = new Node(22, node1, node1, node1, node0, 35, 20);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber((-0.05781299788935037));
      Node node3 = new Node(9, node1, node2, node0, 2688, 57);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertTrue(node4.hasChildren());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node((-2222));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(9, node1, node2, node0, 2688, 57);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node((-2213), (-2213), (-2213));
      Node node1 = new Node(11);
      Node node2 = new Node(18, node1, node0, node0, 45, 4);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node((-2149), (-2149), (-2149));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber((double) 48);
      Node node3 = new Node(18, node1, node2, node0, 10, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("object");
      Node node1 = Node.newString("object");
      Node node2 = new Node(45, node0, node0, node1, 29, 14);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("b9ji*?&%v Bu%RV-cg");
      Node node1 = Node.newString(43, "");
      Node node2 = new Node(14, node1, node0, node0, 44, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((-2861.606625859634));
      Node node2 = new Node(14, node0, node1, node1, (-2), 32);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(14, node3.getType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(";  ", 1445, 1445);
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(46, node0, node1, node1, 1, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(14, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("b9ji*?&%v Bu%RV-cg");
      Node node1 = Node.newString("b9ji*?&%v Bu%RV-cg");
      Node node2 = new Node(13, node0, node0, node0, node1, 29, 30);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("A=-#s2$ (a");
      Node node1 = Node.newString("A=-#s2$ (a");
      Node node2 = new Node(14, node1, node1, node0, 35, 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node((-3237));
      Node node1 = Node.newNumber((double) 13);
      Node node2 = Node.newNumber((double) 34);
      Node node3 = new Node(12, node1, node2, node0, (-2812), 45);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node((-2138), (-2138), (-2138));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber((double) 48);
      Node node3 = new Node(16, node1, node2, node0, 10, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node((-2217), (-2217), (-2217));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber((double) 3);
      Node node3 = new Node(14, node2, node2, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber((double) 4);
      Node node3 = new Node(45, node1, node2, node0, (-2), 13);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node((-2198));
      Node node1 = Node.newNumber((double) 10);
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(16, node1, node2, node0, 2702, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("z#GebO");
      Node node1 = new Node(37, node0, node0, (-1), 41);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("z#GebO");
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(37, node1, node0, (-1), 41);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("l:!kU0,E~V", (-3347), 162);
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(33, node1, node0, node0, 12, 40);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, node3.getLineno());
  }
}
