/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:33:38 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "8[2EAkB");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module.exports", "module.exports");
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "d/");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "./", "./");
      node0.setSourceFileForTesting("d/");
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isComma());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./,w-JN#", "./,w-JN#");
      assertEquals("module$,w_JN#", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../", "../");
      assertEquals("module$..$..$", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("6Z&il$b>vFvNcprW", "6Z&il$b>vFvNcprW");
      assertEquals("module$6Z&il$b>vFvNcprW", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "phlJ \"hH");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "./", "T}0z[$2idS0\"Eh");
      Node node1 = new Node(37, node0, node0, node0, node0);
      processCommonJSModules0.process(node1, node1);
      assertFalse(node1.isTry());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "../|99");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "../|99", "./");
      Node node1 = compiler0.parseSyntheticCode("../|99");
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT):  [synthetic:1] :-1:-1
         // [source unknown]
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "5", "5");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "5", false);
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "Ra$");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "exports", "Ra$");
      processCommonJSModules0.process(node0, node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ">@V!~Ivd");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ">@V!~Ivd", "./");
      processCommonJSModules0.process(node0, node0);
      node0.setSourceFileForTesting("./");
      processCommonJSModules0.process(node0, node0);
      assertEquals(1, compiler0.getErrorCount());
  }
}
