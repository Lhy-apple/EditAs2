/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:52:37 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExploitAssigns_ESTest extends ExploitAssigns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("t=R");
      Node node1 = Node.newString(118, "t=R", 0, 0);
      node1.addChildrenToFront(node0);
      node0.addChildToBack(node1);
      // Undeclared exception!
      try { 
        exploitAssigns0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("t=R");
      Node node1 = new Node(4, node0, node0, node0);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isGetElem());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("t=R");
      Node node1 = new Node(33, node0, node0, 86, 37);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("t=R", "t=R");
      Node node1 = Node.newString(98, "t=R", 56, 36);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(0, node2.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("t=R");
      Node node1 = Node.newString(101, "t=R", 2, 50);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isExprResult());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("t=R");
      Node node1 = Node.newString(108, "t=R", 32, 36);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("t=R");
      Node node1 = Node.newString(86, "t=R", 42, 86);
      node1.addChildrenToFront(node0);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isFor());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("t=R");
      Node node1 = Node.newNumber((double) 12);
      node0.addChildToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isOnlyModifiesArgumentsCall());
  }
}
