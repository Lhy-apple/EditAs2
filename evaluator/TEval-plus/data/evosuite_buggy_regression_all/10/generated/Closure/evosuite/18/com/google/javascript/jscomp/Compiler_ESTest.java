/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:32:20 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AliasStrings;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FieldCleanupPass;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.protobuf.ByteString;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder0, 11, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSModule[] jSModuleArray0 = new JSModule[0];
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.resetUniqueNameId();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("Remove try/catch/finally");
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      compiler0.parseInputs();
      compiler0.optimize();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Level level0 = Level.FINE;
      Compiler.setLoggingLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.disableThreads();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.precheck();
      assertTrue(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Compiler.getReleaseDate();
      assertEquals("2023/07/12 05:30", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("}");
      compiler0.check();
      assertEquals(0.2, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getPropertyMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Compiler.getReleaseVersion();
      assertEquals("Unversioned directory", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode(";", ";");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(node0.hasOneChild());
      assertEquals(";", node0.getSourceFileName());
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer((-59));
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(callable0).call();
      Integer integer1 = Compiler.runCallableWithLargeStack(callable0);
      assertEquals((-59), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getVariableMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.getFunctionalInformationMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VarCheck varCheck0 = null;
      try {
        varCheck0 = new VarCheck(compiler0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
         verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getModuleGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MockFile mockFile0 = new MockFile("}8^");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
      assertTrue(sourceFile0.isExtern());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.isTypeCheckingEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getInputsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setHasRegExpGlobalReferences(true);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ErrorManager errorManager0 = compiler0.getErrorManager();
      assertNotNull(errorManager0);
      
      Compiler compiler1 = new Compiler(errorManager0);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      // Undeclared exception!
      try { 
        compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getExternsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.getTopScope();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = compiler_CodeBuilder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      assertEquals("", compiler_CodeBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseTestCode("LING");
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(1, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];
      DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticGroupArray0);
      DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      CompilerOptions compilerOptions0 = new CompilerOptions();
      JSModule[] jSModuleArray0 = new JSModule[2];
      JSModule jSModule0 = new JSModule("");
      jSModuleArray0[0] = jSModule0;
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.CodingConvention$Bin");
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      arrayList0.add((SourceFile) jSSourceFile0);
      arrayList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compilerOptions0.checkTypes);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.CodingConvention$Bind");
      jSSourceFileArray0[0] = jSSourceFile0;
      JSModule[] jSModuleArray0 = new JSModule[0];
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.replaceScript(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Callable<FieldCleanupPass> callable0 = (Callable<FieldCleanupPass>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      FieldCleanupPass fieldCleanupPass0 = Compiler.runCallable(callable0, false, false);
      assertNull(fieldCleanupPass0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Callable<FieldCleanupPass> callable0 = (Callable<FieldCleanupPass>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      FieldCleanupPass fieldCleanupPass0 = Compiler.runCallable(callable0, false, true);
      assertNull(fieldCleanupPass0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("com.google.javascript.rhino.head.ast.NumberLiteral");
      // Undeclared exception!
      try { 
        compiler0.toSource((JSModule) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PassConfig passConfig0 = compiler0.createPassConfigInternal();
      compiler0.setPassConfig(passConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PassConfig passConfig0 = compiler0.getPassConfig();
      // Undeclared exception!
      try { 
        compiler0.setPassConfig(passConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.optimize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // One-time passes cannot be run multiple times: garbageCollectChecks
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        compiler0.stripCode(compilerOptions0.stripNameSuffixes, compilerOptions0.aliasableStrings, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypePrefixes);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      compiler0.startPass("egn");
      // Undeclared exception!
      try { 
        compiler0.startPass((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.reportCodeChange();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("@&#J@Fwv@X");
      compiler0.areNodesEqualForInlining(node0, node0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.CodingConvention$Bind");
      jSSourceFileArray0[0] = jSSourceFile0;
      JSModule[] jSModuleArray0 = new JSModule[0];
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      InputId inputId0 = jsAst0.getInputId();
      // Undeclared exception!
      try { 
        compiler0.removeExternInput(inputId0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("q[?3");
      SourceFile sourceFile0 = SourceFile.fromFile("}8^");
      JsAst jsAst0 = new JsAst(sourceFile0);
      InputId inputId0 = jsAst0.getInputId();
      compiler0.removeExternInput(inputId0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(".;n");
      // Undeclared exception!
      try { 
        compiler0.getSynthesizedExternsInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromFile("}8^");
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      arrayList0.add(sourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addIncrementalSourceAst(jsAst0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Duplicate input }8^
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("@$&#J@Fwv@X");
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.jsdoc.externs");
      SourceFile sourceFile0 = syntheticAst0.getSourceFile();
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addNewScript(jsAst0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.CodingConvention$Bind", "com.google.javascript.jscomp.CodingConvention$Bind");
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addNewSourceAst(jsAst0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Input already exists: com.google.javascript.jscomp.CodingConvention$Bind
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("com.google.javascript.jscomp.DefaultPassConfig$49");
      SourceFile sourceFile0 = SourceFile.fromFile("com.google.javascript.jscomp.DefaultPassConfig$49");
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addNewScript(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.makeTypeCheck(compiler0);
      defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.CodingConvention$Bin");
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      arrayList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.parseInputs();
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      compiler0.processAMDAndCommonJSModules();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      Stack<JSModule> stack1 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) stack1, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("com.google.javascript.rhino.head.ast.NumberLiteral");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: modifies
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("JSC_DUPLICATE_INPUT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("JSC_DUPLICATE_INPUT");
      boolean boolean0 = compiler_CodeBuilder1.endsWith(":yGI{Xf|s`w9.;(%[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("toSource");
      boolean boolean0 = compiler_CodeBuilder0.endsWith("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("Wp`\"U9YlI)X`Qi");
      boolean boolean0 = compiler0.isInliningForbidden();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(boolean0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      boolean boolean0 = compiler0.acceptEcmaScript5();
      assertFalse(boolean0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      HashSet<String> hashSet0 = new HashSet<String>();
      AliasStrings aliasStrings0 = new AliasStrings(compiler0, (JSModuleGraph) null, hashSet0, " C9N;;ta", true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, aliasStrings0, syntacticScopeCreator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      String[] stringArray0 = new String[3];
      JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, syntacticScopeCreator0.VAR_ARGUMENTS_SHADOWED_ERROR, stringArray0);
      // Undeclared exception!
      try { 
        compiler0.report(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.throwInternalError(" on recently changed AST", (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         //  on recently changed AST
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion((String) null, 48);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(":Vb!,R)O^q&e", ":Vb!,R)O^q&e");
      linkedList0.add((SourceFile) jSSourceFile0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) linkedList0, compilerOptions0);
      assertEquals(0.15, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion((String) null, (-694));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("@$&#J@Fwv@X");
      SourceFile sourceFile0 = SourceFile.fromCode("@$&#J@Fwv@X", "@$&#J@Fwv@X");
      JsAst jsAst0 = new JsAst(sourceFile0);
      compiler0.addIncrementalSourceAst(jsAst0);
      Region region0 = compiler0.getSourceRegion("@$&#J@Fwv@X", 594);
      assertNull(region0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.gokgl=javascript.jscom.CodingConvention$BFnF", "com.gokgl=javascript.jscom.CodingConvention$BFnF");
      jSSourceFileArray0[0] = jSSourceFile0;
      JSModule[] jSModuleArray0 = new JSModule[0];
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No inputs
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getAstDotGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      compiler0.getAstDotGraph();
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      compiler0.getErrorManager();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.NumberLiteral");
      HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      // Undeclared exception!
      try { 
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(".;n");
      HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      // Undeclared exception!
      try { 
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
      Node node0 = compiler0.parseInputs();
      compiler0.buildKnownSymbolTable();
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      compiler0.updateGlobalVarReferences(treeMap0, node0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(1106.0322);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setProgress((-3334.208831309));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }
}
