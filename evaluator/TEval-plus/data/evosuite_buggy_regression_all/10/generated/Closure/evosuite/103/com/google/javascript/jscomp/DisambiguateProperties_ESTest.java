/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:48:32 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.collect.Multimap;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DisambiguateProperties_ESTest extends DisambiguateProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      ConcreteType concreteType0 = ConcreteType.ALL;
      ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType0);
      assertNull(concreteType1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DisabiguateProperties$FindRenmeableProperties", "com.google.javascript.jscomp.DisabiguateProperties$FindRenmeableProperties");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      disambiguateProperties0.process(node0, node0);
      Multimap<String, Collection<ConcreteType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();
      assertNotNull(multimap0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DisambiguateProperties$FindenameableProperties", "com.google.javascript.jscomp.DisambiguateProperties$FindenameableProperties");
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      disambiguateProperties0.process(node0, node0);
      disambiguateProperties0.process(node0, node0);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DisambiguateProperties$FindRenameableProperties", "com.google.javascript.jscomp.DisambiguateProperties$FindRenameableProperties");
      Node node1 = Node.newString("com.google.javascript.jscomp.DisambiguateProperties$FindRenameableProperties");
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      disambiguateProperties0.process(node1, node0);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      Multimap<String, Collection<ConcreteType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();
      assertNotNull(multimap0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, " o{mod}le ", "TightenTypes pass appears to be stuck in an infinite loop.", 26, 16);
      JSType jSType0 = disambiguateProperties0.getTypeWithProperty("Not declared as a constructor", namedType0);
      assertSame(jSType0, namedType0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = disambiguateProperties0.getTypeWithProperty("A>&!24E=')t.Gx)1", jSType0);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = disambiguateProperties0.getTypeWithProperty("Not declared as a type name", jSType0);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      ConcreteType concreteType0 = ConcreteType.NONE;
      ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType0);
      assertNotNull(concreteType1);
  }
}
