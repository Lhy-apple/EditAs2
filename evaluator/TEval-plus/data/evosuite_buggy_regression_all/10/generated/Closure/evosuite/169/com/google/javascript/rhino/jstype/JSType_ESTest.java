/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 13:01:30 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      nullType0.getTypesUnderShallowEquality(recordType0);
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noObjectType0, noObjectType0);
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("FUNCTION_INSTANCE_TYPE", "ghliZ<l^BD9{&8nPI", 3, 0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, namedType0);
      assertFalse(functionType0.isResolved());
      
      functionType0.resolveInternal(simpleErrorReporter0, parameterizedType0);
      assertTrue(functionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isStringValueType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bS/Q");
      boolean boolean0 = errorFunctionType0.matchesStringContext();
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      jSTypeNativeArray0[6] = jSTypeNativeArray0[2];
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      jSTypeNativeArray0[8] = jSTypeNativeArray0[6];
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noObjectType0, noObjectType0);
      indexedType0.getJSDocInfo();
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, unknownType0);
      JSType.TypePair jSType_TypePair0 = parameterizedType0.getTypesUnderInequality(unknownType0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) parameterizedType0, (JSType) objectType0, jSType_TypePair0.typeA, (JSType) recordType0, jSType_TypePair0.typeB);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType_TypePair0.typeB, (List<JSType>) immutableList0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseFunctionType(functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(unknownType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      String string0 = noResolvedType0.toAnnotationString();
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      boolean boolean0 = jSType0.isNullable();
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(boolean0);
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.unboxesTo();
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, unknownType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, objectType0);
      boolean boolean0 = indexedType0.isNominalConstructor();
      assertFalse(boolean0);
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = noResolvedType0.setValidator(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      JSType.toMaybeTemplateType((JSType) recordType0);
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.matchesInt32Context();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) recordType0, "Named type with empty name component", "Unknown class name", 8, 0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node0 = new Node(1, 0, 642);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unresolvedTypeExpression0, jSType0);
      boolean boolean0 = parameterizedType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isEnumType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node0 = new Node(1, 0, 642);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unresolvedTypeExpression0, jSType0);
      // Undeclared exception!
      try { 
        unresolvedTypeExpression0.forceResolve(simpleErrorReporter0, parameterizedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.clearResolved();
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.hasDisplayName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "STRING_TYPE");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.getTypesUnderEquality(functionType0);
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      boolean boolean0 = objectType0.isStruct();
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.isGlobalThisType();
      assertFalse(boolean0);
      assertFalse(noType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      JSType.toMaybeFunctionType((JSType) unionType0);
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BooleanType[] booleanTypeArray0 = new BooleanType[3];
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) booleanTypeArray0[0]);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative0;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      boolean boolean0 = parameterizedType0.isParameterizedType();
      assertTrue(boolean0);
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) noResolvedType0);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[5];
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSTypeArray0[0]);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "J8jyZaNA#*F");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, jSType0);
      boolean boolean0 = indexedType0.isNominalConstructor();
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isFunctionType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      boolean boolean0 = errorFunctionType0.differsFrom(parameterizedType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node0 = new Node(1, 0, 642);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unresolvedTypeExpression0, jSType0);
      JSType jSType1 = JSType.getLeastSupertype((JSType) parameterizedType0, (JSType) unresolvedTypeExpression0);
      assertFalse(jSType1.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, unknownType0);
      JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) unknownType0);
      assertTrue(objectType0.hasCachedValues());
      assertFalse(unknownType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      boolean boolean0 = unknownType0.differsFrom(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = noType0.differsFrom(unknownType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      boolean boolean0 = JSType.isEquivalent(unknownType0, objectType0);
      assertTrue(objectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      boolean boolean0 = jSType0.isInvariant(functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "STRING_TYPE");
      boolean boolean0 = errorFunctionType0.isNumber();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a constructor", 0, 1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unknownType0, (JSType) unknownType0, (JSType) objectType0, (JSType) unknownType0, (JSType) namedType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) immutableList0);
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BooleanType[] booleanTypeArray0 = new BooleanType[3];
      boolean boolean0 = JSType.isEquivalent((JSType) null, booleanTypeArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(noType0, (JSType) null);
      assertFalse(boolean0);
      assertFalse(noType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      boolean boolean0 = parameterizedType0.equals(jSTypeRegistry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = parameterizedType0.equals(stringType0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNativeArray0[0];
      JSTypeNative jSTypeNative1 = JSTypeNative.OBJECT_NUMBER_STRING;
      jSTypeNativeArray0[4] = jSTypeNative1;
      jSTypeNativeArray0[5] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[6] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[7] = jSTypeNativeArray0[3];
      jSTypeNativeArray0[8] = jSTypeNativeArray0[2];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, jSType0);
      boolean boolean0 = jSType0.canAssignTo(parameterizedType0);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      jSTypeNativeArray0[0] = jSTypeNative1;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      assertFalse(functionType0.hasCachedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canAssignTo(functionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ObjectType objectType0 = jSType0.dereference();
      assertNotNull(objectType0);
      assertTrue(jSType0.isUnionType());
      assertFalse(objectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.testForEqualityHelper(allType0, allType0);
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, (JSType) null);
      parameterizedType0.getTypesUnderEquality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, unknownType0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      parameterizedType0.getTypesUnderEquality(noType0);
      assertTrue(objectType0.hasCachedValues());
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bS/Q");
      functionType0.getTypesUnderEquality(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative0;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      parameterizedType0.getTypesUnderEquality(unionType0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, unknownType0);
      JSType.TypePair jSType_TypePair0 = parameterizedType0.getTypesUnderInequality(unknownType0);
      parameterizedType0.getTypesUnderEquality(jSType_TypePair0.typeA);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.canTestForShallowEqualityWith(allType0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(0, 3864, 1);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Not declared as a constructor");
      JSType.getLeastSupertype((JSType) unresolvedTypeExpression0, (JSType) unresolvedTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[4] = jSTypeNative0;
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      jSTypeNativeArray0[6] = jSTypeNative1;
      jSTypeNativeArray0[7] = jSTypeNativeArray0[2];
      jSTypeNativeArray0[8] = jSTypeNativeArray0[2];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "String");
      enumElementType0.meet(jSType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
      parameterizedType0.getTypesUnderEquality(jSType0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.getGreatestSubtype((JSType) unknownType0, (JSType) noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) noType0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.filterNoResolvedType(noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      JSType.getLeastSupertype((JSType) parameterizedType0, (JSType) noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) stringType0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) arrayList0);
      functionType0.getRestrictedTypeGivenToBooleanOutcome(false);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(true);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) unknownType0;
      jSTypeArray0[1] = (JSType) unknownType0;
      jSTypeArray0[2] = (JSType) objectType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], (List<JSType>) immutableList0);
      functionType0.getRestrictedTypeGivenToBooleanOutcome(true);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, unknownType0);
      parameterizedType0.getTypesUnderInequality(objectType0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, unknownType0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      parameterizedType0.getTypesUnderEquality(recordType0);
  }
}
