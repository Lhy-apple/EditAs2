/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:56:18 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DefinitionProvider;
import com.google.javascript.jscomp.PureFunctionIdentifier;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PureFunctionIdentifier_ESTest extends PureFunctionIdentifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PureFunctionIdentifier pureFunctionIdentifier0 = new PureFunctionIdentifier(compiler0, (DefinitionProvider) null);
      Node node0 = Node.newString(" && ");
      pureFunctionIdentifier0.process(node0, node0);
      String string0 = pureFunctionIdentifier0.getDebugReport();
      assertEquals("Pure functions:\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PureFunctionIdentifier pureFunctionIdentifier0 = new PureFunctionIdentifier(compiler0, (DefinitionProvider) null);
      Node node0 = Node.newString("");
      pureFunctionIdentifier0.process(node0, node0);
      // Undeclared exception!
      try { 
        pureFunctionIdentifier0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // It is illegal to call PureFunctionIdentifier.process twice the same instance.  Please use a new PureFunctionIdentifier instance each time.
         //
         verifyException("com.google.javascript.jscomp.PureFunctionIdentifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("");
      Node node1 = new Node(37, node0, node0, node0, 2, 1);
      SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
      PureFunctionIdentifier pureFunctionIdentifier0 = new PureFunctionIdentifier(compiler0, simpleDefinitionFinder0);
      pureFunctionIdentifier0.process(node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("r\u0003$z_]<.}");
      Node node1 = new Node(30, node0, node0, node0, 7, 1);
      SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
      PureFunctionIdentifier pureFunctionIdentifier0 = new PureFunctionIdentifier(compiler0, simpleDefinitionFinder0);
      pureFunctionIdentifier0.process(node0, node1);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(49);
      SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
      PureFunctionIdentifier pureFunctionIdentifier0 = new PureFunctionIdentifier(compiler0, simpleDefinitionFinder0);
      pureFunctionIdentifier0.process(node0, node0);
      assertFalse(node0.isOptionalArg());
  }
}
