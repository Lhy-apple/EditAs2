/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:38:40 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("U{$-@sH HL", sourceFile_Generator0);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("60![N_4{");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("5L}", charset0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.SourceFile");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromGenerator("640!4{", (SourceFile.Generator) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("60![N_4{", "60![N_4{", (InputStream) byteArrayInputStream0);
      sourceFile0.getLine((byte) (-92));
      assertFalse(sourceFile0.isExtern());
      assertEquals("60![N_4{", sourceFile0.getName());
      assertEquals("60![N_4{", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("0!_4{", "0!_4{");
      sourceFile0.clearCachedSource();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("640!4{", "kYs,atIvH/4H");
      String string0 = sourceFile_Preloaded0.getCodeNoCache();
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("640!4{", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("kYs,atIvH/4H", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("Bp76xA%nq..a", "\n", (File) null);
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      sourceFile_OnDisk0.getName();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("60![N_4{");
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("0!_4{", "0!_4{");
      sourceFile_Preloaded0.setIsExtern(false);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("640!4{", "640!4{");
      sourceFile0.toString();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        SourceFile.fromInputStream("com.google.common.io.Files$1", (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("640!4{", "kYs,atIvH/4H");
      boolean boolean0 = sourceFile0.isExtern();
      assertEquals("640!4{", sourceFile0.getOriginalPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded((String) null, "US-ASCII");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("Bp76xA%nq..a", "\n", (File) null);
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      Reader reader0 = sourceFile_OnDisk0.getCodeReader();
      // Undeclared exception!
      try { 
        SourceFile.fromReader("", reader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("640!4{", "640!4{");
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(1, int0);
      
      sourceFile_Preloaded0.getLineOffset(1);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("640!_4{", "640!_4{");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(791);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 791
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("640!4{", "640!4{");
      sourceFile_Preloaded0.getNumLines();
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(1, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("Expected line number between 1yand ", "y7cEdJ", "\nActual: ");
      // Undeclared exception!
      try { 
        sourceFile_Preloaded0.getLineOffset((-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 2
         // Actual: -31
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-16LE", "");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);
      String string0 = sourceFile0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("640!4{", "kYs,atIvH/4H");
      String string0 = sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
      assertEquals("640!4{", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-16LE", "");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(file0, charset0);
      sourceFile_OnDisk0.getNumLines();
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("60![N_4{", "60![N_4{", (InputStream) byteArrayInputStream0);
      String string0 = sourceFile0.getLine((byte)10);
      assertNull(string0);
      assertEquals("60![N_4{", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
      assertEquals("60![N_4{", sourceFile0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("60![N_4{", "60![N_4{", (InputStream) byteArrayInputStream0);
      String string0 = sourceFile0.getLine((byte) (-92));
      assertFalse(sourceFile0.isExtern());
      assertEquals("60![N_4{", sourceFile0.getName());
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals("60![N_4{", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("640!4{", "\n");
      Region region0 = sourceFile_Preloaded0.getRegion((-1));
      assertEquals("640!4{", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(1, region0.getBeginningLineNumber());
      assertEquals("", region0.getSourceExcerpt());
      assertNotNull(region0);
      assertEquals(2, region0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("60![N_4{", "60![N_4{", (InputStream) byteArrayInputStream0);
      Region region0 = sourceFile0.getRegion(1223);
      assertNull(region0);
      assertFalse(sourceFile0.isExtern());
      assertEquals("60![N_4{", sourceFile0.getOriginalPath());
      assertEquals("60![N_4{", sourceFile0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("60![N_4{", "60![N_4{", (InputStream) byteArrayInputStream0);
      Region region0 = sourceFile0.getRegion((-851));
      assertFalse(sourceFile0.isExtern());
      assertEquals(6, region0.getEndingLineNumber());
      assertNotNull(region0);
      assertEquals("60![N_4{", sourceFile0.toString());
      assertEquals("\u0000\u0000\n\u0000\n\n\n\n", region0.getSourceExcerpt());
      assertEquals("60![N_4{", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("60![N_4{", "60![N_4{");
      Region region0 = sourceFile_Preloaded0.getRegion((-1));
      assertEquals("60![N_4{", region0.getSourceExcerpt());
      assertEquals(1, region0.getEndingLineNumber());
      assertNotNull(region0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("end index").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("U{$-@sH HL", sourceFile_Generator0);
      Region region0 = sourceFile_Generated0.getRegion((-1));
      assertEquals("end index", region0.getSourceExcerpt());
      assertEquals(1, region0.getEndingLineNumber());
      assertNotNull(region0);
      
      Region region1 = sourceFile_Generated0.getRegion(16);
      assertFalse(sourceFile_Generated0.isExtern());
      assertNull(region1);
  }
}
