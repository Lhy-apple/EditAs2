/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:43:25 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node(51);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000");
      assertEquals("/\\t\\n\\u000b\\u000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000/", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newNumber((double) 1980, 1980, 1980);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.tagAsStrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("\n\u0013function_info.proto\u0012\u0006jscomp\"\u00BF\u0002\n\u0016FunctionInformationMap\u00123\n\u0005entry\u0018\u0001 \u0003(\n2$.jscomp.FunctionInformationMap.Entry\u00125\n\u0006module\u0018e \u0003(\n2%.jscomp.FunctionInformationMap.Module\u001A\u0087\u0001\n\u0005Entry\u0012\n\n\u0002id\u0018\u0002 \u0002(\u0005\u0012\u0013\n\u000Bsource_name\u0018\u0003 \u0002(\t\u0012\u0013\n\u000Bline_number\u0018\u0004 \u0002(\u0005\u0012\u0013\n\u000Bmodule_name\u0018\u0005 \u0002(\t\u0012\f\n\u0004size\u0018\u0006 \u0002(\u0005\u0012\f\n\u0004name\u0018\u0007 \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018\b \u0002(\t\u001A/\n\u0006Module\u0012\f\n\u0004name\u0018f \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018g \u0002(\tB \n\u001Ccom.google.javascript.jscompP\u0001");
      assertEquals("\"\\n\\u0013function_info.proto\\u0012\\u0006jscomp\\\"\\u00bf\\u0002\\n\\u0016FunctionInformationMap\\u00123\\n\\u0005entry\\u0018\\u0001 \\u0003(\\n2$.jscomp.FunctionInformationMap.Entry\\u00125\\n\\u0006module\\u0018e \\u0003(\\n2%.jscomp.FunctionInformationMap.Module\\u001a\\u0087\\u0001\\n\\u0005Entry\\u0012\\n\\n\\u0002id\\u0018\\u0002 \\u0002(\\u0005\\u0012\\u0013\\n\\u000bsource_name\\u0018\\u0003 \\u0002(\\t\\u0012\\u0013\\n\\u000bline_number\\u0018\\u0004 \\u0002(\\u0005\\u0012\\u0013\\n\\u000bmodule_name\\u0018\\u0005 \\u0002(\\t\\u0012\\u000c\\n\\u0004size\\u0018\\u0006 \\u0002(\\u0005\\u0012\\u000c\\n\\u0004name\\u0018\\u0007 \\u0002(\\t\\u0012\\u0017\\n\\u000fcompiled_source\\u0018\\u0008 \\u0002(\\t\\u001a/\\n\\u0006Module\\u0012\\u000c\\n\\u0004name\\u0018f \\u0002(\\t\\u0012\\u0017\\n\\u000fcompiled_source\\u0018g \\u0002(\\tB \\n\\u001ccom.google.javascript.jscompP\\u0001\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addCaseBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addList((Node) null, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.forName("default");
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = new Node(85, 85, 85);
      // Undeclared exception!
      try { 
        codeGenerator0.addArrayList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newNumber((double) 1960, 1960, 1960);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addArrayList((Node) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addAllSiblings((Node) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = new Node(2234, 2234, 2234);
      // Undeclared exception!
      try { 
        codeGenerator0.addAllSiblings(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = CodeGenerator.jsString("6Rk+Z?<!----K_\"[%\"", (CharsetEncoder) null);
      assertEquals("'6Rk+Z?<\\!----K_\"[%\"'", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = CodeGenerator.jsString("W'", (CharsetEncoder) null);
      assertEquals("\"W'\"", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("C4;fV[<!-->)");
      assertEquals("/C4;fV[<\\!--\\>)/", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape(">e~q</scriptzdk%&");
      assertEquals("/>e~q<\\/scriptzdk%&/", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("g}]>g71^>Q(=Zs:CiW");
      assertEquals("\"g}]>g71^>Q(=Zs:CiW\"", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString(" -> ");
      assertEquals("\" -> \"", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("Ma<g>&o.");
      assertEquals("/Ma<g>&o./", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.jsString("catch(", charsetEncoder0);
      assertEquals("\"catch(\"", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("\n\u0013function_info.proto\u0012\u0006jscomp\"\u00BF\u0002\n\u0016FunctionInformationMap\u00123\n\u0005entry\u0018\u0001 \u0003(\n2$.jscomp.FunctionInformationMap.Entry\u00125\n\u0006module\u0018e \u0003(\n2%.jscomp.FunctionInformationMap.Module\u001A\u0087\u0001\n\u0005Entry\u0012\n\n\u0002id\u0018\u0002 \u0002(\u0005\u0012\u0013\n\u000Bsource_name\u0018\u0003 \u0002(\t\u0012\u0013\n\u000Bline_number\u0018\u0004 \u0002(\u0005\u0012\u0013\n\u000Bmodule_name\u0018\u0005 \u0002(\t\u0012\f\n\u0004size\u0018\u0006 \u0002(\u0005\u0012\f\n\u0004name\u0018\u0007 \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018\b \u0002(\t\u001A/\n\u0006Module\u0012\f\n\u0004name\u0018f \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018g \u0002(\tB \n\u001Ccom.google.javascript.jscompP\u0001");
      assertEquals("\\u000a\\u0013function_info.proto\\u0012\\u0006jscomp\"\\u00bf\\u0002\\u000a\\u0016FunctionInformationMap\\u00123\\u000a\\u0005entry\\u0018\\u0001 \\u0003(\\u000a2$.jscomp.FunctionInformationMap.Entry\\u00125\\u000a\\u0006module\\u0018e \\u0003(\\u000a2%.jscomp.FunctionInformationMap.Module\\u001a\\u0087\\u0001\\u000a\\u0005Entry\\u0012\\u000a\\u000a\\u0002id\\u0018\\u0002 \\u0002(\\u0005\\u0012\\u0013\\u000a\\u000bsource_name\\u0018\\u0003 \\u0002(\\u0009\\u0012\\u0013\\u000a\\u000bline_number\\u0018\\u0004 \\u0002(\\u0005\\u0012\\u0013\\u000a\\u000bmodule_name\\u0018\\u0005 \\u0002(\\u0009\\u0012\\u000c\\u000a\\u0004size\\u0018\\u0006 \\u0002(\\u0005\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0007 \\u0002(\\u0009\\u0012\\u0017\\u000a\\u000fcompiled_source\\u0018\\u0008 \\u0002(\\u0009\\u001a/\\u000a\\u0006Module\\u0012\\u000c\\u000a\\u0004name\\u0018f \\u0002(\\u0009\\u0012\\u0017\\u000a\\u000fcompiled_source\\u0018g \\u0002(\\u0009B \\u000a\\u001ccom.google.javascript.jscompP\\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("LQn0\",");
      assertEquals("LQn0\",", string0);
  }
}
