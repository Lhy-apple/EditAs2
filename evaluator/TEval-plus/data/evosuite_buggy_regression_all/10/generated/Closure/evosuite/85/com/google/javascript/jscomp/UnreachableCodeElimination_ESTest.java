/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:44:49 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("6Jo-a)5 ^z>5zAG");
      Node node1 = Node.newString(4, "6Jo-a)5 ^z>5zAG");
      node0.addChildrenToBack(node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node1, node0);
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Denormalize.StripConstantAnnotations denormalize_StripConstantAnnotations0 = new Denormalize.StripConstantAnnotations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize_StripConstantAnnotations0);
      Node node0 = new Node(105);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.nreac8ableCodeEliminttion");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("L-C2'a_'Jk&#)x?Oi ");
      Node node1 = Node.newString(4, "L-C2'a_'Jk&#)x?Oi ");
      node0.addChildrenToBack(node1);
      Node node2 = Normalize.parseAndNormalizeTestCode(compiler0, "L-C2'a_'Jk&#)x?Oi ", "L-C2'a_'Jk&#)x?Oi ");
      node0.addChildrenToBack(node2);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("6o+aR5^z->zA");
      Node node1 = new Node(114, node0, 44, 28);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.process(node1, node1);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("L-C2Ga='Jk&#)x?Oi ");
      Node node1 = Node.newString(4, "L-C2Ga='Jk&#)x?Oi ");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(114, node0, 4095, 1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("6Jo-a)5 ^z>5zAG");
      Node node1 = Node.newString(4, "6Jo-a)5 ^z>5zAG");
      node1.addChildAfter(node0, node0);
      node0.addChildrenToBack(node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node1, node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("L-C2'a_'Jk&#)x?Oi ");
      Node node1 = Node.newString(4, "L-C2'a_'Jk&#)x?Oi ");
      node1.addChildrenToBack(node0);
      Node node2 = Normalize.parseAndNormalizeTestCode(compiler0, "", "L-C2'a_'Jk&#)x?Oi ");
      node2.addChildrenToBack(node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node2, node2);
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("6Jo+a)5 ^z->5zAG");
      Node node1 = Node.newString(124, "6Jo+a)5 ^z->5zAG");
      node0.addChildrenToBack(node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("6Jo-)Q a5zAG", "6Jo-)Q a5zAG");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "6Jo-)Q a5zAG", "6Jo-)Q a5zAG");
      node1.addChildrenToBack(node0);
      Node node2 = new Node(43, node1, 23, 41);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node2, node2);
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("6o+aR5^z->zA");
      Node node1 = new Node(114, node0, 44, 28);
      Node node2 = new Node(46, node1, 31, (-636));
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      unreachableCodeElimination0.process(node1, node2);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }
}
