/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:54:51 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AmbiguateProperties;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.SourceAst;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      VariableMap variableMap0 = VariableMap.fromMap(hashMap0);
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, false, variableMap0, (char[]) null, compilerOptions0.aliasableStrings);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[9];
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.nonMethodProperties;
      RenameVars renameVars0 = new RenameVars(compiler0, "i", true, false, true, variableMap0, charArray0, set0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("O(", "O(");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment("", compilerInput0);
      renameVars_Assignment0.setNewName("");
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, (Set<String>) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("L\"CB");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[1];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "L\"CB", "zF8_ '+>Koi7!ONF)@", '7', 296);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.nonMethodProperties;
      RenameVars renameVars0 = new RenameVars(compiler0, "", true, true, true, variableMap0, charArray0, set0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) namedType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      renameVars0.process(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode((String) null, "L ");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode((String) null, "L ");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      renameVars0.process(node0, node0);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("", "_Sl");
      RenameVars renameVars0 = new RenameVars(compiler0, "// Input %num%", false, true, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      // Undeclared exception!
      try { 
        renameVars0.process(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prefix must start with one of: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, $]
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("L\"CB");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[1];
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.externMethodsWithoutSignatures;
      RenameVars renameVars0 = new RenameVars(compiler0, "", true, true, true, variableMap0, charArray0, set0);
      Node node0 = compiler0.parseTestCode("=gshGFqcTw.");
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      CompilerInput compilerInput0 = new CompilerInput((SourceAst) null, "L 28k_CT", true);
      renameVars_ProcessVars0.incCount("L\"CB", compilerInput0);
      renameVars_ProcessVars0.incCount("28k_CT", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("28k_CT", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node0 = compiler0.parseTestCode("xT");
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      Map<String, String> map0 = ambiguateProperties0.getRenamingMap();
      VariableMap variableMap0 = VariableMap.fromMap(map0);
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, true, variableMap0, (char[]) null, compilerOptions0.stripNameSuffixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("xT", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals(1, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VariableMap variableMap0 = compiler0.getPropertyMap();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node0 = compiler0.parseTestCode("");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, variableMap0, (char[]) null, compilerOptions0.aliasableStrings);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("L &>", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("L\"CB");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.externMethodsWithoutSignatures;
      char[] charArray0 = new char[4];
      RenameVars renameVars0 = new RenameVars(compiler0, "co", false, false, true, (VariableMap) null, charArray0, set0);
      Node node0 = compiler0.parseTestCode("L\"CB");
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      CompilerInput compilerInput0 = new CompilerInput((SourceAst) null, "xTvz786uqa6b##JE/", true);
      renameVars_ProcessVars0.incCount("L\"CB", compilerInput0);
      renameVars_ProcessVars0.incCount("xTvz786uqa6b##JE/", compilerInput0);
      renameVars0.process(node0, node0);
      assertEquals((-1), node0.getLineno());
  }
}
