/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:57:30 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.InlineVariables;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InlineVariables_ESTest extends InlineVariables_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.InlineVariables$InliningBehavior", "com.google.javascript.jscomp.InlineVariables$InliningBehavior");
      InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;
      InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);
      inlineVariables0.process(node0, node0);
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.CONSTANTS_ONLY;
      InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "1?zW\".", "1?zW\".");
      inlineVariables0.process(node0, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.LOCALS_ONLY;
      InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);
      // Undeclared exception!
      try { 
        inlineVariables0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
