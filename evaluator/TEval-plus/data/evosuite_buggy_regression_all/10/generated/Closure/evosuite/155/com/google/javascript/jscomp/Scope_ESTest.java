/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:58:54 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("m", node0, functionType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isLocal();
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Y1'9H$t|m", node0, functionType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isGlobal();
      assertTrue(scope_Var0.isTypeInferred());
      assertTrue(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[7], node0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, functionType0, (CompilerInput) null, true);
      scope_Var0.getJSDocInfo();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      Scope scope0 = new Scope(node0, enumType0);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, functionType0, (CompilerInput) null, false);
      String string0 = scope_Var0.getName();
      assertNotNull(string0);
      assertFalse(scope_Var0.isDefine());
      assertFalse(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      JSType[] jSTypeArray0 = new JSType[9];
      Scope scope0 = new Scope(node0, (ObjectType) null);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("", sourceFile_Generator0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, jSTypeArray0[0], compilerInput0);
      Node node1 = scope_Var0.getNameNode();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertEquals("", scope_Var0.getInputName());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newNumber(2.1474836728165693E9);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("FX88iDHhG-fY h7A&", node0, (JSType) null, (CompilerInput) null);
      scope_Var0.getScope();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Y1'9H$t|m", node0, functionType0, (CompilerInput) null);
      scope_Var0.getType();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = Node.newNumber(2.1474836728165693E9);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("FX88iDHhG-fY h7A&", node0, (JSType) null, (CompilerInput) null);
      assertTrue(scope_Var0.isTypeInferred());
      
      scope_Var0.setType((JSType) null);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("m", node0, functionType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isDefine();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newNumber(301.2329122819766);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("[FhITDaTXlhH", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.isBleedingFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newNumber(301.2329122819766);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("[FhITDaTXlhH", node0, (JSType) null, (CompilerInput) null);
      String string0 = scope_Var0.toString();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Scope.Var [FhITDaTXlhH", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newNumber(301.30458582);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Scope scope0 = null;
      try {
        scope0 = new Scope(node0, compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      boolean boolean0 = scope0.isBottom();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      StaticSlot<JSType> staticSlot0 = scope0.getSlot("Not declared as a constructor");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = scope0.getRootNode();
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      int int0 = scope0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      int int0 = scope0.getVarCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      assertFalse(objectType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot("Named type with empty name component");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Iterator<Scope.Var> iterator0 = scope0.getVars();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = Node.newNumber(303.51744764537);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      StaticScope<JSType> staticScope0 = scope0.getParentScope();
      assertNull(staticScope0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", (Node) null, enumElementType0, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.getInitialValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Scope$Var", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", (Node) null, functionType0, (CompilerInput) null, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a constructor");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", (Node) null, enumElementType0, compilerInput0, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertTrue(boolean0);
      assertFalse(scope_Var0.isDefine());
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a constructor");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      CompilerInput compilerInput1 = new CompilerInput(compilerInput0, false);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", (Node) null, enumElementType0, compilerInput1, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a constructor");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", (Node) null, enumElementType0, compilerInput0, true);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = Node.newNumber(301.30458581790936);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[5];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[0], jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, functionType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = Node.newNumber(301.30458581790936);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(44, node0, node0, node0, node0, 2, 0);
      JSType[] jSTypeArray0 = new JSType[5];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[0], jSTypeArray0);
      Scope scope0 = new Scope(node1, functionType0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, functionType0, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertNull(node2);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = Node.newNumber(2.1474836728165693E9);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("FX88iDHhG-fY h7A&", node0, (JSType) null, (CompilerInput) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      scope_Var0.resolveType(simpleErrorReporter0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[15];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, (CompilerInput) null, true);
      // Undeclared exception!
      try { 
        scope_Var0.resolveType(simpleErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = Node.newNumber(318.4958567518435);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("..SZ1y%s", "..SZ1y%s", 47, 15);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a constructor", charset0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, functionType0, compilerInput0, false);
      String string0 = scope_Var0.getInputName();
      assertEquals("Not declared as a constructor", string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[15];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, (CompilerInput) null, true);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("<non-file>", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", (Node) null, functionType0, (CompilerInput) null, true);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = Node.newNumber(303.51744764537);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      node0.addSuppression("E8 6z");
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, functionType0, (CompilerInput) null, true);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, enumElementType0, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(scope_Var0);
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, (JSType) null, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.equals(linkedList0);
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, enumElementType0, (CompilerInput) null);
      Scope.Var scope_Var1 = scope0.declare("E8 6z", (Node) null, (JSType) null, (CompilerInput) null, true);
      boolean boolean0 = scope_Var0.equals(scope_Var1);
      assertFalse(scope_Var1.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = Node.newNumber(2.1474836728165693E9);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope scope1 = null;
      try {
        scope1 = new Scope(scope0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = Node.newNumber(303.51744764537);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isLocal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope scope1 = new Scope(scope0, node0);
      Scope scope2 = scope1.getGlobalScope();
      assertFalse(scope2.isLocal());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = Node.newNumber(301.30458581790936);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      // Undeclared exception!
      try { 
        scope0.declare((String) null, node0, (JSType) null, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = Node.newNumber(2.147483647E9);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      // Undeclared exception!
      try { 
        scope0.declare("", node0, (JSType) null, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = Node.newNumber(2.1474836728165693E9);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      scope0.declare("{X88iDjhG-fY h7A&", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.declare("{X88iDjhG-fY h7A&", node0, (JSType) null, (CompilerInput) null, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope scope1 = new Scope(scope0, node0);
      Scope.Var scope_Var0 = scope1.declare("Not declared as a constructor", (Node) null, enumType0, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = Node.newNumber(303.51744764537);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("nB0RTAszW}v2/&G", node0, (JSType) null, (CompilerInput) null);
      scope0.undeclare(scope_Var0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newNumber(301.2329122819766);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.DefaultPassConfig$52", node0, (JSType) null, (CompilerInput) null, false);
      scope0.undeclare(scope_Var0);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = Node.newNumber(301.30458581790936);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null, false);
      Scope.Var scope_Var0 = scope0.getVar("Not declared as a type name");
      assertFalse(scope_Var0.isDefine());
      assertNotNull(scope_Var0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope scope1 = new Scope(scope0, node0);
      Scope.Var scope_Var0 = scope1.getVar("Unknown class name");
      assertNull(scope_Var0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null, true);
      assertFalse(scope_Var0.isDefine());
      
      boolean boolean0 = scope0.isDeclared("Not declared as a type name", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope((Node) null, enumElementType0);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isDeclared("Not declared as a type name", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = Node.newNumber(317.36512099892997);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[1], jSTypeArray0);
      Scope scope0 = new Scope((Node) null, functionType0);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isDeclared("Named type with empty name component", false);
      assertFalse(boolean0);
  }
}
