/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:40:39 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Node node0 = Node.newString("");
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0, supplier0, node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("%~VD", list0, node0, 2, 1);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node1, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("+=");
      int int0 = NodeUtil.getNameReferenceCount(node0, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(20, "Error", 20, 20);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 40);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(46, "Error", 865, 46);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(107);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber(2853.1, 41, 41);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(23);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got MUL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString(41, "M.CmLd,");
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("JSC_DEFINE_NOT_ASSIGNABLE_ERROR", 8298, 11);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 119);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(30);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.SideEffectsAnalysis$IntraproceduralMotionEnvironment");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(107, 75, Integer.MIN_VALUE);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = new Node(90, 90, 90);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString(26, "Error", 26, 26);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString(63, "Error", 63, 63);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(85, ".refCall() returned null", (-2270), 85);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString(86, "D", 61, 61);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(100, 123, 2107);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString(101, "com.google.protobuf.DescriptorProtos$FileOptions$Builder", 33, (-1481));
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(26, "Error", 26, 26);
      // Undeclared exception!
      try { 
        NodeUtil.getPureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(38, "MjbbXy&");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString(41, "!==", 112, 112);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      Node node1 = new Node(43, node0, 88, 16);
      NodeUtil.getImpureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(44);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(47);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString(63, "Error", 63, 63);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getImpureBooleanValue(node1);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 39, (-1175));
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNull(string0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("10", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("NaN", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      Node node1 = new Node(43, node0, 3314, 13);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(44);
      node0.addChildrenToBack(node0);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("true", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node((-3612), (-3612), (-3612));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertNotNull(string0);
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = NodeUtil.getStringValue(Double.POSITIVE_INFINITY);
      assertEquals("Infinity", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString(108, "{7kp8Cma$FKj");
      Node node1 = new Node(41, node0, 153, 5);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString(108, "{7kp8Cma$FKj");
      Node node1 = new Node(41, node0, 153, 5);
      String string0 = NodeUtil.arrayToString(node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("NaJN");
      Node node1 = new Node(26, node0, node0, (-1029), 5);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((double) 23, 51, 1);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(23.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(41, "MjbbXy&");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(32, "Error", 32, 32);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNotNull(double0);
      assertEquals(131104, node1.getSourcePosition());
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(46, "Error", 865, 46);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("q");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("01ouoWw^@,wE.S(");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("-infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("+infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue(" (type ");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(9);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("\n parent:");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(11);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(13);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(8233);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(38, "MjbbXy&");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("{7kpLCmPXwK");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Node node1 = new Node(43, node0, 88, 16);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("<)?");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
      assertEquals(122, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("{7kpLCmPXwK");
      Node node1 = new Node(47, node0, node0, 2353, 145);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node((-415));
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("String", stack0, node0, (-1273), 0);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
      assertEquals(105, node1.getType());
      assertFalse(boolean0);
      assertEquals(3, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(45, 27, 106);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(15, (-53), 17);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(17, 17, 17);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(20, "Error");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString(92, "6TM<Ml", 92, 103);
      Node node1 = new Node(21, node0, node0, 120, 23);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(23);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(26);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString(27, "Error");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("jsdoc_info");
      Node node1 = new Node(31, node0, node0, (-2182), (-3287));
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, compilerOptions0.stripNameSuffixes);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(36, 36, 17);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("JSCompiler_alias_TRUE", 37, 2371);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, " in ", node0);
      Locale locale0 = Locale.forLanguageTag(" in ");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertEquals(38, node1.getType());
      assertEquals(2371, node1.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("infinity");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      Node node1 = new Node(43, node0, 88, 16);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(44);
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(102, "cfGTia%*;O~", 3352, 102);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(20, "Error");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("{7kpLCmPXwK");
      Node node1 = new Node(24, node0, 11, (-924));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(31, 36, 36);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString(32, "Error", 32, 32);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(33);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(35);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(36, (-53), 17);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(15);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, " (type ", node0, " (type ");
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertFalse(boolean0);
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString(41, " BkrY", 3352, 41);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(45, 27, 106);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString(46, "Error", 865, 46);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(53);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(54);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(55);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(60);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString(61, "Error", 61, 61);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTHISFN Error 61
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(66);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString(68, "NaN", (-3), 77);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(70, 27, 106);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDEFAULTNAMESPACE 27
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(107, 75, Integer.MIN_VALUE);
      Node node1 = new Node(75, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(81, "MXrxY%KRiYXP", 81, 1233);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(84);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(85);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(87, "MXrxY%KRiYXP", 27, 27);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(90);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString(93, "MXrxY%KRiYXP", 27, 27);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(95);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString(80, "hE|:_}[K9Ra|Z?%6O\"", (-790), 101);
      Node node1 = new Node(96, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(99);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(102);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(106);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(107, 75, Integer.MIN_VALUE);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString(108, "Error", 32, 32);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeIF Error 32
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(109);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCASE 111
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(112, 29, 112);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(115, 81, 81);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node node0 = new Node(116);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBREAK
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(15);
      Node node1 = new Node(117, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString(119, "{7kp8Cma$FKj");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(120);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
      assertEquals(29, node1.getCharno());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(38, "MjbbXy&");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString(41, "!==", 112, 112);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString("+=");
      Node node1 = new Node(42, node0, node0, 25, 38);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      Node node1 = new Node(43, node0, 88, 16);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString(96, "LSw-K;Sm_/\u0001Dwxah/", 86, (-883));
      Node node1 = new Node(44, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(98, "{7kp8Cma$FKj");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(100, "NaJN");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(108, 108, 765);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(20, "Error", 20, 20);
      Node node1 = NodeUtil.newVarNode("Error", node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertEquals(118, node1.getType());
      assertEquals(81940, node1.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node((-415));
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertEquals(130, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(116, 106, (-1363));
      Node node1 = new Node(30, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString("(9 [/!~z_QoW>~");
      Node node1 = new Node(30, node0, 115, 21);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString(41, "M.CmLd,");
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString(20, "Error", 20, 20);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(91);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(31, 36, 36);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(38, "MjbbXy&", 38, 38);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString(41, "!==", 112, 112);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-infinity");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      ArrayList<Node> arrayList0 = new ArrayList<Node>(105);
      Node node1 = NodeUtil.newFunctionNode(";K0<%T", arrayList0, node0, 1, 2);
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString(102, "cfGTia%*;O~", 3352, 102);
      Node node1 = new Node(104, node0, node0, 20, 51);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifne (type 7)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = NodeUtil.precedence(13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=50> (type 50)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = NodeUtil.precedence(51);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = NodeUtil.precedence(52);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(56);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=56> (type 56)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=58> (type 58)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(59);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=59> (type 59)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=60> (type 60)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int int0 = NodeUtil.precedence(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(67);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=67> (type 67)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ref_special (type 69)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=71> (type 71)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=74> (type 74)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=75> (type 75)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=76> (type 76)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for semi (type 78)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rb (type 80)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lc (type 81)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int int0 = NodeUtil.precedence(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int int0 = NodeUtil.precedence(89);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = NodeUtil.precedence(90);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = NodeUtil.precedence(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = NodeUtil.precedence(97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = NodeUtil.precedence(102);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int int0 = NodeUtil.precedence(105);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for if (type 108)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = NodeUtil.precedence(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("NaJN");
      Node node1 = new Node(85, node0, 48, 17);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(86);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString(96, "LSw-K;Sm_/\u0001Dwxah/", 86, (-883));
      Node node1 = new Node(101, node0, 36, 25);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString(10, "Error", 10, 10);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString(20, "Error");
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString(92, "6TM<Ml", 92, 103);
      Node node1 = new Node(21, node0, node0, 120, 23);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(27, "Error", 17, 17);
      Node node1 = new Node(22, node0, 31, 30);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(27, "Error", 27, 27);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(23);
      Node node1 = new Node(28, node0, 0, 1);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString(27, "Error", 27, 27);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, " (type ", node0, "Error");
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
      assertEquals(110619, node1.getSourcePosition());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newString(102, "cfGTia%*;O~", 3352, 102);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString("K;deH.Y,9H4}]#|i!");
      Node node1 = new Node(103, node0, 39, 1);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString(12, "@Mmz5~pU2y6t8f", 36, 119);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newString(13, "{7kpLCmPXwK", 34, 5);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("+w");
      Node node1 = new Node(15, node0, 2, 48);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("Na");
      Node node1 = new Node(16, node0, 11, 16);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString(17, " (type ", 27, 25);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(23);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = nodeUtil_BooleanResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString("-PVo{_G.n^nI");
      Node node1 = new Node(26, node0, 117, (-1));
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString(27, "Error", 10, 10);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString("+=");
      Node node1 = new Node(29, node0, 4095, 46);
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newString("(9 [/!~z_QoW>~");
      Node node1 = new Node(30, node0, 115, 21);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString("-PVo{_G.n^nI");
      Node node1 = new Node(31, node0, (-49), 83);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString(32, "Error", 32, 32);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString(33, "Error");
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      Node node1 = new Node(35, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(36, (-53), 17);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      Node node1 = new Node(42, node0, node0, (-4780), 51);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString(27, "?Ds>_", 78, (-27));
      Node node1 = new Node(49, node0, 40, (-924));
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-P9o{ G8n^nI");
      Node node1 = new Node(51, node0, node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 0, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString("NaJN");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals("", string0);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString(41, "MjbbXy&");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative((-490));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(88, 2096, 1813);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString(92, "InfGn\ty", (-3335), 8);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)111, "yma#]sd^rGXQ", (-246), (int) (byte) (-35));
      Node node1 = new Node(94, node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newString(96, "Lw-K;Sm_/\u0001Dwah/", 86, (-883));
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(102);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = new Node(15);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newString(32, "r");
      Vector<Node> vector0 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("XM\"HttpRequest", vector0, node0, 40, 11);
      boolean boolean0 = NodeUtil.referencesThis(node1);
      assertEquals(105, node1.getType());
      assertFalse(boolean0);
      assertEquals(163851, node1.getSourcePosition());
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(45, 27, 106);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, " does not have a condition.", node0, "NaN");
      Node node2 = NodeUtil.getPrototypeClassName(node1);
      assertEquals(33, node1.getType());
      assertNull(node2);
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isUnscopedQualifiedName());
      assertEquals(27, node1.getLineno());
      assertTrue(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString(63, "Error", 63, 63);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "Error", node0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction");
      boolean boolean0 = NodeUtil.isReferenceName(node1);
      assertEquals(258111, node1.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString(81, "OBJECT_PROTOTYPE", 81, 81);
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "infinity", "infinity");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newString(32, "r", 98, 98);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString(86, "Yr", 44, 30);
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node(86);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString("NaJN");
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = new Node(115, 81, 81);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString(115, "{7kp8Cma$FKj");
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString(119, "{7kp8Cma$FKj");
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newString("NaJN");
      Node node1 = new Node(85, node0, 48, 17);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newString(108, "Error", 32, (-1696));
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString(119, "{7kp8Cma$FKj");
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = new Node(23);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newString(111, "[Cd=bTTi'iT,", 2074, (-2062));
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = new Node(112, 29, 112);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NEG Error 29 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = new Node(113);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("{7kp8Cma$FKj");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("STRIP");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)111, "yma#]sd^rGXQ", (-246), (int) (byte) (-35));
      Node node1 = new Node(94, node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newString(32, "Error", 32, 32);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newString(120, "{7kp8Cm$FK", (-390), 297);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      MockFile mockFile0 = new MockFile("x", "x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("w<4`KIXR\"qP");
      Node node1 = new Node(111, node0, node0, node0, node0);
      NodeUtil.removeChild(node1, node0);
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString("r");
      Node node1 = new Node(8, node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: STRING r of STRING r
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString(2191, "-infinity", 2191, 122);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newNumber(81.0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "j?vJ{1z", " A<SzM");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newString(37, "!==");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newString("JSCompiler_alias_TRUE", 37, 2371);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Expected CALL node, got ");
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newString(38, "MjbbXy&");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString("r");
      Vector<Node> vector0 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("XMLHttpRequest", vector0, node0, 40, 1019);
      node0.addChildAfter(node1, node1);
      assertEquals(105, node1.getType());
      
      NodeUtil.getFunctionJSDocInfo(node1);
      assertEquals(164859, node1.getSourcePosition());
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newString(96, "Lw-K;Sm_/\u0001Dwah/", 86, (-883));
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString(81, "MXrxY%KRiYXP", 81, 1233);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      Node node1 = NodeUtil.newVarNode("", node0);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
      assertTrue(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "8&`wjeQ", 571, 571);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      Node node1 = new Node(35, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newString("`ZlM) \"/xg=~X `UNC");
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("`ZlM) \"/xg=~X `UNC", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString(41, "MjbbXy&");
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: NULL MjbbXy&
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType((Node) null, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("BLOCK [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000557]", node0, (ObjectType) null);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newString(29, "Error", 29, 29);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = NodeUtil.opToStr(10);
      assertNotNull(string0);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = NodeUtil.opToStr(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = NodeUtil.opToStr(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(19);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = NodeUtil.opToStr(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = NodeUtil.opToStr(21);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = NodeUtil.opToStr(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = NodeUtil.opToStr(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(24);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = NodeUtil.opToStr(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = NodeUtil.opToStr(29);
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 30: NEW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = NodeUtil.opToStr(38);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(45);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 48: BINDNAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = NodeUtil.opToStr(50);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = NodeUtil.opToStr(51);
      assertEquals("in", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = NodeUtil.opToStr(56);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(63);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 63: ARRAYLIT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = NodeUtil.opToStr(73);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 74: REF_NS_MEMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 75: REF_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = NodeUtil.opToStr(81);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 83: LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = NodeUtil.opToStr(85);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(89);
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = NodeUtil.opToStr(99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(100);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 103: DEC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 104: DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = NodeUtil.opToStr(109);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 110: SWITCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 113: WHILE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 114: DO
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 115: FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 116: BREAK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 117: CONTINUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 120: CATCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 2: ENTERWITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newString(119, "{7kp8Cma$FKj");
      NodeUtil.copyNameAnnotations(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = new Node((-415));
      Stack<Node> stack0 = new Stack<Node>();
      stack0.add(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("String", stack0, node0, (-1273), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newString(27, "Error", 27, 27);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "BLOCK [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000499]", node0, "Error");
      assertTrue(node1.isUnscopedQualifiedName());
      assertEquals(2, node1.getChildCount());
      assertEquals(27, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newString(38, "MjbbXy&");
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = new Node(23);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newString("+=");
      Node node1 = new Node(42, node0, node0, 25, 38);
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertSame(node1, node2);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newString(33, "Error");
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = new Node(81, 81, 2966);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "Error", node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertTrue(node1.isUnscopedQualifiedName());
      assertEquals(2966, node1.getCharno());
      assertTrue(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newString(27, "com.google.common.collect.Lists$2", 27, 27);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("Error", (Node) null);
      assertNotNull(node0);
      assertEquals(118, node0.getType());
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newString(98, "{7kp8Cma$FKj");
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("valueOf", list0, node0, 22, 1263);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "{7kp8Cma$FKj");
      assertEquals(91375, node1.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode("-PVo{_G.n^nI");
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("", list0, node0, 1568, 4);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "");
      assertEquals(6422532, node1.getSourcePosition());
      assertEquals(3, node1.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1855);
      Node node1 = new Node(1, node0, node0);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 1, nodeUtil_MatchNodeType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newString("NaJN");
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("IP$,+8", "{7kp8Cm$FKj");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = new Node(10);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newString("r");
      Vector<Node> vector0 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("XMLHttpRequest", vector0, node0, 40, 1019);
      assertEquals(164859, node1.getSourcePosition());
      assertEquals(3, node1.getChildCount());
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = new Node(15);
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node1 = NodeUtil.newFunctionNode("XMLHttpRequest", arrayList0, node0, 50, 47);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertEquals(204847, node1.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = new Node(10);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(14, 14, 14);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Expected CALL node, got ");
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString(48, "b+", 48, 48);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newString("vx/>f*yL\"/1,3J 3n");
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("qIoi}wvzh'Z=&M1?", stack0, node0, 7, 1);
      Node node2 = NodeUtil.getFunctionParameters(node1);
      assertEquals(3, node1.getChildCount());
      assertEquals(28673, node2.getSourcePosition());
      assertEquals(28673, node1.getSourcePosition());
      assertEquals(83, node2.getType());
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.graph.LinkedDirectedGraph$1", "com.google.javascript.jscomp.graph.LinkedDirectedGraph$1");
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = Node.newString(102, "cfGTia%*;O~", 3352, 102);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newString("-PVo{_G.n^nI");
      Node node1 = new Node(26, node0, 117, (-1));
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Vector<Node> vector0 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("8Zx{", vector0, node0, (-456), 1630);
      assertEquals(3, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      
      NodeUtil.getInfoForNameNode(node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = Node.newString(81, "OBJECT_PROTOTYPE", 81, 81);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Invalid attempt to remove node: ");
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals(" [testcode] ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = new Node(10, 10, 10);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(31, 36, 36);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node node0 = new Node(36, (-53), 17);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETELEM
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(45, 27, 106);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(47);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = Node.newString(">.*iP+_U3U");
      Node node1 = new Node(48, node0, 19, (-2846));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBINDNAME
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = new Node(50, 27, 103);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(31);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRETHROW 27
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newString(81, "OBJECT_PROTOTYPE", 81, 81);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLC OBJECT_PROTOTYPE 81
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = new Node(86);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newString(93, "MXrxY%KRiYXP", (-739), 27);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = new Node(98);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(36);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newString(102, "cfGTia%*;O~", 3352, 102);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = Node.newString("{7kpLCmPXwK");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("*YU1q(*yOn", linkedList0, node0, 32, (-1139));
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
      assertEquals((-1), node1.getCharno());
      assertEquals(3, node1.getChildCount());
      assertFalse(node0.hasOneChild());
  }
}
