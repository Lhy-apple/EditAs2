/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 14:11:57 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array and element cannot both be null", (String) null, 4);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("XJ ", "XJ ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("WdZ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f1\f\f\f\f\f\f\f\f\f\f\f\f");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f1\f\f\f\f\f\f\f\f\f\f\f\f", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: \f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f1\f\f\f\f\f\f\f\f\f\f\f\f
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("\f,\f", "=$=Lf|6Q(:-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ng\"}V</[q9ZoO", "ng\"}V</[q9ZoO");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("n4.Hz ukFX2]DI'UlkW", "n4.Hz ukFX2]DI'UlkW", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("lrH,]uZ:r($", "lrH,]uZ:r($");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.center("InvocationTargetException occurred during 1.6 backcompat code", (int) '|');
      assertNotNull(string0);
      assertEquals("                               InvocationTargetException occurred during 1.6 backcompat code                                ", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rvj\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Search and Replace array lengths don't match: ");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("bh-^o!}i#@@:^`c9", "java.text.Normalizer", (String) null);
      assertEquals("bh-^o!}i#@@:^`c9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.rightPad(".6 backcompa", (-2847));
      assertNotNull(string0);
      assertEquals(".6 backcompa", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\f,\f", '\f');
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.leftPad("inimum abbreviation ", (int) 's');
      assertEquals("                                                                                               inimum abbreviation ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 3128);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("h", "h", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("O<M", "^M");
      assertEquals("O<M", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.substringBetween("f&", "\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088f&\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088\u0088");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("*|aETMW}Q?yC+Gp", '\u0082');
      assertNotNull(string0);
      assertEquals("*|aETMW}Q?yC+Gp", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("9;Sy\"-2TX", "9;Sy\"-2TX", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.replace("user.timezone", (String) null, "user.timezone");
      assertNotNull(string0);
      assertEquals("user.timezone", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("vj", "j");
      String string0 = StringUtils.join((Object[]) stringArray0, "j");
      assertEquals("vj", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", (-1525));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("/,TbO+r\"5;c..");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("                                                      ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.trimToNull("5,^Z");
      String string1 = StringUtils.replace(string0, string0, "5,^Z", 2157);
      assertEquals("5,^Z", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("a");
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripToNull(">_Vj,mDS$V");
      assertNotNull(string0);
      assertEquals(">_Vj,mDS$V", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("JyJ ");
      assertEquals("JyJ", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.strip("nvUB\"O'}", "nvUB\"O'}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.strip(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripStart("ScBZ3jGINQFhd><lA", "");
      assertEquals("ScBZ3jGINQFhd><lA", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.strip("j", "%");
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripEnd("F", "");
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.stripEnd("-n}G", "-n}G");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "0[^FJ<WT+Mvi.b<");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.stripAccents("y$d(>Co;FdZ");
      assertEquals("y$d(>Co;FdZ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "6F\"#GV!=%;hrRm<2~-", (CharSequence) "6F\"#GV!=%;hrRm<2~-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("~{JJl/Whcp?PDVgK", "~{JJl/Whcp?PDVgK");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "org.apache.commons.lang3.ObjectUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("Cannot clone Cloneable type", '');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'c');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("Wps{}&WR", 'T', (-3933));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'Z', 720);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "im");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOf("h", "h");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf("{3U}bTP-\"*", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "Kv!Uyc", (-349));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf("~{JJl/Whcp?PDVgK", "~{JJl/Whcp?PDVgK", (-2));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOf("mA>=$4", (String) null, 58);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((String) null, (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("Wi/doksfN", (String) null, 4907);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf(" ", " ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1997);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("*u:", "!\"fuL>lxBPHx_,1=#ds)onidth is 4", 756);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("j", "j", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, "wkIB1E6Y,cXl6@]IK", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("kkWD^@!B|t.u", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("fr0", "", (-1788));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("", "", 1985);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("NoSuchMethodException occurred during 1.6 backcompat code", "java.vm.info");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("ClassNotFoundException occurred during 1.6 backcompat code", 'B');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, '#');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "\\u00";
      int int0 = StringUtils.lastIndexOf(string0, '2', (-2685));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '2', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "A");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("j", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("EsmQ[W>VdSp", "EsmQ[W>VdSp");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, 76);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("V\"4!i HZ", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", "java.text.Normalizer$Form", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("#$;L =nsP_SPM", "#$;L =nsP_SPM");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "$-^", (int) 'z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Fb+DHN!h", (String) null, (-735));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("&()?oP", "");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("%", "inimum abbreviation ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Minimum abbreviation width is 4", "java.runtime.version");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Kz'=wewXZZ~S,", '\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, '4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Kz'=wewXZZ~S,", '');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("OS/2", "pg,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("mjxo~hkj!1(r:=i", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("=$=Lf|6Q(:-", "=$=Lf|6Q(:-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(" backco", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("MJXO~hkJ!1(D:=i", "r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "java.awt.headless", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny((CharSequence) "{}", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "|/]z\"Bt>H{7", " oHlIBnju,");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, "4-&/8j=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "java.text.Normalizer", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "vj", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "IlleSunOScode", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\r';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rvj\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kW}Z", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Kz'=eZZ~S,", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, "d+ga,xz4s8<{|y!_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "6F\"#GV!=%;hrRm<2~-", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "h", "h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "|0@X%l", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{3U}bTP-\"*", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("5}?2sg;]T9 {^+VP:5?", "5}?2sg;]T9 {^+VP:5?");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("mijava.runtime.versionibth is 4", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("'D9", "E:GLhzI8,tb|L.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Dt<A.JBtW", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ".N0H}", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "char");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "inimum abbreviation ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[7];
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone((CharSequence) stringArray0[5], charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "shot", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "OS/2", "OS/2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "%", "r-ERx3`n)C:X");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "awt.toolkit");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.runtime.version", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'u');
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("8K/[Ow+", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("fr0", "fr0", 0);
      int int0 = StringUtils.indexOfAny("fr0", stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J; A9eD7/;{zn";
      int int0 = StringUtils.indexOfAny(" nd[ p/?ikaa[x)", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("DcQUCNC1[7", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`bjvuA:20jG";
      int int0 = StringUtils.lastIndexOfAny("`bjvuA:20jG", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`bjvuA:20jG";
      stringArray0[1] = "`bjvuA:20jG";
      int int0 = StringUtils.lastIndexOfAny("`bjvuA:20jG", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring("N-d+?QV", (-30));
      assertEquals("N-d+?QV", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (int) 'q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substring("1", 5);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substring("43+%H{bqf8", 13, (int) '/');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 13, (int) 'E');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substring("h", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substring("uciG5/j[DA*=cz>)-Kn", (-3139), (-3139));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.left("=$=Lf|6Q(:-", '\f');
      assertNotNull(string0);
      assertEquals("=$=Lf|6Q(:-", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 24);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.left("d", (-1414));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.left("V\"4!i HZ", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.right("@8G+  aSs/", 13);
      assertEquals("@8G+  aSs/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 'z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.right("_BWN=a@M+Lpx;/htw", (-465));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.right("[", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 757, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.mid("r3", 4838, (-1805));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.mid(">E?Y", 5, 13);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.mid("", (-217), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.mid("c*t=;j:xz3^m9(qc", 5, 5);
      assertEquals("j:xz3", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBefore("', has a length less than 2", "+kQ#OW");
      assertEquals("', has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBefore("search an", (String) null);
      assertEquals("search an", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBefore("P1vI@@.[&1}", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBefore("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfter("4+G:T", "4+G:T");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringAfter("{3U}bTP-\"*", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfter("ClassNotFoundException occurred during 1.6 backcompat code", "user.dir");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^lone", "^lone");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^M", (String) null);
      assertEquals("^M", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("FBLH<u<Q:rS6IT[x8&-", "vj");
      assertEquals("FBLH<u<Q:rS6IT[x8&-", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\f,\f", ",");
      assertEquals("\f", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("0t3{`Ig/B?k", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" qt_,1=#d", "v2CC'~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("b_", "b_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.substringBetween("E", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.substringBetween("hEvbe~Ad[eBI-4%", "hEvbe~Ad[eBI-4%", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.substringBetween(".Qp", ".Qp", ".Qp");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", " j", " j");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("8n3>=f0~Z&p~G[C0e|H", "java.text.Normalizer", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("', has a length less than 2", " ", " ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Zm.V5=*Xo+9iVh~vH", "UhcB5", ".Qp");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("K1bti8=~4\":=@Su^],", "K1bti8=~4\":=@Su^],", "at ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array and eleen] canot both be null", "Array and eleen] canot both be null", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, ']');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Array and element cannot both be null", 'l');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ", " ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Array and eleen] canot both be null", "Array and eleen] canot both be null", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("y:=J$HFis!92$,,DPLF");
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'W');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'u', 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">Ki(VGpzc43 k[ixNE", 'e');
      String string0 = StringUtils.join((Object[]) stringArray0, 'e', 1510, 1510);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.join((Object[]) stringArray0, 'b');
      assertEquals("bbbbbbbb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "S");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "Search and Replace array lengths don't match: ", (-33), (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'o');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, '');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "01r4k1ug`aurqxdpe\\u0[^fj<wt+mvi.b<";
      int int0 = 0;
      String string1 = "1.7";
      StringUtils.splitPreserveAllTokens(string0, "1.7", 0);
      char char0 = '<';
      StringUtils.split(string0, '<');
      StringUtils.repeat(string0, 0);
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string2 = StringUtils.join(iterator0, 'l');
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add("Windows");
      arrayDeque0.add("Windows");
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals("WindowsYWindows", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "~{JJl/Whcp?PDVgK");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, "");
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.add("7`p|n[&R8n)`e(6!");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertTrue(listIterator0.hasPrevious());
      assertEquals("7`p|n[&R8n)`e(6!", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-6672));
      linkedList0.add(integer0);
      linkedList0.add((Integer) null);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, "ZDv[&it]dLsR");
      assertEquals("-6672ZDv[&it]dLsR", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, (String) null);
      assertNotNull(string0);
      assertEquals("AUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'S');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, " ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(".'TimToLive of ");
      assertEquals(".'TimToLiveof", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeStart("org.apache.commons.lang3.ObjectUtils", "KEaPH}tu^3T");
      assertEquals("org.apache.commons.lang3.ObjectUtils", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeStart("UT$_<Ft0 1`%bg'}", "UT$_<Ft0 1`%bg'}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("WdZ", (String) null);
      assertNotNull(string0);
      assertEquals("WdZ", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("^M", "^M");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, "xvjb9vckh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.repeat("h", "~p9u'w9{ *.=", 60);
      assertNotNull(string0);
      assertEquals("h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h~p9u'w9{ *.=h", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeEnd("CaUnot pad a negativu amount: ", (String) null);
      assertEquals("CaUnot pad a negativu amount: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeEnd("K1bti8=~4\":=@Su^],", "at ");
      assertEquals("K1bti8=~4\":=@Su^],", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("2oat", "");
      assertEquals("2oat", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("h#a*hG_\"Cr<t}$_RF+M", " a");
      assertEquals("h#a*hG_\"Cr<t}$_RF+M", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.remove(" ", "/@&QSu<`");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.remove("7x%", "");
      assertEquals("7x%", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '\u0082');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.remove("5i0ZqeEH=", 'i');
      assertEquals("50ZqeEH=", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("~T48syaztv]-SQq", '{');
      assertEquals("~T48syaztv]-SQq", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replace("java.text.normalizeh", "InvocationTargetException occurred during 1.6 backcompat code", "oi", 0);
      assertEquals("java.text.normalizeh", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.repeat("H8X@", 2157);
      String string1 = StringUtils.replace(string0, string0, "5,^Z", 2157);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5,^Z", string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.remove("NoSuchFieldException oQcurred during'1.6 bakcompai code", "NoSuchFieldException oQcurred during'1.6 bakcompai code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("W#DZeU cfW#DZVU c", "W#DZeU cfW#DZVU c", "W#DZeU cfW#DZVU c");
      assertEquals("W#DZeU cfW#DZVU c", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("km1iPR>7bz,!&z!", (String[]) null, (String[]) null);
      assertEquals("km1iPR>7bz,!&z!", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("java.specification.vendor", stringArray0, stringArray0);
      assertEquals("java.specification.vendor", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, (String[]) null);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("r");
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("r", stringArray0, stringArray1);
      assertEquals("r", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n&U]&e");
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("n&U]&e", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 6 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("J J ");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "X4";
      String string0 = StringUtils.replaceEachRepeatedly("ed^$cF^<#JfR(~o", stringArray0, stringArray1);
      assertEquals("ed^$cF^<#X4fR(~o", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("J J ");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("J J ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: J J 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      // Undeclared exception!
      StringUtils.replaceEachRepeatedly("NoSuchDieldException occurred during 1.6+backcompat code", stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0:  
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NoSuchFieldException occurred during 1.6 backcompat code";
      String string0 = StringUtils.replaceEach("NoSuchFieldException occurred during 1.6 backcompat code", stringArray0, stringArray0);
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.replaceChars("mXw#V(8m", 'J', 'J');
      assertEquals("mXw#V(8m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '4', '4');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, " nbpz", "$(1SsQ`aiQ!");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Wu|!", "My", (String) null);
      assertEquals("Wu|!", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.replaceChars("s82rl.^upaccents(string) method is not supported until java 1.6", (String) null, (String) null);
      assertNotNull(string0);
      assertEquals("s82rl.^upaccents(string) method is not supported until java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.replaceChars("at ", "K1bti8=~4\":=@Su^],", "at ");
      assertEquals("a ", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.replaceChars("|0@X%l", "p{InCombiningDiacriticalMarks}+", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("|0@X%n", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 4096, 4096);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.overlay("fD`XAh?i;", (String) null, 76, 4292);
      assertEquals("fD`XAh?i;", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", (-1361), (-1361));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.overlay("Lv_nm*3", "Lv_nm*3", 'X', (-885));
      assertEquals("Lv_nm*3", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chomp("vj");
      assertEquals("vj", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chomp("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rvj\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rvj\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.chomp(")-#Xg&)?%i", ")-#Xg&)?%i");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.chomp("%5'PD", (String) null);
      assertEquals("%5'PD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.chomp("W#DZeVU cf", "W#DZeVU c");
      assertEquals("W#DZeVU cf", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chop("5.1");
      assertEquals("5.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.chop("[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.repeat("Array and element cannot both be null", 1);
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.repeat("", 112);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.repeat("j", 5);
      assertEquals("jjjjj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.repeat("J", 9995);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.repeat("^M", 129);
      assertNotNull(string0);
      assertEquals("^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M^M", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, (int) 'z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.repeat("boolean", (String) null, (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 24, 'z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.rightPad("'; the SystemUtils property value will default to null.", 9992, 'h');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 128, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 74, "");
      assertEquals("                                                                          ", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad("a[1RX[vi*", (-4), "a[1RX[vi*");
      assertEquals("a[1RX[vi*", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.center("9!:\f\f", (int) 'K', "9!:\f\f");
      assertEquals("9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f9!:\f\f", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.center("lyU)Xp}0WbaAB@:S(F]", 57, "lyU)Xp}0WbaAB@:S(F]");
      assertEquals("lyU)Xp}0WbaAB@:S(F]lyU)Xp}0WbaAB@:S(F]lyU)Xp}0WbaAB@:S(F]", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.center("j[~jPG,$[%ZX#7&isZ(", 54, "j[~jPG,$[%ZX#7&isZ(");
      assertEquals("j[~jPG,$[%ZX#7&isj[~jPG,$[%ZX#7&isZ(j[~jPG,$[%ZX#7&isZ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 1438, '$');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.center("", 1, 'k');
      assertEquals("k", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      // Undeclared exception!
      StringUtils.center("[y#g", 55296, 'k');
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 1407, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.leftPad("k34miu9!cxf", 5, (String) null);
      assertEquals("k34miu9!cxf", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.center("", 54, "");
      assertEquals("                                                      ", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 14, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.center("h", 0, '/');
      assertEquals("h", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.center("1.7", 1, 'd');
      assertEquals("1.7", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 2328, "n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.center("", 0, "awt.toolkit");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.center("minimumjava.runtime.versionis 4", 6, (String) null);
      assertEquals("minimumjava.runtime.versionis 4", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.upperCase("{3U}bTP-\"*");
      assertEquals("{3U}BTP-\"*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      String string0 = StringUtils.upperCase("2Wl-g('k", locale0);
      assertEquals("2WL-G('K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.lowerCase(" NBpZ");
      assertEquals(" nbpz", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      String string0 = StringUtils.lowerCase("b0x?zT.<*ziZX)(]8H.", locale0);
      assertNotNull(string0);
      assertEquals("b0x?zt.<*zizx)(]8h.", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Locale locale0 = Locale.UK;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.capitalize("oI1,lNR*q");
      assertNotNull(string0);
      assertEquals("OI1,lNR*q", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("I ");
      assertEquals("i ", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.swapCase(" nbpz");
      assertEquals(" NBPZ", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.swapCase("F");
      assertEquals("f", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "Ky]ruQ:nmiOzrJ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = StringUtils.countMatches("h", "h");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = StringUtils.countMatches("Ezu#|S+j%*&<eheY", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("HOf5\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("abbreviation width iRu%zyX.YUZP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("ARRAY ELEMENT ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("OpiN1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("W`LYz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("'n'U|=Ceqb=VAr?P*'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("3C(_@cZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("6F\"#GV!=%;hrRm<2~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" qt_,1=#d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" NBpZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("j, 'pg,$[%zz#7&isz(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("S");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.defaultString("^8GFgonR{wP");
      assertEquals("^8GFgonR{wP", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.defaultString("oI1,lNR*q", "EJ");
      assertEquals("oI1,lNR*q", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "kW}Z", (CharSequence) "kW}Z");
      assertEquals("kW}Z", charSequence0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, ":[Rh(D~");
      assertEquals(":[Rh(D~", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.reverse("f?.v!Jl");
      assertNotNull(string0);
      assertEquals("lJ!v.?f", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '+');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 756, 756);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.abbreviate("yiy$Vk0%{2Hz)E", 13, 13);
      assertEquals("yiy$Vk0%{2...", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 4239, (int) '/');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("java.awt.printerjob", 109, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombinigDiacrticalMarks}+", 16, 16);
      assertEquals("...rticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("IllegalAccessException occurred during 1.6 backcompat code", "SunOS", 13);
      assertEquals("IlleSunOScode", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(", Length: 0", (String) null, 10);
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(" nbpsz", " nbpsz", '\\');
      assertEquals(" nbpsz", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("^8GFgonR{wP", "the stripaccents(string) method i($mwazpknc]hs5g-dr,il java 1.6", (-13));
      assertEquals("^8GFgonR{wP", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.difference("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "q?");
      assertEquals("q?", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.difference("7x%", "7x%");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Ru%zyX.YUZP");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.difference("S", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.difference("W.5I=9 ", "W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 ");
      assertEquals("W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 W.5I=9 ", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?l+&#D#lhFT'2Y", "h", 0);
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("j", "j");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".'TimeToLive of";
      stringArray0[1] = ".'TimeToLive of";
      stringArray0[2] = ".'TimeToLive of ";
      stringArray0[3] = ".'TimeToLive of ";
      stringArray0[4] = ".'TimeToLive of";
      stringArray0[5] = ".'TimeToLive of ";
      stringArray0[6] = ".'TimeToLive of ";
      stringArray0[7] = ".'TimeToLive of ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(".'TimeToLive of", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "{3U}bTP-\"*";
      charSequenceArray0[1] = (CharSequence) "{3U}bTP-\"*";
      charSequenceArray0[2] = (CharSequence) "{3U}bTP-\"*";
      charSequenceArray0[3] = (CharSequence) "{3U}bTP-\"*";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Kv!Uyc", "Kv!Uyc");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("?/W)hP/=Y|!bo{", "{3U}bTP-\"*");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("^M", "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("fr0", "fr0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("PL.JkI}h8(-?D/K@", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("PwG}jtY", "d", 60);
      boolean boolean0 = StringUtils.startsWithAny("d", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("y!7)CR$tQxFKx,l-dW", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("java.awt.headless", "", 48);
      boolean boolean0 = StringUtils.startsWithAny("java.awt.headless", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "Windows");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Zm.V5=*Xo+9iVh~vH", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }
}
