/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 12:23:09 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1318);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("hxl<", week0, week0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)subCategoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals((-20.654296875), rectangle2D_Double0.y, 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      subCategoryAxis0.setFixedDimension(0.0025);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(0.0025, subCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hrxl<");
      subCategoryAxis0.setLabelURL("hrxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hrxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertTrue(subCategoryAxis1.isVisible());
      assertFalse(boolean0);
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.ChartMouseListener");
      SubCategoryAxis subCategoryAxis1 = (SubCategoryAxis)subCategoryAxis0.clone();
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertNotSame(subCategoryAxis1, subCategoryAxis0);
      assertTrue(subCategoryAxis1.isVisible());
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.getLabelURL();
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.getLabelToolTip();
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      assertTrue(subCategoryAxis0.isVisible());
      
      subCategoryAxis0.setVisible(true);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      subCategoryAxis0.setVisible(false);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis0.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel("Pi_Plot");
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'font' argument.");
      logarithmicAxis0.setLabel("Null 'font' argument.");
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("L(+");
      periodAxis0.setLabel("org.jfree.chart.block.CenterArrangement");
      assertEquals("org.jfree.chart.block.CenterArrangement", periodAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0);
      dateAxis0.setLabel((String) null);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Fourth");
      subCategoryAxis0.setLabelFont(subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 2.0F);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("b6%AWMpN(pqrk");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, 0.05);
      cyclicNumberAxis0.setLabelInsets(categoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      subCategoryAxis0.setAxisLinePaint(systemColor0);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertFalse(boolean0);
      assertTrue(subCategoryAxis1.isVisible());
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minute minute0 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.", minute0, minute0, minute0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        periodAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      
      categoryAxis3D0.setTickLabelsVisible(true);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      subCategoryAxis0.setTickLabelsVisible(false);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hrxl<");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      subCategoryAxis0.setTickLabelInsets(subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("l4ZR1mM");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("8I|8|?>-\"GB0!u3Hl");
      extendedCategoryAxis0.setTickMarksVisible(false);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      PiePlot piePlot0 = new PiePlot();
      Stroke stroke0 = piePlot0.getLabelOutlineStroke();
      subCategoryAxis0.setTickMarkStroke(stroke0);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertTrue(subCategoryAxis1.isVisible());
      assertFalse(boolean0);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("8I|8|?-\"GB0!u3Hl");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("l4ZR1mM");
      logarithmicAxis0.setTickMarkStroke(extendedCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.removeChangeListener(thermometerPlot0);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.removeChangeListener((AxisChangeListener) null);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      boolean boolean0 = numberAxis0.hasListener(thermometerPlot0);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      NumberAxis numberAxis0 = new NumberAxis();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, dateAxis0, numberAxis0, xYAreaRenderer2_0);
      boolean boolean0 = numberAxis0.hasListener(xYPlot0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(boolean0);
      assertTrue(numberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setDomainAxis(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", dateAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
      jFreeChart0.createBufferedImage(500, 10);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.getLabelEnclosure((Graphics2D) null, (RectangleEdge) null);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("N5", fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1387.237349692834, 775.3292442682157, 1724.98, 10);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(255);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      AxisState axisState0 = numberAxis3D0.draw(graphics2D0, 10.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(33.0, axisState0.getCursor(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("VdS", dateAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 44, chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("n#;<}");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(4.0, 0.2, 2406.09692150738, 4.0);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      AxisState axisState0 = numberAxis3D0.draw(graphics2D0, (-3075.55047), rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-3111.159845), axisState0.getCursor(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 0.05, 10, 3.0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'font' argument.");
      assertFalse(numberAxis3D0.isAxisLineVisible());
      
      numberAxis3D0.draw(graphics2D0, 30.0, rectangle2D_Double0, rectangle2D_Double0, (RectangleEdge) null, plotRenderingInfo0);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("N5", fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(304.728065808, 500, 1724.98, 10);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(10);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("N5");
      // Undeclared exception!
      try { 
        numberAxis3D0.draw(graphics2D0, 10, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'image' argument.", dateAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, false);
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      jFreeChart0.createBufferedImage(256, 10, chartRenderingInfo0);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("David Li");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("$:Z+sY$o3", categoryAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainCategoryPlot0, true);
      jFreeChart0.createBufferedImage(500, 10);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", dateAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("[lvuJn1|]Ff3.#>Jbg");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(328);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 155.78956037, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hrxl<");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        subCategoryAxis0.drawAxisLine((Graphics2D) null, 0.0, rectangle2D_Double0, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'font' argument.", dateAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 45, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        categoryAxis0.draw(graphics2D0, 0.0, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("w|j5Mh#g");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 2.0, 671.1952957, 1.0E-8);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 3534.8983, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertTrue(boolean0);
      assertTrue(subCategoryAxis1.isVisible());
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'font' argument.");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis(":");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertTrue(subCategoryAxis1.isVisible());
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setLabelFont(subCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setLabelPaint(systemColor0);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("A.l<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("A.l<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setLabelInsets(subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      subCategoryAxis1.setLabelAngle(0.0025);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(0.0025, subCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hrxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hrxl<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setLabelToolTip("hrxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      subCategoryAxis1.setAxisLineVisible(false);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(boolean0);
      assertFalse(subCategoryAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      subCategoryAxis1.setAxisLineStroke(basicStroke0);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis0.setTickLabelFont(subCategoryAxis1.DEFAULT_AXIS_LABEL_FONT);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setTickLabelPaint(subCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      subCategoryAxis0.setTickLabelInsets(rectangleInsets0);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis1.isVisible());
      assertFalse(boolean0);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hrxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hrxl<");
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      
      subCategoryAxis1.setTickMarksVisible(true);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      subCategoryAxis1.setTickMarkInsideLength((-1484.33F));
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals((-1484.33F), subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      subCategoryAxis1.setTickMarkOutsideLength(980.05F);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertEquals(980.05F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("hxl<");
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis("hxl<");
      assertTrue(subCategoryAxis1.equals((Object)subCategoryAxis0));
      
      subCategoryAxis1.setTickMarkPaint(subCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = subCategoryAxis0.equals(subCategoryAxis1);
      assertFalse(subCategoryAxis1.equals((Object)subCategoryAxis0));
      assertFalse(boolean0);
  }
}
