/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:56:53 GMT 2023
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      assertEquals(9, strBuilder0.length());
      
      strBuilder0.deleteAll("VPTfcbLQ&");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("n=");
      int int0 = strBuilder0.capacity();
      assertEquals(2, strBuilder0.length());
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2263));
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getIgnoredMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('\u0000');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      int int0 = strBuilder0.lastIndexOf('~');
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.reset("Invalid offset: ");
      strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-587));
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-587), (-587), '4');
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      int int0 = strBuilder0.indexOf("4Jp)\"+5AY:RNA*");
      assertEquals((-1), int0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2299);
      strBuilder0.append(2299);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asReader();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(9, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      strBuilder0.asTokenizer();
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(57);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 57, 'w');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert((-731), (-1857L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -731
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert((-63), (-63));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -63
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(24, (double) 24);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 24
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'Qz4a ?se");
      int int0 = strBuilder0.lastIndexOf("'Qz4a ?se");
      assertEquals(0, int0);
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0.0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1990), (-1990), 'z');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, ';');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(35);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(102, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append('q');
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append((CharSequence) "");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[5];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(1302, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("4Jp)\"+5AY:RNA*", (-1), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(506);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 506
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNullText("\"IOP");
      strBuilder0.appendNull();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.setLength(9);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1585));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1585
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      strBuilder0.setLength(2);
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      strBuilder0.appendFixedWidthPadLeft(4, 439, 'P');
      strBuilder0.minimizeCapacity();
      assertEquals(445, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(116);
      boolean boolean0 = strBuilder1.isEmpty();
      assertEquals(116, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(4, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1468));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1468
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(9, strBuilder0.size());
      assertEquals(86, int0);
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      // Undeclared exception!
      try { 
        strBuilder0.charAt(1549);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1549
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-5637), 'D');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -5637
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt('y', 'y');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 121
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-689));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -689
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      strBuilder0.deleteCharAt(0);
      assertEquals(8, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(116);
      strBuilder0.toCharArray();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m&M\"t@hTMSEo0gLQ");
      strBuilder0.replaceFirst("m&M\"t@hTMSEo0gLQ", (String) null);
      strBuilder0.toCharArray();
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      char[] charArray0 = strBuilder0.toCharArray(0, 744);
      assertArrayEquals(new char[] {'S', 'o', 'l', 'a', 'r', 'i', 's'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      char[] charArray0 = strBuilder0.toCharArray(5, 5);
      assertEquals(9, strBuilder0.length());
      assertEquals(0, charArray0.length);
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("y-jCNC{ZHq>pv72");
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      char[] charArray0 = new char[6];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertArrayEquals(new char[] {'h', 'l', 'w', '_', '{', ')'}, charArray0);
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("n=");
      char[] charArray0 = new char[0];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(34, strBuilder0.capacity());
      assertArrayEquals(new char[] {'n', '='}, charArray1);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(35, charBuffer0.length());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("n=");
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-686), (-686), (char[]) null, (-3079));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -686
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, (-479), (char[]) null, (-479));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -479
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(6, 6, charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 6
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(31, 0, charArray0, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNewLineText("kUPjT=gf");
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendNewLine();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertEquals(1, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("MVzklU{GGvlS:J&h3|");
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(50, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null, (-4871), (-197));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTf(cbLQ&");
      StrBuilder strBuilder1 = strBuilder0.append("VPTf(cbLQ&", 0, 0);
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("X)OjE5^] q'8H-", 4755, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("c5LMi!)x[4H1_f\"yu", 6, (-28));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("Fm", 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      strBuilder0.append("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader", 3, 35);
      assertEquals(91, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(9, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'Qz4a ?se");
      StringBuffer stringBuffer0 = new StringBuffer("'Qz4a ?se");
      strBuilder0.append(stringBuffer0);
      assertEquals(18, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StringBuffer stringBuffer0 = new StringBuffer("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'Qz4a ?se");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 1414, 0);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1775), (-1775));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 27, 27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m&M\"t@hTMSEo0gLQ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-1717));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      StringBuffer stringBuffer0 = new StringBuffer("3v_vog;&z.\"sau<");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 4, 1847);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1302, '1');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.append((Object) strBuilder0);
      strBuilder1.append(stringBuffer0, 2, 34);
      assertEquals(1336, strBuilder0.capacity());
      assertEquals(1336, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(")GIofFXkIF0il$72");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-1790), 98);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, 57, (-1431));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 7, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-740));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: ");
      StrBuilder strBuilder1 = new StrBuilder(2);
      strBuilder1.append((-1L));
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(4, 439, 'P');
      strBuilder1.append(strBuilder0, 37, 37);
      assertEquals(482, strBuilder0.length());
      assertEquals(482, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, (-1976), 4079);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-74), 1975);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1975
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 34, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 34
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, 764);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 764
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[3];
      strBuilder0.append(charArray0, 1, 1);
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "set() is unsupported");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "?D-,pR]!/UCtl");
      assertEquals(1302, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      Object[] objectArray0 = new Object[4];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(88, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "1hlL_PJ.");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      assertEquals(56, strBuilder1.length());
      assertEquals(88, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "n=");
      StrBuilder strBuilder0 = new StrBuilder((-844));
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerLast(strBuilder0);
      linkedList0.add((Object) "Y?76E_js[nnj}h");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      assertEquals(189, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "Array element ");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'Qz4a ?se");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "");
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(63, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-1120), ';');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 101, 'Z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 32, '7');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      strBuilder0.appendFixedWidthPadRight((-1542), 5, 'c');
      assertEquals(61, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight(108, 108, '%');
      int int0 = strBuilder0.lastIndexOf("", Integer.MAX_VALUE);
      assertEquals(108, strBuilder0.capacity());
      assertEquals(107, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        strBuilder0.insert(32, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m&M\"t@hTMSEo0gLQ");
      // Undeclared exception!
      try { 
        strBuilder0.insert(2246, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2246
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'Qz4a ?se");
      strBuilder0.insert(0, (float) 1414);
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      char[] charArray0 = new char[1];
      strBuilder0.insert(32, charArray0);
      assertEquals(57, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m&M\"t@hTMSEo0gLQ");
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("<@0");
      char[] charArray0 = new char[3];
      strBuilder0.insert(1, charArray0, 1, 1);
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null, (-788), 32);
      assertEquals(9, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-851), (-1564));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -851
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: ");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, charArray0, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("<@0");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, charArray0, 1, (-17));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -17
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 7
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m&M\"t@hTMSEo0gLQ");
      strBuilder0.insert(0, true);
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 31;
      strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, 'X');
      strBuilder1.deleteAll('X');
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      strBuilder0.appendPadding(1302, '1');
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.deleteAll('1');
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTf(c8LQ&");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('i');
      assertEquals(10, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      strBuilder0.setCharAt(0, 'X');
      strBuilder0.deleteFirst('X');
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("<@0");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("<@0");
      strBuilder0.deleteFirst("<@0");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'Qz4a ?se");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("o%%");
      Object[] objectArray0 = new Object[6];
      strBuilder0.appendWithSeparators(objectArray0, "o%%");
      strBuilder0.replaceAll(strMatcher0, "o%%");
      assertEquals(24, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTf(cbLQ&");
      strBuilder0.replace(0, 0, "VPTf(cbLQ&");
      assertEquals(20, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replace(0, 25, (String) null);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-722));
      StrBuilder strBuilder1 = strBuilder0.replaceAll('C', 'C');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('i', '_');
      assertEquals(56, strBuilder1.length());
      assertEquals(88, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('W', 'W');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('=', 'g');
      assertEquals(88, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1302, '1');
      strBuilder1.replaceFirst('1', 'I');
      assertEquals(1302, strBuilder0.size());
      assertEquals(1302, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "<@0");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll("K4Ad", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      strBuilder0.replaceAll("s", "org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      assertEquals(111, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("length must be valid", "length must be valid");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("/{7F>DD{m4x=");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("/{7F>DD{m4x=", "/{7F>DD{m4x=");
      assertEquals(44, strBuilder1.capacity());
      assertEquals(12, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('T');
      strBuilder0.deleteFirst((StrMatcher) strMatcher_CharMatcher0);
      assertEquals(8, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(56, strBuilder1.length());
      assertEquals(88, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: ");
      strBuilder0.trim();
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      boolean boolean0 = strBuilder0.startsWith("s");
      assertFalse(boolean0);
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(1302, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      boolean boolean0 = strBuilder0.startsWith("1.2");
      assertEquals(1302, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: ");
      boolean boolean0 = strBuilder0.startsWith(", Length: ");
      assertEquals(42, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m&M\"t@hTMSEo0gLQ");
      boolean boolean0 = strBuilder0.endsWith("org.apache.commons.lang.text.StrBuilder");
      assertFalse(boolean0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(1302, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(boolean0);
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      boolean boolean0 = strBuilder0.endsWith("hlw_{)");
      assertTrue(boolean0);
      assertEquals(38, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((-2559.6F));
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(7, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      String string0 = strBuilder0.leftString(4);
      assertEquals(88, strBuilder0.capacity());
      assertEquals("org.", string0);
      assertEquals(56, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      strBuilder0.leftString((-982));
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("HUX");
      String string0 = strBuilder0.leftString(436);
      assertEquals(35, strBuilder0.capacity());
      assertEquals("HUX", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(31);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      strBuilder0.rightString((-1725));
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m&M\"t@hTMSEo0gLQ");
      String string0 = strBuilder0.rightString(3);
      assertEquals(48, strBuilder0.capacity());
      assertEquals("gLQ", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(1, 1);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      String string0 = strBuilder0.midString((-1), 2);
      assertEquals("or", string0);
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-6624));
      strBuilder0.midString((-6624), (-6624));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTf(c8LQ&");
      String string0 = strBuilder0.midString(2, 9);
      assertEquals(42, strBuilder0.capacity());
      assertEquals("Tf(c8LQ&", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      boolean boolean0 = strBuilder0.contains('p');
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) strBuilder0;
      strBuilder0.appendWithSeparators(objectArray0, "hlw_{)");
      boolean boolean0 = strBuilder0.contains('p');
      assertEquals(92, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains("");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      boolean boolean0 = strBuilder0.contains("");
      assertEquals(38, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(6, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      int int0 = strBuilder0.indexOf('c', (-2472));
      assertEquals(88, strBuilder0.capacity());
      assertEquals(7, int0);
      assertEquals(56, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      int int0 = strBuilder0.indexOf("Invalid length: ", (-5909));
      assertEquals(1302, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      int int0 = strBuilder0.indexOf((String) null, 1274);
      assertEquals(56, strBuilder0.length());
      assertEquals((-1), int0);
      assertEquals(88, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      strBuilder1.replaceAll("^OFLL(p`mTUs}-(", "T&");
      assertEquals(50, strBuilder0.capacity());
      assertEquals(50, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0, (-1387));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("/{7F>DD{m4x=");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf('X', 0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      strBuilder0.append(charArray0);
      int int0 = strBuilder0.lastIndexOf('v', 0);
      assertEquals(1, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf("_?TsX~lEQ7Dl\"lx6a~=", 57);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((String) null, 70);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      strBuilder0.append(charArray0);
      int int0 = strBuilder0.lastIndexOf("+e;D^X pAW$M Jkah", 1679);
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      int int0 = strBuilder0.lastIndexOf("6", 29);
      assertEquals((-1), int0);
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 31;
      int int0 = strBuilder0.lastIndexOf("R+", 31);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      int int0 = strBuilder0.lastIndexOf(strMatcher0, (-2803));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTf(cbLQ&");
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals((-1), int0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.te(t.StrBuilder$StrBuilderReader");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("r616-p5dpSJ");
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 3);
      assertEquals(1, int0);
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = new StrBuilder("VPTfcbLQ&");
      strBuilder1.append(strBuilder1);
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, 'X');
      StrBuilder strBuilder2 = new StrBuilder("VPTfcbLQ&");
      boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder1);
      assertEquals(41, strBuilder2.capacity());
      assertFalse(boolean0);
      assertEquals(9, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = new StrBuilder("VPTfcbLQ&");
      strBuilder0.setCharAt(0, 'v');
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: ");
      StrBuilder strBuilder1 = new StrBuilder(2);
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(2, strBuilder1.capacity());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      StrBuilder strBuilder1 = new StrBuilder("VPTfcbLQ&");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(boolean0);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      strBuilder0.setCharAt(0, 'T');
      StrBuilder strBuilder1 = new StrBuilder("VPTfcbLQ&");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(9, strBuilder1.length());
      assertFalse(boolean0);
      assertEquals(41, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hlw_{)");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer0);
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-722));
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer[not tokenized yet]");
      strBuilder0.hashCode();
      assertEquals(31, strBuilder0.length());
      assertEquals(63, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring((-508), (-508));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -508
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.reset("Invalid offset: ");
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("Invalid offset: ", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-596));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-596), (-596));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 31, (-553));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 4, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 2182);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 5, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid offset: ");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VPTfcbLQ&");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "VPTfcbLQ&");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1302);
      strBuilder0.appendPadding(1302, '1');
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(1302);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1302L, long0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(2271L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-1L));
      assertEquals(0, strBuilder0.size());
      assertEquals(0L, long0);
      assertEquals(32, strBuilder0.capacity());
  }
}
