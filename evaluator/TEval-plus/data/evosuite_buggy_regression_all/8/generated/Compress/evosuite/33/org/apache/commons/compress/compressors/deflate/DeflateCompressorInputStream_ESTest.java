/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:45:50 GMT 2023
 */

package org.apache.commons.compress.compressors.deflate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.zip.ZipException;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeflateCompressorInputStream_ESTest extends DeflateCompressorInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
      deflateCompressorInputStream0.close();
      assertEquals(0, deflateCompressorInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pushbackInputStream0);
      try { 
        deflateCompressorInputStream0.skip(1L);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // unknown compression method
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
      DeflateCompressorInputStream deflateCompressorInputStream1 = new DeflateCompressorInputStream(deflateCompressorInputStream0);
      try { 
        deflateCompressorInputStream1.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
      int int0 = deflateCompressorInputStream0.available();
      assertEquals(1, int0);
  }
}
