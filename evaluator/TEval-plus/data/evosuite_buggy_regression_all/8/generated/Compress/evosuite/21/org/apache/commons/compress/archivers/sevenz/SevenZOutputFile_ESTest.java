/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:43:52 GMT 2023
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SevenZOutputFile_ESTest extends SevenZOutputFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r", "org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(file0, "org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[3];
      sevenZOutputFile0.write(byteArray0);
      sevenZOutputFile0.closeArchiveEntry();
      sevenZOutputFile0.close();
      assertEquals(254L, file0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r", "org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      sevenZOutputFile0.close();
      sevenZOutputFile0.close();
      assertEquals(44L, file0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lu2;?rd}Yo<d '+6:q", "lu2;?rd}Yo<d '+6:q");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "lu2;?rd}Yo<d '+6:q");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.closeArchiveEntry();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("}1hS'", "}1hS'");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      sevenZOutputFile0.write((byte[]) null, (-2130440125), (-2130440125));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.co)press.ar.hivers.sevenz.SevenZOutputFile$AutputStreamWrapper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      sevenZOutputFile0.finish();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";1hq'", ";1hq'");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      sevenZOutputFile0.write(8);
      sevenZOutputFile0.write(2421);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r", "org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(file0, "org.apache.commons.compress.archivers.sevenz.ev]nZOutputFile$OutputStreamWrpp[r");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[3];
      SevenZMethod sevenZMethod0 = SevenZMethod.COPY;
      sevenZOutputFile0.setContentCompression(sevenZMethod0);
      sevenZOutputFile0.write(byteArray0);
      sevenZOutputFile0.closeArchiveEntry();
      sevenZOutputFile0.close();
      assertEquals(248L, file0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lu2;?rd}Yo<d '+6:q", "lu2;?rd}Yo<d '+6:q");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "lu2;?rd}Yo<d '+6:q");
      sevenZArchiveEntry0.setAntiItem(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(103L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|\"q6<a?>~A,IhZFy<", "|\"q6<a?>~A,IhZFy<");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(76L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|\"q6<a?>~A,IhZFy<", "|\"q6<a?>~A,IhZFy<");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.close();
      assertEquals(87L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lu2;?rd}Yo<d '+6:q", "lu2;?rd}Yo<d '+6:q");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "lu2;?rd}Yo<d '+6:q");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZOutputFile0.close();
      assertEquals(112L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lu2;?rd}Yo<d '+6:q", "lu2;?rd}Yo<d '+6:q");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "lu2;?rd}Yo<d '+6:q");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "lu2;?rd}Yo<d '+6:q");
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.close();
      assertEquals(159L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.co)press.ar.hivers.seenz.SevenZOtputFile$AutputStreamWrapper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.commons.co)press.ar.hivers.seenz.SevenZOtputFile$AutputStreamWrapper");
      sevenZArchiveEntry0.setHasLastModifiedDate(false);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(211L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.co)press.ar.hivers.sevenz.SevenZOutputFile$AutputStreamWrapper", "org.apache.commons.co)press.ar.hivers.sevenz.SevenZOutputFile$AutputStreamWrapper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.commons.co)press.ar.hivers.sevenz.SevenZOutputFile$AutputStreamWrapper");
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(235L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|\"q6<a?>~A,IhZFy<", "|\"q6<a?>~A,IhZFy<");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZArchiveEntry1.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.close();
      assertEquals(83L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lu2;?rd}Yo<d '+6:q");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "lu2;?rd}Yo<d '+6:q");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(379L, mockFile0.length());
  }
}
