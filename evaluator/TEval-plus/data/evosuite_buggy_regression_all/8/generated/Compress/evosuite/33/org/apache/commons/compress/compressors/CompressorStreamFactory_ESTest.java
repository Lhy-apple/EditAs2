/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:44:54 GMT 2023
 */

package org.apache.commons.compress.compressors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompressorStreamFactory_ESTest extends CompressorStreamFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      boolean boolean0 = compressorStreamFactory0.getDecompressConcatenated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("snappy-raw");
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("deflate", mockPrintStream0);
      assertNotNull(compressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      compressorStreamFactory0.setDecompressConcatenated(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.setDecompressConcatenated(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot override the setting defined by the constructor
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Compressor found for the stream signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 643, 643);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((String) null, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("deflate", (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      try { 
        compressorStreamFactory0.createCompressorInputStream("snappy-raw", (InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("gz", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      try { 
        compressorStreamFactory0.createCompressorInputStream("bzip2", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("xz", (InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("lzma", (InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1790937413), (byte)115);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("pack200", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1442929574), (-1442929574));
      CompressorInputStream compressorInputStream0 = compressorStreamFactory0.createCompressorInputStream("deflate", (InputStream) byteArrayInputStream0);
      assertEquals(0, compressorInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("snappy-framed", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      try { 
        compressorStreamFactory0.createCompressorInputStream("z", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      try { 
        compressorStreamFactory0.createCompressorInputStream("7^<f|", (InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: 7^<f| not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream((String) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("gz");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = (BZip2CompressorOutputStream)compressorStreamFactory0.createCompressorOutputStream("bzip2", mockPrintStream0);
      assertEquals(1, BZip2CompressorOutputStream.MIN_BLOCKSIZE);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("%K!*;204E!=nnMjPgw", (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("snappy-raw");
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("gz", mockFileOutputStream0);
      assertNotNull(compressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("xz", byteArrayOutputStream0);
      try { 
        compressorStreamFactory0.createCompressorOutputStream("&Y", compressorOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: &Y not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("gz");
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("pack200", mockPrintStream0);
      assertNotNull(compressorOutputStream0);
  }
}
