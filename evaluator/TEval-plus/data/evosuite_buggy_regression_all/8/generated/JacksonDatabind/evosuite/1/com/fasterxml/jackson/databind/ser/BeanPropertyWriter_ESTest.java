/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:58:51 GMT 2023
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.ClientInfoStatus;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(";HIx<$8*qXI=0L", annotationIntrospector0, false);
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, false, annotationIntrospector0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationConfig serializationConfig0 = objectMapper0.getSerializationConfig();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      PropertySerializerMap propertySerializerMap0 = beanPropertyWriter0._dynamicSerializers;
      assertNotNull(propertySerializerMap0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = defaultSerializerProvider_Impl0.createInstance(serializationConfig0, beanSerializerFactory0);
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class1, defaultSerializerProvider_Impl1);
      assertFalse(beanPropertyWriter0.hasNullSerializer());
      assertFalse(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(": was expecting closing '\"' for name", annotationIntrospector0, false);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, false, "?:Z|ONN(*P0+9P");
      beanPropertyWriter0.getWrapperName();
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, false);
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, false, annotatedField0);
      Class<Annotation> class1 = Annotation.class;
      beanPropertyWriter0.getAnnotation(class1);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(": was expecting closing '\"' for name", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, ": was expecting closing '\"' for name");
      beanPropertyWriter0.getSerializedName();
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(": was expecting closing '\"' for name", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      boolean boolean0 = beanPropertyWriter0.isRequired(annotationIntrospector0);
      assertTrue(beanPropertyWriter0.hasSerializer());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fasterxml.jackson.annotUtion.JsonAtoDetect$1", annotationIntrospector0, false);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, false, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(">tyvEa71%os", annotationIntrospector0, true);
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<ClassKey> jsonSerializer0 = (JsonSerializer<ClassKey>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, true, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("P9", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, annotatedField0);
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter((NameTransformer) null);
      assertTrue(beanPropertyWriter1.willSuppressNulls());
      assertTrue(beanPropertyWriter1.hasSerializer());
      assertFalse(beanPropertyWriter1.isRequired());
      assertFalse(beanPropertyWriter1.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("P9", annotationIntrospector0, false);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, false, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      beanPropertyWriter0.setNonTrivialBaseType(simpleType0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("S 40FHvj%Y@LI*", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      Class<Annotation> class1 = Annotation.class;
      beanPropertyWriter0.getContextAnnotation(class1);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", (AnnotationIntrospector) null, false);
      Class<Method> class0 = Method.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanPropertyWriter beanPropertyWriter0 = null;
      try {
        beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, (Annotations) null, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, false, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      beanPropertyWriter0.setInternalSetting(": was expecting closing '\"' for name", coreXMLSerializers_XMLGregorianCalendarSerializer0);
      SerializedString serializedString0 = new SerializedString("");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      assertTrue(beanPropertyWriter1.hasSerializer());
      assertFalse(beanPropertyWriter1.hasNullSerializer());
      assertFalse(beanPropertyWriter1.isRequired());
      assertTrue(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("?KHT%_&5u", annotationIntrospector0, false);
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, false, annotationIntrospector0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("?KHT%_&5u", "?KHT%_&5u");
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.rename(nameTransformer0);
      assertFalse(beanPropertyWriter1.hasNullSerializer());
      assertTrue(beanPropertyWriter1.hasSerializer());
      assertEquals("?KHT%_&5u?KHT%_&5u?KHT%_&5u", beanPropertyWriter1.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("dq(ls]_t|@1+@dq(ls]_t|@1+@=S}\"F=S}\"F", annotationIntrospector0, false);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, false, (Object) null);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.rename(nameTransformer0);
      assertSame(beanPropertyWriter1, beanPropertyWriter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("a @", annotationIntrospector0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, arrayType0, false, typeFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("a @", annotationIntrospector0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, arrayType0, defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER, (TypeSerializer) null, arrayType0, false, simpleType0);
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("$any", annotationIntrospector0, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((Map) null).when(pOJOPropertiesCollector0).getInjectables();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, beanSerializerBuilder0, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
      beanPropertyWriter0.assignNullSerializer(beanSerializer0);
      beanPropertyWriter0.assignNullSerializer(beanSerializer0);
      assertTrue(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(": was expecting closing '\"' for name", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, "#=m{bUz'1FE");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((Map) null).when(pOJOPropertiesCollector0).getInjectables();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[2];
      BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, beanSerializerBuilder0, beanPropertyWriterArray0, beanPropertyWriterArray0);
      beanPropertyWriter0.assignNullSerializer(beanSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override null serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, false);
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, false, annotatedField0);
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("dq(ls]_t|@1+@dq(ls]_t|@1+@=S}\"F=S}\"F", annotationIntrospector0, false);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, false, (Object) null);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
      assertFalse(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      beanPropertyWriter0.setInternalSetting(simpleType0, annotatedField0);
      Object object0 = beanPropertyWriter0.getInternalSetting(simpleType0);
      assertNotNull(object0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      beanPropertyWriter0.getInternalSetting(class0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(": ws expeting closing '\"' for 0ame", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      beanPropertyWriter0.setInternalSetting(": ws expeting closing '\"' for 0ame", coreXMLSerializers_XMLGregorianCalendarSerializer0);
      Object object0 = beanPropertyWriter0.setInternalSetting(simpleType0, ": ws expeting closing '\"' for 0ame");
      assertNull(object0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      Boolean boolean0 = new Boolean("");
      Object object0 = beanPropertyWriter0.removeInternalSetting(boolean0);
      assertNull(object0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, annotationMap0);
      beanPropertyWriter0.setInternalSetting(annotationMap0, pOJOPropertyBuilder0);
      Object object0 = beanPropertyWriter0.removeInternalSetting(annotationMap0);
      assertNotNull(object0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(": was expecting closing '\"' for name", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      beanPropertyWriter0.setInternalSetting(": was expecting closing '\"' for name", coreXMLSerializers_XMLGregorianCalendarSerializer0);
      Object object0 = beanPropertyWriter0.removeInternalSetting(annotationIntrospector0);
      assertNull(object0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("iLPL+*", annotationIntrospector0, true);
      Class<AnnotationIntrospector> class0 = AnnotationIntrospector.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<ClassKey> jsonSerializer0 = (JsonSerializer<ClassKey>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, classNameIdResolver0, ":", true, class0);
      CreatorProperty creatorProperty0 = new CreatorProperty("' (expected type: ", (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2147483645, (Object) null, true);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(classNameIdResolver0, creatorProperty0, "' (expected type: ");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, jsonSerializer0, asPropertyTypeSerializer0, (JavaType) null, true, objectIdGenerators_IntSequenceGenerator0);
      Class<?> class1 = beanPropertyWriter0.getRawSerializationType();
      assertTrue(beanPropertyWriter0.hasSerializer());
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, simpleType0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getPropertyType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fasterxml.jackson.databind.deser.DataFormatReaders", annotationIntrospector0, true);
      Class<DecimalNode> class0 = DecimalNode.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, (JavaType) null, true, annotationIntrospector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("<*nb-1*nDi^=7Jt", annotationIntrospector0, true);
      Class<DecimalNode> class0 = DecimalNode.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, annotationMap0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(": was expectin closing '\"' for ame", annotationIntrospector0, false);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, false, simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsPlaceholder(annotationIntrospector0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(";HIx<$8*qXI=0L", annotationIntrospector0, true);
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, true, annotationIntrospector0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      beanPropertyWriter0._nonTrivialBaseType = (JavaType) simpleType0;
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      PropertySerializerMap propertySerializerMap0 = beanPropertyWriter0._dynamicSerializers;
      // Undeclared exception!
      try { 
        beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("a @", annotationIntrospector0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, arrayType0, false, typeFactory0);
      try { 
        beanPropertyWriter0.get(simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("P9", annotationIntrospector0, true);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, true, annotatedField0);
      try { 
        beanPropertyWriter0._handleSelfReference(simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Direct self-reference leading to cycle
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("P9", annotationIntrospector0, false);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, simpleType0, false, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }
}
