/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:01:33 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.EnumSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
      assertTrue(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanSerializer beanSerializer0 = new BeanSerializer(javaType0, beanSerializerBuilder0, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
      assertFalse(beanSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanSerializer0.resolve(defaultSerializerProvider_Impl0);
      assertFalse(beanSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      boolean boolean0 = beanSerializer0.usesObjectId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<StdArraySerializers.FloatArraySerializer> class0 = StdArraySerializers.FloatArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Integer integer0 = new Integer(389);
      ArrayType arrayType0 = ArrayType.construct(simpleType0, integer0, integer0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(arrayType0);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, (PropertyName) null, (ObjectIdGenerator<?>) null, true);
      BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
      boolean boolean0 = beanSerializerBase0.usesObjectId();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumSet> class0 = EnumSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionType0);
      // Undeclared exception!
      try { 
        beanSerializer0.serializeWithType(stdArraySerializers_LongArraySerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdArraySerializers.BooleanArraySerializer stdArraySerializers_BooleanArraySerializer0 = new StdArraySerializers.BooleanArraySerializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) dataOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      beanSerializer0.serialize(stdArraySerializers_BooleanArraySerializer0, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0);
      assertFalse(stdArraySerializers_BooleanArraySerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) javaType0);
      assertEquals(2, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0);
      assertFalse(javaType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
      JavaType javaType0 = stdArraySerializers_LongArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, javaType0);
      assertFalse(javaType0.isInterface());
  }
}
