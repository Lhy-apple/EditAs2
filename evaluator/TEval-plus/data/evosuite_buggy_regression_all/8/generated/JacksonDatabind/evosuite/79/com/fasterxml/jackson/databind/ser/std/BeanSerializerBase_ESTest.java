/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:17:28 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyWriter;
import com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.StringArraySerializer;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.EnumSetSerializer;
import com.fasterxml.jackson.databind.ser.std.MapSerializer;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        beanSerializerBase0.serialize(defaultSerializerProvider_Impl0, jsonGenerator0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringArraySerializer stringArraySerializer0 = StringArraySerializer.instance;
      JavaType javaType0 = stringArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      Iterator<PropertyWriter> iterator0 = beanSerializer0.properties();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IndexedListSerializer> class0 = IndexedListSerializer.class;
      JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
      assertTrue(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "object");
      objectMapper0.writeValue((OutputStream) mockPrintStream0, (Object) asExternalTypeSerializer0);
      assertEquals(151, byteArrayOutputStream0.size());
      assertEquals("{\"typeInclusion\":\"EXTERNAL_PROPERTY\",\"propertyName\":\"object\",\"typeIdResolver\":{\"mechanism\":\"CLASS\",\"descForKnownTypeIds\":\"class name used as type id\"}}", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        objectMapper0.writeValue((OutputStream) null, (Object) objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IndexedListSerializer> class0 = IndexedListSerializer.class;
      JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      boolean boolean0 = beanSerializer0.usesObjectId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<EnumSetSerializer> class0 = EnumSetSerializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanSerializer beanSerializer0 = new BeanSerializer(referenceType0, beanSerializerBuilder0, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
      PropertyName propertyName0 = PropertyName.construct("");
      ObjectIdGenerator<MapSerializer> objectIdGenerator0 = (ObjectIdGenerator<MapSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, true);
      BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
      boolean boolean0 = beanSerializerBase0.usesObjectId();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      // Undeclared exception!
      try { 
        beanSerializer0.serializeWithType((Object) null, (JsonGenerator) null, (SerializerProvider) null, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
      assertEquals(2, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanSerializerBase0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
      assertFalse(beanSerializer0.isUnwrappingSerializer());
  }
}
