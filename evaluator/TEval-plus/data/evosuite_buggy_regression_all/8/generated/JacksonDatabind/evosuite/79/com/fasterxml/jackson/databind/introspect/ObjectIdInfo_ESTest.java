/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:16:41 GMT 2023
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectIdInfo_ESTest extends ObjectIdInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("$VG>qg:-6_jx?6!SNp", class0, class0);
      Class<? extends ObjectIdGenerator<?>> class1 = objectIdInfo0.getGeneratorType();
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator", class1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo((PropertyName) null, class0, class1, class2);
      assertFalse(objectIdInfo0.getAlwaysAsId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jsckson.databind.introspect.ObjectddInfo", class0, class0);
      Class<? extends ObjectIdResolver> class1 = objectIdInfo0.getResolverType();
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.annotation.SimpleObjectIdResolver", class1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("TIy", class0, class0);
      boolean boolean0 = objectIdInfo0.getAlwaysAsId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("", class0, class0);
      PropertyName propertyName0 = objectIdInfo0.getPropertyName();
      assertNotNull(propertyName0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("", class0, class0);
      Class<?> class1 = objectIdInfo0.getScope();
      assertNotNull(class1);
      assertEquals(9, class1.getModifiers());
      assertFalse(objectIdInfo0.getAlwaysAsId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.util.JsonParserDelegate", class0, class0);
      ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(true);
      assertTrue(objectIdInfo1.getAlwaysAsId());
      assertFalse(objectIdInfo0.getAlwaysAsId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxmljackson.core.utl.JsonParserDelegate", class0, class0);
      ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(false);
      assertSame(objectIdInfo1, objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("$VG>qg:-6_Ljx?6!SNp", class0, (Class<? extends ObjectIdGenerator<?>>) null);
      String string0 = objectIdInfo0.toString();
      assertEquals("ObjectIdInfo: propName=$VG>qg:-6_Ljx?6!SNp, scope=com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator, generatorType=null, alwaysAsId=false", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("write a null", (Class<?>) null, class0);
      String string0 = objectIdInfo0.toString();
      assertEquals("ObjectIdInfo: propName=write a null, scope=null, generatorType=com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator, alwaysAsId=false", string0);
  }
}
