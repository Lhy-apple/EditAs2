/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:08:58 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Integer integer0 = Integer.valueOf((-524));
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) simpleType0, (Object) integer0, (Object) integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ReferenceType referenceType1 = referenceType0.withTypeHandler(fileSystemHandling0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(fileSystemHandling0);
      assertFalse(referenceType2.useStaticType());
      assertNotSame(referenceType2, referenceType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) javaType0, (Object) "");
      MapType mapType0 = MapType.construct(class0, referenceType0, referenceType0);
      StringBuilder stringBuilder0 = new StringBuilder("z;h");
      mapType0.getGenericSignature(stringBuilder0);
      assertEquals("z;hLjava/lang/Object<Ljava/lang/Object<Ljava/lang/Object;;Ljava/lang/Object<Ljava/lang/Object;;>;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Object> class1 = Object.class;
      Class<Integer> class2 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class2);
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, (Object) class1, (Object) simpleType0);
      referenceType0.getReferencedType();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      JavaType javaType0 = typeFactory0._unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) typeParser0, object0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      String string0 = referenceType0.toString();
      assertFalse(referenceType0.useStaticType());
      assertEquals("[reference type, class java.lang.String<java.lang.String<java.lang.String,java.lang.String><[map-like type; class java.lang.String, [simple type, class java.lang.String] -> [simple type, class java.lang.String]]>]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, object0);
      String string0 = referenceType0.getErasedSignature();
      assertFalse(referenceType0.useStaticType());
      assertEquals("Ljava/lang/String;", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) mapType0);
      referenceType0.getParameterSource();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ReferenceType> class1 = ReferenceType.class;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, javaType0, object0, (Object) class0);
      JavaType javaType1 = referenceType0._narrow(class0);
      assertTrue(javaType1.isJavaLangObject());
      assertFalse(javaType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      int int0 = referenceType0.containedTypeCount();
      assertFalse(referenceType0.useStaticType());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      Class<String> class2 = String.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (JavaType) simpleType0, (Object) class0, (Object) class2);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(referenceType0);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      Integer integer0 = new Integer(2928);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(integer0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<JsonEncoding> class1 = JsonEncoding.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class0);
      Integer integer0 = new Integer(62);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionLikeType0, (Object) typeFactory0, (Object) integer0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertTrue(referenceType1.useStaticType());
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) collectionType0, (Object) simpleType0, object0);
      ReferenceType referenceType1 = new ReferenceType(class0, referenceType0, referenceType0, object0, true);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(object0);
      ReferenceType referenceType3 = referenceType2.withStaticTyping();
      assertFalse(referenceType0.useStaticType());
      assertSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, object0);
      JavaType javaType0 = referenceType0.containedType((-808));
      assertFalse(referenceType0.useStaticType());
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) simpleType0, object0);
      JavaType javaType0 = referenceType0.containedType(0);
      assertNotNull(javaType0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Class<Object> class0 = Object.class;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Integer integer0 = new Integer((-885));
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) collectionType0, (Object) integer0);
      String string0 = referenceType0.containedTypeName(1557);
      assertFalse(referenceType0.useStaticType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) simpleType0, object0);
      String string0 = referenceType0.containedTypeName(0);
      assertFalse(referenceType0.useStaticType());
      assertNotNull(string0);
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      Integer integer0 = new Integer(2928);
      boolean boolean0 = referenceType0.equals(integer0);
      assertFalse(referenceType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, object0);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, object0, (Object) jsonEncoding0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(referenceType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, object0, (Object) mapLikeType0);
      Class<Object> class1 = Object.class;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class1, (JavaType) referenceType0, object0, (Object) referenceType0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(referenceType1.useStaticType());
      assertFalse(boolean0);
  }
}
