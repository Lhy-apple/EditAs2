/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:02:41 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.RawSerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.ser.std.StringSerializer;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.sql.SQLSyntaxErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdSerializer_ESTest extends StdSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<Object, ?>) null, simpleType0, (JsonSerializer<?>) null);
      assertFalse(stdDelegatingSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
      JavaType javaType0 = stdArraySerializers_IntArraySerializer0.getContentType();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) javaType0, true);
      assertFalse(jsonNode0.isFloat());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      RawSerializer<IOException> rawSerializer0 = new RawSerializer<IOException>(class0);
      Class<IOException> class1 = rawSerializer0.handledType();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdArraySerializers.FloatArraySerializer stdArraySerializers_FloatArraySerializer0 = new StdArraySerializers.FloatArraySerializer();
      StdArraySerializers.DoubleArraySerializer stdArraySerializers_DoubleArraySerializer0 = new StdArraySerializers.DoubleArraySerializer();
      boolean boolean0 = stdArraySerializers_DoubleArraySerializer0.isDefaultSerializer(stdArraySerializers_FloatArraySerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdArraySerializers.DoubleArraySerializer stdArraySerializers_DoubleArraySerializer0 = new StdArraySerializers.DoubleArraySerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
      JavaType javaType0 = stdArraySerializers_IntArraySerializer0.getContentType();
      JsonNode jsonNode0 = stdArraySerializers_DoubleArraySerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) javaType0, true);
      assertEquals(2, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ClassKey> class0 = ClassKey.class;
      RawSerializer<IOException> rawSerializer0 = new RawSerializer<IOException>(class0);
      JsonNode jsonNode0 = rawSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
      assertEquals(2, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdArraySerializers.DoubleArraySerializer stdArraySerializers_DoubleArraySerializer0 = new StdArraySerializers.DoubleArraySerializer();
      ObjectNode objectNode0 = stdArraySerializers_DoubleArraySerializer0.createSchemaNode("[r83B#~(UB~@iWI=W", false);
      assertEquals(2, objectNode0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      StringSerializer stringSerializer0 = new StringSerializer();
      try { 
        stringSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) mockIOException0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StringSerializer stringSerializer0 = new StringSerializer();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        stringSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) defaultSerializerProvider_Impl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdArraySerializers.FloatArraySerializer stdArraySerializers_FloatArraySerializer0 = new StdArraySerializers.FloatArraySerializer();
      MockError mockError0 = new MockError();
      StringSerializer stringSerializer0 = new StringSerializer();
      // Undeclared exception!
      try { 
        stringSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockError0, (Object) stdArraySerializers_FloatArraySerializer0, "(19Yc6vS\"QDo91tIy9z");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StringSerializer stringSerializer0 = new StringSerializer();
      // Undeclared exception!
      try { 
        stringSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockRuntimeException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1);
      StringSerializer stringSerializer0 = new StringSerializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.endOfInputException(class0);
      try { 
        stringSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) jsonMappingException0, (Object) integer0, "4M%R1bU?<~n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when trying to deserialize a java.lang.Object (through reference chain: java.lang.Integer[\"4M%R1bU?<~n\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ClassKey> class0 = ClassKey.class;
      RawSerializer<IOException> rawSerializer0 = new RawSerializer<IOException>(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, (String) null, (String) null);
      try { 
        rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) jsonMappingException0, (Object) defaultSerializerProvider_Impl0, 57);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' into a subtype of null (through reference chain: com.fasterxml.jackson.databind.ser.Impl[57])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringSerializer stringSerializer0 = new StringSerializer();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stringSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) invocationTargetException0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringSerializer stringSerializer0 = new StringSerializer();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("0123456789abcdef", "0123456789abcdef", 1);
      MockError mockError0 = new MockError("'s#G.-c", sQLSyntaxErrorException0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockError0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stringSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) invocationTargetException0, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdArraySerializers.FloatArraySerializer stdArraySerializers_FloatArraySerializer0 = new StdArraySerializers.FloatArraySerializer();
      // Undeclared exception!
      try { 
        stdArraySerializers_FloatArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) null, (Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      StringSerializer stringSerializer0 = new StringSerializer();
      Class<InputStream> class0 = InputStream.class;
      RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
      try { 
        rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) stringSerializer0, 180);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
