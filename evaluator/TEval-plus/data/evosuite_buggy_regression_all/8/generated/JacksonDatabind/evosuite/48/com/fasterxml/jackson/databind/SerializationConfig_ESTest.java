/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:11:22 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializationConfig_ESTest extends SerializationConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FilterProvider filterProvider0 = serializationConfig0.getFilterProvider();
      assertNull(filterProvider0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      SerializationConfig serializationConfig1 = serializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      Class<DefaultPrettyPrinter> class0 = DefaultPrettyPrinter.class;
      JsonInclude.Value jsonInclude_Value0 = serializationConfig0.getDefaultPropertyInclusion(class0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      SerializationConfig serializationConfig1 = serializationConfig0.with((PropertyNamingStrategy) propertyNamingStrategy_LowerCaseStrategy0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      JsonFormat.Value jsonFormat_Value0 = serializationConfig0.getDefaultPropertyFormat(class0);
      assertFalse(jsonFormat_Value0.hasShape());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      Base64Variant base64Variant0 = new Base64Variant((String) null, "com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer", true, '5', 35695);
      SerializationConfig serializationConfig1 = serializationConfig0.with(base64Variant0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      TimeZone timeZone0 = TimeZone.getDefault();
      SerializationConfig serializationConfig1 = serializationConfig0.with(timeZone0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      // Undeclared exception!
      try { 
        serializationConfig0.introspectDirectClassAnnotations(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SerializationConfig serializationConfig1 = serializationConfig0.with(locale0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      String string0 = serializationConfig0.toString();
      assertEquals("[SerializationConfig: flags=0x2989bc]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      int int0 = serializationConfig0.getSerializationFeatures();
      assertEquals(2722236, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = MockFile.createTempFile("not a valid textual representation", "not a valid textual representation");
      try { 
        objectMapper0.writeValue(file0, (Object) serializationConfig0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.core.util.DefaultPrettyPrinter and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.SerializationConfig[\"defaultPrettyPrinter\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((HandlerInstantiator) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      HashMap<DefaultPrettyPrinter, Object> hashMap0 = new HashMap<DefaultPrettyPrinter, Object>(664, 664);
      SerializationConfig serializationConfig1 = serializationConfig0.withAttributes(hashMap0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      VisibilityChecker<?> visibilityChecker0 = serializationConfig0.getDefaultVisibilityChecker();
      SerializationConfig serializationConfig1 = serializationConfig0.with(visibilityChecker0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withAppendedAnnotationIntrospector((AnnotationIntrospector) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = serializationConfig0.getAnnotationIntrospector();
      SerializationConfig serializationConfig1 = serializationConfig0.withInsertedAnnotationIntrospector(annotationIntrospector0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      SerializationConfig serializationConfig1 = serializationConfig0.with(annotationIntrospector0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((TypeFactory) null);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      SerializationConfig serializationConfig1 = serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeatureArray0[1];
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, true);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, true);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      SerializationConfig serializationConfig1 = serializationConfig0.with(dateFormat0);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals(2721980, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((DateFormat) null);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName((String) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName("5w] MC+K0%<e");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName((PropertyName) null);
      assertNotSame(serializationConfig2, serializationConfig1);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      PropertyName propertyName0 = PropertyName.construct((String) null, "NO_MATCH");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      assertTrue(serializationConfig2.useRootWrapping());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
      SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver1);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      SerializationConfig serializationConfig1 = serializationConfig0.withView(class0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withView((Class<?>) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withoutAttribute((Object) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722237, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(2722238, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeatureArray0[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      serializationFeatureArray0[1] = serializationFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(6916540, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
      assertEquals(2722204, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRAP_EXCEPTIONS;
      serializationFeatureArray0[1] = serializationFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722220, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
      SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNotSame(serializationConfig2, serializationConfig1);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
      SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
      assertSame(serializationConfig2, serializationConfig1);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNotSame(serializationConfig2, serializationConfig0);
      assertSame(serializationConfig2, serializationConfig1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
      SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig2, serializationConfig1);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(1405, 309, 309, 309).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
      SerializationConfig serializationConfig2 = serializationConfig1.with(formatFeature0);
      assertSame(serializationConfig2, serializationConfig1);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 24).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(1405, 309, 309, 309).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
      SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNotSame(serializationConfig2, serializationConfig1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-1260), (-1962)).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(33).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
      SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.copy();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver2, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-2082), (-2082), 0, 0, 0).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertSame(serializationConfig1, serializationConfig2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      SerializationConfig serializationConfig1 = serializationConfig0.withFilters(simpleFilterProvider0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withFilters((FilterProvider) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter)SerializationConfig.DEFAULT_PRETTY_PRINTER;
      SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (PrettyPrinter) null);
      PrettyPrinter prettyPrinter0 = serializationConfig1.constructDefaultPrettyPrinter();
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNull(prettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      PrettyPrinter prettyPrinter0 = serializationConfig0.constructDefaultPrettyPrinter();
      assertNotNull(prettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        serializationConfig1.initialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(1405, 309).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
      // Undeclared exception!
      try { 
        serializationConfig1.initialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
      JsonInclude.Include jsonInclude_Include1 = serializationConfig1.getSerializationInclusion();
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Include1);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      boolean boolean0 = serializationConfig0.useRootWrapping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = serializationConfig0.isEnabled(jsonGenerator_Feature0, jsonFactory0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
      jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[0];
      jsonGenerator_FeatureArray0[3] = jsonGenerator_FeatureArray0[2];
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[0];
      jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[0];
      jsonGenerator_FeatureArray0[7] = jsonGenerator_FeatureArray0[4];
      jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_FeatureArray0[1], jsonFactory0);
      assertTrue(boolean0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
      assertFalse(boolean0);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = serializationConfig0.hasSerializationFeatures(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = serializationConfig0.hasSerializationFeatures(0);
      assertTrue(boolean0);
  }
}
