/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:10:23 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeBindings_ESTest extends TypeBindings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeBindings.TypeParamStash typeBindings_TypeParamStash0 = new TypeBindings.TypeParamStash();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      JavaType[] javaTypeArray0 = typeBindings0.typeParameterArray();
      assertEquals(0, javaTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Object object0 = typeBindings0.readResolve();
      assertSame(object0, typeBindings0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      typeBindings0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      TypeBindings typeBindings1 = (TypeBindings)typeBindings0.readResolve();
      assertFalse(typeBindings1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (List<JavaType>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Collection with 0 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Collection with 0 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<TypeBindings> class0 = TypeBindings.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      vector0.add((JavaType) null);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class com.fasterxml.jackson.databind.type.TypeBindings with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class com.fasterxml.jackson.databind.type.CollectionType with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<TypeBindings> class0 = TypeBindings.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) mapType0);
      String string0 = typeBindings0.toString();
      assertTrue(typeBindings0.isEmpty());
      assertEquals("<>", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructCollectionLikeType(class1, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Map with 1 type parameter: class expects 2
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded(class0, javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<TypeBindings> class0 = TypeBindings.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded(class0, (JavaType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Collection with 0 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("<>");
      TypeBindings typeBindings2 = typeBindings1.withUnboundVariable("<>");
      assertTrue(typeBindings2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<CollectionType> class0 = CollectionType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Collection> class1 = Collection.class;
      typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      String string0 = typeBindings0.getBoundName((-100));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) simpleType0);
      String string0 = typeBindings0.getBoundName(0);
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      String string0 = typeBindings0.getBoundName(5676);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      JavaType javaType0 = typeBindings0.getBoundType((-696));
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      JavaType javaType0 = typeBindings0.getBoundType(1015);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaType[] javaTypeArray0 = new JavaType[2];
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      javaTypeArray0[0] = (JavaType) simpleType0;
      Class<Collection> class0 = Collection.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0[0]);
      JavaType javaType0 = typeBindings0.getBoundType(0);
      assertFalse(javaType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("Invalid 'any-setter' annotation on method ");
      boolean boolean0 = typeBindings1.hasUnbound("Invalid 'any-setter' annotation on method ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("<>");
      boolean boolean0 = typeBindings1.hasUnbound("_MgnF{7lY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      String string0 = typeBindings0.toString();
      assertEquals("<I;>", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) simpleType0);
      TypeBindings typeBindings1 = TypeFactory.EMPTY_BINDINGS;
      boolean boolean0 = typeBindings0.equals(typeBindings1);
      assertFalse(typeBindings1.equals((Object)typeBindings0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      boolean boolean0 = typeBindings0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      boolean boolean0 = typeBindings0.equals("iUwAE(~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) simpleType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("WnLJ~#b1V1cC+A}`57");
      boolean boolean0 = typeBindings1.equals(typeBindings0);
      assertTrue(boolean0);
  }
}
