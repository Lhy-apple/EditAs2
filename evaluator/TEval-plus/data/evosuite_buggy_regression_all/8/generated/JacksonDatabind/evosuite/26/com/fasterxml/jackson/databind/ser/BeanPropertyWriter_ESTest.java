/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:05:26 GMT 2023
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.AnyGetterWriter;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.time.chrono.MinguoEra;
import java.util.HashMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MissingNode> class0 = MissingNode.class;
      try { 
        objectMapper0.convertValue((Object) defaultSerializerProvider_Impl0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.ser.Impl[\"annotationIntrospector\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0._depositSchemaProperty((ObjectNode) null, (JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.assignTypeSerializer((TypeSerializer) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.isVirtual();
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.isUnwrapping();
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getWrapperName();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getFullName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, javaType0, (JsonSerializer<?>) null, (TypeSerializer) null, javaType0, true, pOJOPropertyBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      Vector<POJOPropertyBuilder> vector0 = new Vector<POJOPropertyBuilder>();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, javaType0, (JsonSerializer<?>) null, (TypeSerializer) null, javaType0, true, vector0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
      assertFalse(beanPropertyWriter0.isVirtual());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getSerializedName();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getMetadata();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter(nameTransformer0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.setInternalSetting(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      beanPropertyWriter0._internalSettings = hashMap0;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = new PropertyName("i5gwGUTlu, U");
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0._new(propertyName0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~", "a5bC<(VJ^_*");
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer_Chained0);
      assertFalse(beanPropertyWriter2.willSuppressNulls());
      assertEquals("~~i5gwGUTlu, Ua5bC<(VJ^_*a5bC<(VJ^_*", beanPropertyWriter2.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.construct("%-xiL3MQ5$hq,5-SM'", "%-xiL3MQ5$hq,5-SM'");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer_Chained0);
      assertSame(beanPropertyWriter2, beanPropertyWriter1);
      assertFalse(beanPropertyWriter2.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "&");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, javaType0, jsonSerializer0, (TypeSerializer) null, javaType0, true, minguoEra0);
      JsonSerializer<AnnotatedField> jsonSerializer1 = (JsonSerializer<AnnotatedField>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      AnyGetterWriter anyGetterWriter0 = new AnyGetterWriter(beanPropertyWriter0, (AnnotatedMember) null, jsonSerializer1);
      JsonSerializer<Object> jsonSerializer2 = anyGetterWriter0._serializer;
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignSerializer(jsonSerializer2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertTrue(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer(beanPropertyWriter0);
      beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override null serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BeanPropertyWriter beanPropertyWriter1 = (BeanPropertyWriter)beanPropertyWriter0.readResolve();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      beanPropertyWriter0.assignSerializer(jsonSerializer0);
      beanPropertyWriter0.readResolve();
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, javaType0, (JsonSerializer<?>) null, (TypeSerializer) null, javaType0, true, pOJOPropertyBuilder0);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = beanPropertyWriter0.getContextAnnotation(class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Annotation> class0 = Annotation.class;
      beanPropertyWriter0.getContextAnnotation(class0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
      assertNull(jsonFormat_Value0);
      
      JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(jsonFormat_Value1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
      assertNull(jsonFormat_Value0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      beanPropertyWriter0.setInternalSetting(objectMapper0, objectMapper0);
      beanPropertyWriter0.getInternalSetting(iOContext0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getInternalSetting("i5gwGUTlu, U");
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.setInternalSetting(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Object object0 = beanPropertyWriter0.setInternalSetting(defaultSerializerProvider_Impl0, propertyName0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Annotation> class0 = Annotation.class;
      Object object0 = beanPropertyWriter0.removeInternalSetting(class0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      beanPropertyWriter0._internalSettings = hashMap0;
      Object object0 = beanPropertyWriter0.removeInternalSetting(hashMap0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.setInternalSetting(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl0);
      Object object0 = beanPropertyWriter0.removeInternalSetting(beanPropertyWriter0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "&");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, javaType0, jsonSerializer0, (TypeSerializer) null, javaType0, true, minguoEra0);
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "&");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, javaType0, jsonSerializer0, (TypeSerializer) null, javaType0, true, minguoEra0);
      boolean boolean0 = beanPropertyWriter0.wouldConflictWithName(propertyName0);
      assertFalse(boolean0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
      assertTrue(boolean0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", (String) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonSerializer<DOMSerializer> jsonSerializer0 = (JsonSerializer<DOMSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include)BeanPropertyWriter.MARKER_FOR_EMPTY;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, javaType0, jsonSerializer0, (TypeSerializer) null, javaType0, true, jsonInclude_Include0);
      Class<?> class0 = beanPropertyWriter0.getRawSerializationType();
      assertNotNull(class0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getRawSerializationType();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getPropertyType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsField(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.serializeAsOmittedField(jsonGenerator0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      try { 
        beanPropertyWriter0.serializeAsElement((Object) null, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Integer integer0 = new Integer((-6));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsPlaceholder(integer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dOMSerializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = MockFile.createTempFile("' (", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 136, objectMapper0, mockFileOutputStream0);
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      try { 
        beanPropertyWriter0.serializeAsPlaceholder(objectMapper0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForProperties();
      Class<Integer> class0 = Integer.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<MissingNode> class0 = MissingNode.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      MapType mapType0 = MapType.construct(class0, collectionType0, simpleType0);
      beanPropertyWriter0.setNonTrivialBaseType(mapType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class1 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      // Undeclared exception!
      try { 
        beanPropertyWriter0._findAndAddDynamic((PropertySerializerMap) null, class1, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      try { 
        beanPropertyWriter0.get(beanPropertyWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      String string0 = beanPropertyWriter1.toString();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
      assertEquals("property '' (virtual, no static serializer)", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      beanPropertyWriter1.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter1.toString();
      assertTrue(beanPropertyWriter1.hasSerializer());
  }
}
