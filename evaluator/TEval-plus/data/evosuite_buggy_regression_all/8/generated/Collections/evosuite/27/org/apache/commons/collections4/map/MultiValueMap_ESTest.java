/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:39:40 GMT 2023
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<Object, ExceptionFactory<String>> multiValueMap1 = new MultiValueMap<Object, ExceptionFactory<String>>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<Object, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap2, (Factory<Collection<Object>>) constantFactory0);
      assertEquals(0, multiValueMap3.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Iterator<Map.Entry<String, Integer>> iterator0 = (Iterator<Map.Entry<String, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(arrayList0, arrayList0, biFunction0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap1);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Object>> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Object>>((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super LinkedList<Integer>>) hashMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      multiValueMap0.putIfAbsent(integer0, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Integer integer0 = new Integer(0);
      multiValueMap0.put(integer0, integer0);
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap1);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(biFunction0).apply(any() , any());
      multiValueMap2.compute(arrayList1, biFunction0);
      multiValueMap2.put(arrayList1, multiValueMap0);
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<ArrayList<String>> arrayList1 = new ArrayList<ArrayList<String>>();
      arrayList1.add(arrayList0);
      multiValueMap0.putAll(arrayList0, (Collection<ArrayList<String>>) arrayList1);
      MultiValueMap<Object, ExceptionFactory<String>> multiValueMap1 = new MultiValueMap<Object, ExceptionFactory<String>>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put((Object) null, (Object) null);
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<?, ?>) hashMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap2.totalSize();
      int int0 = multiValueMap2.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      Integer integer0 = new Integer(2279);
      Object object0 = multiValueMap0.putIfAbsent(integer0, integer0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "", (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = new MultiValueMap<Integer, Collection<String>>((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.putAll(integer0, (Collection<Collection<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Integer integer0 = new Integer((-2146412047));
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.putAll(integer0, (Collection<String>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      ArrayList<ArrayList<String>> arrayList0 = new ArrayList<ArrayList<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add(arrayList1);
      multiValueMap0.put(arrayList1, arrayList1);
      boolean boolean0 = multiValueMap0.putAll(arrayList1, (Collection<ArrayList<String>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<ArrayList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }
}
