/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:49:27 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLWarning;
import java.util.EnumSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)cSVPrinter0.getOut();
      assertEquals("", charArrayWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lang.Object@0000000003\tjava.lang.String@0000000004\tjava.lang.String@0000000004\torg.apache.commons.csv.CSVFormat@0000000005\tjava.lang.Character@0000000006\torg.apache.commons.csv.CSVFormat@0000000005\tjava.lang.String@0000000004");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|``lGIBP&x]FH");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(102, charArrayWriter0.size());
      assertEquals("\"|``lGIBP&x]FH\"\r\n\"|``lGIBP&x]FH\"\r\n\"|``lGIBP&x]FH\"\r\n\"|``lGIBP&x]FH\"\r\n\"|``lGIBP&x]FH\"\r\n\"|``lGIBP&x]FH\"\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLWarning sQLWarning0 = new SQLWarning("q");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('z');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
      assertEquals(30, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Prameter '\tPrameter '\tPrameter '\tPrameter '\tPrameter '");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("Prameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '\\\tPrameter '", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(59, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('c');
      String string0 = cSVFormat2.format(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[16];
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[1];
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Double double0 = new Double('X');
      cSVPrinter0.print(double0);
      assertEquals(27, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals("\"\"\t\r\n", charArrayWriter0.toString());
      assertEquals(5, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Prameter '";
      String string0 = cSVFormat0.format(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0UV/0ZC'\"hQS");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"0UV/0ZC'\"\"hQS\"\t\"0UV/0ZC'\"\"hQS\"\t\"0UV/0ZC'\"\"hQS\"\t\"0UV/0ZC'\"\"hQS\"\t\"0UV/0ZC'\"\"hQS\"", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";K");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\";K\"\t;K\t;K\t;K", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("HdVo^^");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("HdVo^^\tHdVo^^\tHdVo^^\tHdVo^^\tHdVo^^\tHdVo^^\tHdVo^^", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SkipHeaderRecord:");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\" SkipHeaderRecord:\"\t\" SkipHeaderRecord:\"\t\" SkipHeaderRecord:\"\t\" SkipHeaderRecord:\"\t\" SkipHeaderRecord:\"", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("+{:T.nup,_I|");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"+{:T.nup,_I|\",\"+{:T.nup,_I|\",\"+{:T.nup,_I|\",\"+{:T.nup,_I|\",\"+{:T.nup,_I|\",\"+{:T.nup,_I|\"", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("i(J*Rw)!^ ");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"i(J*Rw)!^ \"\t\"i(J*Rw)!^ \"\t\"i(J*Rw)!^ \"\t\"i(J*Rw)!^ \"\t\"i(J*Rw)!^ \"", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lang.Object@0000000003\tjava.lang.String@0000000004\tjava.lang.String@0000000004\torg.apache.commons.csv.CSVFormat@0000000005\tjava.lang.Character@0000000006\torg.apache.commons.csv.CSVFormat@0000000005\tjava.lang.String@0000000004");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("|zT8");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print(charArrayWriter0);
      cSVPrinter0.printComment("N$s09y");
      assertEquals(46, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('g');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> CommentStart=<g> RecordSeparator=<\n> SkipHeaderRecord:false");
      assertEquals(88, charArrayWriter0.size());
      assertEquals("g Delimiter=<\t> Escape=<> CommentStart=<g> RecordSeparator=<\ng > SkipHeaderRecord:false\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('z');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      assertEquals(94, charArrayWriter0.size());
      assertEquals("z Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\nz > SkipHeaderRecord:false\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Class<Quote> class0 = Quote.class;
      EnumSet<Quote> enumSet0 = EnumSet.allOf(class0);
      cSVPrinter0.printRecords((Iterable<?>) enumSet0);
      assertEquals(164, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLWarning sQLWarning0 = new SQLWarning();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLWarning0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
}
