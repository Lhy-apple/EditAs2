/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 01:57:52 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("SourceDest.must.enforce.values", "SourceDest.must.enforce.values", 0, 0, 'V', 'V', numberValidator0, "SourceDest.must.enforce.values", linkedList0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals(0, argumentImpl0.getMaximum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      sourceDestArgument0.defaults(writeableCommandLineImpl0);
      assertEquals("SourceDest.must.enforce.values", argumentImpl0.getDescription());
      assertEquals("SourceDest.must.enforce.values", argumentImpl0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('V', argumentImpl0.getInitialSeparator());
      assertEquals('V', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("HBmk5", "HBmk5", 32, 32, '2', 'A', numberValidator0, "HBmk5", linkedList0, 32);
      assertEquals(32, argumentImpl0.getMinimum());
      assertEquals(32, argumentImpl0.getMaximum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '2', 'A', "org.apache.commons.cli2.commandline.CommandLineImpl", linkedList0);
      char char0 = sourceDestArgument0.getInitialSeparator();
      assertEquals("HBmk5", argumentImpl0.getDescription());
      assertEquals('A', sourceDestArgument0.getSubsequentSeparator());
      assertEquals('2', char0);
      assertEquals("org.apache.commons.cli2.commandline.CommandLineImpl", sourceDestArgument0.getConsumeRemaining());
      assertEquals(64, sourceDestArgument0.getMaximum());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertTrue(sourceDestArgument0.isRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.defaults", "arg", 4250, 4250, 'a', '2', numberValidator0, "Argument.too.many.defaults", list0, 4250);
      argumentImpl0.getDefaultValues();
      assertEquals("Argument.too.many.defaults", argumentImpl0.getConsumeRemaining());
      assertEquals('a', argumentImpl0.getInitialSeparator());
      assertEquals("Argument.too.many.defaults", argumentImpl0.getPreferredName());
      assertEquals('2', argumentImpl0.getSubsequentSeparator());
      assertEquals("arg", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 1835, 1835, '[', '$', fileValidator0, "", linkedList0, 1);
      assertEquals(1835, argumentImpl0.getMinimum());
      assertEquals(1835, argumentImpl0.getMaximum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "");
      assertTrue(boolean0);
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('[', argumentImpl0.getInitialSeparator());
      assertEquals('$', argumentImpl0.getSubsequentSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 1835, 1835, '[', '$', fileValidator0, "", linkedList0, 1);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      char char0 = sourceDestArgument0.getSubsequentSeparator();
      assertEquals('[', argumentImpl0.getInitialSeparator());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("mMOt*K>EH3TDY", "arg", 38, 38, '8', '8', fileValidator0, "arg", linkedList0, 37);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'm', '.', "R\"^3;8\r>6", linkedList0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      sourceDestArgument0.helpLines(2, linkedHashSet0, (Comparator) null);
      assertEquals('m', sourceDestArgument0.getInitialSeparator());
      assertEquals('.', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("R\"^3;8\r>6", sourceDestArgument0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("arg", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("mMOt*K>EH3TDY", "arg", 38, 38, '8', '8', fileValidator0, "arg", linkedList0, 37);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'm', '.', "R\"^3;8\r>6", linkedList0);
      String string0 = sourceDestArgument0.getConsumeRemaining();
      assertEquals('m', sourceDestArgument0.getInitialSeparator());
      assertEquals('.', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("R\"^3;8\r>6", string0);
      assertNotNull(string0);
      assertEquals("arg", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.defaults", "arg", 4250, 4250, 'a', '2', numberValidator0, "Argument.too.many.defaults", list0, 4250);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      Object object0 = new Object();
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(listIterator0).hasNext();
      doReturn("arg", "Argument.too.many.defaults", object0, "--", locale0).when(listIterator0).next();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("arg", argumentImpl0.getDescription());
      assertEquals('2', argumentImpl0.getSubsequentSeparator());
      assertEquals('a', argumentImpl0.getInitialSeparator());
      assertEquals("Argument.too.many.defaults", argumentImpl0.getPreferredName());
      assertEquals("Argument.too.many.defaults", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 3, 3, '`', '`', dateValidator0, "", list0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '%', 'M', "[y0", list0);
      sourceDestArgument0.getValidator();
      assertEquals('%', sourceDestArgument0.getInitialSeparator());
      assertEquals('M', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("[y0", sourceDestArgument0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("<M ~7%8>}zK:H?FTM", "<M ~7%8>}zK:H?FTM", 32, 0, 'V', 'V', fileValidator0, "DISPLAY_GROUP_EXPANDED", linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("R\"^3;8>6", "ysNxF4/`Q|6<t", 5, 407, '!', '!', numberValidator0, "R\"^3;8>6", linkedList0, 407);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.push("ysNxF4/`Q|6<t");
      SourceDestArgument sourceDestArgument0 = null;
      try {
        sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '<', '*', "7,^LsG[nG(", linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) numberValidator0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("H", "H", 0, 0, 'T', 'S', numberValidator0, "Argument.too.many.defaults", linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("R\"^3;8>6", "R\"^3;8>6", 5, 407, '!', '\"', numberValidator0, "R\"^3;8>6", linkedList0, 407);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.push("R\"^3;8>6");
      ListIterator<Object> listIterator0 = linkedList1.listIterator();
      PropertyOption propertyOption0 = new PropertyOption("sRuJ,Si", "R\"^3;8>6", 44);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList1);
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, propertyOption0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals('!', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("R\"^3;8>6", "ysNxF4/`Q|6<t", 5, 407, '!', '!', numberValidator0, "R\"^3;8>6", linkedList0, 407);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.push("ysNxF4/`Q|6<t");
      ListIterator<Object> listIterator0 = linkedList1.listIterator();
      PropertyOption propertyOption0 = new PropertyOption("ysNxF4/`Q|6<t", "uB}w cbD^\"'.,!rLa", 1413);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, propertyOption0);
      assertEquals(5, argumentImpl0.getMinimum());
      assertEquals('!', argumentImpl0.getSubsequentSeparator());
      assertEquals('!', argumentImpl0.getInitialSeparator());
      assertEquals("ysNxF4/`Q|6<t", argumentImpl0.getDescription());
      assertEquals(407, argumentImpl0.getMaximum());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("R\"^3;8>6", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("SourceDest.must.enforce.values", "SourceDest.must.enforce.values", 0, 0, 'V', 'V', numberValidator0, "SourceDest.must.enforce.values", linkedList0, 0);
      PropertyOption propertyOption0 = new PropertyOption("SourceDest.must.enforce.values", "--", (-881));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) propertyOption0);
      assertEquals('V', argumentImpl0.getSubsequentSeparator());
      assertEquals("SourceDest.must.enforce.values", argumentImpl0.getDescription());
      assertEquals('V', argumentImpl0.getInitialSeparator());
      assertEquals("SourceDest.must.enforce.values", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", (-6), (-6), '_', '_', numberValidator0, "", linkedList0, (-6));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, 0, 0, 'T', 'T', (Validator) null, (String) null, linkedList0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) propertyOption0);
      assertEquals('T', argumentImpl0.getSubsequentSeparator());
      assertEquals('T', argumentImpl0.getInitialSeparator());
      assertEquals("arg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("R\"^3;8\r>6", "ysNxF4/`Q|6<t", 5, 407, '!', '\"', numberValidator0, "R\"^3;8\r>6", linkedList0, 407);
      argumentImpl0.toString();
      assertEquals("R\"^3;8\r>6", argumentImpl0.getPreferredName());
      assertEquals('\"', argumentImpl0.getSubsequentSeparator());
      assertEquals('!', argumentImpl0.getInitialSeparator());
      assertEquals("ysNxF4/`Q|6<t", argumentImpl0.getDescription());
      assertEquals(407, argumentImpl0.getMaximum());
      assertEquals("R\"^3;8\r>6", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '_', '_', numberValidator0, "", linkedList0, 0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      argumentImpl0.appendUsage((StringBuffer) null, linkedHashSet0, (Comparator) null);
      assertEquals('_', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('_', argumentImpl0.getInitialSeparator());
      assertEquals("", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"", "iGlVN]L", Integer.MAX_VALUE, Integer.MAX_VALUE, 'L', 'e', fileValidator0, "!N333QmAV5REt", linkedList0, Integer.MAX_VALUE);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'e', 'U', "l&NQi*NQ", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      try { 
        sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) \" \" ...
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("R\"^3;8\r>6", "ysNxF4/`Q|6<t", 5, 407, '!', '\"', numberValidator0, "R\"^3;8\r>6", linkedList0, 407);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) R\"^3;8\r>6 R\"^3;8\r>6 R\"^3;8\r>6 R\"^3;8\r>6 R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6 [R\"^3;8\r>6]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("5f", "", (-117644756), 1171, 'U', 'U', numberValidator0, "G", linkedList0, 1171);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      argumentImpl0.appendUsage(stringBuffer0, linkedHashSet0, comparator0);
      assertEquals(5852, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push("\"");
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      PropertyOption propertyOption0 = new PropertyOption();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "TFZ1", (-1316), 4247, ',', ',', dateValidator0, "Passes properties and values to the application", linkedList0, 5);
      // Undeclared exception!
      try { 
        argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, propertyOption0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("ob6f~'N", "ob6f~'N", (-3535), 243, 'J', 'u', numberValidator0, "ob6f~'N", linkedList0, (-3535));
      String string0 = argumentImpl0.stripBoundaryQuotes("\"\"ClassValidaor.class.access");
      assertEquals(243, argumentImpl0.getMaximum());
      assertEquals("\"\"ClassValidaor.class.access", string0);
      assertFalse(argumentImpl0.isRequired());
      assertEquals('u', argumentImpl0.getSubsequentSeparator());
      assertEquals("ob6f~'N", argumentImpl0.getPreferredName());
      assertEquals('J', argumentImpl0.getInitialSeparator());
      assertEquals("ob6f~'N", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("F\"{>9[d -f'gH<NfAt", "Z+R)'a*8_x`&bxy", (-1), (-1), '7', '7', (Validator) null, "Br;)", linkedList0, (-1));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '7', '\u0000', "MVQlo^IS^E", linkedList0);
      boolean boolean0 = sourceDestArgument0.isRequired();
      assertFalse(boolean0);
      assertEquals('\u0000', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('7', sourceDestArgument0.getInitialSeparator());
      assertEquals('7', argumentImpl0.getSubsequentSeparator());
      assertEquals("Z+R)'a*8_x`&bxy", argumentImpl0.getDescription());
      assertEquals("Br;)", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.defaults", "arg", 4250, 4250, 'a', '2', numberValidator0, "Argument.too.many.defaults", list0, 4250);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals("Argument.too.many.defaults", argumentImpl0.getConsumeRemaining());
      assertEquals('a', argumentImpl0.getInitialSeparator());
      assertEquals("Argument.too.many.defaults", argumentImpl0.getPreferredName());
      assertTrue(boolean0);
      assertEquals('2', argumentImpl0.getSubsequentSeparator());
      assertEquals("arg", argumentImpl0.getDescription());
  }
}
