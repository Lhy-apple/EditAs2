/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 01:56:14 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = Locale.getISOLanguages();
      basicParser0.parse(options0, stringArray0, false);
      Option option0 = new Option("CG", false, "CG");
      options0.addOption(option0);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("CG").when(listIterator0).next();
      doReturn(option0).when(listIterator0).previous();
      try { 
        basicParser0.processArgs(option0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option:CG
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-$Z_=hm5wZ:2";
      try { 
        basicParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -$Z_=hm5wZ:2
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-$Z_=hmFE5wZZ:2";
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = Locale.getISOCountries();
      basicParser0.parse(options0, stringArray0, true);
      Option option0 = new Option("", "", true, "");
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(listIterator0).hasNext();
      doReturn("").when(listIterator0).next();
      basicParser0.processArgs(option0, listIterator0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-$Z_=hm5wZZ:2";
      PosixParser posixParser0 = new PosixParser();
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = basicParser0.parse(options0, (String[]) null, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      Option option0 = new Option("w9h", "--Y");
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      try { 
        basicParser0.parse(options1, (String[]) null, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // w9h
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      ListIterator<Option> listIterator0 = linkedList0.listIterator();
      Option option0 = new Option("ss", true, "ss");
      option0.setOptionalArg(true);
      basicParser0.processArgs(option0, listIterator0);
      assertFalse(option0.hasArgs());
  }
}
