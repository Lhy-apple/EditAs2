/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 01:57:04 GMT 2023
 */

package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.ClassValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteableCommandLineImpl_ESTest extends WriteableCommandLineImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "4r8wA", "OKr3uCzL_)t", 34, (-1));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      String string0 = writeableCommandLineImpl0.getProperty("4r8wA");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getOptionTriggers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getProperties();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getNormalised();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.hasOption("Passes properties and values to the application");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-D", "-D", 989, 989, '9', '9', classValidator0, "Passes properties and values to the application", linkedList0, 989);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      writeableCommandLineImpl0.addValue(sourceDestArgument0, sourceDestArgument0);
      assertEquals('\u0000', sourceDestArgument0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 23, 23);
      DefaultOption defaultOption0 = new DefaultOption("", "", true, "", "", linkedHashSet0, linkedHashSet0, false, (Argument) null, groupImpl0, 68);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(defaultOption0, linkedList0);
      Command command0 = new Command("\"", "ClassValidator.class.notfound", linkedHashSet0, false, (Argument) null, groupImpl0, 23);
      writeableCommandLineImpl0.addSwitch(command0, true);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addSwitch(command0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Switch already set.
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("Passes properties and values to the application");
      linkedList1.addLast("-D");
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList1);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addSwitch(propertyOption0, false);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch("-D");
      writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
      assertEquals("-D", propertyOption0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.commandline.WriteableCommandLineImpl", "org.apache.commons.cli2.resource.CLIMessageBundle_en_US", 0, 0);
      LinkedList<SourceDestArgument> linkedList1 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      writeableCommandLineImpl0.addSwitch(groupImpl0, true);
      boolean boolean0 = writeableCommandLineImpl0.hasOption((Option) groupImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.commandline.WriteableCommandLineImpl", "org.apache.commons.cli2.resource.CLIMessageBundle_en_US", 0, 0);
      LinkedList<SourceDestArgument> linkedList1 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      List list0 = writeableCommandLineImpl0.getValues((Option) groupImpl0, (List) linkedList1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("Passes properties and values to the application");
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
      linkedList1.addLast("Passes properties and values to the application");
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "4r8wA", "OKr3uCzL_)t", 34, (-1));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addValue(groupImpl0, (Object) null);
      List list0 = writeableCommandLineImpl0.getUndefaultedValues(groupImpl0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "4r8wA", "OKr3uCzL_)t", 34, (-1));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) groupImpl0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D", "Passes properties and values to the application");
      writeableCommandLineImpl0.addProperty("-D", "Passes properties and values to the application");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty("-D", "Passes properties and values to the application");
      String string0 = writeableCommandLineImpl0.getProperty("-D");
      assertEquals("Passes properties and values to the application", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D", "Passes properties and values to the application");
      Set set0 = writeableCommandLineImpl0.getProperties();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("q7Id9R;HXNL)O003+=E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("Passes properties and values to the application");
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.toString();
      assertEquals("\"Passes properties and values to the application\"", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("lw");
      linkedList0.addLast("");
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.toString();
      assertEquals("lw ", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("q:5L3", "-D", (-811), (-811), '\"', '5', classValidator0, "-DURLValidator.malformed.URL", linkedList0, 739);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      sourceDestArgument0.defaultValues(writeableCommandLineImpl0, sourceDestArgument0);
      assertEquals(0, sourceDestArgument0.getId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "4r8wA", "OKr3uCzL_)t", 34, (-1));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.setDefaultSwitch(groupImpl0, (Boolean) null);
      assertTrue(groupImpl0.isRequired());
  }
}
