/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 01:56:29 GMT 2023
 */

package org.apache.commons.cli2.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.builder.PatternBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PatternBuilder_ESTest extends PatternBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("<4");
      Option option0 = patternBuilder0.create();
      assertEquals("-4", option0.getPreferredName());
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("C=/j*yo]+BEflV]x");
      Option option0 = patternBuilder0.create();
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("O5c]!:>XY(W");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("x`<#~K1{]p-\\*R\"]*");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("-$!'Uj");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("<}s%=T.'!");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("&=/j*yo]+BEflV]x");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("R%n&v2)|");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern(",J");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("R{-@~0SP5u%e");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("'}Zy]3XNV4Ag");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("4F4O}E6");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("7X\"onRh-^MfD]q7U-");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("8-{%-hR`4ss*9u~w%");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("YR={z`yn;29ZP");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("(]>e?DubI%");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      // Undeclared exception!
      try { 
        patternBuilder0.withPattern("O0c]a:XY(sW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use null as a validator.
         //
         verifyException("org.apache.commons.cli2.builder.ArgumentBuilder", e);
      }
  }
}
