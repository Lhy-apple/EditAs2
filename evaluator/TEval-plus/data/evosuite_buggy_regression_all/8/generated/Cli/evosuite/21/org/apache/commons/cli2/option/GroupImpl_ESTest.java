/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 01:59:08 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "6", "6", (-87), (-3534), true);
      PropertyOption propertyOption0 = new PropertyOption("[6 ()]", "6", (-87));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "[6 ()]");
      assertEquals((-87), groupImpl0.getMinimum());
      assertEquals((-3534), groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "p5~ Ayw&E7-?#kVz", "p5~ Ayw&E7-?#kVz", 801, 801, false);
      groupImpl0.getAnonymous();
      assertEquals(801, groupImpl0.getMaximum());
      assertEquals(801, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", (-199), 0, false);
      int int0 = groupImpl0.getMaximum();
      assertEquals(0, int0);
      assertEquals((-199), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", (String) null, 1, 91, 'W', 'w', numberValidator0, "%6<245z9c`OrjaL:", linkedList0, (-2561));
      linkedList0.add((Object) argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 1, 1, true);
      assertEquals(0, linkedList0.size());
      assertEquals(1, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.validation.NumberValidator", "\"NMtDf<zz^", 3, (-932), true);
      DefaultOption defaultOption0 = new DefaultOption("\"NMtDf<zz^", "\"NMtDf<zz^", true, "\"NMtDf<zz^", "\"NMtDf<zz^", linkedHashSet0, linkedHashSet0, true, (Argument) null, groupImpl0, 322);
      linkedList0.add(defaultOption0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "\"NMtDf<zz^", "\"NMtDf<zz^", (-932), (-932), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
      boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "\"NMtDf<zz^");
      assertTrue(linkedList0.contains(defaultOption0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 782, 782, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals(782, groupImpl0.getMaximum());
      assertFalse(boolean0);
      assertEquals(782, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Fzu:xl7eGwPNL", "Fzu:xl7eGwPNL", (-3484), (-3484), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Fzu:xl7eGwPNL");
      assertFalse(boolean0);
      assertEquals((-3484), groupImpl0.getMaximum());
      assertEquals((-3484), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Fzu:xl7eGwPNL", "Fzu:xl7eGwPNL", (-3442), (-3442), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
      ListIterator<DefaultOption> listIterator0 = linkedList1.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-3442), groupImpl0.getMaximum());
      assertEquals((-3442), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "3d~,u_bq1v/@uTT1GA~", "3d~,u_bq1v/@uTT1GA~", 0, 0, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<DefaultOption> listIterator0 = (ListIterator<DefaultOption>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((DefaultOption) null).when(listIterator0).next();
      doReturn((DefaultOption) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 782, 782, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "#e46CKat&WPw1);k3", (-3096), (-3096), false);
      linkedList0.addLast(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      assertFalse(groupImpl0.isRequired());
      
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals("#e46CKat&WPw1);k3", groupImpl0.getDescription());
      assertEquals("", groupImpl0.getPreferredName());
      assertEquals((-3096), groupImpl0.getMinimum());
      assertEquals((-3096), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "#e46CKat&WPw1);k3", (-3096), (-3096), false);
      linkedList0.addLast(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(groupImpl0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected  while processing 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "w4g8KOg 2e\"+ozTrE", "w4g8KOg 2e\"+ozTrE", 1786, 1786, true);
      linkedList0.addLast(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(groupImpl0);
      // Undeclared exception!
      groupImpl0.validate(writeableCommandLineImpl0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, Integer.MAX_VALUE, Integer.MAX_VALUE, true);
      LinkedHashSet<Command> linkedHashSet0 = new LinkedHashSet<Command>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMaximum());
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMinimum());
      assertTrue(groupImpl0.isRequired());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "6", "6", (-87), (-3534), true);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      linkedList1.add(groupImpl0);
      linkedList1.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "6", "6", (-3534), (-87), true);
      String string0 = groupImpl1.toString();
      assertTrue(linkedList1.contains(groupImpl0));
      assertEquals("[6 ([6 ()]|[6 ()])]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, Integer.MAX_VALUE, Integer.MAX_VALUE, true);
      LinkedHashSet<Command> linkedHashSet0 = new LinkedHashSet<Command>();
      Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines((-247), linkedHashSet0, comparator0);
      assertEquals(0, list0.size());
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMaximum());
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "5wgqrM$0>EeCOcH", 0, (-3534), true);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      linkedList1.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "", (-3534), 0, false);
      groupImpl1.findOption("5wgqrM$0>EeCOcH");
      assertTrue(linkedList1.contains(groupImpl0));
      assertEquals((-3534), groupImpl1.getMinimum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "]-G=xT-y|", 14, 14, false);
      linkedList0.addLast(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "#e46CKat&WPw1);k3", "", 14, 14, false);
      // Undeclared exception!
      groupImpl1.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 782, 782, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(782, groupImpl0.getMinimum());
      assertEquals(782, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.validation.NumberValidator", "\"NMtDf<zz^", 3, (-932), true);
      DefaultOption defaultOption0 = new DefaultOption("\"NMtDf<zz^", "\"NMtDf<zz^", true, "\"NMtDf<zz^", "\"NMtDf<zz^", linkedHashSet0, linkedHashSet0, true, (Argument) null, groupImpl0, 322);
      linkedList0.add(defaultOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
