/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:05:07 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2529, 2529);
      RealMatrix realMatrix0 = openMapRealMatrix0.power(2529);
      assertEquals(2529, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(248, 248);
      openMapRealMatrix0.addToEntry(70, 70, 52);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2534, 2534);
      // Undeclared exception!
      openMapRealMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2146607481, 2146607481);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        openMapRealMatrix0.subtract((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 2,146,607,481x2,146,607,481 but expected 0x0
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(249, 249);
      openMapRealMatrix0.addToEntry(70, 70, 52);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(274, 274);
      RealMatrix realMatrix0 = openMapRealMatrix0.power(0);
      openMapRealMatrix0.addToEntry(52, 4, 2.7553817452272217E-6);
      RealMatrix realMatrix1 = openMapRealMatrix0.multiply(realMatrix0);
      assertEquals(274, realMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(248, 248);
      openMapRealMatrix0.addToEntry(70, 70, 52);
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) openMapRealMatrix0);
      assertEquals(248, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(274, 274);
      openMapRealMatrix0.addToEntry(251, 251, 0.0);
      assertEquals(274, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(248, 248);
      openMapRealMatrix0.addToEntry(59, 230, 52);
      openMapRealMatrix0.multiplyEntry(59, 230, 248);
      assertEquals(248, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(248, 248);
      openMapRealMatrix0.multiplyEntry(20, 215, 52);
      assertEquals(248, openMapRealMatrix0.getColumnDimension());
  }
}
