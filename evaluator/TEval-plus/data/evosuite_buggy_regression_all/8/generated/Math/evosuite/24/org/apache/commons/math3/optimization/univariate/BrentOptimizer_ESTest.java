/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:01:25 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Log10;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Sqrt;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-526.3909293485441), (-526.3909293485441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -526.391 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(1291.486, (-526.9929456563326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -526.993 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.51813137650059E-8, 6.51813137650059E-8);
      Sinc sinc0 = new Sinc();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2145965024, (UnivariateFunction) sinc0, goalType0, 6.51813137650059E-8, (double) 2145965024, 6.51813137650059E-8);
      assertEquals((-9.076523522210611E-10), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.51813137650059E-8, 6.51813137650059E-8);
      Sinc sinc0 = new Sinc();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2145965024, (UnivariateFunction) sinc0, goalType0, 6.51813137650059E-8, (double) 2145965024, 6.51813137650059E-8);
      assertEquals(0.999999999999995, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Log10 log10_0 = new Log10();
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.113879253864931E-8, 6.113879253864931E-8);
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2145869780, (UnivariateFunction) log10_0, goalType0, (double) 2145869780, 6.113879253864931E-8, 6.113879253864931E-8);
      assertEquals(2.145869638918696E9, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Sqrt sqrt0 = new Sqrt();
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.113879253864931E-8, 6.113879253864931E-8);
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1878, (UnivariateFunction) sqrt0, goalType0, (double) 1878, 6.113879253864931E-8);
      assertEquals(1877.999807220387, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Sqrt sqrt0 = new Sqrt();
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.113879253864931E-8, 6.113879253864931E-8);
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1878, (UnivariateFunction) sqrt0, goalType0, (double) 1878, 6.113879253864931E-8);
      assertEquals(3.7594406343327433E-4, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.113879253864931E-8, 1.0, convergenceChecker0);
      Sqrt sqrt0 = new Sqrt();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(842, (UnivariateFunction) sqrt0, goalType0, 1.3280021798948244E-8, (-19.613160005418), (-556.620284));
      assertEquals((-554.8916329051344), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.113879253864931E-8, 1.0, convergenceChecker0);
      Sqrt sqrt0 = new Sqrt();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(842, (UnivariateFunction) sqrt0, goalType0, 1.3280021798948244E-8, 1.3280021798948244E-8, (-556.620284));
      assertEquals((-344.01025433454674), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MINIMIZE;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.113879253864931E-8, 6.113879253864931E-8);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2145869780, (UnivariateFunction) log10_0, goalType0, 6.113879253864931E-8, (-842.3605346), 1146.742);
      assertEquals((-7.029563037195622), univariatePointValuePair0.getValue(), 0.01);
  }
}
