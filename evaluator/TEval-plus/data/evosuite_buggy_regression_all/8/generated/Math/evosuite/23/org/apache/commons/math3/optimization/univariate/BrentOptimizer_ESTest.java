/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:01:18 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acosh;
import org.apache.commons.math3.analysis.function.Expm1;
import org.apache.commons.math3.analysis.function.Log10;
import org.apache.commons.math3.analysis.function.Rint;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.125, 0.125);
      Acosh acosh0 = new Acosh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2195, (UnivariateFunction) acosh0, goalType0, (double) 2195, (double) 2195, 0.125);
      assertEquals(0.5048676126244009, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-23.47492355552527), (-23.47492355552527));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -23.475 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.22422435470870872, (-1630.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,630 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.125, 0.125);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1302, (UnivariateFunction) expm1_0, goalType0, 0.125, 266.2976684561054, 266.2976684561054);
      assertEquals(0.41613728218149276, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.125, 0.125);
      Rint rint0 = new Rint();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1646, (UnivariateFunction) rint0, goalType0, 0.5, 0.125, (double) 1646);
      assertEquals(0.43229473378213507, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.125, 0.125);
      GoalType goalType0 = GoalType.MINIMIZE;
      Sin sin0 = new Sin();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1072, (UnivariateFunction) sin0, goalType0, (double) 1072, 0.125, 0.125);
      assertEquals(97.55000074026256, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.22422435470870872, 0.22422435470870872, convergenceChecker0);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2446, (UnivariateFunction) log10_0, goalType0, 3474.53682, (-914.74), 1.2160992719555806E-37);
      assertEquals((-0.41447221921112776), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.22422435470870872, 0.22422435470870872, convergenceChecker0);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2446, (UnivariateFunction) log10_0, goalType0, 3474.53682, (-914.74), 1.2160992719555806E-37);
      assertEquals((-36.91503097152482), univariatePointValuePair0.getValue(), 0.01);
      assertEquals(1.2160992719555806E-37, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.22422435470870872, 0.22422435470870872);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(3012, (UnivariateFunction) log10_0, goalType0, 0.22422435470870872, (-2300.057), (double) 3012);
      assertEquals((-0.48308682106068485), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.125, 0.125);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Log10 log10_0 = new Log10();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1259, (UnivariateFunction) log10_0, goalType0, (double) 1259, (double) 1259, (double) 1259);
      assertNotNull(univariatePointValuePair0);
      assertEquals(3.1000257301078626, univariatePointValuePair0.getValue(), 0.01);
      assertEquals(1259.0, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.224224354709, 0.224224354709);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1046, (UnivariateFunction) log10_0, goalType0, (double) 1046, (double) 1046, 125.0);
      assertEquals(850.0921611347233, univariatePointValuePair0.getPoint(), 0.01);
  }
}
