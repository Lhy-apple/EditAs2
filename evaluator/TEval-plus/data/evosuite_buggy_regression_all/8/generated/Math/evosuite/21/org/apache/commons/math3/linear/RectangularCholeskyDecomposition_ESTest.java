/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:59:30 GMT 2023
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RectangularCholeskyDecomposition_ESTest extends RectangularCholeskyDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 0.0);
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = (Double) (-1022.0984939665376);
      doubleArray0[1] = (Double) 0.0;
      doubleArray0[2] = (Double) (-2329.50367909);
      doubleArray0[3] = (Double) (-2329.50367909);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, (-301.801494776));
      assertEquals(4, rectangularCholeskyDecomposition0.getRank());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-3267.07));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 0.6931470632553101);
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(333, 333);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(blockRealMatrix0, 0.16666666666666666);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0.167): not positive definite matrix: value 0 at index 0
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-3267.07));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double(0.0);
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, (double) doubleArray0[0]);
      RealMatrix realMatrix1 = rectangularCholeskyDecomposition0.getRootMatrix();
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition1 = null;
      try {
        rectangularCholeskyDecomposition1 = new RectangularCholeskyDecomposition(realMatrix1, (double) doubleArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,267.07 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -3,267.07 at index 1
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }
}
