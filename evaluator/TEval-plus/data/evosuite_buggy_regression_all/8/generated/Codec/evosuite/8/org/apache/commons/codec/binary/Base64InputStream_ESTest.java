/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:39:14 GMT 2023
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.StreamCorruptedException;
import org.apache.commons.codec.binary.Base64InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64InputStream_ESTest extends Base64InputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("#4U5\"_akzk>FR\"b=$6", "#4U5\"_akzk>FR\"b=$6", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Base64InputStream base64InputStream0 = new Base64InputStream(mockFileInputStream0, true);
      Base64InputStream base64InputStream1 = new Base64InputStream(base64InputStream0, true, 1, (byte[]) null);
      assertFalse(base64InputStream1.markSupported());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
      boolean boolean0 = base64InputStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
      Base64InputStream base64InputStream1 = new Base64InputStream(base64InputStream0, true);
      base64InputStream1.read();
      int int0 = base64InputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(base64InputStream0);
      Base64InputStream base64InputStream1 = new Base64InputStream(bufferedInputStream0);
      int int0 = base64InputStream1.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("#4U5\"_akzk>FR\"b=$6", "#4U5\"_akzk>FR\"b=$6", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Base64InputStream base64InputStream0 = new Base64InputStream(mockFileInputStream0, true);
      // Undeclared exception!
      try { 
        base64InputStream0.read((byte[]) null, (-71), (int) (byte)111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("#4U5\"_akzk>FR\"b=$6", "#4U5\"_akzk>FR\"b=$6", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Base64InputStream base64InputStream0 = new Base64InputStream(mockFileInputStream0, true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, (-1), (-282));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Base64InputStream base64InputStream0 = new Base64InputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, (int) (byte)39, (-1410));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Base64InputStream base64InputStream0 = new Base64InputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, 76, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, (int) (byte)0, 65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Base64InputStream base64InputStream0 = new Base64InputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[3];
      int int0 = base64InputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(base64InputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 4141413D
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }
}
