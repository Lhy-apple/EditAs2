/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:26:09 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Xd=jAm'&Hf:LhG%");
      characterReader0.rewindToMark();
      assertEquals("Xd=jAm'&Hf:LhG%", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8zz:<2Q5[c$dz)|");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("8zz:<2Q5[c$dz)|");
      assertEquals("", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R>*");
      characterReader0.mark();
      assertEquals("R>*", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(".lO$mug&r#*.Tkv?");
      characterReader0.unconsume();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xE~8{k/IWGu_S~k5G0");
      String string0 = characterReader0.toString();
      assertEquals("xE~8{k/IWGu_S~k5G0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      assertEquals("\n", characterReader0.toString());
      
      characterReader0.consumeAsString();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      String string0 = characterReader0.consumeTo('V');
      assertEquals("\n", string0);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xE~8{k/IWGu_S~k5G0");
      int int0 = characterReader0.pos();
      assertEquals("xE~8{k/IWGu_S~k5G0", characterReader0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertEquals("\n", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("VxhR7b(ToSJXC1&}");
      char char0 = characterReader0.current();
      assertEquals('V', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xE~8{k/IWGu_S~k5G0");
      assertEquals("xE~8{k/IWGu_S~k5G0", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Xd=jAm'&Hf:LhG%");
      characterReader0.consumeTo('V');
      characterReader0.consumeTo("Xd=jAm'&Hf:LhG%");
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("hS,DV`!HJEuD");
      String string0 = characterReader0.consumeTo("hS,DV`!HJEuD");
      assertEquals("", string0);
      assertEquals("hS,DV`!HJEuD", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Xd=jAm'&Hf:LhG%");
      characterReader0.consumeTo('V');
      assertEquals("", characterReader0.toString());
      
      String string0 = characterReader0.consumeToAny((char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Wad68]-4/}[Wy)e*Sr");
      char[] charArray0 = new char[5];
      characterReader0.consumeToAny(charArray0);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '&';
      CharacterReader characterReader0 = new CharacterReader("must be truehg%xd=jam'&hf:lhg%");
      characterReader0.consumeToAny(charArray0);
      assertEquals("&hf:lhg%", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      assertEquals("\n?", characterReader0.toString());
      
      characterReader0.consumeTo('i');
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Wad68]-4/}[Wy)e*Sr");
      characterReader0.consumeLetterSequence();
      assertEquals("68]-4/}[Wy)e*Sr", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("+#cbtbg2)/");
      characterReader0.consumeLetterSequence();
      assertEquals("+#cbtbg2)/", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      assertEquals("\n?", characterReader0.toString());
      
      characterReader0.consumeTo('i');
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ie,^O^");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeHexSequence();
      assertEquals(",^O^", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xE~8{k/IWGu_S~k5G0");
      characterReader0.consume();
      characterReader0.consumeHexSequence();
      characterReader0.advance();
      characterReader0.consumeHexSequence();
      assertEquals("{k/IWGu_S~k5G0", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("by=(%,(0+");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("y=(%,(0+", characterReader0.toString());
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Xd=jAm'&Hf:LhG%");
      String string0 = characterReader0.consumeTo('V');
      String string1 = characterReader0.consumeDigitSequence();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("2p#7_#]J$JkXM0");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("2", string0);
      assertEquals("p#7_#]J$JkXM0", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("VxhR7b(ToSJXC1&}");
      assertEquals("VxhR7b(ToSJXC1&}", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.matches('#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("by=(%,(0+");
      boolean boolean0 = characterReader0.matches(']');
      assertFalse(boolean0);
      assertEquals("by=(%,(0+", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("VxhR7b(ToSJXC1&}");
      boolean boolean0 = characterReader0.matches('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Wad68]-4/}[Wy)e*Sr");
      char[] charArray0 = new char[5];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals("Wad68]-4/}[Wy)e*Sr", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Xd=jAm'&Hf:LhG%");
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      characterReader0.consumeTo('j');
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals("jAm'&Hf:LhG%", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("VxhR7b(ToSJXC1&}");
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals("VxhR7b(ToSJXC1&}", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Xd=jAm'&Hf:LhG%");
      assertEquals("Xd=jAm'&Hf:LhG%", characterReader0.toString());
      
      characterReader0.consumeTo('V');
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals("\n", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("hS,DV`!HJEuD");
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("hS,DV`!HJEuD", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{RCS");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals("{RCS", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("VxhR7b(ToSJXC1&}");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("VxhR7b(ToSJXC1&}", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      assertEquals("\n?", characterReader0.toString());
      
      characterReader0.consumeTo('i');
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("\n", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("8zz:<2Q5[c$dz)|");
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      boolean boolean0 = characterReader0.matchConsume("org.jsoup.helper.Validate");
      assertFalse(boolean0);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("VxhR7b(ToSJXC1&}");
      boolean boolean0 = characterReader0.matchConsume("");
      assertTrue(boolean0);
      assertEquals("VxhR7b(ToSJXC1&}", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("by=(%,(0+");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("Qhh\u0000 h");
      assertFalse(boolean0);
      assertEquals("by=(%,(0+", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("VxhR7b(ToSJXC1&}");
      boolean boolean0 = characterReader0.containsIgnoreCase("");
      assertEquals("VxhR7b(ToSJXC1&}", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Wad68]-4/}[Wy)e*Sr");
      boolean boolean0 = characterReader0.containsIgnoreCase("org.jsoup.parser.CharacterReader");
      assertEquals("Wad68]-4/}[Wy)e*Sr", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R>*");
      boolean boolean0 = characterReader0.containsIgnoreCase("R>*");
      assertTrue(boolean0);
  }
}
