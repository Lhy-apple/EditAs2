/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:26:19 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:itlgamn gq", "abs:itlgamn gq");
      String string0 = textNode0.attr("abs:itlgamn gq");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      document0.setBaseUri("abs:itlgamn gq");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("Vscr");
      Element element0 = document0.attr("csub", "P");
      String string0 = element0.absUrl("csub");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("DownArrowUpArrow", "DownArrowUpArrow");
      Node node0 = textNode0.removeAttr("DownArrowUpArrow");
      assertEquals("#text", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("abs:itlgamn gq");
      Element element0 = document0.append("abs:itlgamn gq");
      assertEquals("abs:itlgamn gq", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("abs:itlgamn gq");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataNode dataNode0 = new DataNode(")@lg", ")@lg");
      dataNode0.setParentNode(dataNode0);
      dataNode0.previousSibling();
      assertEquals(0, (int)dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("Vscr");
      assertEquals(0, (int)document0.siblingIndex());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      assertNotNull(document0);
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("'Cgz", "'Cgz");
      assertNotNull(textNode0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("'Cgz", textNode0.baseUri());
      
      String string0 = textNode0.toString();
      assertEquals("'Cgz", string0);
      assertNotNull(string0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("'Cgz", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("ntgl", "ntgl");
      assertNotNull(textNode0);
      assertEquals("ntgl", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("ntgl", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("abs:", element0.baseUri());
      assertEquals(1, (int)element0.siblingIndex());
      assertTrue(element0.isBlock());
      
      element0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("abs:", element0.baseUri());
      assertEquals(1, (int)element0.siblingIndex());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      assertNotNull(document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("abs:", element0.baseUri());
      assertEquals(1, (int)element0.siblingIndex());
      
      element0.replaceWith(document0);
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("abs:", element0.baseUri());
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      assertNotNull(document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      
      Element element0 = document0.appendElement("abs:itlgamn gq");
      assertNotNull(element0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(1, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("abs:itlgamn gq", element0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.replaceChild(element0, element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("abs:", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("abs:itlgamn gq");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      
      Document document1 = (Document)document0.prependText("abs:itlgamn gq");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("abs:itlgamn gq", document1.baseUri());
      
      Document document2 = (Document)document1.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("abs:itlgamn gq", document1.baseUri());
      assertEquals("abs:itlgamn gq", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, (int)document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, (int)element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("abs:", element0.baseUri());
      
      Element element1 = (Element)element0.previousSibling();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, (int)element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("abs:", element0.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(0, (int)element1.siblingIndex());
      assertEquals("abs:", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("Vscr");
      assertNotNull(document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Vscr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexEquals((-1));
      assertNotNull(elements0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Vscr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:itlgamn gq", "abs:itlgamn gq");
      assertNotNull(textNode0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:itlgamn gq", textNode0.baseUri());
      
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:itlgamn gq", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      
      TextNode textNode0 = TextNode.createFromEncoded("abs:itlgamn gq", "abs:itlgamn gq");
      assertNotNull(textNode0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:itlgamn gq", textNode0.baseUri());
      
      textNode0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:itlgamn gq", textNode0.baseUri());
      
      textNode0.hashCode();
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:itlgamn gq", textNode0.baseUri());
  }
}
