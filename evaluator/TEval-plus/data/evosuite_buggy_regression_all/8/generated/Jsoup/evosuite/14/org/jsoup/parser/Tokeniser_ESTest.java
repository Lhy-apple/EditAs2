/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:25:15 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TokeniserState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tokeniser_ESTest extends Tokeniser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.createTempBuffer();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      // Undeclared exception!
      try { 
        tokeniser0.emitDoctypePending();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#]A5r&Sw]A2;r mm?L;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.acknowledgeSelfClosingFlag();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.createCommentPending();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1\"VZG.");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      // Undeclared exception!
      try { 
        tokeniser0.isAppropriateEndTagToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("eOjm),H<s>");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.read();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("W[N~8TfN.('`");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      boolean boolean0 = tokeniser0.isTrackErrors();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      // Undeclared exception!
      try { 
        tokeniser0.emitCommentPending();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("($au&Sc*2.EOW1TKq TY");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.setTrackErrors(false);
      tokeniser0.read();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1\"VZG.");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.createDoctypePending();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Unexpected character in input");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.getState();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#]A5r&Sw]A2;r mm?L;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(true);
      token_Tag0.selfClosing = true;
      tokeniser0.emit(token_Tag0);
      Token token0 = tokeniser0.read();
      assertSame(token0, token_Tag0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#]A5r&Sw]A2;r mm?L;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      tokeniser0.emit(token_Tag0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#]A5r&Sw]A2;r mm?L;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token.EndTag token_EndTag0 = (Token.EndTag)tokeniser0.createTagPending(false);
      token_EndTag0.appendAttributeName('Y');
      token_EndTag0.finaliseTag();
      tokeniser0.emit(token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#]A5r&Sw]A2;r mm?L;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = Character.valueOf('Y');
      tokeniser0.read();
      Character character1 = tokeniser0.consumeCharacterReference(character0, false);
      assertNull(character1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#]A5r&Sw]A2;r mm?L;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = Character.valueOf('Y');
      Character character1 = tokeniser0.consumeCharacterReference(character0, true);
      assertNull(character1);
      assertEquals("#]A5r&Sw]A2;r mm?L;", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("eOj)H<s>");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = Character.valueOf('e');
      Character character1 = tokeniser0.consumeCharacterReference(character0, false);
      assertNull(character1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&2wuLRY< .^$");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, false);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#x6Prp=PKh.m?X");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = new Character('3');
      tokeniser0.consumeCharacterReference(character0, true);
      assertEquals("Prp=PKh.m?X", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#2;5&>G<; m?kd;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.consumeCharacterReference((Character) null, false);
      assertEquals("5&>G<; m?kd;", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("88&; ,_t6%`GkB/");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token token0 = tokeniser0.read();
      assertEquals("88&; ,_t6%`GkB/", token0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lt0:rif");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.Tokeniser");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("dot");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.consumeCharacterReference((Character) null, true);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.setTrackErrors(false);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscaped;
      tokeniser0.error(tokeniserState0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Ojm,E<>");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token token0 = tokeniser0.read();
      assertEquals("Ojm,E<>", token0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_<i)_0?");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.setTrackErrors(false);
      Token token0 = tokeniser0.read();
      assertEquals("_", token0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\"4M<o7");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token token0 = tokeniser0.read();
      assertEquals("\"4M", token0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#]A5r&Sw]A2;r mm?L;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token.EndTag token_EndTag0 = (Token.EndTag)tokeniser0.createTagPending(false);
      token_EndTag0.appendAttributeName('Y');
      token_EndTag0.finaliseTag();
      tokeniser0.setTrackErrors(false);
      tokeniser0.emit(token_EndTag0);
  }
}
