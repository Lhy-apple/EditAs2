/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:26:47 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsMatchingText("wscr");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("`?");
      document0.prependText("`?");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n `?\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.child(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(",~");
      document0.tagName("w-^%Vz/.=");
      assertEquals("w-^%vz/.=", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      Element element1 = element0.val("");
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document(",~");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("@ejot.Zv1F2<= 5");
      Elements elements0 = document0.getElementsContainingOwnText("therefore");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document(",~");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document(" ");
      // Undeclared exception!
      try { 
        document0.html(" ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Elements elements0 = element0.getElementsByAttributeValue("5mGU_|^@Z#n", "5mGU_|^@Z#n");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document(",~");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsByAttributeValueStarting(",~", ",~");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("rrrbfs");
      Elements elements0 = document0.select("rrrbfs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nw~{Sguu");
      Element element0 = new Element(tag0, "nw~{Sguu");
      // Undeclared exception!
      try { 
        element0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("Fr'j");
      Elements elements0 = document0.getElementsByIndexLessThan(3617);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsByAttributeStarting("wscr");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("rarrbfs");
      // Undeclared exception!
      try { 
        document0.wrap("rarrbfs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document(" ");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsByAttributeValueMatching("D", "v");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("foo!%j8c0f-=");
      Elements elements0 = document0.getElementsByAttributeValueEnding("foo!%j8c0f-=", "vfr");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("because");
      Element element0 = new Element(tag0, "because");
      Elements elements0 = element0.getElementsByClass("because");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsContainingText("gtrsim");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("=6ub'QK");
      Elements elements0 = document0.getElementsByAttributeValueContaining(",", "LTI !V-Y~N:fLjPQ1[");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("<[*k<k!E,w#&\"U");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(",~");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsByAttributeValueNot(",~", ",~");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document(",~");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsByAttribute("[F`};x$Z");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document(",~");
      // Undeclared exception!
      try { 
        document0.before("%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsByTag(",~");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document(",~");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1431655763));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document(" ");
      document0.prependChild(document0);
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("aopf");
      Element element0 = document0.createElement("aopf");
      element0.prependChild(document0);
      Elements elements0 = document0.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document(",~");
      Element element0 = document0.prependChild(document0);
      element0.prepend(",~");
      document0.getElementsByIndexEquals((-1908874352));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document(",~");
      Element element0 = document0.prependChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("h{<d#?d+trqjom");
      Element element0 = document0.prependText("h{<d#?d+trqjom");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document(",~");
      document0.prependChild(document0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("</");
      DataNode dataNode0 = new DataNode("%4d", ",~");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document(",~");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o7w<e,ZR");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "o7w<e,ZR", attributes0);
      element0.prependChild(element0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Tag tag0 = Tag.valueOf("text");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Document document0 = new Document("aopf");
      Element element1 = element0.prependChild(document0);
      element0.prependChild(element1);
      Element element2 = document0.previousElementSibling();
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document(",~");
      document0.prependChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document(",~");
      document0.prependChild(document0);
      document0.prependElement("&gM3%rt ");
      document0.firstElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o7w<e,ZR");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "o7w<e,ZR", attributes0);
      Element element1 = element0.prependChild(element0);
      Element element2 = element1.lastElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Tag tag0 = Tag.valueOf("text");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Document document0 = new Document("aopf");
      Element element1 = element0.prependChild(document0);
      element0.prependChild(element1);
      Element element2 = document0.lastElementSibling();
      assertEquals("aopf", element2.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o7w<e,ZR");
      Element element0 = new Element(tag0, "o7w<e,ZR");
      element0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.getElementById("9,gH!d Q^{39+=rv");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document(",~");
      Comment comment0 = new Comment(",~", "text");
      document0.prependChild(comment0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("id");
      DocumentType documentType0 = new DocumentType("E", "<", ",~", ",");
      document0.prependChild(documentType0);
      Elements elements0 = document0.getElementsMatchingOwnText(",");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("id");
      document0.appendText("xmp");
      Elements elements0 = document0.getElementsMatchingOwnText(",");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",~");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ",~", attributes0);
      Document document0 = new Document(",~");
      document0.prependChild(element0);
      Elements elements0 = document0.getElementsMatchingOwnText(",~");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Element element1 = element0.prepend("d8zO)q,wE]8(ZHn=?");
      String string0 = element1.text();
      assertEquals("d8zO)q,wE]8(ZHn=?", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "textarea");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      element0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",~");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ",~", attributes0);
      Document document0 = new Document(",~");
      document0.prependChild(element0);
      element0.appendText(",~");
      String string0 = document0.text();
      assertEquals(",~", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("id");
      DocumentType documentType0 = new DocumentType("E", "<", ",~", ",");
      Element element0 = document0.prependChild(documentType0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",~");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ",~", attributes0);
      Document document0 = new Document(",~");
      document0.prependChild(element0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",~");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ",~", attributes0);
      Document document0 = new Document(",~");
      document0.prependChild(element0);
      element0.appendText(",~");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependText("");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document(",~");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      DataNode dataNode0 = new DataNode(".", ",~");
      nodeArray0[6] = (Node) dataNode0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.data();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("<[*k<k!E,w#&\"U");
      Element element0 = document0.removeClass(">WJ{7p_");
      Element element1 = element0.addClass("<[*k<k!E,w#&\"U");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(" />");
      Element element0 = new Element(tag0, " />", attributes0);
      boolean boolean0 = element0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o7w<e,ZR");
      Element element0 = new Element(tag0, "o7w<e,ZR");
      Element element1 = element0.toggleClass("o7w<e,ZR");
      assertEquals("o7w<e,zr", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("+k+k50JL^");
      Element element0 = document0.toggleClass("");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Tag tag0 = Tag.valueOf("because");
      Element element0 = new Element(tag0, "because");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("aopf");
      Element element0 = document0.val("text");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",~");
      Document document0 = new Document(",~");
      document0.outerHtml(stringBuilder0);
      assertEquals(",~\n<#root></#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",~");
      Document document0 = new Document(",~");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 936, document_OutputSettings1);
      assertEquals(",~<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document(" ");
      StringBuilder stringBuilder0 = new StringBuilder(" ");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 6, document_OutputSettings1);
      assertEquals(" </#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("id");
      DocumentType documentType0 = new DocumentType("E", "<", ",~", ",");
      Element element0 = document0.prependChild(documentType0);
      String string0 = element0.outerHtml();
      assertEquals("<!DOCTYPE E PUBLIC \"<\" \",~\">", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document(",~");
      document0.hashCode();
  }
}
