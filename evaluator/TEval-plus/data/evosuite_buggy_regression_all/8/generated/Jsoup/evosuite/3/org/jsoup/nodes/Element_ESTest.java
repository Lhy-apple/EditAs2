/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:23:30 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("p%F)11");
      Element element0 = document0.val("p%F)11");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("va+");
      Elements elements0 = document0.getElementsByAttributeValueEnding("va+", "va+");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("&Etwic]4$0|u?+vcl");
      Elements elements0 = document0.getElementsByClass("&Etwic]4$0|u?+vcl");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("]`8#ox2c}N");
      // Undeclared exception!
      try { 
        document0.child(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("o}?oNTQRo1{i4n");
      Elements elements0 = document0.getElementsByAttributeValueContaining("o}?oNTQRo1{i4n", "o}?oNTQRo1{i4n");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("<P'KqUxE5");
      Elements elements0 = document0.getElementsByAttributeValueNot("<P'KqUxE5", "<P'KqUxE5");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("/k4+0i");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("XDO{{B2Qb?a5M%%27W");
      Elements elements0 = document0.getElementsByAttribute("XDO{{B2Qb?a5M%%27W");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("|^@ebftht/8n\"");
      Element element0 = document0.addClass("|^@ebftht/8n\"");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("339");
      // Undeclared exception!
      try { 
        document0.html("339");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("1");
      Elements elements0 = document0.getElementsByAttributeValue("1", "1");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("p%F)11");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("S=N");
      Elements elements0 = document0.getElementsByAttributeValueStarting("S=N", "S=N");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("b^8-gky\"m{>8nSVD!N");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#$W8~6Zh{WjAVu", attributes0);
      String string0 = element0.nodeName();
      assertEquals("b^8-gky\"m{>8nsvd!n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("!$7aNQ+ BNo)");
      Element element0 = document0.removeClass("!$7aNQ+ BNo)");
      assertEquals("!$7aNQ+ BNo)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("y+)cJea})");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("5q,;,");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("o}?oNTQRo1{i4n");
      Elements elements0 = document0.getElementsByIndexLessThan(7);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("S=N");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-211));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("cx{X?}WDX4_x%SYtS9");
      Elements elements0 = document0.getElementsByIndexEquals(8);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("|^@ebftht!9/8n\"");
      document0.appendChild(document0);
      Elements elements0 = document0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("|^@ebftht!9/8n\"");
      Tag tag0 = Tag.valueOf("<");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "ba4ACx", attributes0);
      element0.appendChild(document0);
      Elements elements0 = document0.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("CITE");
      Element element0 = document0.prependText("CITE");
      element0.appendChild(document0);
      Element element1 = document0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("CITE");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.prependElement("{,,q!@io|wos");
      Element element2 = element1.nextElementSibling();
      assertNotNull(element2);
      assertEquals("{,,q!@io|wos", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("r3fc");
      Element element0 = document0.appendElement("r3fc");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("51rNLfq-TUm2|");
      Element element0 = new Element(tag0, "51rNLfq-TUm2|");
      Element element1 = element0.appendElement("51rNLfq-TUm2|");
      element0.prependChild(element0);
      Element element2 = element1.previousElementSibling();
      assertNotNull(element2);
      assertNotSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("`");
      document0.appendElement("RHx!9M`~Rp");
      document0.prependChild(document0);
      Element element0 = document0.firstElementSibling();
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("SAMP");
      Element element0 = document0.prependElement("SAMP");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("|^@ebftht!9/8n\"");
      document0.appendChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("p%F)11");
      document0.appendChild(document0);
      Element element0 = document0.prependElement("p%F)11");
      Element element1 = element0.lastElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("vblre");
      document0.appendElement("xBO(IHUhM=");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "y)cJea})", attributes0);
      element0.val("8706");
      String string0 = element0.text();
      assertEquals("8706", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("FRAME");
      Element element0 = document0.prependText("FRAME");
      Element element1 = document0.appendElement("FRAME");
      element1.prependText("FRAME");
      String string0 = element0.text();
      assertEquals("FRAME FRAME", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("jsoup");
      DataNode dataNode0 = DataNode.createFromEncoded("O4Fy]*8[B8bWm", "9824");
      document0.prependChild(dataNode0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("vblre");
      Element element0 = document0.prependText("|^@ebfthet!9/8n");
      Element element1 = element0.appendElement("xBO(IHUhM=");
      assertEquals("xbo(ihuhm=", element1.nodeName());
      
      String string0 = element0.text();
      assertEquals("|^@ebfthet!9/8n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("#root");
      Element element0 = document0.appendElement("textarea");
      assertEquals("textarea", element0.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("p%F)11");
      Element element0 = document0.prependText(" ");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("");
      Comment comment0 = new Comment("", "Acirc");
      Element element0 = document0.appendChild(comment0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("p%F)11");
      Element element0 = new Element(tag0, "p%F)11", attributes0);
      Element element1 = element0.prependElement("p%F)11");
      Element element2 = element1.text("p%F)11");
      boolean boolean0 = element0.hasText();
      assertNotSame(element0, element2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("|^@ebftht!9/8n\"");
      Element element0 = document0.prependText("S62qzxRfbD");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("");
      DataNode dataNode0 = DataNode.createFromEncoded("/cX0_YA.i^Tr'' /]!Y", "");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("/cX0_YA.i^Tr'' /]!Y", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("#root");
      Element element0 = document0.toggleClass("#root");
      String string0 = element0.className();
      assertEquals(" #root", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("");
      document0.classNames();
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("p%F)11");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("#root");
      Element element0 = document0.appendElement("textarea");
      element0.val();
      assertEquals("textarea", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("FRAME");
      document0.prependElement("FRAME");
      String string0 = document0.outerHtml();
      assertEquals("<frame />", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("339");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("vblre");
      Element element0 = document0.prependText("|^@ebfthet!9/8n");
      element0.appendElement("xBO(IHUhM=");
      String string0 = document0.outerHtml();
      assertEquals("|^@ebfthet!9/8n<xbo(ihuhm=>\n</xbo(ihuhm=>", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("{X?}WDYX4_x%SYtS9");
      Element element0 = document0.prependElement("textarea");
      element0.appendText("textarea");
      String string0 = document0.outerHtml();
      assertEquals("<textarea>textarea</textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("5q,;,");
      boolean boolean0 = document0.equals("5q,;,");
      assertFalse(boolean0);
  }
}
