/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:34:58 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = new Element("nX");
      Element element1 = element0.getElementById("nX");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("GIl6(x#6");
      // Undeclared exception!
      try { 
        document0.wrap("GIl6(x#6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.appendText("textarea");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("8b&}");
      Elements elements0 = document0.getElementsMatchingText("8b&}");
      assertTrue(elements0.isEmpty());
      assertEquals("8b&}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      assertEquals(2, document0.childNodeSize());
      
      document0.replaceChild(element0, element0);
      String string0 = document0.html();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("rt");
      document0.title("rt");
      Pattern pattern0 = Pattern.compile("rt");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("rt", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.child((-696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("d");
      Element element0 = document0.prependText("d");
      assertEquals("d", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.tagName("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("&)JUlCZT&}d#XME?[");
      document0.dataset();
      assertEquals("&)JUlCZT&}d#XME?[", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertEquals("br", document0.baseUri());
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapeEnd");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000018");
      document0.html("I(L:@<x&V");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("@B@o/q!");
      Element element0 = document0.attr("@B@o/q!", false);
      assertEquals("@B@o/q!", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsByAttributeValue("br", "br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("CS|AK~V9&'");
      document0.getElementsByAttributeValueStarting("CS|AK~V9&'", "CS|AK~V9&'");
      assertEquals("CS|AK~V9&'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("@B@o/q!");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("@B@o/q!", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      document0.prepend("5GGrdw+r$7G");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("@B@o/q!");
      Elements elements0 = document0.getElementsByIndexLessThan((-109));
      assertEquals("@B@o/q!", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.getElementsByAttributeStarting("body");
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("body");
      Elements elements0 = document0.getElementsMatchingOwnText("body");
      assertEquals("body", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      Element element0 = document0.val("Gy2V{nr");
      assertEquals("Gy2V{nr", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("br");
      document0.getElementsByAttributeValueMatching("br", "br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("rt");
      document0.is("rt");
      assertEquals(1, document0.childNodeSize());
      assertEquals("rt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsByAttributeValueEnding("br", "br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("&)JUlCZT&}d#XME?[");
      Elements elements0 = document0.getElementsByClass("jISIH:fdx:yG(x5j[A.");
      assertEquals("&)JUlCZT&}d#XME?[", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("encoding");
      Elements elements0 = element0.getElementsContainingText("encoding");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("u&yV6");
      document0.getElementsByAttributeValueContaining("u&yV6", "u&yV6");
      assertEquals(1, document0.childNodeSize());
      assertEquals("u&yV6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("rt");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.doSetBaseUri("#");
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("Uny`2)!|vN>%");
      Element element0 = document0.appendTo(document0);
      element0.getElementsByIndexEquals(46);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.getElementsByAttributeValueNot("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Element element0 = new Element("nX");
      String string0 = element0.toString();
      assertEquals("<nX></nX>", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("optgroup");
      document0.getElementsByAttribute("optgroup");
      assertEquals("optgroup", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element element0 = new Element("encoding");
      // Undeclared exception!
      try { 
        element0.before("encoding");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("hdgaoup");
      Element element0 = document0.removeClass("hdgaoup");
      assertEquals("hdgaoup", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Element element0 = new Element("encoding");
      Element element1 = element0.selectFirst("encoding");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("y:A]tI7 }&FF");
      Elements elements0 = document0.getElementsByIndexGreaterThan(62);
      assertEquals(1, document0.childNodeSize());
      assertEquals("y:A]tI7 }&FF", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("@B@o/q!");
      Element element0 = document0.body();
      element0.after("@B@o/q!");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("@B@o/q!", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("&)JUZi&Zd#XME?[");
      Element element0 = document0.body();
      Elements elements0 = element0.parents();
      assertEquals("&)JUZi&Zd#XME?[", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("&)JUlCZT&}d#XME?[");
      Element element0 = document0.append("&)JUlCZT&}d#XME?[");
      element0.getElementsByIndexEquals(1126);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("a,U9N|>+");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1147), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("rt");
      document0.append("rt");
      document0.textNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("q");
      DataNode dataNode0 = DataNode.createFromEncoded("q", "q");
      Element element0 = document0.prependChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals("q", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("a[\"01(U D#zDP");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("a[\"01(U D#zDP", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(" />", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2356, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("a,9N|>+");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(97, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000018");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-1), nodeArray0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("br");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1491), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("\"eZ\"AmLBd34{r|VdK");
      document0.toggleClass("\"eZ\"AmLBd34{r|VdK");
      document0.cssSelector();
      assertEquals("\"eZ\"AmLBd34{r|VdK", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000014");
      Element element0 = document0.appendElement("java.lang.string@0000000014");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("%M)$IhR/u?IA|+");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("%M)$IhR/u?IA|+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("hgroup");
      document0.setParentNode(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("hgroup", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      document0.nextElementSibling();
      assertEquals("Gy2V{nr", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.prependChild(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("D0+s/ge&g{][");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals("D0+s/ge&g{][", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.firstElementSibling();
      assertEquals("br", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertEquals("br", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.lastElementSibling();
      assertEquals("br", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("wXv");
      Element element0 = document0.prependElement("wXv");
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("wXv", element1.baseUri());
      assertEquals("html", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000034 :aze1i8>}&a;x");
      DataNode dataNode0 = DataNode.createFromEncoded("java.lang.string@0000000034 :aze1i8>}&a;x", "f/*)[!+^o[");
      document0.prependChild(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      document0.append("Gy2V{nr");
      document0.appendElement("br");
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingText(pattern0);
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      document0.append("Gy2V{nr");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.text("br");
      Pattern pattern0 = Pattern.compile("br");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals("br", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document(".");
      DocumentType documentType0 = new DocumentType("%1]TrGd9^n'", "%1]TrGd9^n'", ":nth-child(%d)");
      document0.appendChild(documentType0);
      Pattern pattern0 = Pattern.compile(".");
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("&)JUlCZT&}d#XME?[");
      document0.appendElement("br");
      Pattern pattern0 = Pattern.compile("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals("&)JUlCZT&}d#XME?[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Pattern syntax error: ", "Pattern syntax error: ");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      document0.append("Gy2V{nr");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.title("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("br");
      DocumentType documentType0 = new DocumentType("br", (String) null, (String) null, (String) null);
      document0.prependChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("&)JUlCZT&}d#XME?[");
      document0.title("&)JUlCZT&}d#XME?[");
      boolean boolean0 = document0.hasText();
      assertEquals("&)JUlCZT&}d#XME?[", document0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("o !UfV_)s@N2`L");
      DataNode dataNode0 = new DataNode("o !UfV_)s@N2`L", "o !UfV_)s@N2`L");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("o !UfV_)s@N2`L", document0.baseUri());
      assertEquals("o !UfV_)s@N2`L", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Comment comment0 = new Comment("value", "class");
      document0.appendChild(comment0);
      String string0 = document0.data();
      assertEquals("value", string0);
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.title(" />");
      document0.data();
      assertEquals(" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("C~:j");
      document0.toggleClass("C~:j");
      boolean boolean0 = document0.hasClass("org.jsoup.select.Evaluator$AllElements");
      assertEquals("C~:j", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapeEnd");
      Element element0 = document0.toggleClass("ScriptDataDoubleEscapeEnd");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000024");
      assertEquals("ScriptDataDoubleEscapeEnd", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("y:AztI7 }&FF");
      Element element0 = document0.addClass("y:AztI7 }&FF");
      document0.toggleClass("y:AztI7 }&FF");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000034");
      assertEquals("y:AztI7 }&FF", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("NJmf0~");
      document0.addClass("br");
      Element element0 = document0.toggleClass(" />");
      boolean boolean0 = element0.hasClass("]GHb8zfX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("y:A]tI7 }&FF");
      DataNode.createFromEncoded("y:A]tI7 }&FF", "y:A]tI7 }&FF");
      Element element0 = new Element("y:A]tI7 }&FF");
      document0.addClass("y:A]tI7 }&FF");
      Element element1 = document0.toggleClass("y:A]tI7 }&FF");
      document0.toggleClass("java.lang.string@0000000014");
      boolean boolean0 = element1.hasClass("java.lang.string@0000000025");
      assertEquals("y:A]tI7 }&FF", element1.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("eodg");
      Element element0 = document0.addClass("XU#jj/fy>#");
      document0.toggleClass("");
      element0.hasClass("jsqmrVgdsBai");
      assertEquals("eodg", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("a,U9N|>+");
      document0.addClass("a,U9N|>+");
      document0.toggleClass("a,U9N|>+");
      boolean boolean0 = document0.hasClass("a,U9N|>+");
      assertEquals("a,U9N|>+", document0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      document0.addClass("Gy2V{nr");
      Element element0 = document0.toggleClass("Gy2V{nr");
      Element element1 = element0.toggleClass("Gy2V{nr");
      assertEquals("Gy2V{nr", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      document0.val();
      assertEquals("Gy2V{nr", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("Gy2V{nr");
      Element element0 = document0.appendElement("textarea");
      element0.val("# ns8FVX#3A5l8");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell("a,U9N|>+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("a,U9N|>+", document1.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.title(" />");
      String string0 = document0.html();
      assertEquals(" />", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title> /&gt;</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.prependElement("br");
      String string0 = document0.html();
      assertEquals("br", document0.baseUri());
      assertEquals("<br><br></br>\n<br><br></br>", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.prependElement("br");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element1.outerHtmlHead(stringBuilder0, 5469, document_OutputSettings1);
      assertEquals("<br>", stringBuilder0.toString());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Document document0 = Document.createShell("H7W9|><5X# t/,@9");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      assertEquals("\n<html>\n <head></head>\n <body></body>\n</html>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$IsLastChild");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, element0);
      assertEquals("org.jsoup.select.Evaluator$IsLastChild", document1.baseUri());
  }
}
