/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:31:32 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.followRedirects(false);
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.ignoreHttpErrors(true);
      try { 
        connection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = connection0.request();
      boolean boolean0 = connection_Request0.ignoreContentType();
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(3000, connection_Request0.timeout());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.parser((Parser) null);
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.ignoreContentType(false);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = connection0.request();
      boolean boolean0 = connection_Request0.validateTLSCertificates();
      assertTrue(boolean0);
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(3000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.validateTLSCertificates(false);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = connection0.request();
      boolean boolean0 = connection_Request0.followRedirects();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertTrue(boolean0);
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(3000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeCookie("lu@kdva");
      assertEquals(0, httpConnection_Response1.statusCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection1 = connection0.response((Connection.Response) httpConnection_Response0);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      // Undeclared exception!
      try { 
        connection0.maxBodySize((-2073862396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.userAgent("");
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      // Undeclared exception!
      try { 
        connection0.postDataCharset("Content-Encoding");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Content-Encoding
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Response connection_Response0 = connection0.response();
      assertNull(connection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.timeout(853);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Connection connection1 = connection0.data("org.jsoup.nodes.Element", "AfterAttributeName", (InputStream) sequenceInputStream0);
      try { 
        connection1.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection1 = connection0.method(connection_Method0);
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.request((Connection.Request) null);
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.header("Content-Encoding", "Content-Encoding");
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.referrer("Content-Encoding");
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("%Y$AjO[+  eP+4", "\r\n");
      httpConnection_KeyVal0.inputStream();
      assertEquals("\r\n", httpConnection_KeyVal0.value());
      assertEquals("%Y$AjO[+  eP+4", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("%Y$AjO[+  eP+4", "\r\n");
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("%Y$AjO[+  eP+4=\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("; ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ; 
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection1 = connection0.data((Map<String, String>) hashMap0);
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        connection0.data((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        connection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String[] stringArray0 = new String[0];
      Connection connection1 = connection0.data(stringArray0);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        connection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "Content-Encoding");
      linkedHashSet0.add(httpConnection_KeyVal0);
      Connection connection1 = connection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Encoding", "Content-Encoding");
      Connection connection1 = connection0.cookies(hashMap0);
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.header("7+", "7+");
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("7+", "7+");
      assertEquals(0, httpConnection_Response1.statusCode());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      // Undeclared exception!
      try { 
        connection0.timeout((-2989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.maxBodySize(4027);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.postDataCharset("utf-8");
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("&lt;", linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put((String) null, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("Set-Cookie", linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("Set-Cookie", linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      linkedList0.add("Ir3yR'n");
      hashMap0.put("Set-Cookie", linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("k^y>qOTYW$", linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Encoding", "Content-Encoding");
      try { 
        connection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.cookie("Content-Encoding", "Content-Encoding");
      connection1.cookie("tp/i7af]coqmi{", "Content-Encoding");
      try { 
        connection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Encoding=Content-Encoding");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "h(%");
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Encoding", "Content-Encoding");
      connection0.get();
      connection0.data("Content-Encoding", "OE[A4UjIt0N*4?_");
      try { 
        connection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
}
