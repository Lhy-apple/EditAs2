/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:30:31 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("embed");
      document0.prependText(" ");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsMatchingText(" ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.child(411);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 411, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("i ?.oQN_u");
      Element element0 = document0.appendElement("textarea");
      element0.val("i ?.oQN_u");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("i ?.oQN_u");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Q+SnY<k/");
      Elements elements0 = document0.getElementsContainingOwnText("Q+SnY<k/");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("iRo`N_u");
      Element element0 = document0.addClass("iRo`N_u");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document(".+d}C`<!Cq(y(7u5]Yd");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("iRo`N_u");
      // Undeclared exception!
      try { 
        document0.html("iRo`N_u");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("6v-=g,m%lou");
      Elements elements0 = document0.getElementsByAttributeValue("6v-=g,m%lou", "6v-=g,m%lou");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("p_nduy6ltbuqO$bo_");
      Elements elements0 = document0.getElementsByAttributeValueStarting("p_nduy6ltbuqO$bo_", "p_nduy6ltbuqO$bo_");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prepend("textarea");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("M");
      // Undeclared exception!
      try { 
        document0.after("M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("i .TQ`N_u");
      Elements elements0 = document0.getElementsByIndexLessThan((-2401));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getElementsByAttributeStarting("i .oQ`N_u");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Elements elements0 = document0.getElementsByIndexEquals(97);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      // Undeclared exception!
      try { 
        document0.wrap("i .oQ`N_u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.val("i .oQ`N_u");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("Cs");
      Elements elements0 = document0.getElementsByAttributeValueMatching("Cs", "Cs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("k6v-=g,m%lou");
      Elements elements0 = document0.getElementsByAttributeValueEnding("k6v-=g,m%lou", "k6v-=g,m%lou");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getElementsByClass("i .oQ`N_u");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("iR{oQ`N_u");
      Elements elements0 = document0.getElementsContainingText("iR{oQ`N_u");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("vzt>!n7o");
      Elements elements0 = document0.getElementsByAttributeValueContaining("vzt>!n7o", "vzt>!n7o");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document(".+d}C`<!Cq(yu5]Yd");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(".");
      Document document1 = document0.clone();
      assertEquals(".", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getElementsByAttributeValueNot("i .oQ`N_u", "i .oQ`N_u");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("Cs");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("i .Q`N_u");
      Elements elements0 = document0.getElementsByAttribute("i .Q`N_u");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("ScriptDataDoubleEsca]edDashDash");
      // Undeclared exception!
      try { 
        document0.before("ScriptDataDoubleEsca]edDashDash");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("iRo`N_u");
      Element element0 = document0.removeClass("iRo`N_u");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("\"");
      Elements elements0 = document0.getElementsByTag("\"");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("Cs");
      Elements elements0 = document0.getElementsByIndexGreaterThan(312);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document(")4]\"(\"&sd.bostb\"1");
      Element element0 = document0.appendElement(")4]\"(\"&sd.bostb\"1");
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document(")4]\"(\"&sd.bostb\"1");
      document0.tagName(")4]\"(\"&sd.bostb\"1");
      Element element0 = document0.appendElement(")4]\"(\"&sd.bostb\"1");
      Elements elements0 = element0.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("\"");
      Element element0 = document0.prependText("\"");
      Element element1 = element0.appendElement("\"");
      Element element2 = element1.previousElementSibling();
      assertNull(element2);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("Cs");
      Element element0 = document0.prependText("Cs");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.appendElement("i .oQ`N_u");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("l5fam@yi`~sh5-bt_ ");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      DataNode dataNode0 = new DataNode("3c\"as.;s!izful", "l5fam@yi`~sh5-bt_ ");
      nodeArray0[5] = (Node) dataNode0;
      nodeArray0[6] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(411, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("qsKY}(F;>A$<]-NM[");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1787), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("i ?.oQN_u");
      Elements elements0 = document0.children();
      Document document1 = (Document)document0.insertChildren((-1), elements0);
      assertEquals("i ?.oQN_u", document1.location());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("org.jsou#.nodes.Element");
      document0.toggleClass("org.jsou#.nodes.Element");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.appendElement("i .oQ`N_u");
      String string0 = element0.cssSelector();
      assertEquals("i .oq`n_u", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tag tag0 = Tag.valueOf("saec");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "saec", attributes0);
      Element element0 = new Element(tag0, "saec", attributes0);
      element0.prependChild(formElement0);
      String string0 = formElement0.cssSelector();
      assertEquals("saec > saec", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Tag tag0 = Tag.valueOf("saec");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "saec", attributes0);
      Element element0 = new Element(tag0, "saec", attributes0);
      Element element1 = element0.prependChild(formElement0);
      Element element2 = element1.appendElement("saec");
      assertFalse(element2.equals((Object)element0));
      assertEquals(1, element2.siblingIndex());
      
      String string0 = formElement0.cssSelector();
      assertEquals("saec > saec:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.appendElement("i .oQ`N_u");
      Elements elements0 = element0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("Cs");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.appendElement("i .oQ`N_u");
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("Cs");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("Tag name mus not be empty.");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Cs");
      Element element0 = document0.appendElement("Cs");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) element0;
      element0.addChildren(nodeArray0);
      document0.nextElementSibling();
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("F*w7gym~7\"pvDC]+P");
      Document document1 = new Document("F*w7gym~7\"pvDC]+P");
      assertTrue(document1.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document1;
      document0.addChildren(nodeArray0);
      document1.previousElementSibling();
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("p_nduy6ltbuqO$bo_");
      Element element0 = document0.appendElement("p_nduy6ltbuqO$bo_");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("%>maf}>euIOPC");
      Element element0 = document0.appendElement("%>maf}>euIOPC");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element1 = element0.firstElementSibling();
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.appendElement("i .oQ`N_u");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document(".+d}C`<!Cq(yu5]Yd");
      document0.appendChild(document0);
      Element element0 = document0.appendElement(".+d}C`<!Cq(yu5]Yd");
      Element element1 = element0.lastElementSibling();
      assertEquals(".+d}c`<!cq(yu5]yd", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("iRo`N_u");
      Comment comment0 = new Comment("\t ", "dl");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsMatchingText("extended");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("F*w7gym~7\"pvDC]+P");
      Element element0 = document0.prependText("pre");
      document0.appendElement("pre");
      Elements elements0 = element0.getElementsMatchingText("F*w7gym~7\"pvDC]+P");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("T$g name must Koz b5 empty.");
      document0.prependText("T$g name must Koz b5 empty.");
      document0.appendElement("T$g name must Koz b5 empty.");
      Elements elements0 = document0.getElementsMatchingText("T$g name must Koz b5 empty.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("F*w7gym~7\"pvDC]+P");
      document0.prependText("pre");
      Elements elements0 = document0.getElementsMatchingOwnText("5Kf2*HBav-0B@ !7k");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("Cs");
      DocumentType documentType0 = new DocumentType("Cs", "Cs", "Cs", "ScriptDataEscapedEndTagOpen");
      document0.appendChild(documentType0);
      Elements elements0 = document0.getElementsMatchingOwnText("Cs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("F*w7gym~7\"pvDC]+P");
      Element element0 = document0.prependText("pre");
      Element element1 = element0.appendElement("pre");
      element1.reparentChild(element0);
      Elements elements0 = document0.getElementsMatchingOwnText("5Kf2*HBav-0B@ !7k");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("pjd^s%p;2hf<c");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "pjd^s%p;2hf<c", attributes0);
      document0.prependChild(formElement0);
      document0.appendElement("br");
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextNode textNode0 = new TextNode("i .kQVN_u", "i .kQVN_u");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("F*w7gym~7\"pvDC]+P");
      document0.tagName("pre");
      Element element0 = document0.prependText("pre");
      element0.getElementsMatchingText("F*w7gym~7\"pvDC]+P");
      assertEquals("pre", document0.tagName());
      assertTrue(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.appendElement("embed");
      element0.appendText("embed");
      StringBuilder stringBuilder0 = new StringBuilder("embed");
      document0.outerHtml(stringBuilder0);
      assertEquals("embed\n<#root>\n <embed>embed</embed>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("~xh2'tm");
      document0.appendElement("~xh2'tm");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependText("");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("Cs");
      DataNode dataNode0 = new DataNode("t$g name must koz b5 empty.", "t$g name must koz b5 empty.");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("~xh2'tm");
      Element element0 = document0.appendElement("~xh2'tm");
      element0.appendText("~xh2'tm");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("%>maf}>euIOPC");
      document0.appendElement("%>maf}>euIOPC");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("7.luU#IdQ_~6");
      DataNode dataNode0 = new DataNode("7.luU#IdQ_~6", "7.luU#IdQ_~6");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("7.luU#IdQ_~6", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("T$g name must Koz b5 empty.");
      document0.prependText("T$g name must Koz b5 empty.");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.toggleClass("i .oQ`N_u");
      boolean boolean0 = document0.hasClass("Y9whsC2{3'Ktq3p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.toggleClass("i .oQ`N_u");
      boolean boolean0 = document0.hasClass("Insert position out of bounds.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.toggleClass("i .oQ`N_u");
      boolean boolean0 = document0.hasClass("java.lang.String@0000000005");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.toggleClass("i .oQ`N_u");
      element0.toggleClass("R4CMZ;hnRh{]");
      Element element1 = element0.toggleClass("R4CMZ;hnRh{]");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("*j0c\"i~fp'fBs~");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("=");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "=");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 74, document_OutputSettings0);
      assertEquals("=<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("embed");
      document0.tagName("embed");
      document0.appendElement("embed");
      StringBuilder stringBuilder0 = new StringBuilder("embed");
      document0.outerHtml(stringBuilder0);
      assertEquals("embed<embed><embed></embed>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.createElement("embed");
      StringBuilder stringBuilder0 = new StringBuilder("embed");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder0, (-28672451), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("area");
      Element element0 = document0.appendElement("area");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 62, document_OutputSettings1);
      assertEquals("<area />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("qsKY}(F;D1A$b]?NM[");
      StringBuilder stringBuilder0 = new StringBuilder("Y1$%$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 3799, document_OutputSettings0);
      assertEquals("Y1$%$</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.createElement("embed");
      Element element1 = element0.appendText("embed");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element1.outerHtmlTail(stringBuilder0, (-1611654935), document_OutputSettings0);
      assertEquals("</embed>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.createElement("embed");
      element0.appendChild(document0);
      Element element1 = element0.appendText("embed");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element1.outerHtmlTail(stringBuilder0, (-1611654935), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document(".");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.appendElement(":nth-child(%d)");
      String string0 = document0.html();
      assertEquals("<:nth-child(%d)></:nth-child(%d)>", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("L");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = new Document("F*w7gym~7\"pvDC]+P");
      Element element0 = document0.appendElement("F*w7gym~7\"pvDC]+P");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = document0.previousElementSibling();
      assertEquals("F*w7gym~7\"pvDC]+P", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Document document0 = new Document("embed");
      Document document1 = new Document("embed");
      boolean boolean0 = document0.equals(document1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Document document0 = new Document("6v-=g,m%lou");
      document0.hashCode();
  }
}
