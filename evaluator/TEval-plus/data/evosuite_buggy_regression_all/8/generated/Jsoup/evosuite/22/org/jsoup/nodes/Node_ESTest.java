/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:27:55 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("{(v*Yr@t");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("-N,WR~_");
      document0.setBaseUri("-N,WR~_");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("-NwWR~(");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("F`L,");
      Element element0 = document0.prependElement("F`L,");
      element0.unwrap();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("abs:abs:xi", "abs:abs:xi", "abs:abs:xi", "abs:abs:xi");
      StringBuilder stringBuilder0 = new StringBuilder(4801);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(31, (Object) documentType0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 31
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("bsx#");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("-N,WR~_");
      // Undeclared exception!
      try { 
        document0.before("-N,WR~_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("abs:xi");
      document0.removeAttr("abs:xi");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("#text", "q`SI5M%Xc4$3dTNj9X");
      textNode0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("-N,WR~_");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapedLessthanSign");
      document0.absUrl("abs:scriptdataescapedlessthansign");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapedLessthanSign");
      document0.attr("ScriptDataEscapedLessthanSign", "ScriptDataEscapedLessthanSign");
      document0.absUrl("abs:scriptdataescapedlessthansign");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("-N,WR~_");
      Document document1 = (Document)document0.prependChild(document0);
      document1.after("-N,WR~_");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("-N,WR~_");
      // Undeclared exception!
      try { 
        document0.wrap("-N,WR~_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell(" e");
      Element element0 = document0.head();
      element0.wrap(" e");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("s42 e");
      document0.setParentNode(document0);
      document0.wrap("?{I>*Q>Me5,Us5L");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("-NwWR~(");
      document0.prependChild(document0);
      document0.unwrap();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("s42 e");
      Element element0 = document0.head();
      element0.setParentNode(document0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("ab:abs:abs:a-e01|:%");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("F`L,");
      Element element0 = document0.head();
      element0.replaceWith(document0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("abs:xi");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("k\"I<o\"]?QAb7o41N");
      document0.prependChild(document0);
      document0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("<NwWRR(");
      Element element0 = document0.appendElement("<NwWRR(");
      element0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:(/+xg$d!}[i", "cV>");
      dataNode0.equals("abs:");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs(/+xg$d!}[i", "cV>");
      dataNode0.equals(dataNode0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      TextNode textNode0 = TextNode.createFromEncoded("#data", "Z");
      linkedHashSet0.contains(textNode0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("wQ");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        linkedHashSet0.contains(document0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("k\"Io\"]?QAb7o41N");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.contains(document0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("k\")o\"]?QAb7o41N");
      document0.append("k\")o\"]?QAb7o41N");
      document0.clone();
  }
}
