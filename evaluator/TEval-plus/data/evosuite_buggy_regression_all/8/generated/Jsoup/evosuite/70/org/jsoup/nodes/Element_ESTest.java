/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:35:46 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("br");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.before("Uf3 .n ]iiDSuh");
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingText(pattern0);
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("    ");
      // Undeclared exception!
      try { 
        document0.child(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("hLzw6 co4}TV+");
      document0.prependText("hLzw6 co4}TV+");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.tagName("br");
      assertEquals("br", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("    ");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("    ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Element element0 = new Element("template");
      Element element1 = element0.addClass("template");
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Element element0 = new Element("template");
      // Undeclared exception!
      try { 
        element0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("F|y&tdCLFr");
      Element element0 = document0.attr("F|y&tdCLFr", true);
      assertEquals(1, element0.childNodeSize());
      assertEquals("F|y&tdCLFr", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("1Y&x,5?Q{Jk!/}?++A");
      document0.getElementsByAttributeValue("1Y&x,5?Q{Jk!/}?++A", "1Y&x,5?Q{Jk!/}?++A");
      assertEquals(1, document0.childNodeSize());
      assertEquals("1Y&x,5?Q{Jk!/}?++A", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("bnr");
      document0.getElementsByAttributeValueStarting("bnr", "bnr");
      assertEquals("bnr", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.prependElement("br");
      String string0 = element1.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("br > br", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("L?-^R-#=BZ1K)$k");
      document0.prepend("L?-^R-#=BZ1K)$k");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("6ubOWpySO1/");
      Elements elements0 = document0.getElementsMatchingOwnText("6ubOWpySO1/");
      assertEquals(1, document0.childNodeSize());
      assertEquals("6ubOWpySO1/", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("L?-^R-#=BZ1K)$k");
      // Undeclared exception!
      try { 
        document0.after("L?-^R-#=BZ1K)$k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("kQ");
      Elements elements0 = document0.getElementsByIndexLessThan(54);
      assertEquals("kQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttributeStarting("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Element element0 = new Element(" zQ'5\"*Tk\"g?kX(C");
      Element element1 = element0.val(" zQ'5\"*Tk\"g?kX(C");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsByAttributeValueMatching("br", "br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("ol");
      document0.is("ol");
      assertEquals(1, document0.childNodeSize());
      assertEquals("ol", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("(");
      document0.getElementsByAttributeValueEnding("(", "(");
      assertEquals("(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("_n");
      Elements elements0 = document0.getElementsContainingText("_n");
      assertEquals(1, document0.childNodeSize());
      assertEquals("_n", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("=Ao=tUD#ZXSve");
      document0.getElementsByAttributeValueContaining("java.lang.string@0000000011 .u~ 4 (cjs]*s6l", "java.lang.string@0000000011 .u~ 4 (cjs]*s6l");
      assertEquals("=Ao=tUD#ZXSve", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("0|U>a-");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("Z~%KL_giQ |~D");
      document0.doSetBaseUri("SKIP_CHILDREN");
      assertEquals("SKIP_CHILDREN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element element0 = new Element("Iemplate");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("[%s^=%s]");
      Element element0 = document0.shallowClone();
      assertEquals("[%s^=%s]", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("[gQw.i28zU<M1B4NwX%");
      document0.getElementsByAttributeValueNot("[gQw.i28zU<M1B4NwX%", "[gQw.i28zU<M1B4NwX%");
      assertEquals(1, document0.childNodeSize());
      assertEquals("[gQw.i28zU<M1B4NwX%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("1Y&x,5?Q{Jk!/}?++A");
      Elements elements0 = document0.getElementsByAttribute("1Y&x,5?Q{Jk!/}?++A");
      // Undeclared exception!
      try { 
        document0.insertChildren((-409), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("cadXnnot");
      Element element0 = document0.removeClass("cadXnnot");
      assertEquals(1, element0.childNodeSize());
      assertEquals("cadXnnot", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("tmple");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("tmple", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("RawtextEndTagOpen");
      document0.title("RawtextEndTagOpen");
      Elements elements0 = document0.getElementsContainingOwnText("RawtextEndTagOpen");
      assertEquals("RawtextEndTagOpen", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("samp");
      document0.selectFirst("samp");
      assertEquals(1, document0.childNodeSize());
      assertEquals("samp", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByIndexGreaterThan(27);
      assertTrue(elements0.isEmpty());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.html("%]l.hh$1S^:]e");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<br>%]l.hh$1S^:]e</br>\n<html>\n <head></head>\n <body></body>\n</html>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(mockPrintWriter0, 249, document_OutputSettings1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      element0.html("V>fBSF%c");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependText("br");
      document0.getElementsByIndexEquals(1302);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("c");
      DataNode dataNode0 = new DataNode("<!--");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("r");
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren(32, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("RB");
      Tag tag0 = Tag.valueOf("^c/)^");
      Comment comment0 = new Comment("^c/)^");
      Attributes attributes0 = comment0.attributes();
      List<TextNode> list0 = document0.textNodes();
      FormElement formElement0 = new FormElement(tag0, "s+", attributes0);
      Element element0 = formElement0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals("s+", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Element element0 = new Element("template");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        element0.insertChildren((-367), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(1847, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("br");
      document0.toggleClass("ms_ncb.!pLcG]");
      document0.cssSelector();
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("b|r");
      Element element0 = document0.body();
      element0.wrap("-c.DU&dL1FO:");
      element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("#jwa+l");
      Element element0 = document0.prependElement("#jwa+l");
      element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#jwa+l", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("iB");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("iB", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000030");
      Element element0 = document0.appendElement("java.lang.string@0000000030");
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("\"c)>a[w\"pfx+4gej,o");
      document0.nextElementSibling();
      assertEquals("\"c)>a[w\"pfx+4gej,o", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      Element element2 = element1.nextElementSibling();
      assertEquals("br", element2.baseUri());
      assertNotNull(element2);
      assertEquals("body", element2.nodeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Tm{1>l-6}#w{o");
      Element element0 = document0.appendElement("!ZCidiVKBT%{HgG0FN");
      Element element1 = element0.previousElementSibling();
      assertEquals("Tm{1>l-6}#w{o", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("POST");
      document0.previousElementSibling();
      assertEquals("POST", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("Z~%KL_giQ |~D");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals("Z~%KL_giQ |~D", element1.baseUri());
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("^.Y~avzv0q9");
      Element element0 = document0.prependElement("v R=*kQq?A6Jtf2EI");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
      assertEquals("^.Y~avzv0q9", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.head();
      Element element1 = element0.prependElement("br");
      Element element2 = element1.lastElementSibling();
      assertEquals(0, element0.siblingIndex());
      assertNull(element2);
      assertEquals("br", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals("br", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("7EIl=NAQV8gU$p% 5");
      document0.setParentNode(document0);
      Elements elements0 = document0.getElementsByIndexEquals((-549));
      assertEquals("7EIl=NAQV8gU$p% 5", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.getElementById("br");
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Pattern pattern0 = Pattern.compile("#root");
      DocumentType documentType0 = new DocumentType("VF}UFDx8WJ@", "+trL~#", "+trL~#", "t[$/");
      document0.appendChild(documentType0);
      document0.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("b");
      Element element0 = document0.prependElement("b");
      element0.before("Ff3 .n ]iiDSuh");
      Pattern pattern0 = Pattern.compile("b");
      document0.getElementsMatchingText(pattern0);
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("7EIl=NAQV8gU$p% 5");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      TextNode textNode0 = TextNode.createFromEncoded("Tag name must not be empty.", ">DyA*P^M\"");
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      Comment comment0 = new Comment("ZQJ m%Z^-%5Tj3Cu{f", "ZQJ m%Z^-%5Tj3Cu{f");
      nodeArray0[5] = (Node) comment0;
      document0.addChildren(nodeArray0);
      document0.getElementsContainingOwnText("Fk[tdl|$R<CLU^!m");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("7YbOQg");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("V(WKGf[A?}b=wOUw");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("br", "br");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.text("br");
      boolean boolean0 = element0.hasText();
      assertEquals(1, element0.childNodeSize());
      assertTrue(boolean0);
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.html(" ");
      boolean boolean0 = element0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("i");
      DataNode dataNode0 = new DataNode("i", "cannot");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("L|ol");
      DataNode dataNode0 = DataNode.createFromEncoded("Tag cannot be self closing; not a void tag", "s+");
      document0.prependChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("el");
      Comment comment0 = new Comment("el");
      document0.prependChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.text("br");
      document0.data();
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("Tag anno be el closing; not a void tag");
      document0.toggleClass("Tag anno be el closing; not a void tag");
      Elements elements0 = document0.getElementsByClass("Tag anno be el closing; not a void tag");
      assertEquals("Tag anno be el closing; not a void tag", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell(":empty");
      document0.toggleClass(":empty");
      Elements elements0 = document0.getElementsByClass("Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals(":empty", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.toggleClass("ms_ncb.!pLcG]");
      element0.toggleClass(" ");
      document0.getElementsByClass("`Ya0c|9o5`tn7");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("tem%late");
      Element element0 = document0.toggleClass("tem%late");
      element0.toggleClass("java.lang.string@0000000030 tag cannot be el closing; not r void tag");
      Elements elements0 = document0.getElementsByClass("be");
      assertEquals("tem%late", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("Tag cannot be el closing; not a void tag");
      Element element0 = document0.toggleClass("@[L3_");
      Element element1 = element0.toggleClass("Tag cannot be el closing; not a void tag");
      element1.getElementsByClass("@[L3_");
      assertEquals("Tag cannot be el closing; not a void tag", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("[%s^=%s]");
      Element element0 = document0.toggleClass("[%s^=%s]");
      element0.toggleClass("[%s^=%s]");
      Elements elements0 = document0.getElementsByClass("[%s^=%s]");
      assertEquals("[%s^=%s]", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.toggleClass("br");
      element0.toggleClass("org.jsoupMnodes.Element");
      Element element1 = element0.toggleClass("org.jsoupMnodes.Element");
      assertEquals(1, element1.childNodeSize());
      assertEquals("br", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.val();
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("vE x#_VgXg");
      Element element0 = document0.prependElement("textarea");
      element0.val();
      assertEquals(2, document0.childNodeSize());
      assertEquals("vE x#_VgXg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("[%s^=%s]");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Element element0 = new Element("br");
      String string0 = element0.toString();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.prependElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.prependElement("br");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<br><br></br>\n<html>\n <head></head>\n <body></body>\n</html>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element1.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Element element0 = new Element("br");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(charArrayWriter0, (-587), document_OutputSettings0);
      assertEquals(6, charArrayWriter0.size());
      assertEquals("<br />", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("template");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("template", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.prependElement("br");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<br>%]l.hh$1S^:]e</br>\n<html>\n <head></head>\n <body></body>\n</html>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(mockPrintWriter0, 249, document_OutputSettings1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.prependElement("br");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<br><br></br>\n<html>\n <head></head>\n <body></body>\n</html>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.appendText("br");
      document_OutputSettings0.outline(true);
      element0.outerHtmlTail(mockPrintWriter0, 0, document_OutputSettings0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell("0|U>a-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|U>a-");
      document0.html(mockPrintStream0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("0|U>a-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("7YbOQg");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("7YbOQg", document1.baseUri());
      assertNotSame(document1, document0);
  }
}
