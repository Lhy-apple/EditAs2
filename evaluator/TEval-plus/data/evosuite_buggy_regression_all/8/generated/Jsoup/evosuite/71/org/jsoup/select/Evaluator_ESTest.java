/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:34:21 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evaluator_ESTest extends Evaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(42);
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IndexEquals0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev:eq(42)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("'org.jsoup.select.Evaluator$Matches");
      Elements elements0 = document0.getElementsByIndexLessThan((-137190182));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-79608345));
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_IndexLessThan0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*:lt(-79608345)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      String string0 = evaluator_IsLastChild0.toString();
      assertEquals(":last-child", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("%s(%dn)", "%s(%dn)");
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_AttributeWithValueStarting0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev[%s(%dn)^=%s(%dn)]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("Zkb}el!J&1Bw<u<", "Zkb}el!J&1Bw<u<");
      String string0 = evaluator_AttributeWithValue0.toString();
      assertEquals("[zkb}el!j&1bw<u<=zkb}el!j&1bw<u<]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("es78D~.G2\"&Gpms", "es78D~.G2\"&Gpms");
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_AttributeWithValueNot0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*[es78d~.g2\"&gpms!=es78d~.g2\"&gpms]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-873));
      String string0 = evaluator_IndexGreaterThan0.toString();
      assertEquals(":gt(-873)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsOnlyOfType0);
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:only-of-type)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(2, 2);
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IsNthLastOfType0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev:nth-last-of-type(2n+2)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_IsEmpty0);
      String string0 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent:empty", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("^Fkt`um");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching(":eq(%d)", pattern0);
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_AttributeWithValueMatching0);
      String string0 = structuralEvaluator_Not0.toString();
      assertEquals(":not[:eq(%d)~=^Fkt`um]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_IsFirstChild0);
      String string0 = structuralEvaluator_ImmediateParent0.toString();
      assertEquals(":ImmediateParent:first-child", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("Xu+qR~ch;2[m", "xu+qr~ch;2[m");
      String string0 = evaluator_AttributeWithValueEnding0.toString();
      assertEquals("[xu+qr~ch;2[m$=xu+qr~ch;2[m]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_IsOnlyChild0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*:only-child", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("z5!kiO142F@_U`Okw'");
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_AttributeStarting0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*[^z5!kio142f@_u`okw']", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      String string0 = evaluator_IsRoot0.toString();
      assertEquals(":root", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-1), 0);
      String string0 = evaluator_IsNthOfType0.toString();
      assertEquals(":nth-of-type(-1n)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("TLSmM", "\"]niv3z(sB~Tj>%[;5q");
      Document document0 = Document.createShell("");
      boolean boolean0 = evaluator_AttributeWithValueContaining0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("TLSm]rM", "\"]niv3z(sB~Tj>%[;5q");
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_AttributeWithValueContaining0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev[tlsm]rm*=\"]niv3z(sb~tj>%[;5q]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("An'");
      Elements elements0 = document0.getElementsMatchingText("An'");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Ev", 6);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      String string0 = evaluator_Matches0.toString();
      assertEquals(":matches(Ev)", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("u-Ju? Bcvp");
      String string0 = evaluator_ContainsText0.toString();
      assertEquals(":contains(u-ju? bcvp)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("|");
      Document document0 = Document.createShell("|");
      boolean boolean0 = evaluator_ContainsText0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-84972374), (-1));
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_IsNthChild0);
      String string0 = structuralEvaluator_ImmediateParent0.toString();
      assertEquals(":ImmediateParent:nth-child(-84972374n-1)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-16519105), (-16519105));
      // Undeclared exception!
      try { 
        evaluator_IsNthChild0.calculatePosition((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthChild", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("\"Yv~^=j,fH3U`2*_v");
      String string0 = evaluator_ContainsData0.toString();
      assertEquals(":containsData(\"yv~^=j,fh3u`2*_v)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("aa,\"/CRH C/aKg>:");
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_ContainsData0);
      Document document0 = new Document("$ 1T<[|hGf>iOoHVj%");
      boolean boolean0 = structuralEvaluator_Not0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("'org.jsoup.select.EvaluatorMatches");
      Element element0 = document0.getElementById("Nojt,4T");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("org.jsoup.select.Evaluator$TagEndsWith");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_Id0);
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(#org.jsoup.select.Evaluator$TagEndsWith)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("''org.jsoup.seldct.EvaluatorMatches");
      String string0 = evaluator_Class0.toString();
      assertEquals(".''org.jsoup.seldct.EvaluatorMatches", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("\"q");
      Elements elements0 = document0.getElementsByClass("aM {k2y(h!rXp1F _3");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(49, 49);
      String string0 = evaluator_IsNthLastChild0.toString();
      assertEquals(":nth-last-child(49n+49)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("\"iR");
      Element element0 = document0.body();
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(3, (-4083));
      boolean boolean0 = evaluator_IsNthLastChild0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("'\"]niv3z(sB~Tj>%[;5q");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("lVg=Te6arF");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      String string0 = evaluator_MatchesOwn0.toString();
      assertEquals(":matchesOwn(lVg=Te6arF)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      String string0 = evaluator_IsLastOfType0.toString();
      assertEquals(":last-of-type", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("Split offset must be not be negative");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("Split offset must be not be negative");
      boolean boolean0 = evaluator_TagEndsWith0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("le0{U9r+dD|O::$_");
      String string0 = evaluator_TagEndsWith0.toString();
      assertEquals("le0{U9r+dD|O::$_", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("\"TLSmM");
      Element element0 = new Element("eAG(5SGwdxcEze@a~I");
      boolean boolean0 = evaluator_Attribute0.matches(element0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("'([+-])?(d+)");
      String string0 = evaluator_Attribute0.toString();
      assertEquals("['([+-])?(d+)]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("'org.jsoup.select.EvaluatorMatches");
      Elements elements0 = document0.getElementsContainingOwnText("''org.jsoup.select.EvaluatorMatches");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("':empty");
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_ContainsOwnText0);
      String string0 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent:containsOwn(':empty)", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("");
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_Tag0);
      String string0 = structuralEvaluator_ImmediateParent0.toString();
      assertEquals(":ImmediateParent", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IsFirstOfType0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev:first-of-type", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      String string0 = evaluator_AllElements0.toString();
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("q");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsFirstOfType0);
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("*");
      Document document0 = new Document("$VALUES");
      document0.attr("*", "$VALUES");
      boolean boolean0 = evaluator_AttributeStarting0.matches((Element) null, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Element element0 = new Element("i");
      Element element1 = element0.toggleClass(":empty");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("\"XqE3");
      boolean boolean0 = evaluator_AttributeStarting0.matches(element0, element1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("Xu+qR~ch;2[m");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("$VALUES");
      Element element0 = document0.attr("*", "$VALUES");
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("*", "$VALUES");
      boolean boolean0 = evaluator_AttributeWithValue0.matches(element0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("$VALUES");
      Element element0 = document0.attr("*", "$VALUES");
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("*", "*");
      boolean boolean0 = evaluator_AttributeWithValue0.matches(element0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("b", "b");
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$ContainsData");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("b", "b");
      FormElement formElement0 = new FormElement(tag0, "W/", attributes1);
      boolean boolean0 = evaluator_AttributeWithValueNot0.matches(document0, formElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("b", "e");
      boolean boolean0 = evaluator_AttributeWithValueNot0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("'org.jsoup.select.EvaluatorMatches");
      Elements elements0 = document0.getElementsByAttributeValueStarting("'org.jsoup.select.EvaluatorMatches", "'org.jsoup.select.EvaluatorMatches");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Mf", "Split offset must be not be negative", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf(";/*;");
      FormElement formElement0 = new FormElement(tag0, "Mf", attributes1);
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("Mf", "Split offset must be not be negative");
      boolean boolean0 = evaluator_AttributeWithValueStarting0.matches(formElement0, formElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("Xu+qR~ch;2[m", "Xu+qR~ch;2[m");
      Document document0 = Document.createShell("Xu+qR~ch;2[m");
      Tag tag0 = Tag.valueOf("AttributeValue_doubleQuoted");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Xu+qR~ch;2[m", "Mf", attributes0);
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Xu+qR~ch;2[m", attributes0);
      boolean boolean0 = evaluator_AttributeWithValueStarting0.matches(document0, formElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("", "\"S8++4D.bhnw_eNi\"~");
      boolean boolean0 = evaluator_AttributeWithValueEnding0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("Xu+qR~ch;2[m");
      Tag tag0 = Tag.valueOf("AttributeValue_doubleQuoted");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Xu+qR~ch;2[m", "Xu+qR~ch;2[m");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Xu+qR~ch;2[m", attributes0);
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("Xu+qR~ch;2[m", "xu+qr~ch;2[m");
      boolean boolean0 = evaluator_AttributeWithValueEnding0.matches(document0, formElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("Xu+qR~ch;2[m");
      Tag tag0 = Tag.valueOf("Xu+qR~ch;2[m");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Xu+qR~ch;2[m", "Mf", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Xu+qR~ch;2[m", attributes1);
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("Xu+qR~ch;2[m", "Xu+qR~ch;2[m");
      boolean boolean0 = evaluator_AttributeWithValueEnding0.matches(document0, formElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("$VALUES");
      Element element0 = document0.attr("*", "$VALUES");
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("*", "*");
      boolean boolean0 = evaluator_AttributeWithValueContaining0.matches(element0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("*");
      document0.attr("\"q", "\"q");
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("\"q", "\"q");
      boolean boolean0 = evaluator_AttributeWithValueContaining0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Evaluator$AttributeKeyPair");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("org.jsoup.select.Evaluator$AttributeKeyPair", pattern0);
      Document document0 = new Document("#root");
      boolean boolean0 = evaluator_AttributeWithValueMatching0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("$VALUES");
      Element element0 = document0.attr("*", "$VALUES");
      Pattern pattern0 = Pattern.compile("$VALUES", 10);
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("*", pattern0);
      boolean boolean0 = evaluator_AttributeWithValueMatching0.matches(element0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("$VALUES");
      Element element0 = document0.attr("*", "$VALUES");
      Pattern pattern0 = Pattern.compile("$VALUES", (-2191));
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("*", pattern0);
      boolean boolean0 = evaluator_AttributeWithValueMatching0.matches((Element) null, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = null;
      try {
        evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("TLSmM", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = null;
      try {
        evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("org.jsoup.select.Evaluator$Id", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell(".%s");
      Elements elements0 = document0.getElementsByIndexLessThan(77);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1007);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("%H'");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1960));
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("\"iR");
      Elements elements0 = document0.getElementsByIndexEquals(1024);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("TLSm]rM");
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      boolean boolean0 = evaluator_IsLastChild0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsLastChild0);
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      boolean boolean0 = evaluator_IsFirstOfType0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("'org.jsoup.select.Evaluator$Matches");
      Element element0 = document0.head();
      element0.before("'org.jsoup.select.Evaluator$Matches");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      boolean boolean0 = evaluator_IsFirstOfType0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.head();
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-1), (-76));
      boolean boolean0 = evaluator_IsNthOfType0.matches(element0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(1, (-1301));
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsNthOfType0);
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(0, 2440);
      String string0 = evaluator_IsNthOfType0.toString();
      assertEquals(":nth-of-type(2440)", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      Document document0 = Document.createShell("Ev");
      Element element0 = document0.head();
      int int0 = evaluator_IsLastOfType0.calculatePosition(element0, element0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsFirstChild0);
      Document document0 = new Document(":eq(%d)");
      boolean boolean0 = structuralEvaluator_Not0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.body();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      boolean boolean0 = evaluator_IsFirstChild0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsFirstChild0);
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Tag tag0 = Tag.valueOf("\"TLSmM");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "\"TLSmM", attributes0);
      boolean boolean0 = evaluator_IsRoot0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      boolean boolean0 = evaluator_IsRoot0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      document0.appendTo(element0);
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.head();
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = new Document("/");
      boolean boolean0 = evaluator_IsOnlyOfType0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      Document document0 = Document.createShell("Ev");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsLastOfType0);
      structuralEvaluator_Has0.evaluator = (Evaluator) evaluator_IsOnlyOfType0;
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("Ev");
      Element element0 = document0.head();
      element0.after(":last-of-type");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      boolean boolean0 = evaluator_IsOnlyOfType0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      Document document0 = new Document("$VALUES");
      boolean boolean0 = evaluator_IsEmpty0.matches((Element) null, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      boolean boolean0 = evaluator_IsEmpty0.matches(document0, document0);
      assertFalse(boolean0);
  }
}
