/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:29:58 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Element element0 = new Element(tag0, "j@]75kQ");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("org.jsoup.select.Evaluator$IndexEquals");
      element0.outerHtml(stringBuilder1);
      assertEquals("org.jsoup.select.Evaluator$IndexEquals<title></title>", stringBuilder1.toString());
      assertEquals("org.jsoup.select.Evaluator$IndexEquals<title></title>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingText("");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("|");
      // Undeclared exception!
      try { 
        document0.child((-2387));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("Y%ur(94^U$8.}");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("={:YZC:");
      Elements elements0 = document0.getElementsContainingOwnText("={:YZC:");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("_2OaL");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("N,_|SKT-_Q");
      // Undeclared exception!
      try { 
        document0.html("N,_|SKT-_Q");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("q");
      Elements elements0 = document0.getElementsByAttributeValue("q", "q");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("ehF");
      Elements elements0 = document0.getElementsByAttributeValueStarting("ehF", "ehF");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("teRxarea");
      Elements elements0 = document0.select("teRxarea");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("title");
      Element element0 = document0.prepend("title");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("teRxrea");
      // Undeclared exception!
      try { 
        document0.after("teRxrea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("_2aL");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("yle");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("!XF\"=%YEv");
      Elements elements0 = document0.getElementsByAttributeStarting("!XF\"=%YEv");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("`s&VwO^F64<e3");
      // Undeclared exception!
      try { 
        document0.wrap("`s&VwO^F64<e3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("class");
      Elements elements0 = document0.getElementsByAttributeValueMatching("class", "class");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("style");
      Elements elements0 = document0.getElementsByAttributeValueEnding("style", "style");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("2Op`_L");
      Elements elements0 = document0.getElementsByClass("2Op`_L");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("4comDl=");
      Elements elements0 = document0.getElementsByAttributeValueContaining("4comDl=", "4comDl=");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("q");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("4comD>=");
      Elements elements0 = document0.getElementsByAttributeValueNot("4comD>=", "4comD>=");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("EGN>*, gG$WU");
      Elements elements0 = document0.getElementsByAttribute("EGN>*, gG$WU");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("xeRqxareM");
      // Undeclared exception!
      try { 
        document0.before("xeRqxareM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("2Op`_aL");
      Document document1 = (Document)document0.removeClass("2Op`_aL");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document(">");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("yle");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("p}o7!cZEf@8adw");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1632);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Element element0 = new Element(tag0, "j@]75kQ");
      Element element1 = element0.getElementById("yK!.'b,=v#:^\"IhRT'.");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("|");
      Element element0 = document0.appendElement("|");
      element0.prependChild(document0);
      document0.parents();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("2Op`_aL");
      Element element0 = document0.prependChild(document0);
      element0.append("2Op`_aL");
      element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("_2OaL");
      Element element0 = document0.prependChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("wj%?0");
      DataNode dataNode0 = DataNode.createFromEncoded("2Op`_aL", "qxmyqofmz,,*h");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("style");
      Element element0 = document0.prependChild(document0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("te7xarea");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("^rC`2B");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1261), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("_2aL");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element0 = document0.insertChildren(0, linkedList0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("_2OaL");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("teRxae");
      document0.prependElement("XNNl#E.Z]mR=}-c#,ym");
      document0.prependChild(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("2Op`_aL");
      Element element0 = document0.appendElement("2Op`_aL");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("_2aL");
      Element element0 = document0.prependChild(document0);
      element0.appendElement("_2aL");
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("teRxarea");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.appendElement("textarea");
      element1.previousElementSibling();
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("_2OaL");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("_2aL");
      Element element0 = document0.prependChild(document0);
      element0.appendElement("_2aL");
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("_2aL");
      Element element0 = document0.prependChild(document0);
      element0.getElementsByIndexEquals(1945);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("_2aL");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("_2aL");
      document0.prependChild(document0);
      Element element0 = document0.appendElement("ZXvDx,8|iE");
      assertEquals(2, document0.childNodeSize());
      
      element0.lastElementSibling();
      assertEquals("zxvdx,8|ie", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("_2OaL");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("");
      DocumentType documentType0 = new DocumentType("q0wqd>rhxx", "q0wqd>rahxx", "q0wqd>rhxx", "q0wqd>rhxx");
      Element element0 = document0.prependChild(documentType0);
      Elements elements0 = element0.getElementsContainingText("q0wqd>rhxx");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("c2K/");
      document0.appendElement("c2K/");
      Elements elements0 = document0.getElementsContainingText("c2K/");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("title");
      Element element0 = document0.appendText("title");
      Element element1 = element0.appendElement("title");
      element1.prependChild(document0);
      document0.getElementsContainingText("title");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("title");
      Element element0 = document0.appendText("title");
      Element element1 = element0.appendElement("title");
      element0.tagName("title");
      element1.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("title");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("c2K/");
      document0.appendText("br");
      Elements elements0 = document0.getElementsMatchingOwnText("c2K/");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("textarea");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("i", "Pm[#P4d4%VL", false);
      document0.prependChild(xmlDeclaration0);
      Elements elements0 = document0.getElementsMatchingOwnText("textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("c2K/");
      Element element0 = document0.prependElement("br");
      assertEquals("br", element0.tagName());
      
      document0.appendText("br");
      Elements elements0 = document0.getElementsMatchingOwnText("c2K/");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document(";8fohd#~>gJwOv/)");
      Element element0 = document0.prependElement("br");
      element0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.getElementsContainingText(";8fohd#~>gJwOv/)");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("q");
      Element element0 = document0.prependElement("q");
      element0.prependText("q");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("2Op`_aL");
      document0.appendElement("2Op`_aL");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("teRxarea");
      document0.appendText((String) null);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("");
      DocumentType documentType0 = new DocumentType("q0wqd>rhxx", "q0wqd>rahxx", "q0wqd>rhxx", "q0wqd>rhxx");
      document0.prependChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("2Op`_aL");
      Element element0 = document0.appendElement("2Op`_aL");
      element0.prependText("2Op`_aL");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("teRxae");
      Element element0 = document0.appendText("teRxae");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("2Op`_aL");
      DataNode dataNode0 = new DataNode("pattern syntax error:", "2Op`_aL");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("pattern syntax error:", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("!XF\"=%YEv");
      document0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("teRxarea");
      document0.addClass("Q.a9-zek `d");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("2Op`_L");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.toggleClass("textarea");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("xu(ek> yhly'm$um6}");
      Element element0 = document0.toggleClass("");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Element element0 = new Element(tag0, "j@]75kQ");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("A'*92#jCayq");
      Element element0 = document0.val("A'*92#jCayq");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "qdIdET!USf}UZ~O6$");
      element0.val("IO");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("c2K/");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "c2K/");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 2890, document_OutputSettings1);
      assertEquals("c2K/<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("h4");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "h4");
      document0.outerHtml(stringBuilder0);
      assertEquals("h4\n<#root></#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Element element0 = new Element(tag0, "j@]75kQ");
      Element element1 = element0.appendElement("title");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("org.jsoup.select.Evaluator$IndexEquals");
      element1.outerHtml(stringBuilder1);
      assertEquals("org.jsoup.select.Evaluator$IndexEquals<title></title>", stringBuilder1.toString());
      assertEquals("org.jsoup.select.Evaluator$IndexEquals<title></title>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("c8R2zK/");
      document0.prependElement("br");
      String string0 = document0.outerHtml();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Tag tag0 = Tag.valueOf("uqk[9darur*9/");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "<!--", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((StringBuilder) null, 9, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Element element0 = new Element(tag0, "j@]75kQ");
      element0.hashCode();
  }
}
