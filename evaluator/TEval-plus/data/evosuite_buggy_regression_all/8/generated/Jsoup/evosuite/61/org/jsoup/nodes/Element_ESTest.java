/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:33:57 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = new Element("wbr");
      Element element1 = element0.appendText("wbr");
      assertEquals("wbr", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("wbr");
      Document document1 = (Document)document0.prependText("wbr");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document1;
      DataNode dataNode0 = DataNode.createFromEncoded("9+ib}Q. ", "9+ib}Q. ");
      nodeArray0[5] = (Node) dataNode0;
      nodeArray0[6] = (Node) document1;
      nodeArray0[7] = (Node) document0;
      document1.addChildren(nodeArray0);
      document1.getElementsMatchingText("l|yQ>$");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' 3>5#|gtc");
      // Undeclared exception!
      try { 
        document0.child((-5440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(".I9uA.S`");
      Element element0 = document0.prependElement(".I9uA.S`");
      element0.text(".I9uA.S`");
      String string0 = document0.toString();
      assertEquals("<.I9uA.S`>\n .I9uA.S`\n</.I9uA.S`>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ 3>5#gtc");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.addClass("G 2EiQQ' c3>5#|gtc");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3cr>5#|gtc");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      // Undeclared exception!
      try { 
        document0.html("G 2EiQQ' c3>5#|gtc");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("$q\"c$U2nmOyA~$>f(");
      Element element0 = document0.attr("$q\"c$U2nmOyA~$>f(", true);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = document0.getElementsByAttributeValue("G 2EiQQ' c3>5#|gtc", "G 2EiQQ' c3>5#|gtc");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = document0.getElementsByAttributeValueStarting("G 2EiQQ' c3>5#|gtc", "G 2EiQQ' c3>5#|gtc");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document(".G,9u^`");
      Tag tag0 = Tag.valueOf(".G,9u^`");
      TextNode textNode0 = new TextNode(".G,9u^`", ".G,9u^`");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ".G,9u^`", attributes0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) textNode0;
      formElement0.addChildren(nodeArray0);
      String string0 = document0.cssSelector();
      assertEquals(".G,9u^` > #root", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("M:o");
      // Undeclared exception!
      try { 
        document0.after("M:o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' 3>5#|gtc");
      Elements elements0 = document0.getElementsByIndexLessThan(138);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = document0.getElementsByAttributeStarting("G 2EiQQ' c3>5#|gtc");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("wf2k[{_r4");
      Elements elements0 = document0.getElementsByIndexEquals((-1391));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("XV6*5h");
      // Undeclared exception!
      try { 
        document0.wrap("XV6*5h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell("h8");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element element0 = new Element("wbr");
      Element element1 = element0.val("('Fm`");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' 3>5#|gtc");
      Elements elements0 = document0.getElementsByAttributeValueMatching("G 2EiQQ' 3>5#|gtc", "G 2EiQQ' 3>5#|gtc");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Element element0 = new Element("wbr");
      boolean boolean0 = element0.is("wbr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = document0.getElementsByAttributeValueEnding("G 2EiQQ' c3>5#|gtc", "G 2EiQQ' c3>5#|gtc");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = document0.getElementsByClass("G 2EiQQ' c3>5#|gtc");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("$q\"c$U2nmOyA~$>f(");
      Elements elements0 = document0.getElementsContainingText("$q\"c$U2nmOyA~$>f(");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' 3>5#|gtc");
      Elements elements0 = document0.getElementsByAttributeValueContaining("G 2EiQQ' 3>5#|gtc", "G 2EiQQ' 3>5#|gtc");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("nav");
      Elements elements0 = document0.getElementsByAttributeValueNot("nav", "G");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("\n * ");
      Elements elements0 = document0.getElementsByAttribute("\n * ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("$q\"c$U2nmOyA~$>nf(");
      // Undeclared exception!
      try { 
        document0.before("$q\"c$U2nmOyA~$>nf(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Document document1 = (Document)document0.removeClass("G 2EiQQ' c3>5#|gtc");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3cr>5#|gtc");
      Elements elements0 = document0.getElementsByTag("G 2EiQQ' c3cr>5#|gtc");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("G.2EiQQ' 3>5#|gtc");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("2eiqq'");
      Element element0 = document0.prependElement("2eiqq'");
      // Undeclared exception!
      try { 
        element0.append("2eiqq'");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("2eiqq'");
      document0.tagName("value");
      Element element0 = document0.prependElement("2eiqq'");
      // Undeclared exception!
      try { 
        element0.append("2eiqq'");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      document0.prependText("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.prependElement("G 2EiQQ' c3>5#|gtc");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.prependElement("wbr");
      assertEquals("wbr", element0.nodeName());
      
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("h8");
      Element element0 = document0.prepend("h8");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("|)+w");
      DataNode dataNode0 = DataNode.createFromEncoded("|)+w", "|)+w");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("|)+w");
      document0.prependText("|)+w");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("q\"c$U2nmOyA~$>f(");
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>(0);
      // Undeclared exception!
      try { 
        document0.insertChildren(62, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("G 2Ei:Q' c3>5#|ytc");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2070787801), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      Element element0 = document0.insertChildren((-1), linkedHashSet0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.prependElement("G 2EiQQ' c3>5#|gtc");
      String string0 = element0.cssSelector();
      assertEquals("G 2EiQQ' c3>5#|gtc", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("multiple");
      Tag tag0 = Tag.valueOf("multiple");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "+LN-V", attributes0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) document0;
      formElement0.addChildren(nodeArray0);
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document(".I9uA.S`");
      Element element0 = document0.prependElement(".I9uA.S`");
      element0.after((Node) document0);
      Element element1 = element0.nextElementSibling();
      assertSame(element1, document0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeStarting");
      Element element0 = document0.prependElement("org.jsoup.select.Evaluator$AttributeStarting");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Document document1 = new Document("G 2EiQQ' c3>5#|gtc");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      document1.addChildren(nodeArray0);
      Element element0 = document0.previousElementSibling();
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ 3>5#gtc");
      Element element0 = document0.prependElement("G 2EiQQ 3>5#gtc");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" />", parseSettings0);
      TextNode textNode0 = new TextNode(" />", "#root");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, " />", attributes0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) textNode0;
      formElement0.addChildren(nodeArray0);
      Element element0 = formElement0.firstElementSibling();
      assertSame(element0, formElement0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document(".I9uA.S`");
      Element element0 = document0.prependElement(".I9uA.S`");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ 3>5#gtc");
      Element element0 = document0.prependElement("G 2EiQQ 3>5#gtc");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document1.addChildren(nodeArray0);
      Element element0 = document1.lastElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".I9uS`");
      Element element0 = new Element(tag0, ".I9uS`");
      Element element1 = element0.text("org.jsoup.nodes.Element$1");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.getElementById("java.lang.string@0000000009 r 2eiqq' 3>5#|gtc");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("wbr");
      Element element0 = document0.prependText("wbr");
      Document document1 = (Document)element0.tagName("figure");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("figure", parseSettings0);
      Element element1 = new Element(tag0, "+iTY$Ld=DJZ{Xv^s");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element1;
      nodeArray0[4] = (Node) element1;
      DataNode dataNode0 = DataNode.createFromEncoded("9+ib}Q. ", "9+ib}Q. ");
      nodeArray0[5] = (Node) dataNode0;
      nodeArray0[6] = (Node) document1;
      nodeArray0[7] = (Node) document1;
      document1.addChildren(nodeArray0);
      element0.getElementsMatchingText("l|yQ>$");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("multiple");
      document0.prependElement("multiple");
      Elements elements0 = document0.getElementsContainingOwnText("multiple");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.prependText("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = element0.getElementsMatchingOwnText("G 2EiQQ' c3&gt;5#|gtc");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("multiple");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode("8z2ag0cU)do7lyVYX", "multiple");
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document0.getElementsContainingOwnText("multiple");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextNode textNode0 = new TextNode("7MV|l=j'R$oys", "sh^");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("u%m2JsRIV? M");
      Element element0 = document0.createElement("textarea");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("multiple");
      document0.prependElement("multiple");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      document0.prepend(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("multiple");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode("8z2ag0cU)do7lyVYX", "multiple");
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.prependElement("wbr");
      Element element1 = element0.prependText("G 2EiQQ' c3>5#|gtc");
      assertEquals("wbr", element1.tagName());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      Comment comment0 = new Comment("id", "smi>");
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.data();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.prependText("wbr");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeStarting");
      document0.addClass("org.jsoup.select.Evaluator$AttributeStarting");
      boolean boolean0 = document0.hasClass("org.jsoup.select.Evaluator$AttributeStarting");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document(".I9uA.S`");
      Element element0 = document0.toggleClass(")ikI-$Nv3|V");
      boolean boolean0 = element0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("\n * ");
      Element element0 = document0.toggleClass("\n * ");
      document0.toggleClass("\n * ");
      boolean boolean0 = element0.hasClass("+b!AQz7|v9x9G;,tq\"9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      document0.addClass("G 2EiQQ' c3>5#|gtc");
      document0.toggleClass("G 2EiQQ' c3>5#|gtc");
      boolean boolean0 = document0.hasClass("r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      document0.addClass("G 2EiQQ' c3>5#|gtc");
      document0.toggleClass("G 2EiQQ' c3>5#|gtc");
      boolean boolean0 = document0.hasClass("\u0005Ovh7 dR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document(".G9uS`");
      document0.addClass(".G9uS`");
      document0.toggleClass("id");
      Document document1 = (Document)document0.toggleClass("id");
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("multiple");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("N%?]");
      Element element0 = document0.prependElement("textarea");
      element0.val();
      assertEquals("textarea", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("multiple");
      document0.prependElement("multiple");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.toString();
      assertEquals("<multiple></multiple>", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      document0.prependElement("wbr");
      String string0 = document0.toString();
      assertEquals("<wbr>", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Element element0 = new Element("wbr");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("mark", parseSettings0);
      TextNode textNode0 = new TextNode("7MV|l=j'R$oys", "sh^");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "wbr", attributes0);
      element0.appendChild(formElement0);
      String string0 = element0.toString();
      assertEquals("<wbr><mark text=\"7MV|l=j'R$oys\"></mark></wbr>", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("$q\"c$U2nmOyA~$>f(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 1219, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      document0.prependElement("wbr");
      document0.prependText("wbr");
      String string0 = document0.toString();
      assertEquals("wbr\n<wbr>", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Element element0 = new Element("wbr");
      StringBuilder stringBuilder0 = new StringBuilder(511);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 8946, document_OutputSettings0);
      assertEquals("<wbr />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("|)+w");
      MockPrintStream mockPrintStream0 = document0.html((MockPrintStream) null);
      assertNull(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("G 2EiQF' c3>5#|gtc");
      document0.prepend("G 2EiQF' c3>5#|gtc");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }
}
