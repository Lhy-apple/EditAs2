/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:35:18 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      String string0 = comment0.toString();
      assertEquals("\n<!---->", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comment comment0 = new Comment("h5", "h5");
      Node node0 = comment0.removeAttr("4oUgdzK>?jD");
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comment comment0 = new Comment("Kaam!");
      // Undeclared exception!
      try { 
        comment0.childNodesCopy();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DataNode dataNode0 = new DataNode("", "");
      DataNode dataNode1 = dataNode0.setWholeData("");
      assertSame(dataNode0, dataNode1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DataNode dataNode0 = new DataNode("");
      String string0 = dataNode0.absUrl("PUBLIC");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.setBaseUri("");
      assertFalse(cDataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("#data", "#data", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      String string0 = comment0.attr("td");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("#data", "#data");
      String string0 = textNode0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("{", "#text");
      textNode0.reparentChild(textNode0);
      // Undeclared exception!
      try { 
        textNode0.baseUri();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
