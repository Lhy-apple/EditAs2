/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 03:31:28 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "", "");
      String string0 = documentType0.nodeName();
      assertEquals("#doctype", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("N?]9U}+b$e?,yO", "open", "org.jsoup.nodes.DocumentType", "S");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "SYSTEM", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlTail(charBuffer0, (-853), document_OutputSettings0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("oaA15i", " PUBLIC \"", "TqOFl{qvJ+", "#doctype");
      StringWriter stringWriter0 = new StringWriter(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(stringWriter0, 3973, document_OutputSettings0);
      assertEquals("<!DOCTYPE oaA15i PUBLIC \" PUBLIC \"\" \"TqOFl{qvJ+\">", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      DocumentType documentType0 = new DocumentType("", "", "", "");
      MockFile mockFile0 = new MockFile("zVPeI+|xA>c.m H~tn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      documentType0.outerHtmlHead(outputStreamWriter0, (-530), document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(".<wgF~0{bp;4I3]8", ".<wgF~0{bp;4I3]8", "", "");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(stringBuilder0, 1024, document_OutputSettings0);
      assertEquals("PUBLIC<!DOCTYPE .<wgF~0{bp;4I3]8 PUBLIC \".<wgF~0{bp;4I3]8\">", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      DocumentType documentType0 = new DocumentType("Tm1`3:5o^", " ", "Tm1`3:5o^", "Tm1`3:5o^");
      documentType0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
      assertEquals("<!DOCTYPE Tm1`3:5o^ \"Tm1`3:5o^\">", stringWriter0.toString());
  }
}
