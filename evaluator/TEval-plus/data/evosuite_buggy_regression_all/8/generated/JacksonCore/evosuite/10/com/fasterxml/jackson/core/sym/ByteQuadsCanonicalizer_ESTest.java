/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:55:23 GMT 2023
 */

package com.fasterxml.jackson.core.sym;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteQuadsCanonicalizer_ESTest extends ByteQuadsCanonicalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      byteQuadsCanonicalizer1.addName("", 4, 4);
      byteQuadsCanonicalizer1.release();
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
      int int0 = byteQuadsCanonicalizer0.hashSeed();
      assertEquals(0, int0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(447);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1._tertiaryShift = 33;
      byteQuadsCanonicalizer1.addName("8+", 447);
      byteQuadsCanonicalizer1.addName("8+", 447, 33);
      int[] intArray0 = new int[4];
      intArray0[1] = 447;
      byteQuadsCanonicalizer1.addName("8+", 447, (-378), 447);
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.secondaryCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(3);
      int int0 = byteQuadsCanonicalizer0.bucketCount();
      assertEquals(3, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(417);
      byteQuadsCanonicalizer1.release();
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      byteQuadsCanonicalizer1.addName("", 4, 4);
      byteQuadsCanonicalizer1._count = 0;
      byteQuadsCanonicalizer1.release();
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      int int0 = byteQuadsCanonicalizer1.size();
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, int0);
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = byteQuadsCanonicalizer0.size();
      assertEquals(0, int0);
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(447);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("8+", 447, 447, 447);
      byteQuadsCanonicalizer1.addName("8+", 447);
      byteQuadsCanonicalizer1.addName("8+", 447, 33);
      byteQuadsCanonicalizer1.toString();
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byteQuadsCanonicalizer1.findName(0);
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byteQuadsCanonicalizer1.addName("i$;)K+M7 ", 0);
      byteQuadsCanonicalizer1.findName(0);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", 456);
      byteQuadsCanonicalizer1.findName(0);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byteQuadsCanonicalizer1._hashSize = 5;
      byteQuadsCanonicalizer1.addName("tK{d5%_(h4;i\"", 3, 3, 3);
      byteQuadsCanonicalizer1.findName(0);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("", 456);
      byteQuadsCanonicalizer1.findName(0);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(447);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("8+", 447, 447, 447);
      byteQuadsCanonicalizer1.addName("8+", 447);
      byteQuadsCanonicalizer1.findName(447);
      assertEquals(33, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(425);
      byteQuadsCanonicalizer1.findName(425, 425);
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("&n(efQ)1q\"HcKK", 456, 33);
      byteQuadsCanonicalizer1.findName(0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("#fuE9", 33, 456);
      byteQuadsCanonicalizer1.findName(33, 33);
      assertEquals(54, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(422);
      byteQuadsCanonicalizer1.addName("NnxaC$OoKa@", 422, 422);
      byteQuadsCanonicalizer1.findName(422, 422);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(425);
      byteQuadsCanonicalizer1._hashSize = 51;
      byteQuadsCanonicalizer1.addName("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", 425, 425, 425);
      byteQuadsCanonicalizer1.findName(425, 425);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("", 456, 33);
      byteQuadsCanonicalizer1.findName(8, 456);
      assertEquals(33, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("b8", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("b8", 456, 33);
      byteQuadsCanonicalizer1.findName(456, 4);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(447);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("8+", 447);
      byteQuadsCanonicalizer1.addName("8+", 447, 33);
      byteQuadsCanonicalizer1.findName(447, 33);
      assertEquals(33, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(523);
      byteQuadsCanonicalizer1.findName(33, 33, 33);
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3932);
      byteQuadsCanonicalizer1.addName("", 3932, 3932, 3932);
      byteQuadsCanonicalizer1.findName(3932, 3932, 3932);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(431);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", (-2495), 431, 431);
      byteQuadsCanonicalizer1.findName((-2495), 431, 479);
      assertEquals(33, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3829);
      byteQuadsCanonicalizer1.addName("19vr", 3829);
      byteQuadsCanonicalizer1.findName(375, 3829, 375);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("YakL", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("YakL", 33, 456, 456);
      byteQuadsCanonicalizer1.findName(33, 180, 33);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(431);
      byteQuadsCanonicalizer1._hashSize = 4;
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 431, 431, 431);
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", (-4637), (-4637), (-4637));
      byteQuadsCanonicalizer1.findName((-4637), (-4637), (-4637));
      assertEquals(4, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(431);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", 431, 431, (-2495));
      byteQuadsCanonicalizer1.addName("", (-2495), 431, 431);
      byteQuadsCanonicalizer1.findName((-2495), 431, (-2495));
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      int[] intArray0 = new int[4];
      byteQuadsCanonicalizer1.addName("RTGD5u4'(&Ml&a6e", intArray0, 4);
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      int[] intArray0 = new int[4];
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      byteQuadsCanonicalizer1.addName(";5", 92, 92);
      int[] intArray0 = new int[4];
      intArray0[1] = 4;
      byteQuadsCanonicalizer1.addName(";5", intArray0, 4);
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("", 456, 33);
      byteQuadsCanonicalizer1._tertiaryShift = 33;
      byteQuadsCanonicalizer1.findName(456);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("g@7,kBn DDwoQc0", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("g@7,kBn DDwoQc0", 33, 456, 456);
      byteQuadsCanonicalizer1.findName(456);
      assertEquals(33, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byteQuadsCanonicalizer1._hashSize = 5;
      byteQuadsCanonicalizer1.addName("tK{d5%_(h4;i\"", 3, 3, 3);
      byteQuadsCanonicalizer1.addName("tK{d5%_(h4;i\"", 3, 3, 3);
      byteQuadsCanonicalizer1.addName("tK{d5%_(h4;i\"", 0);
      byteQuadsCanonicalizer1.findName(0);
      assertEquals(103, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("", 456, 33);
      byteQuadsCanonicalizer1._tertiaryShift = 33;
      byteQuadsCanonicalizer1.findName(0);
      assertEquals(33, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("87", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("87", 33, 456, 456);
      byteQuadsCanonicalizer1.addName("87", 456, 33);
      byteQuadsCanonicalizer1._tertiaryShift = 33;
      byteQuadsCanonicalizer1.findName(0, 33);
      assertEquals(54, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(425);
      byteQuadsCanonicalizer1._hashSize = 51;
      byteQuadsCanonicalizer1.addName("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", 425, 425, 425);
      byteQuadsCanonicalizer1.addName("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", 425);
      byteQuadsCanonicalizer1.addName("-", 425, 425, 425);
      byteQuadsCanonicalizer1.findName(425, 425);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(456);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("87", 456, 456, 456);
      byteQuadsCanonicalizer1.addName("87", 456);
      byteQuadsCanonicalizer1.addName("87", 456, 33);
      byteQuadsCanonicalizer1.findName(456, 4);
      assertEquals(54, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(447);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("8+", 447, 447, 447);
      byteQuadsCanonicalizer1.addName("8+", 447);
      byteQuadsCanonicalizer1.addName("8+", 447, 33);
      byteQuadsCanonicalizer1.findName(447, 33);
      assertEquals(1, byteQuadsCanonicalizer1.secondaryCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(15);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("SK", 15, 15, 15);
      byteQuadsCanonicalizer1.addName("SK", 15, 15, 15);
      byteQuadsCanonicalizer1._tertiaryShift = 0;
      byteQuadsCanonicalizer1.addName("SK", 260, 0, 33);
      byteQuadsCanonicalizer1.findName(0, 260, 15);
      assertEquals(54, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(431);
      byteQuadsCanonicalizer1._hashSize = 4;
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 431, 431, 431);
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 431, 431, 431);
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", (-4637), (-4637), (-4637));
      byteQuadsCanonicalizer1.findName((-4637), (-4637), (-4637));
      assertEquals(4, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(15);
      byteQuadsCanonicalizer1._hashSize = 15;
      byteQuadsCanonicalizer1.addName("SK", 15, 15, 15);
      byteQuadsCanonicalizer1.addName("SK", 15, 15, 15);
      byteQuadsCanonicalizer1.findName(0, 260, 15);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(447);
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("qQ", 447, 447, 447);
      byteQuadsCanonicalizer1.addName("qQ", 447);
      byteQuadsCanonicalizer1.addName("qQ", 447, 33);
      byteQuadsCanonicalizer1.findName(447, 33, 447);
      assertEquals(54, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", 92, 92);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", 92, 92);
      int[] intArray0 = new int[4];
      intArray0[1] = 4;
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", intArray0, 4);
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1948));
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("", 33);
      int[] intArray0 = new int[25];
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName(", copyCount=", 3557, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3526);
      byteQuadsCanonicalizer1._count = 3526;
      byteQuadsCanonicalizer1.addName("(", 3527, 3526);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("(", 3526, 3526, 3526);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed rehash(): old count=3527, copyCount=1
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(431);
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 431);
      byteQuadsCanonicalizer1._hashSize = 4;
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 431, 431, 431);
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 431, 431, 431);
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 8, 8, 8);
      byteQuadsCanonicalizer1.addName(" enrieS, hash rea of ", 4, 4, 4);
      assertEquals(8, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(447);
      byteQuadsCanonicalizer1._tertiaryShift = 447;
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName("8+", 447, 447, 447);
      byteQuadsCanonicalizer1.addName("8+", 447);
      byteQuadsCanonicalizer1.addName("8+", 447, 33);
      assertEquals(1, byteQuadsCanonicalizer1.secondaryCount());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(523);
      byteQuadsCanonicalizer1._spilloverEnd = 523;
      byteQuadsCanonicalizer1.addName(">", (-2495), (-15), (-2495));
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName(">", (-2495), 523, 523);
      byteQuadsCanonicalizer1._tertiaryShift = 0;
      byteQuadsCanonicalizer1.addName(">", 0);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName(">", 0, (-2495), 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 523
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(508);
      byteQuadsCanonicalizer1._spilloverEnd = 508;
      byteQuadsCanonicalizer1.addName(">", (-2495), (-15), (-2495));
      byteQuadsCanonicalizer1._hashSize = 33;
      byteQuadsCanonicalizer1.addName(">", (-2495), 508, 508);
      byteQuadsCanonicalizer1._tertiaryShift = 0;
      byteQuadsCanonicalizer1.addName(">", 0);
      byteQuadsCanonicalizer1.addName(">", 0, (-2495), 21);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      int[] intArray0 = new int[4];
      byteQuadsCanonicalizer1.addName("RTGD5u4'(&Ml&a6e", intArray0, 4);
      byteQuadsCanonicalizer1.addName("RTGD5u4'(&Ml&a6e", intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.secondaryCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.calcHash((int[]) null, (-2695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3475);
      byteQuadsCanonicalizer1._count = 3475;
      byteQuadsCanonicalizer1.addName(", copyCount=", 2631, 3475);
      int[] intArray0 = new int[8];
      intArray0[3] = 2631;
      byteQuadsCanonicalizer1._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("Q~@B", 1006, (-781), 3475);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3475);
      byteQuadsCanonicalizer1._count = 3475;
      byteQuadsCanonicalizer1.addName(", copyCount=", 2631, 3538);
      int[] intArray0 = new int[8];
      intArray0[3] = (-244);
      byteQuadsCanonicalizer1._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("Q~@B", (-244), (-786), 3475);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3527);
      byteQuadsCanonicalizer1._hashSize = 3527;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1._reportTooManyCollisions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spill-over slots in symbol table with 0 entries, hash area of 3527 slots is now full (all 440 slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3529);
      byteQuadsCanonicalizer1._count = 3529;
      byteQuadsCanonicalizer1.addName("V\"S)jkf", 3530);
      byteQuadsCanonicalizer1._hashSize = 3530;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("V\"S)jkf", 3529, 3529, 3529);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6913
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(451);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(2723);
      assertEquals(6, int0);
  }
}
