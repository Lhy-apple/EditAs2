/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:26:21 GMT 2023
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.GERMAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alid style specif");
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormat_StyleFormatter0.printTo((Writer) mockPrintWriter0, (-9L), (Chronology) gJChronology0, 0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("de", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1000000000000000000L);
      String string0 = localDateTime0.toString();
      assertEquals("31690708-07-04T18:46:40.000", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("SQlvLWl)", "SQlvLWl)", false, 1214, 1214);
      LocalTime localTime0 = new LocalTime((long) 1214, (Chronology) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(1000000000000000000L, (Chronology) iSOChronology0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2849, 2849);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear((-2120));
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(3999, (-12));
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Instant instant0 = Instant.parse("31690708-07-04T18:46:40.000");
      assertEquals(1000000000000000000L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(3, 2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("NN6&WNOM=3lZO[P", "NN6&WNOM=3lZO[P", false, 2, 26);
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendHourOfHalfday((-2501));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(856, 856);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("}ys[y:}<HFp^#}Bz|)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendClockhourOfHalfday(47);
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      dateTimeFormatterBuilder1.appendTwoDigitYear(2525, true);
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(2269);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("lQD+WC=8NM1k'[1eWS", "lQD+WC=8NM1k'[1eWS", false, (-2026), 2210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(59);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(1023);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(32);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-3558), hashMap0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3558));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(10000000000000L, (Chronology) strictChronology0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo((StringBuffer) null, (ReadablePartial) localTime0, (Locale) null);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Locale locale0 = Locale.ENGLISH;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(292272984, hashMap0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) outputStreamWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(21, 59);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(21, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      dateTimeFormatter0.printTo(stringBuffer0, 0L);
      assertEquals("Wednesday, December 31, 1969", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('-');
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
      Locale locale0 = Locale.forLanguageTag("US/Michigan");
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dateTimeFormat_StyleFormatter0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("*%QK>(+jh6");
      StringWriter stringWriter0 = new StringWriter();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(3L);
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 368, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 368);
      YearMonth yearMonth0 = new YearMonth(83L);
      dateTimeFormatter0.printTo((Appendable) bufferedWriter0, (ReadablePartial) yearMonth0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.US;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      TimeZone timeZone0 = TimeZone.getTimeZone("SingaporeB6");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      dateTimeFormatterBuilder_TextField0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals("\uFFFD", charArrayWriter0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      MockFileWriter mockFileWriter0 = new MockFileWriter("eCK_/U_\u0005nn%M");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1772, 0);
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (long) 1, (Chronology) copticChronology0, 900, dateTimeZone0, locale0);
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 48, 2216);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((long) 99, (Chronology) ethiopicChronology0);
      Locale locale0 = new Locale("");
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) bufferedWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfYear(930);
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = (DateTimeFormatterBuilder.PaddedNumber)dateTimeFormatterBuilder0.toPrinter();
      assertEquals(930, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toParser();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("9SJu%Y^' GeB>Y");
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[9];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null, (DateTimeParser[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parsers supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("2014-02-14T12:21:21.320");
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser[]) dateTimeFormatterBuilder_TimeZoneIdArray0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendOptional((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("");
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("x");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, (-1129), 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYearOfCentury(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 117);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal((DateTimeFieldType) null, (-3088));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (-1149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -1149
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal((DateTimeFieldType) null, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra((-2501), (-2501));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, (-935));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, (-1705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -1705
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFraction((DateTimeFieldType) null, (-1308), (-1308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(44, 24);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfMinute((-637), 1026);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfMinute(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 2);
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      String string0 = dateTimeFormatter0.print((ReadablePartial) yearMonth0);
      assertEquals("\uFFFD\uFFFD", string0);
      assertEquals(2, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("31690708-0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"31690708-0\": Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("31690728-w2-23t01:46:40.000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"31690728-w2-23t01:46:40.000\" is malformed at \"3t01:46:40.000\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 3999, true);
      Locale locale0 = Locale.CANADA;
      Integer integer0 = new Integer(3999);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(3999, iSOChronology0, locale0, integer0, 8);
      int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "31690708-07-05T01:46:40.000", 8);
      assertEquals((-12), int0);
      assertEquals(3999, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("+c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+c\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 26, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("-0 Qe]|W'a", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-0 Qe]|W'a\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse("+#q!dm>-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+#q!dm>-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      StringBuffer stringBuffer0 = new StringBuffer();
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 12, true);
      YearMonth yearMonth0 = new YearMonth(0L);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("\uFFFD", stringBuffer0.toString());
      assertEquals(12, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 3600000, true);
      StringBuffer stringBuffer0 = new StringBuffer(3600000);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.ROOT;
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("44481320", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1456);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 196, false);
      MonthDay monthDay0 = new MonthDay((Chronology) gregorianChronology0);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) monthDay0, (Locale) null);
      assertEquals(196, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(196, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) islamicChronology0);
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 10, true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1456);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals(4, charArrayWriter0.size());
      assertEquals(10, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2, true, 2);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", true);
      LocalTime localTime0 = new LocalTime((long) 1);
      Locale locale0 = Locale.GERMAN;
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(2, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      LocalTime localTime0 = new LocalTime(1000L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("9073", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9073\" is malformed at \"73\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 3999, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("31690708-07-05T01:46:40.000", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"31690708-07-05T01:46:40.000\" is malformed at \"-07-05T01:46:40.000\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-248), false);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.FRENCH;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(32, ethiopicChronology0, locale0, (Integer) 1, (-1));
      int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "secondOfMinute", (-1));
      assertEquals(247, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[13];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, true);
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0[4]);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("31690708-07-04T18:46:40.000", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"31690708-07-04T18:46:40.000\" is malformed at \"-07-04T18:46:40.000\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1607, false);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto((DateTimeParserBucket) null, "l`5]D:`v]Z&8l$?Q", 20);
      assertEquals((-21), int0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 368, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("-0", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"-0\": Value 0 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-3), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("+O#q", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+O#q\" is malformed at \"O#q\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 45, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("-)1u)ILKzf_w|j\"", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-)1u)ILKzf_w|j\"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1607, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("US/Mountainorg.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"US/Mountainorg.joda.time.format....\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 399, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("0dkI:!l1Wt", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0dkI:!l1Wt\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 772, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("1970-01-05T07:06:40.000", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1970-01-05T07:06:40.000\" is malformed at \"70-01-05T07:06:40.000\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 772, false);
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_UnpaddedNumber0;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, false);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1024, islamicChronology0, locale0, (Integer) 1, 772);
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "31690730-01-19T01:46:40.000", 3);
      assertEquals(772, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1607, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, (long) 1607);
      assertEquals(2, stringBuffer0.length());
      assertEquals("00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      Locale locale0 = Locale.ROOT;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 2314, false);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((StringBuffer) null, (long) 1057, (Chronology) gregorianChronology0, (-1218), dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 26, true);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(26);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) null, (long) 26, (Chronology) copticChronology0, 1, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 0, false);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) null, (-581L), (Chronology) copticChronology0, 0, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-353), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      String string0 = dateTimeFormatter0.print((ReadablePartial) localDateTime0);
      assertEquals("14", string0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("eCK_/U_\u0005nn%M");
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.US;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-21), true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      TimeZone timeZone0 = TimeZone.getTimeZone("SingaporeB6");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\uFFFD\uFFFD", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2250), false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3u:hR");
      YearMonth yearMonth0 = new YearMonth((long) (-2250));
      YearMonth yearMonth1 = yearMonth0.withYear((-2250));
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth1, locale0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTimeZoneOffset("^_OfWUe.dUFIZN.Q", false, 8, 8);
      dateTimeFormatterBuilder0.appendDayOfWeekText();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(12, 0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) 12, (Chronology) islamicChronology0, 12, dateTimeZone0, locale0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      Locale locale0 = Locale.CHINA;
      StringBuffer stringBuffer0 = new StringBuffer(27);
      LocalDateTime localDateTime0 = new LocalDateTime();
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("14", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(12, 0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) islamicChronology0);
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localDate0, (Locale) null);
      assertEquals(4, stringBuffer0.length());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("US/Hawaii$VALUES", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"US/Hawaii$VALUES\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Locale locale0 = Locale.UK;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-981L), copticChronology0, locale0, (Integer) 1, 34);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "Ir:~jW&cvQ^d", 34);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("0dkI:!l1Wt", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0dkI:!l1Wt\" is malformed at \"dkI:!l1Wt\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1772, 0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 0, (Chronology) buddhistChronology0, 1915, dateTimeZone0, locale0);
      assertEquals(1772, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 22);
      String string0 = localDateTime0.toString();
      assertEquals("1969-12-31T16:00:00.022", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)51);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-912), 623191204);
      dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (Writer) charArrayWriter0, (-1991L), (Chronology) copticChronology0);
      assertEquals("009", charArrayWriter0.toString());
      assertEquals(3, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      MockFileWriter mockFileWriter0 = new MockFileWriter("OkssfvU");
      Locale locale0 = Locale.UK;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2, 2068);
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (long) 900, (Chronology) buddhistChronology0, 2, dateTimeZone0, locale0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.US;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("0", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-2160), 2);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("US/Pacific");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockPrintWriter0, 2175L, (Chronology) islamicChronology0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("17", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3, 3);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D9x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockPrintWriter0, (long) 1, (Chronology) islamicChronology0);
      assertEquals(3, stringBuffer0.length());
      assertEquals(3, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 4);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D9x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockPrintWriter0, (long) 1, (Chronology) islamicChronology0);
      assertEquals(4, stringBuffer0.length());
      assertEquals(4, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Incomplete parser array", true);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 469, 5);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, 0L, (Chronology) ethiopicChronology0);
      assertEquals(5, stringBuffer0.length());
      assertEquals(5, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&&*,rHy|+RA]a-I`");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 48, 48);
      StringBuffer stringBuffer0 = new StringBuffer(13);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockPrintWriter0, 2097L, (Chronology) gregorianChronology0);
      assertEquals("0000-9", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 32, (-956));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, 30617280288L);
      assertEquals(1, stringBuffer0.length());
      assertEquals((-956), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 6, 6);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("0dkI:!l1Wt", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range duration field must be precise
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-790), (-790));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale0 = Locale.US;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4077L, buddhistChronology0, locale0, (Integer) buddhistChronology0.BE, (-790));
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "SingaporeB6", 20);
      assertEquals((-21), int0);
      assertEquals((-790), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 48, 48);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        YearMonth.parse("66(3g/", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"66(3g/\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("vV:7PM:C[Pb", "vV:7PM:C[Pb", true, 2046, (-739451885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, false, 99, 99);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
      Locale locale0 = Locale.ITALIAN;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("GMT+02:02", "GMT+02:02", true, 4, 2054);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 2054, (Chronology) ethiopicChronology0, 0, dateTimeZone0, locale0);
      assertEquals("GMT+02:02", stringBuffer0.toString());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Printing is not supported", "Bh", true, 50, 60000);
      StringBuffer stringBuffer0 = new StringBuffer("US/Eastern?R");
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Locale locale0 = new Locale("Gg/=cr\"Xxy3oZt");
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 50, (Chronology) julianChronology0, 60000, (DateTimeZone) null, locale0);
      assertEquals(25, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals("US/Eastern?R", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(18, 1);
      Locale locale0 = Locale.FRENCH;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("<0~(Q3b>@o=+MvM", "<0~(Q3b>@o=+MvM", false, 18, 1266);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 18, (Chronology) ethiopicChronology0, 3169, dateTimeZone0, locale0);
      assertEquals("+000003169", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.tz.DateTimeZoneBuilder$DSTZone", "org.joda.time.tz.DateTimeZoneBuilder$DSTZone", true, 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) null);
      dateTimeFormatter0.printTo(stringBuffer0, 1291L);
      assertEquals("-08", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("31690708-07-05T01:46:40.000", "31690708-07-05T01:46:40.000", false, 1, 772);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, (-794L));
      assertEquals(3, stringBuffer0.length());
      assertEquals("-08", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/Mountain", "US/Mountain", true, 2, 2);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, 1000000000000L);
      assertEquals("-07:00", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/Mountain", "US/Mountain", true, 2, 11);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, (long) 2);
      assertEquals("-08:00", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBu2lder$TextFieGR", "org.joda.time.format.DateTimeFormatterBu2lder$TextFieGR", true, 3, 3);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, (long) 3);
      assertEquals(9, stringBuffer0.length());
      assertEquals("-08:00:00", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBu2lder$TextFieGR", "org.joda.time.format.DateTimeFormatterBuilder$FixedNumber", true, 3, 1512);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, 1073741823L);
      assertEquals("-08:00:00", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("NN6&WNOM=3lZO[P", "NN6&WNOM=3lZO[P", false, 2, 26);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.CANADA;
      MockFile mockFile0 = new MockFile("NN6&WNOM=3lZO[P", "NN6&WNOM=3lZO[P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, 13L, (Chronology) iSOChronology0, 3600000, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(15, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("The offset cannot be zero", "The offset cannot be zero", true, 1, 389);
      Locale locale0 = Locale.CANADA;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) pipedWriter0, (long) 389, (Chronology) buddhistChronology0, 44, (DateTimeZone) null, locale0);
      assertEquals(25, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)125);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("centuryBOfEra", "centuryBOfEra", false, (byte)125, (byte)125);
      Locale locale0 = Locale.FRANCE;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (long) 0, (Chronology) copticChronology0, 0, dateTimeZone0, locale0);
      assertEquals("centuryBOfEra", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Locale locale0 = Locale.ITALY;
      MockFileWriter mockFileWriter0 = new MockFileWriter("\" is too short", false);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("\" is too short", "4Z", false, 3600000, 3600000);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 3600000, (Chronology) iSOChronology0, (-3073), (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Locale locale0 = Locale.UK;
      MockFileWriter mockFileWriter0 = new MockFileWriter("+#!dm>-.time.tz.utcpovider", true);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", "+#!dm>-.time.tz.utcpovider", true, 1, 1);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 1, (Chronology) copticChronology0, 1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(61, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Locale locale0 = Locale.FRENCH;
      MockFileWriter mockFileWriter0 = new MockFileWriter("\" is too short", false);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("\" is too short", "\" is too short", true, 3600000, 3600000);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, 9907200000L, (Chronology) iSOChronology0, 3600000, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
      MockFileWriter mockFileWriter0 = new MockFileWriter("NoSeconds", false);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("NoSeconds", "9223372036854775808", true, 2, 2);
      Locale locale0 = Locale.JAPANESE;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 1, (Chronology) ethiopicChronology0, 2000, dateTimeZone0, locale0);
      assertEquals(9, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBu2lder$TextFieGR", true);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBu2lder$TextFieGR", "org.joda.time.format.DateTimeFormatterBu2lder$TextFieGR", false, 3, 3);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, 10000L, (Chronology) iSOChronology0, 2000, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MockFileWriter mockFileWriter0 = new MockFileWriter("LgqH\"M*e.'>t$>=-", false);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("LgqH\"M*e.'>t$>=-", "org.joda.time.format.DateTimeFormatterBuilder$TextField", true, 3, 2000);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 2000, (Chronology) iSOChronology0, 2000, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(16, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(18, 1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+18:01", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("-0", "", true, 1026, 1026);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("-0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-0\" is malformed at \"0\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("?R", "", true, 39, 1224);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      LocalDateTime.parse("", dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/Pacific-New", "", true, 1026, 1026);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("US/Pacific-New", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"US/Pacific-New\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+#q!dm>-.time.tz.utcprovider", "", true, 1026, 1026);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("+#q!dm>-.time.tz.utcprovider", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+#q!dm>-.time.tz.utcprovider\" is malformed at \"#q!dm>-.time.tz.utcprovider\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("\" is too shork", "\" is too shork", true, 36, 3600000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      LocalDateTime.parse("\" is too shork", dateTimeFormatter0);
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(14, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+#q!dm>-.time.tz.utcprovider", "A", true, 1026, 1026);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("UTC90728-12-23T01:46:40.000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"UTC90728-12-23T01:46:40.000\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-9), 51);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-09:51", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-365297771));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-:1:28\" is malformed at \":1:28\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendCenturyOfEra(18, 2281);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(28265601);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-386), hashMap0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) null, (long) (-1), (Chronology) julianChronology0, 2, (DateTimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.KOREAN;
      StringBuffer stringBuffer0 = new StringBuffer("+#q!dm>-");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 1, (Chronology) gregorianChronology0, 1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("+#q!dm>-+00:00", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 26);
      Locale locale0 = Locale.ITALY;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT+02:26");
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (-1813L), (Chronology) ethiopicChronology0, 37, dateTimeZone0, locale0);
      assertEquals("GMT+02:26+02:26", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) null);
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(28265625);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-386), hashMap0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      hashMap0.put("org.joda.time.convert.AbstractConverter", fixedDateTimeZone0);
      Locale locale0 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(28265625, julianChronology0, locale0, (Integer) null, (-386));
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "org.joda.time.convert.AbstractConverter", 0);
      assertEquals(39, int0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(28265625);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-386), hashMap0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      hashMap0.put("org.joda.time.convert.AbstractConverter", fixedDateTimeZone0);
      Locale locale0 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(28265625, julianChronology0, locale0, (Integer) null, (-386));
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "", 0);
      assertEquals((-1), int0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringBuffer stringBuffer0 = new StringBuffer();
      GJChronology gJChronology0 = GJChronology.getInstance();
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-261L), (Chronology) gJChronology0, 3705, (DateTimeZone) null, (Locale) null);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, 2629746000L);
      assertTrue(dateTimeFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MockFile mockFile0 = new MockFile("AM", "[m[P004^2:#.!(NN'!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockPrintWriter0, (long) 2, (Chronology) gJChronology0, 6, (DateTimeZone) null, locale0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(43, iSOChronology0, locale0, (Integer) null, 43);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) null, 3L, (Chronology) iSOChronology0, 43, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 772, false);
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_UnpaddedNumber0;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, false);
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1024, islamicChronology0, locale0, (Integer) 1, 772);
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "1124-07-05T01:46:40.000", 3);
      assertEquals(772, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 12, true);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
      LocalDateTime.parse("US/Indiana-Starke", dateTimeFormatter0);
      assertEquals(12, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Zuluabove the supported maximum of ");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, 86399999L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.GERMAN;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      dateTimeFormatter1.printTo(stringBuffer0, 0L);
      assertEquals(27, stringBuffer0.length());
      assertEquals("Mittwoch, 31. Dezember 1969", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("n");
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Locale locale0 = Locale.PRC;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (long) 1047, (Chronology) julianChronology0, 1047, (DateTimeZone) null, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      LocalTime localTime0 = new LocalTime(100000000L);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("7<tiz{swjFS;6+B]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"7<tiz{swjFS;6+B]\" is malformed at \"<tiz{swjFS;6+B]\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
}
