/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:25:08 GMT 2023
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-148));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Corrupt zone info map");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.printTo((StringBuffer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Qgsou$", "Qgsou$");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) charArrayWriter0, 0);
      assertEquals(12, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("{d<+eR~", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendSecondsWithMillis();
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      Period period0 = Period.ZERO;
      int int0 = periodPrinter0.countFieldsToPrint(period0, 73, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.appendSecondsWithMillis();
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      Period period0 = Period.ZERO;
      int int0 = periodPrinter0.countFieldsToPrint(period0, 623158460, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0%\" is malformed at \"%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertNull(periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(1716);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroNever();
      periodFormatterBuilder0.appendSecondsWithMillis();
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      Period period0 = Period.ZERO;
      int int0 = periodPrinter0.countFieldsToPrint(period0, 73, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix("]");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("z2ByGL?S'");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("pw2tw^f0xz^", "v$>*0bOY9INM25AU4");
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix("v$>*0bOY9INM25AU4");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      MockFileWriter mockFileWriter0 = new MockFileWriter("pn=*1[N`[F55h041Y");
      Hours hours0 = Hours.ZERO;
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (ReadablePeriod) hours0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("gsou$", "gsou$");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 5, 5, 1, 5, 1, 1, 1);
      Locale locale0 = Locale.ITALIAN;
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(326570);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      periodFormatterBuilder1.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("/!3(w");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org/joda/time/tz/data", "org/joda/time/tz/data", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("gsou$", "gsou$");
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 5, 1);
      Locale locale0 = Locale.ITALIAN;
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("001gsou$5.001", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(9, 3337, 3337, 3337, 3237, 3337, 57, 3237);
      // Undeclared exception!
      try { 
        Seconds.standardSecondsIn(mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P9Y3337M3337W3337DT3237H3337M60.237S
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".@'D<bLq_`|";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(".@'D<bLq_`|", ".@'D<bLq_`|", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) null, (-10384350), (Locale) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("@HIW N17T#");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.printTo((Writer) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder0.append(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, "org.joda.time.format.PeriodFormatterBuilder$Literal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("edcw", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("~v9QK@,zY");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix("?.eJo.", "?.eJo.");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("q", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("c4v,Al[Xc", "c4v,Al[Xc");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("<q2h1");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsAfter("<q2h1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("<q2h1");
      periodFormatterBuilder1.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("<q2h1");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("z(T<m2C^hAs)qBWo3");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("z(T<m2C^hAs)qBWo3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("pl'/y");
      periodFormatterBuilder1.toParser();
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("p2hw^f0z^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p2hw^f0z^\" is malformed at \"2hw^f0z^\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("", 354);
      assertEquals((-355), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.DateTime$Property");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("RJ?73W+*&'fE5", 6);
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Corrupt zone info map");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("*88,KEGp|[z&@sQUq%&", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("P.!)CYWcso>,I>4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P.!)CYWcso>,I>4\" is malformed at \".!)CYWcso>,I>4\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("bd/3Pk^,vS");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("bd/3Pk^,vS", 2);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("p(~q,lczt_n`vnrg`");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("zh?!0(R\"@y{", 5);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("@HIW N17T#");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("@HIW N17T#", 6);
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("bd/3Pk^,vS");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("bd/3Pk^,vS", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("pl\"4[n<gd25j");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("pl\"4[n<gd25j", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Z65gTr*#t");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("Z65gTr*#t", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("snp(a|m@knr{3");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("6]+aBF/c%p]7", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("p8g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p8g\" is malformed at \"8g\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.convert.ReadablePeriodConverter");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("9sQy'H]jGgYF", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("gsou$", "gsou$");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(892);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("gsou$", "gsou$");
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 5, 1);
      Locale locale0 = Locale.ITALIAN;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(892, 48, 2, false, 5, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(902, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.tie.local r7", "org.joda.tie.local r7");
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.tie.local r7");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 7);
      assertEquals("org.joda.tie.local r7org.joda.tie.local r7", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Qgsou$", "Qgsou$");
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.format.PeriodFormatterBuilder$Separator");
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 892);
      Locale locale0 = Locale.GERMAN;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, 892, 144, true, 6, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$SeparatorQgsou$1Qgsou$", stringBuffer0.toString());
      assertEquals(66, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("gsou$", "gsou$");
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 5, 1);
      Locale locale0 = Locale.ITALIAN;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(892, 48, 2, false, 5, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      StringWriter stringWriter0 = new StringWriter(3399);
      periodFormatterBuilder_FieldFormatter0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("gsougsou$", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("The calculation caused an overflow: ", "No valid ISO8601 format for fields because Date was reduced precision: ");
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        Period.parse(".YSe", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".YSe\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("u;!Be<!izWR`f69rd", "");
      periodFormatterBuilder_PluralAffix0.parse("", 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("$L'/y", "$L'/y");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, 1, (-1389), true, (-1389), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("$L'/y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"$L'/y\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("xEp*v8[)+f<i?SJ6", "xEp*v8[)+f<i?SJ6");
      periodFormatterBuilder_PluralAffix0.scan("xEp*v8[)+f<i?SJ6", (-1907));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("c![t_IC![3[Mu`aHn", "edcw");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("edcw", 2075);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Types array must not contain null", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("Asia/Ho_Chi_Minh", 1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("3TkWcpRZis", "3TkWcpRZis");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.parse("3TkWcpRZis", 16);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Corrupt zone info map");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 891, 891, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Period.parse("Corrupt zone info map", periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("$L'/y", "$L'/y");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, 1, (-1389), true, (-1389), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-2147483647), 8, 86400, true, 8, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Hours hours0 = Hours.TWO;
      Locale locale0 = Locale.KOREAN;
      periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(hours0, (-2147483647), locale0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      Minutes minutes0 = Minutes.ZERO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      Locale locale0 = Locale.ITALY;
      periodFormatterBuilder_Composite0.calculatePrintedLength(seconds0, locale0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Hours hours0 = Hours.ZERO;
      periodFormatter0.print(hours0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Corrupt zone info map");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(6, 6, 6, false, 6, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Duration duration0 = new Duration((-1L), (-1797387373001L));
      Period period0 = duration0.toPeriod();
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) period0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("TU~)ub YB)-iw]eo", "TU~)ub YB)-iw]eo", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, true);
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod(",n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",n\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatter0.parsePeriod("000");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("2", "");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1908, 4, (-473), true, 73, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-473), (-473));
      periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "2", 1429, locale0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",;}x%$4xQTp2F9J2[bq");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(6, 4, 1900, false, (-1212), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(",;}x%$4xQTp2F9J2[bq");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        Period.parse("CkStcJ!o;)'3|Eri6", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"CkStcJ!o;)'3|Eri6\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        Period.parse("-(", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-(\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("+:v!R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+:v!R\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-2147483637), 3368, 3368, true, 9, (PeriodFormatterBuilder.FieldFormatter[]) null, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        Period.parse("+eR", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+eR\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("00. 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"00. 0\" is malformed at \" 0\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        Period.parse(",b<Pdg3WK/C^KmU", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",b<Pdg3WK/C^KmU\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(6, 6, Integer.MAX_VALUE, true, 8, (PeriodFormatterBuilder.FieldFormatter[]) null, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("9223372036854775808");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9223372036854775808\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Period.parse(".8", periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("F", "F");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1383, 4, 4, false, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 4);
      periodFormatterBuilder_FieldFormatter0.getFieldValue(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("F", "F");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1383, 4, 4, false, (-286), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 4);
      periodFormatterBuilder_FieldFormatter0.getFieldValue(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("bd/3Pk^,vS");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-769), 9, 17, true, 1, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Days days0 = Days.days(9);
      Period period0 = days0.toPeriod();
      periodFormatterBuilder_FieldFormatter0.getFieldValue(period0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      Locale locale0 = Locale.KOREA;
      periodFormatterBuilder_Composite0.countFieldsToPrint(period0, 2707, locale0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSecondsWithMillis();
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = Period.ZERO;
      periodPrinter0.countFieldsToPrint(period0, 73, locale0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodType periodType0 = PeriodType.dayTime();
      Locale locale0 = Locale.FRANCE;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer("No formatter supplied");
      Seconds seconds0 = Seconds.TWO;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriod(periodType0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".YSe";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No formatter supplied", "No formatter supplied", stringArray0, periodPrinter0, (PeriodParser) null, true, true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithMillis();
      periodFormatterBuilder1.appendSecondsWithMillis();
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = Period.ZERO;
      periodPrinter0.countFieldsToPrint(period0, 53, locale0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder0.appendSecondsWithMillis();
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Seconds seconds0 = Seconds.ZERO;
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) seconds0, locale0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithMillis();
      periodFormatterBuilder0.appendMillis3Digit();
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = Period.ZERO;
      periodPrinter0.countFieldsToPrint(period0, 53, locale0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("No printer or parser supplied", "No printer or parser supplied");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-194), (-194), (-194), true, (-194), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodType periodType0 = PeriodType.millis();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      // Undeclared exception!
      try { 
        Period.parse("oy^@yoIuN2", periodFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"oy^@yoIuN2\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatter0.parsePeriod("000");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("p2w^ff0z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("p2dw^ff0z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("pt2mw^f0xz^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("gs|u$", "gs|u$");
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 5, 5, 5);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(892, 892, 2, true, 5, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 1352, 1352);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("ZoneInfoMap", "No formatter supplied");
      periodFormatterBuilder1.appendLiteral("ZoneInfoMap");
      PeriodParser periodParser0 = periodFormatterBuilder2.toParser();
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1175), 1127, periodType0, (Chronology) null);
      Locale locale0 = Locale.KOREAN;
      periodParser0.parseInto(mutablePeriod0, "Builder has created neither a printer nor a parser", 2, locale0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("}k+!", (String) null, (String[]) null, (PeriodPrinter) null, periodFormatterBuilder_Literal0, true, true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("pt2mw^f0xz^", "pt2mw^f0xz^", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("Qgsou$");
      periodFormatterBuilder2.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparator("Qgsou$", "Qgsou$");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder3.toParser();
      StringBuffer stringBuffer0 = new StringBuffer("l)%soPv3");
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 892);
      Locale locale0 = Locale.GERMAN;
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      Locale locale0 = Locale.FRANCE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, (-1797387373), 2397);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Cannot have two adjacent separators";
      stringArray0[1] = "Cannot have two adjacent separators";
      stringArray0[2] = "Cannot have two adjacent separators";
      stringArray0[3] = "Cannot have two adjacent separators";
      stringArray0[4] = "Cannot have two adjacent separators";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Cannot have two adjacent separators", "e prec", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Locale locale0 = Locale.FRANCE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, (-1797387373), 2397);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Cannot have two adjacent separators";
      stringArray0[1] = "Cannot have two adjacent separators";
      stringArray0[2] = "Cannot have two adjacent separators";
      stringArray0[3] = "Cannot have two adjacent separators";
      stringArray0[4] = "Cannot have two adjacent separators";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Cannot have two adjacent separators", "e prec", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("gsou$", "gsou$");
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 5, 5, 1, 5, 1, 1, 1);
      Locale locale0 = Locale.ITALIAN;
      periodFormatterBuilder_Separator0.calculatePrintedLength(mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("gsou$", "gsou$");
      periodFormatterBuilder1.appendMinutes();
      periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toParser();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 5, 1);
      Locale locale0 = Locale.ITALIAN;
      periodFormatterBuilder_Separator0.calculatePrintedLength(mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      Seconds seconds0 = Seconds.ZERO;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".l!EZ-Q>jqML1{cSj9";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(".l!EZ-Q>jqML1{cSj9", ".l!EZ-Q>jqML1{cSj9", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      periodFormatterBuilder_Separator0.calculatePrintedLength(seconds0, locale0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Z7'OKIm/k7");
      Locale locale0 = Locale.FRANCE;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Seconds seconds0 = Seconds.TWO;
      periodPrinter0.calculatePrintedLength(seconds0, locale0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Period period0 = new Period();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", "g*_cZ-LD8_2/O-^]c", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      StringBuffer stringBuffer0 = new StringBuffer(3600);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Period period0 = new Period();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No rmttersuppled";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No rmttersuppled", "No rmttersuppled", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("Qgsou$", "Qgsou$");
      periodFormatterBuilder0.appendYears();
      periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toParser();
      StringBuffer stringBuffer0 = new StringBuffer("l)%soPv3");
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 892);
      Locale locale0 = Locale.GERMAN;
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      Locale locale0 = Locale.FRANCE;
      StringBuffer stringBuffer0 = new StringBuffer("Cant have to adjaent separators");
      Period period0 = new Period();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Cant have to adjaent separators", ".YSe", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Z7'OKIm/k7");
      PeriodType periodType0 = PeriodType.weeks();
      Locale locale0 = Locale.FRANCE;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer("Z7'OKIm/k7");
      Seconds seconds0 = Seconds.TWO;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriod(periodType0);
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = Locale.KOREAN;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("z2ByGL?S'");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("z2ByGL?S'", "g|Li:=Hh3Ol{jWZ", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      Minutes minutes0 = Minutes.minutes(2700);
      Duration duration0 = minutes0.toStandardDuration();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "xb{.fix noz%bg";
      stringArray0[2] = "xb{.fix noz%bg";
      stringArray0[3] = "YearMonthDayTime";
      stringArray0[4] = "YearMonthDayTime";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("xb{.fix noz%bg", "YearMonthDayTime", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      StringWriter stringWriter0 = new StringWriter(6);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("gsou$", "gsou$");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 5, 1);
      Locale locale0 = Locale.ITALIAN;
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("gsou$", "gsou$");
      periodFormatterBuilder0.appendMinutes();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 5, 1);
      Locale locale0 = Locale.ITALIAN;
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2989), (-2989), (-2989), (-2989));
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("H]OOTb=E?nHrj?B%RbX", "ps<zxf-oi'8v4lh[/", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Z7'OKIm/k7");
      Locale locale0 = Locale.FRANCE;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Seconds seconds0 = Seconds.TWO;
      StringWriter stringWriter0 = new StringWriter();
      periodPrinter0.printTo((Writer) stringWriter0, (ReadablePeriod) seconds0, locale0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Z7'OKIm/k7");
      periodFormatterBuilder0.appendSecondsWithMillis();
      Locale locale0 = Locale.FRANCE;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Seconds seconds0 = Seconds.TWO;
      StringWriter stringWriter0 = new StringWriter();
      periodPrinter0.printTo((Writer) stringWriter0, (ReadablePeriod) seconds0, locale0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("S#V/{<Ws");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"S#V/{<Ws\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"000\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("pt2hw^f0xz^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pt2hw^f0xz^\" is malformed at \"w^f0xz^\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("Prefix noM followed by field");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      periodFormatterBuilder1.toParser();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      periodFormatterBuilder1.toParser();
  }
}
