/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:35:25 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(errorFunctionType0);
      jSType_TypePair0.typeB.isDateType();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(stringType0);
      assertFalse(stringType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNullType());
      
      jSType_TypePair0.typeA.getTypesUnderShallowEquality(jSType_TypePair0.typeB);
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 1, 2531);
      namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      assertFalse(unknownType0.isResolved());
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) recordType0, (JSType) recordType0, (List<JSType>) arrayList0);
      boolean boolean0 = jSType0.isStringValueType();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.isBooleanObjectType();
      assertFalse(nullType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getJSDocInfo();
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      String string0 = stringType0.toDebugHashCodeString();
      assertFalse(stringType0.isNoObjectType());
      assertEquals("{262}", string0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isRegexpType();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType jSType0 = unknownType0.collapseUnion();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.isString();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.toAnnotationString();
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isStringObjectType();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isParameterizedType();
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isNumberObjectType();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.unboxesTo();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = stringType0.canTestForEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "");
      boolean boolean0 = enumElementType0.isNominalConstructor();
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      stringType0.setValidator(predicate0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isBooleanValueType();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.canBeCalled();
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(boolean0);
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isNumber();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      boolean boolean0 = unknownType0.isOrdinaryFunction();
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ObjectType objectType0 = stringType0.dereference();
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=}7r`'");
      boolean boolean0 = errorFunctionType0.isNamedType();
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(errorFunctionType0);
      jSType_TypePair0.typeA.matchConstraint(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.matchesInt32Context();
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(unknownType0, unknownType0);
      boolean boolean0 = parameterizedType0.isInstanceType();
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isResolved());
      assertFalse(unknownType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isTheObjectType();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      errorFunctionType0.getTypesUnderEquality(objectType0);
      assertTrue(objectType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(stringType0);
      jSType_TypePair0.typeA.matchesUint32Context();
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.matchesNumberContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.isEnumType();
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isNumberValueType();
      assertFalse(stringType0.isNoType());
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      errorFunctionType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.clearResolved();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(stringType0);
      NullType nullType0 = new NullType(jSTypeRegistry1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeB, jSType_TypePair0.typeB, jSType_TypePair0.typeB, (JSType) nullType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType_TypePair0.typeB, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry1.createFunctionTypeWithNewThisType(functionType0, functionType0);
      String string0 = functionType1.toStringHelper(true);
      assertFalse(functionType1.isResolved());
      assertEquals("function (this:function (string, string, string, ...[null]): string, string, string, string, ...[(null|undefined)]): string", string0);
      assertTrue(functionType1.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.hasDisplayName();
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, unknownType0);
      boolean boolean0 = parameterizedType0.hasDisplayName();
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unknownType0, unknownType0);
      boolean boolean0 = parameterizedType0.hasDisplayName();
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      ObjectType objectType0 = errorFunctionType0.getPrototype();
      boolean boolean0 = objectType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertTrue(objectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, false);
      functionType1.getTypesUnderEquality(errorFunctionType0);
      assertTrue(functionType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isGlobalThisType();
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "u|;xpqjPJ1a7G:Y/");
      stringType0.testForEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(recordType0);
      recordType0.getTypesUnderShallowInequality(jSType0);
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "l,v!j,u3-");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, errorFunctionType0);
      boolean boolean0 = indexedType0.isParameterizedType();
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isAllType());
      assertTrue(indexedType0.isFunctionType());
      assertTrue(boolean0);
      assertFalse(indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType.toMaybeParameterizedType((JSType) unknownType0);
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isTemplateType();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = templateType0.isTemplateType();
      assertFalse(templateType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(stringType0);
      JSType.toMaybeTemplateType(jSType0);
      assertFalse(stringType0.isAllType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
      boolean boolean0 = functionType0.isNominalConstructor();
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(boolean0);
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unknownType0, unknownType0);
      JSType jSType0 = unknownType0.getGreatestSubtype(parameterizedType0);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertNotSame(jSType0, unknownType0);
      assertFalse(jSType0.equals((Object)unknownType0));
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(instanceObjectType0, booleanType0);
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoType());
      assertFalse(boolean0);
      assertFalse(booleanType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".<");
      boolean boolean0 = errorFunctionType0.equals(jSTypeRegistry0);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = stringType0.equals(noResolvedType0);
      assertFalse(noResolvedType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(jSType0);
      jSType_TypePair0.typeB.findPropertyType("5% p.dMo");
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(booleanType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.findPropertyType("Not declared as a constructor");
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      
      boolean boolean0 = jSType0.canAssignTo(voidType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType jSType0 = unknownType0.autobox();
      assertFalse(jSType0.isResolved());
      assertNotNull(jSType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.getTypesUnderEquality(unknownType0);
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noObjectType0.getTypesUnderEquality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(booleanType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, true);
      instanceObjectType0.getTypesUnderEquality(jSType_TypePair0.typeA);
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.testForEquality(stringType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "LABEL");
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      errorFunctionType0.getTypesUnderEquality(noObjectType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      noObjectType0.testForEquality(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(functionType0);
      stringType0.testForEquality(jSType0);
      assertTrue(functionType0.isFunctionType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      boolean boolean0 = noType0.canTestForShallowEqualityWith(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(stringType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "");
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(stringType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(functionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      errorFunctionType0.getLeastSupertype(booleanType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=}7r`'");
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType jSType1 = errorFunctionType0.getLeastSupertype(jSType0);
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isResolved());
      assertSame(jSType1, jSType0);
      assertFalse(jSType1.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) stringType0, (JSType) stringType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "");
      JSType jSType0 = enumElementType0.meet(stringType0);
      assertFalse(jSType0.isResolved());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Function");
      errorFunctionType0.getTypesUnderShallowEquality(unknownType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderShallowInequality(jSType0);
      jSType_TypePair0.typeB.getTypesUnderShallowEquality(jSType_TypePair0.typeA);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(booleanType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bYibkpUm?iP{}2");
      errorFunctionType0.getGreatestSubtype(noResolvedType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getLeastSupertype(stringType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unknownType0, unknownType0);
      JSType jSType0 = parameterizedType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType jSType0 = unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) booleanType0, (JSType) booleanType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, unionType0);
      errorFunctionType0.getTypesUnderEquality(proxyObjectType0);
      assertFalse(proxyObjectType0.isResolved());
      assertTrue(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
      jSType0.getTypesUnderEquality(voidType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) errorFunctionType0, (JSType) booleanType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      booleanType0.getTypesUnderInequality(unionType0);
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.getTypesUnderInequality(voidType0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
      voidType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = instanceObjectType0.differsFrom(noResolvedType0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.differsFrom(stringType0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = noResolvedType0.differsFrom(instanceObjectType0);
      assertTrue(boolean0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.differsFrom(noObjectType0);
      assertFalse(boolean0);
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "AI(8n;U|\"hw*}Ko')");
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)errorFunctionType0.getReturnType();
      jSType0.getTypesUnderShallowEquality(instanceObjectType0);
      assertTrue(instanceObjectType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noObjectType0, stringType0);
      boolean boolean0 = noObjectType0.canAssignTo(indexedType0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType.safeResolve((JSType) null, simpleErrorReporter0, unknownType0);
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoResolvedType());
  }
}
