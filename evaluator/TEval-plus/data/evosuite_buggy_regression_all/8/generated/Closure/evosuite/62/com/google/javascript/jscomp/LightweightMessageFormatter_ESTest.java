/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:13:42 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.ProcessDefines;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.VarCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LightweightMessageFormatter_ESTest extends LightweightMessageFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      SimpleRegion simpleRegion0 = new SimpleRegion(598, 598, "| :598: ERROR - @define variable null assignment must be global\n");
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
      assertEquals("  598| | :598: ERROR - @define variable null assignment must be global", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiagnosticType diagnosticType0 = TypeCheck.NOT_A_CONSTRUCTOR;
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("ERROR - cannot instantiate non-constructor\n", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      DiagnosticType diagnosticType0 = TypeCheck.NOT_A_CONSTRUCTOR;
      String[] stringArray0 = new String[10];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertEquals("WARNING - cannot instantiate non-constructor\n", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
      String[] stringArray0 = new String[4];
      JSError jSError0 = JSError.make("| ", 598, 598, diagnosticType0, stringArray0);
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("| :598: ERROR - @define variable null assignment must be global\n", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      DiagnosticType diagnosticType0 = VarCheck.MISSING_MODULE_DEP_ERROR;
      JSError jSError0 = JSError.make("missing module dependency; module {0} should depend on module {1} because it references {2}", (-1), (-1), diagnosticType0.level, diagnosticType0, (String[]) null);
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("missing module dependency; module {0} should depend on module {1} because it references {2}: ERROR - missing module dependency; module {0} should depend on module {1} because it references {2}\n", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiagnosticType diagnosticType0 = TypeCheck.NOT_A_CONSTRUCTOR;
      String[] stringArray0 = new String[0];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("ERROR - cannot instantiate non-constructor\n", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleRegion simpleRegion0 = new SimpleRegion((-1), (-1), "");
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      SimpleRegion simpleRegion0 = new SimpleRegion((-1888), (-1888), "-7:#GlOu;PF");
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
      assertEquals("  -1888| -7:#GlOu;PF", string0);
      assertNotNull(string0);
  }
}
