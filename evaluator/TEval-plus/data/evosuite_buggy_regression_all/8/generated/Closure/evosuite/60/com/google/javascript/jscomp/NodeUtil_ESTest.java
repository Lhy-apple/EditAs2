/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:14:29 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node((-3596));
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 4095);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "(I\"dHz", 12, 41);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals(49193, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(92);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("", (-1293), (-1293));
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "(I\"dHz", 12, 41);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(49193, node0.getSourcePosition());
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-4962));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(8298, 8298, 8298);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(93);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(128);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "uVDzwPv5Yneao^f![I", node0, "uVDzwPv5Yneao^f![I");
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 41);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("RfZ,NU@g", "x=I`-I%8!<lx");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "|=", node0, "");
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertTrue(node1.isUnscopedQualifiedName());
      assertTrue(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(109);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(116);
      int int0 = NodeUtil.getNameReferenceCount(node0, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node((-3621));
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 2, nodeUtil_MatchNotFunction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNamePrefixes);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node((-3596));
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3596
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber((-2816.5642716075863), 0, (-2557));
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)43, "undefined");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(47, "QT;Z}");
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(56);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber((double) 51, 51, 51);
      Node node1 = new Node(26, node0);
      NodeUtil.getImpureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("rhino_ast.javaocom^google.javascript.rhi/o.Messages", (-45), (-3621));
      Node node1 = new Node(63, node0);
      NodeUtil.getImpureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(85);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(100, "void");
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString(101, "arguments");
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 56, 56);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "W[<F5!Zj", node0, "XVd");
      NodeUtil.getPureBooleanValue(node1);
      assertEquals(56, node1.getLineno());
      assertEquals(38, node1.getType());
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("^=");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(44, "Bad replacement configuration.");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getImpureBooleanValue(node1);
      assertEquals(122, node1.getType());
      assertEquals(51, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 89);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(53, 53, 53);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "unefined", 24, 24);
      Node node1 = new Node(9, node0, 113, 2);
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals(38, node0.getType());
      assertNull(string0);
      assertEquals(98328, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-4962));
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("-4962", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages", 1167, (-3621));
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("rhino_ast.java.com.google.javascript.rhino.Messages", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(43);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("infinity", 110, 110);
      Node node1 = new Node(64, node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals("[object Object]", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString("infinity", 110, 110);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals(110, node1.getLineno());
      assertEquals("", string0);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber((-1024.715982099433));
      Node node1 = new Node(27, node0, node0, node0, node0, 1, 4);
      String string0 = NodeUtil.arrayToString(node1);
      assertNotNull(string0);
      assertEquals("-1024.715982099433", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(26, "B i");
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(128);
      Node node1 = NodeUtil.newName(closureCodingConvention0, "uVDzwPv5Yneao^f![I", node0, "tQeh");
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
      assertTrue(node1.isQualifiedName());
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("^=");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString(44, "-");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(110);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("+q`?P,TJp`j8C");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue(" of ");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(9);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(10);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(11);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(12);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(13);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(160);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(65279);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(55296, "<=");
      Node node1 = new Node(92, node0, node0, node0, 51, 2);
      Node node2 = NodeUtil.newExpr(node1);
      assertEquals(130, node2.getType());
      
      String string0 = NodeUtil.getNearestFunctionName(node1);
      assertNotNull(string0);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(26);
      // Undeclared exception!
      try { 
        NodeUtil.isImmutableValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber((-1593.814054));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("^=");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString(41, "o%oN-$d8bPVD");
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString(44, "instanceof");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(122);
      // Undeclared exception!
      try { 
        NodeUtil.isImmutableValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 48, 391);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
      assertEquals(196999, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.NodeUtil$MatchNodeType");
      Compiler compiler0 = new Compiler();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "Infinity", node0, "\u000B");
      assertTrue(node1.isQualifiedName());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(38, "NaN", 15, 2);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(47, "QT;Z}");
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 89);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(11, (-2390), 24);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("%FpQ0RyFDP", (-3621), (-3621));
      Node node1 = new Node(21, node0, node0, node0, node0, 1828, 47);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(22);
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(24, 24, (-2390));
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(27, "[{6!km4*;Ol!y<n9+");
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(33, 51, 2);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 89);
      Node node1 = new Node(34, node0, node0, node0, node0, (-567), 3);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "unefined", 24, 24);
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertEquals(98328, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString(100, "-=");
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      Node node1 = new Node(16, node0, 4095, 21);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("RfZ,NU@g", "x=I`-I%8!<lx");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(11, 1, (-2167));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(12);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(13, "in");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(14, "'xb6Vj7a`");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(15, node0, node0, node0, node0, 8, 1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(16, "nZ2AM9=n!|");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(19);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(20, "}8-Kb/");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(22);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(24);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber((double) 51, 51, 51);
      Node node1 = new Node(26, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber((-1024.715982099433));
      Node node1 = new Node(27, node0, node0, node0, node0, 1, 4);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(300, "JwxxW;Z&YEh&");
      Node node1 = new Node(32, node0, 4, 2468);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(33, "undefined");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node((byte)34);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETPROP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString(35, "Bad replacement configuration.");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString(36, "zQ9");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(45);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)46, "NaN");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString(48, "Infinity", 36, 104);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBINDNAME Infinity 36
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString(49, "#,N");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTHROW #,N
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)54, "NaN");
      Node node1 = new Node(50, node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRETHROW
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(53, 53, 53);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)54, "NaN");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeGETVAR NaN
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(55, "R#");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(56);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString(57, "undefined");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(59);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeENUM_NEXT
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString(66, "elaKm~");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)69, "undefined");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString(75, "undefined");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString(76, "w4E&Pv`?H");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString(78, "Bad replacemeht onfiguration.", 78, 78);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString(79, "undefined");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)80, "undefined");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(81);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString(82, "Bad replacement configuration.");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRC Bad replacement configuration.
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString(83, "#2");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP #2
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(84);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(85, "6");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString(86, "5J1{Smj!%#^ +nr~[Jr<");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(87);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(10, 10, 88);
      Node node1 = new Node(88, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)89, "undefined");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(90, "invalid decl type: ");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)91, "undefined");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString(55296, "<=");
      Node node1 = new Node(92, node0, node0, node0, 51, 2);
      Node node2 = NodeUtil.newExpr(node1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node2);
      assertTrue(boolean0);
      assertEquals(130, node2.getType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString(93, "Bad replacement configuration.");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(94, "iD1=c");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(95);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(96, "B?;fU?Qmag|77pZx}l");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString(99, "s");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString(103, "pc");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString(106, "B?;fU?Qmag|77pZx}l");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(109, 109, 109);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(110, "CGM");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSWITCH CGM
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString(111, "nZ2AM9=n!|");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(112);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString(114, "(I\"dHz");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDO (I\"dHz
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString(115, "pNP57/MLA#K4");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(116);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(117);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(53, 53, 53);
      Node node1 = NodeUtil.newVarNode("&", node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR 53 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000007]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCATCH 120
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(27, "[{6!km4*;Ol!y<n9+");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString(31, "\"D1=0");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node((-3618));
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertEquals(37, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("infinity", 110, 110);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString(41, "com.google.javascript.jscomp.DefaultPassConfig$90");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)42, "';O8=+Z}Ixr]Olv,");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)43, "undefined");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(44, "instanceof");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node((-285), (-285), (-285));
      Node node1 = new Node(46, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString(47, "B i");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node((-3596));
      Node node1 = new Node(48, node0, node0, node0, node0, 2, 24);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString(49, "[UHh{;`n,y}/3#xI");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString("rhino_ast.javaocom^google.javascript.rhi/o.Messages", (-45), (-3621));
      Node node1 = new Node(63, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString(82, "CGM");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString(98, "tQeh");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = new Node(100);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(108);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString(110, "CGM");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = NodeUtil.newVarNode("&@w", node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
      assertEquals(118, node1.getType());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(119);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node((-1424), 94, (-1424));
      Node node1 = new Node(120, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(124, "tq{Ue x895zz");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("&");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("9YT ", "B i");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(127);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(128);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "CQ>h", (-2078), 10);
      Node node1 = new Node(88, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(30);
      // Undeclared exception!
      try { 
        NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(43);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node((-3596));
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber((-1024.715982099433));
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(94);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node((-3596));
      Node node1 = new Node(31, node0, node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(38, "==");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString(35, "Bad replacement configuration.");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString(93, "Bad replacement configuration.", 93, 93);
      Node node1 = NodeUtil.newVarNode("CQ>h", node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, treeSet0);
      assertEquals(118, node1.getType());
      assertEquals(93, node1.getLineno());
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("infinity", 110, 110);
      Node node1 = new Node(64, node0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = NodeUtil.precedence(13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = NodeUtil.precedence(51);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(55);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setvar (type 55)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(56);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=56> (type 56)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(57);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=57> (type 57)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(59);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=59> (type 59)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = NodeUtil.precedence(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((byte)66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=66> (type 66)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(67);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=67> (type 67)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(68);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=68> (type 68)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ref_special (type 69)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=75> (type 75)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=76> (type 76)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for try (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for semi (type 78)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lc (type 81)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lp (type 83)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int int0 = NodeUtil.precedence(86);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = NodeUtil.precedence(87);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int int0 = NodeUtil.precedence(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int int0 = NodeUtil.precedence(89);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = NodeUtil.precedence(90);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = NodeUtil.precedence(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = NodeUtil.precedence(97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = NodeUtil.precedence(102);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = NodeUtil.precedence(105);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((byte)106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for if (type 108)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int int0 = NodeUtil.precedence(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifne (type 7)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(85);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(86);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(101);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(9);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(6, "XGO)lr");
      Node node1 = new Node(10, node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newString(11, "6");
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(19);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString(20, "}8-Kb/");
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(21);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(22);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(24, 24, (-2390));
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(27);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString(29, "Bad replacement configuration.");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString(38, "==");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(102, "6");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newString(103, "pc");
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString(38, "NaN", 15, 2);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = new Node(12);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString("|=", (-3621), (-3621));
      Node node1 = new Node(13, node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newNumber(53.0, 51, 51);
      Node node1 = new Node(14, node0, node0, node0, 21, 6);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString(16, "Bad replacement configuration.");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString("|=", (-3621), (-3621));
      Node node1 = new Node(19, node0, node0, node0, node0, 2, 17);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(22);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString(25, "B i");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString(26, "B i");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString(27, "undefined");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString(31, "\"D1=0");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString(33, "msg.undef.with", (-1892), 1);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node((byte)34);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newString(35, "Bad replacement configuration.");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(36);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newString(37, "com.google.javascript.rhino.jstype.StringType");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newNumber((-1024.715982099433));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString("%FpQ0RyFDP", (-3621), (-3621));
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString(41, "yT1EmrA`Q");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node(43);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString(44, "instanceof");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(45);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = new Node(46);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(497);
      Node node1 = new Node(47, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(49);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("Infinity", 1205, 1205);
      Node node1 = new Node(50, node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString(102, "6");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, true);
      assertFalse(boolean0);
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(101);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newString(97, "modifies");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node((byte)91);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString(111, "nZ2AM9=n!|");
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(105);
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = new Node(33, 431, 431);
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString(35, "Bad replacement configuration.");
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertNull(node1.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newNumber((-2816.5642716075863), 0, (-2557));
      Node node1 = NodeUtil.newVarNode("", node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier", "rhino_ast.java.com.google.javascript.rhino.Messages");
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node(38, 128, 112);
      Node node1 = new Node(128, node0);
      Node node2 = NodeUtil.getAssignedValue(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString((-1), "Bad replacement configuration.");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newString(40, "com.google.javascript.jscomp.AnalyzePrototypeProperties$SymbolType");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      Node node1 = NodeUtil.newVarNode("com.google.javascript.jscomp.AnalyzePrototypeProperties$SymbolType", node0);
      assertEquals(118, node1.getType());
      
      boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertFalse(node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = new Node(24);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString(75, "match");
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertFalse(boolean0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = new Node(86);
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString(115, "if (");
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("RfZ,NU@g", "x=I`-I%8!<lx");
      Node node1 = new Node(180, node0, node0, 18, 1);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = new Node(112);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node(112);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newString(110, "#ml&T:(U#vCw[@(7");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(113, (-2518), 113);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newString(115, "if (");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newNumber(1923.4233868544188);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = new Node(110);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SWITCH does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = new Node(109, 109, 109);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ELSE 109 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = new Node(112);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DEFAULT does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = NodeUtil.getConditionExpression(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = new Node(84);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RP does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q9].", "Q9].");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("a");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages", (-45), (-3621));
      Node node1 = new Node(63, node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: STRING rhino_ast.java.com.google.javascript.rhino.Messages of STRING rhino_ast.java.com.google.javascript.rhino.Messages
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = new Node(112);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("RfZ,NU@g", "x=I`-I%8!<lx");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newString(38, "NaN", 15, 2);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.Tracer$ThreadTrace", "-=");
      Node node0 = compiler0.parse(jSSourceFile0);
      Node node1 = NodeUtil.newVarNode("Y&", node0);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasOneChild());
      
      NodeUtil.removeChild(node0, node0);
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = Node.newNumber(53.0, 51, 113);
      Node node1 = NodeUtil.newVarNode("T{^6Bh}(U{\"0$F BJxc", node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newString(403, "rhino_ast.java.com.google.javascript.rhino.Messages");
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = new Node(24, 24, (-2390));
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("!");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node((-3596));
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      Node node2 = NodeUtil.getArgumentForCallOrNew(node1, 25);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages", (-45), (-3621));
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      Node node0 = Node.newNumber((-2816.5642716075863), 0, (-2557));
      Node node1 = NodeUtil.newFunctionNode("", vector0, node0, 2, 2);
      Node node2 = NodeUtil.newVarNode("", node1);
      assertEquals(8194, node2.getSourcePosition());
      assertEquals(118, node2.getType());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertEquals(3, node1.getChildCount());
      assertFalse(boolean0);
      assertEquals(105, node1.getType());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newNumber((-1024.715982099433));
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = new Node(105);
      NodeUtil.newVarNode("", node0);
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyFunctionExpression(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = new Node(24);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = new Node((-3596));
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      boolean boolean0 = NodeUtil.isObjectCallMethod(node1, "dN:Q_w0qMvo54");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newString("|=", (-3621), (-3621));
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString(86, "5J1{Smj!%#^ +nr~[Jr<");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(701, 814, 68);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "Infinity");
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("RfZ,NU@g", "x=I`-I%8!<lx");
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = new Node(33, 4, 41);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString(35, "Bad replacement configuration.");
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = new Node(147);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString("infinity", 110, 110);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("infinity", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = Node.newString(106, "B?;fU?Qmag|77pZx}l");
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: EXPORT B?;fU?Qmag|77pZx}l
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = new Node((byte)66, (-1562), (-1562));
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = new Node(129, 129, 129);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
      assertFalse(jSType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = new Node((-2114));
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(9);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(21);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = NodeUtil.opToStr(24);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(29);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 30: NEW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 34: SETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 36: SETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(45);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 48: BINDNAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 50: RETHROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(51);
      assertEquals("in", string0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = NodeUtil.opToStr(56);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 64: OBJECTLIT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = NodeUtil.opToStr(68);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = NodeUtil.opToStr(75);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 76: REF_NS_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 81: LC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 82: RC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 83: LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 84: RP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 85: COMMA
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = NodeUtil.opToStr((byte)91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 99: COLON
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 103: DEC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 104: DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 107: IMPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 109: ELSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 111: CASE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 112: DEFAULT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = NodeUtil.opToStr(113);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 116: BREAK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 118: VAR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 121: FINALLY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op -1: ERROR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-4962));
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = Node.newNumber(89.95741069441468, 5177, 5177);
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, true);
      List<Node> list0 = astParallelizer0.split();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("BITNOT", list0, node0, 29, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil$VarCollector", 119, 119);
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals(487543, node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newNumber(1923.4233868544188);
      Node node1 = new Node(38, node0, node0, node0, 25, 12);
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = Node.newString("infinity", 110, 110);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "C1", 124, 124);
      assertEquals(508028, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(105, 105, 105);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "CGM", node0, "izg!fcW^r'G}&Z^");
      assertEquals(105, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("msg.dup.parms");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("CGM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("true");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", (-1800), 15);
      Node node1 = new Node(147, node0, node0, node0, node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = new Node((-3596));
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node(93);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("Infinity", (Node) null);
      assertEquals(118, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = Node.newString(9, "B i");
      Node node2 = new Node(15, node0, node1, node1, node1, 8, 1);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("\"D1=0", node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 276, 276);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, " 0jTua");
      assertFalse(boolean0);
      assertEquals(1130772, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = new Node(24, 24, (-2390));
      Node node1 = NodeUtil.newVarNode("unefined", node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = new Node(105);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node((-285), (-285), (-285));
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = new Node(105);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newNumber(53.0, 51, 51);
      Node node1 = NodeUtil.newVarNode("&", node0);
      assertEquals(118, node1.getType());
      assertEquals(208947, node1.getSourcePosition());
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newString(300, "JwxxW;Z&YEh&");
      Node node1 = new Node(32, node0, 4, 2468);
      boolean boolean0 = NodeUtil.referencesThis(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-10), 12);
      Node node1 = new Node(26, node0);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "Infinity");
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = new Node(84, 180, (-471));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = NodeUtil.newExpr(node0);
      int int0 = NodeUtil.getCount(node1, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(2, int0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = new Node(127);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newString(27, "[{6!km4*;Ol!y<n9+");
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      Node node0 = Node.newNumber((-2783.43309862396), 0, (-2534));
      Node node1 = NodeUtil.newFunctionNode("", vector0, node0, 2, 96);
      assertEquals(105, node1.getType());
      
      Node node2 = NodeUtil.getFunctionParameters(node1);
      assertEquals(8288, node2.getSourcePosition());
      assertEquals(8288, node1.getSourcePosition());
      assertEquals(83, node2.getType());
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "qkS", "qkS");
      assertEquals(" [testcode] ", node0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = Node.newString("wFselrm.");
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = Node.newString("wFselrm.");
      Node node1 = NodeUtil.newFunctionNode("D", linkedList0, node0, 37, 48);
      assertEquals(3, node1.getChildCount());
      assertEquals(151600, node1.getSourcePosition());
      
      NodeUtil.getInfoForNameNode(node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = Node.newString(78, "Bad replacement configuration.", 78, 78);
      Node node1 = NodeUtil.newVarNode("CQ>h", node0);
      assertEquals(118, node1.getType());
      assertEquals(78, node1.getLineno());
      
      NodeUtil.getInfoForNameNode(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node(1000, 1000, 1000);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("&");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("&", "&");
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals("&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newString(82, "Bad replacement configuration.");
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newString(32, "2\u0003HH!O6h<;qZ");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = Node.newString(33, "");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = Node.newString(35, "Bad replacement configuration.");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newString(47, "B i");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = Node.newString(51, "CGM");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = Node.newString(55, "com.google.javascript.rhino.jstype.ArrowType");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETVAR com.google.javascript.rhino.jstype.ArrowType
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = new Node(56);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCATCH_SCOPE
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newString(57, "undefined");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeENUM_INIT_KEYS undefined
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages", (-45), (-3621));
      Node node1 = new Node(63, node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)66, "NaN");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSET_REF NaN
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)69, "undefined");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_SPECIAL undefined
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newString(75, "undefined");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_NAME undefined
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = Node.newString(78, "Bad replacemeht onfiguration.", 78, 78);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSEMI Bad replacemeht onfiguration. 78
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = Node.newString(79, "undefined");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLB undefined
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)80, "undefined");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRB undefined
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = new Node(84);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newString(85, "6");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = Node.newString(86, "5J1{Sm!%#^ +nr~[Jr<");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = Node.newString(87, "#2");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newString(88, "undefined");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)91, "undefined");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = Node.newString(55296, "<=");
      Node node1 = new Node(92, node0, node0, node0, 51, 2);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = new Node(93, 105, 105);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = Node.newString(96, "");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = Node.newString(98, "tQeh");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = Node.newString(99, "s");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCOLON s
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = Node.newString(102, "xd");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = new Node(103, 103, 91);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }
}
