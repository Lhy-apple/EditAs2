/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:18:14 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      Node node0 = Node.newString(105, "F0f Ay");
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("$", "$");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node1 = new Node(4, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(125, node1, 8, 9);
      node3.addChildToBack(node2);
      unreachableCodeElimination0.process(node0, node3);
      assertFalse(node0.hasOneChild());
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("$", "$");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node1 = new Node(4, node0, node0, node0, node0);
      node1.removeFirstChild();
      Node node2 = new Node(125, node1, 8, 9);
      unreachableCodeElimination0.process(node0, node2);
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("{}", "{}");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node1 = new Node(114, node0, node0, node0);
      unreachableCodeElimination0.process(node1, node0);
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("$1R", "$1R");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node1 = new Node(4, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(113, node1, 8, 9);
      node3.addChildToFront(node2);
      unreachableCodeElimination0.process(node0, node3);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("8", "8");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node1 = new Node(125, node0, node0, node0);
      Node node2 = new Node(114, node1, 8, 9);
      unreachableCodeElimination0.process(node1, node2);
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("$R", "$R");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node1 = new Node(4, node0, node0, node0, node0);
      Node node2 = new Node(125, node1, 8, 9);
      unreachableCodeElimination0.process(node0, node2);
      assertEquals(1, node2.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("$1R", "$1R");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node1 = new Node(4, node0, node0, node0, node0);
      node1.removeFirstChild();
      Node node2 = new Node(119, node1, 8, 9);
      unreachableCodeElimination0.process(node0, node2);
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode(";", ";");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("emoving ", "emoving ");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node1 = new Node(125, node0, node0, node0);
      Node node2 = new Node(2, node1, 25, 15);
      unreachableCodeElimination0.process(node2, node2);
      assertFalse(node0.hasChildren());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("emoving ", "{}");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node1 = new Node(114, node0, node0, node0);
      Node node2 = new Node(6, node1, (-3), 5);
      unreachableCodeElimination0.process(node2, node2);
      assertFalse(node2.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("{}", "{}");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node1 = Node.newString(120, "Ljava/lang/Double;");
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      Node node3 = Node.newString("{}");
      Node node4 = new Node(11, node0, node2, node3);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node0, node4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("emoving ", "emoving ");
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
  }
}
