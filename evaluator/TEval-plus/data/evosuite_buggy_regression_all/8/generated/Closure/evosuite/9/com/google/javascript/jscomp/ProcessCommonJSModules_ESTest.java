/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:04:05 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "_id/");
      Node node0 = compiler0.parseTestCode("./com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback");
      processCommonJSModules0.process(node0, node0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "Dy6OG4S");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module.exports", "../");
      processCommonJSModules0.process(node0, node0);
      assertEquals(4, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./msg.no.semi.for.cond", "./msg.no.semi.for.cond");
      assertEquals("module$msg.no.semi.for.cond", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../", "provide");
      assertEquals("module$..$", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("!)5qsef?)MwZxzF|./", "!)5qsef?)MwZxzF|./");
      assertEquals("module$!)5qsef?)MwZxzF|.$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "_id/");
      String string0 = processCommonJSModules0.guessCJSModuleName("_id/");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "#");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "#", "./");
      Node node1 = Node.newString(37, "#", 48, 4);
      processCommonJSModules0.process(node0, node1);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(".//Dw[n.b8m%/");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "`0");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "`0", "./");
      node1.addChildToBack(node0);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT): [testcode]:-1:-1
         // [source unknown]
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("./com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "var JSCompiler_stubMap = [];function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {  return function() {    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(        this, arguments);  };}function JSCompiler_unstubMethod(    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] =       JSCompiler_unstubMethod_body;}", false);
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "r*g`rItu");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "exports", "{N/t,]78.");
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isSetterDef());
  }
}
