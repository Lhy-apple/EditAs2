/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:29:47 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionBuilder;
import com.google.javascript.rhino.jstype.FunctionParamBuilder;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionBuilder_ESTest extends FunctionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
      FunctionBuilder functionBuilder1 = functionBuilder0.withTemplateName("\"Csvc[vs.H-+");
      assertSame(functionBuilder0, functionBuilder1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unknownType0, jSTypeArray0);
      functionBuilder0.withTypeOfThis(functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
      FunctionParamBuilder functionParamBuilder0 = new FunctionParamBuilder((JSTypeRegistry) null);
      FunctionBuilder functionBuilder1 = functionBuilder0.withParams(functionParamBuilder0);
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
      FunctionBuilder functionBuilder1 = functionBuilder0.forConstructor();
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      FunctionBuilder functionBuilder1 = functionBuilder0.copyFromOtherFunction(errorFunctionType0);
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      FunctionBuilder functionBuilder1 = functionBuilder0.withInferredReturnType(booleanType0);
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      FunctionBuilder functionBuilder1 = functionBuilder0.withSourceNode(node0);
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionBuilder functionBuilder1 = functionBuilder0.withName("TRUE");
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
      FunctionBuilder functionBuilder1 = functionBuilder0.forNativeType();
      assertSame(functionBuilder0, functionBuilder1);
  }
}
