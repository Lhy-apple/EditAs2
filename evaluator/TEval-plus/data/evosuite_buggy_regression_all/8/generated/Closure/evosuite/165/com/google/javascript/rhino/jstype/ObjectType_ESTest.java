/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:34:44 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectType_ESTest extends ObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      JSType[] jSTypeArray0 = new JSType[3];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionType0.setSource(node0);
      assertFalse(functionType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString(0, "Not declared as a constructor");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, noType0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", enumType0, true, node0);
      ObjectType.Property objectType_Property1 = objectType_Property0.getSymbol();
      assertTrue(objectType_Property1.isTypeInferred());
      assertFalse(enumType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = new Node(1, 0, 0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a constructor", noResolvedType0, true, node0);
      objectType_Property0.getJSDocInfo();
      assertTrue(objectType_Property0.isTypeInferred());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = new Node(1, 0, 0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a constructor", noType0, true, node0);
      objectType_Property0.setNode(node0);
      assertTrue(objectType_Property0.isTypeInferred());
      assertFalse(noType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = new Node(1, 0, 0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a constructor", noResolvedType0, true, node0);
      objectType_Property0.setJSDocInfo((JSDocInfo) null);
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(objectType_Property0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertFalse(jSType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = new Node(1, 0, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, noType0);
      JSType jSType0 = enumType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, unknownType0);
      JSType jSType0 = proxyObjectType0.getIndexType();
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString("Not declared as a type name", 0, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, noType0);
      boolean boolean0 = enumType0.defineElement("", node0);
      assertTrue(boolean0);
      assertFalse(enumType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, false);
      JSType jSType0 = instanceObjectType0.findPropertyType("");
      assertNotNull(jSType0);
      assertFalse(jSType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      unknownType0.setPropertyJSDocInfo("DvwS/8/os#r]uL{yE", (JSDocInfo) null);
      assertFalse(unknownType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isObject();
      assertTrue(boolean0);
      assertFalse(noResolvedType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "d~AM%.e!");
      errorFunctionType0.getPropertyNames();
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      templateType0.getOwnerFunction();
      assertFalse(templateType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = templateType0.hasReferenceName();
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getRootNode();
      assertFalse(noResolvedType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "pQnJ~&N8rVM");
      boolean boolean0 = templateType0.removeProperty("pQnJ~&N8rVM");
      assertFalse(boolean0);
      assertFalse(templateType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      Set<String> set0 = unknownType0.getOwnPropertyNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      JSType jSType0 = unknownType0.getParameterType();
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      unknownType0.setJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = unknownType0.getJSDocInfo();
      assertFalse(jSDocInfo1.isExterns());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      unknownType0.clearCachedValues();
      assertFalse(unknownType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      Iterable<ObjectType> iterable0 = unknownType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      Iterable<ObjectType> iterable0 = unknownType0.getCtorExtendedInterfaces();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
      JSDocInfo jSDocInfo0 = indexedType0.getOwnPropertyJSDocInfo("Named type with empty name component");
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ObjectType objectType0 = recordType0.getImplicitPrototype();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      Visitor<ArrowType> visitor0 = (Visitor<ArrowType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseObjectType(any(com.google.javascript.rhino.jstype.ObjectType.class));
      parameterizedType0.visit(visitor0);
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "NUMBER_OBJECT_TYPE", "NUMBER_OBJECT_TYPE", 14, 14);
      boolean boolean0 = namedType0.isPropertyInExterns("NUMBER_OBJECT_TYPE");
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "vS[g\"{u+~$");
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "(", (Node) null, errorFunctionType0);
      String string0 = enumType0.getDisplayName();
      assertEquals("", string0);
      assertFalse(enumType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      boolean boolean0 = unknownType0.hasOwnDeclaredProperty("J:OmpO@\"@OQhZ<^@");
      assertFalse(boolean0);
      assertFalse(unknownType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      ObjectType objectType0 = unknownType0.getTypeOfThis();
      assertNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ObjectType.createDelegateSuffix("Unknown class name");
      assertEquals("(Unknown class name)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      Node node0 = unknownType0.getPropertyNode("~*Z#6yo1i");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      ObjectType objectType0 = unknownType0.getParentScope();
      assertNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString(0, "Not declared as a constructor");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, noType0);
      enumType0.getOwnSlot("GnRK");
      assertFalse(enumType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      ObjectType.Property objectType_Property0 = unknownType0.getOwnSlot("/9C$|&sKTiV");
      assertNull(objectType_Property0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("vS[g\"{u+~$", (Node) null);
      functionType0.getJSDocInfo();
      assertFalse(functionType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.detectImplicitPrototypeCycle();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      String string0 = noType0.getNormalizedReferenceName();
      assertFalse(noType0.isFunctionPrototypeType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      boolean boolean0 = functionType0.hasDisplayName();
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(recordType0, recordType0);
      parameterizedType0.testForEquality(recordType0);
      // Undeclared exception!
      try { 
        recordType0.setImplicitPrototype(parameterizedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      recordType0.testForEquality(voidType0);
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(recordType0, recordType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = Node.newString(">YDm!HBuyC /R B");
      parameterizedType0.defineInferredProperty("Unknown class name", noResolvedType0, node0);
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString(0, "Not declared as a constructor");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, noType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.defineInferredProperty("", enumType0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      recordType0.findPropertyType("(");
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      errorFunctionType0.getTypesUnderEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = new Node(1, 0, 0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a constructor", noResolvedType0, true, node0);
      objectType_Property0.getSourceFile();
      assertTrue(objectType_Property0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Named type with empty name component", noResolvedType0, false, (Node) null);
      objectType_Property0.getSourceFile();
      assertFalse(objectType_Property0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = new Node(1, 0, 0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a constructor", noType0, true, node0);
      ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
      assertNotNull(objectType_Property1);
      assertTrue(objectType_Property1.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a constructor", unknownType0, false, (Node) null);
      ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
      assertFalse(objectType_Property0.isTypeInferred());
      assertNull(objectType_Property1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = new Node(1, 0, 0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a constructor", noResolvedType0, true, node0);
      objectType_Property0.isFromExterns();
      assertTrue(objectType_Property0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ObjectType.Property objectType_Property0 = new ObjectType.Property("Named type with empty name component", noResolvedType0, false, (Node) null);
      boolean boolean0 = objectType_Property0.isFromExterns();
      assertFalse(boolean0);
      assertFalse(objectType_Property0.isTypeInferred());
  }
}
