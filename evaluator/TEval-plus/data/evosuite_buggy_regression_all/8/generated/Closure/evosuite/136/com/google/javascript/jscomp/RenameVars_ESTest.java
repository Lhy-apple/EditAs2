/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:28:29 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[1];
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      RenameVars renameVars0 = new RenameVars(compiler0, "isStrig", false, false, false, variableMap0, charArray0, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("isStrig", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("isStrig", "isStrig");
      renameVars0.process(node0, node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[6];
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      RenameVars renameVars0 = new RenameVars(compiler0, "isStrig", false, false, false, variableMap0, charArray0, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("L |e", (CompilerInput) null);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode("bk#gAdJ3q:uPjJd", "L |e");
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, ";N", false, false, false, (VariableMap) null, (char[]) null, linkedHashSet0);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      VariableMap variableMap0 = new VariableMap(hashMap0);
      char[] charArray0 = new char[8];
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.externMethodsWithoutSignatures;
      RenameVars renameVars0 = new RenameVars(compiler0, "D9c@C2-89M-*", false, false, false, variableMap0, charArray0, set0);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment("D9c@C2-89M-*", (CompilerInput) null);
      renameVars_Assignment0.setNewName("D9c@C2-89M-*");
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName("'1mAa41");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, linkedHashSet0);
      Node node0 = compiler0.parseSyntheticCode("name", "name");
      renameVars0.process(node0, node0);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameVars renameVars0 = new RenameVars(compiler0, "L 6cT koj; e{39", false, false, false, (VariableMap) null, (char[]) null, (Set<String>) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[1];
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      RenameVars renameVars0 = new RenameVars(compiler0, "isStrig", false, false, false, variableMap0, charArray0, set0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      renameVars0.process(node0, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "-I~INM^~r", false, true, true, (VariableMap) null, (char[]) null, linkedHashSet0);
      Node node0 = compiler0.parseSyntheticCode("-I~INM^~r", "name");
      // Undeclared exception!
      try { 
        renameVars0.process(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prefix must start with one of: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, $]
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("$$");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      VariableMap variableMap0 = VariableMap.load("$$");
      char[] charArray0 = new char[4];
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.externMethodsWithoutSignatures;
      RenameVars renameVars0 = new RenameVars(compiler0, "c!,C$bjKnxn2.Ps4", false, false, true, variableMap0, charArray0, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      char[] charArray0 = new char[0];
      RenameVars renameVars0 = new RenameVars(compiler0, "W", true, true, true, (VariableMap) null, charArray0, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("8ofo+", (CompilerInput) null);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode("$$", "W");
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("$$");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      VariableMap variableMap0 = VariableMap.load("$$");
      char[] charArray0 = new char[3];
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.externMethodsWithoutSignatures;
      RenameVars renameVars0 = new RenameVars(compiler0, "$$", false, true, false, variableMap0, charArray0, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("r", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("[/~zVV", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("P'", "P'");
      renameVars0.process(node0, node0);
      assertFalse(node0.isSyntheticBlock());
  }
}
