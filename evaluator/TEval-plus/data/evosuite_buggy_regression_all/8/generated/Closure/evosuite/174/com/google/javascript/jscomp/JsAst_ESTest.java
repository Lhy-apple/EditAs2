/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:35:11 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsAst_ESTest extends JsAst_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("+<2-3*NEy 6pLc", "tN&-Jsw]HQ");
      JsAst jsAst0 = new JsAst(sourceFile0);
      InputId inputId0 = jsAst0.getInputId();
      assertEquals("+<2-3*NEy 6pLc", inputId0.getIdName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile("eE");
      JsAst jsAst0 = new JsAst(sourceFile0);
      SourceFile sourceFile1 = jsAst0.getSourceFile();
      assertEquals("eE", sourceFile1.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("[5,(5:XOU}F3(Uo gn");
      JsAst jsAst0 = new JsAst(sourceFile0);
      jsAst0.clearAst();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("[5,(5:XOU}F3(Uo gn");
      JsAst jsAst0 = new JsAst(sourceFile0);
      jsAst0.setSourceFile(sourceFile0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("[5,(5:XOU}F3(Uo gn");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      compiler0.parse(sourceFile0);
      jsAst0.getAstRoot(compiler0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      assertNotNull(node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("[5,(5:XOU}F3(Uo gn");
      JsAst jsAst0 = new JsAst(sourceFile0);
      JsAst jsAst1 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      JsAst jsAst2 = new JsAst(sourceFile0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-53), (-2721));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SourceFile sourceFile1 = SourceFile.fromInputStream("[5,(5:XOU}F3(Uo gn", (InputStream) pushbackInputStream0);
      Node node0 = compiler0.parse(sourceFile1);
      assertEquals(4096, node0.getSourcePosition());
      assertNotNull(node0);
  }
}
