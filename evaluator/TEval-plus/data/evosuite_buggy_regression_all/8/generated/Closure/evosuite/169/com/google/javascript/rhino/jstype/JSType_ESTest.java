/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:35:34 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "fMZ=LJI82s'<m($u");
      errorFunctionType0.testForEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      boolean boolean0 = recordType0.isStringValueType();
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isResolved());
      assertFalse(boolean0);
      assertFalse(recordType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      boolean boolean0 = errorFunctionType0.matchesUint32Context();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType(", ", "Unknown class name", 1, 1273);
      JSType jSType1 = jSType0.autobox();
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNoObjectType());
      assertNotNull(jSType1);
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType(", ", "Unknown class name", 1, 1273);
      jSType0.getJSDocInfo();
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, recordType0, "Not declared as a type name");
      boolean boolean0 = enumElementType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType jSType0 = errorFunctionType0.collapseUnion();
      assertTrue(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2Ff9uUKIkr`3lPct`K");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Not declared as a type name");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.testForEquality(jSType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&,qO}", "Unknown class name", 1466, 1466);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "ML>ar<o/pqz");
      String string0 = enumElementType0.toAnnotationString();
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isAllType());
      assertEquals("&,qO}", string0);
      assertFalse(enumElementType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, allType0);
      boolean boolean0 = indexedType0.isNullable();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, (JSType) null);
      indexedType0.unboxesTo();
      assertFalse(indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
      boolean boolean0 = templateType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isArrayType();
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      allType0.setValidator(predicate0);
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isNumber();
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, false);
      JSType jSType0 = instanceObjectType0.getLeastSupertype(booleanType0);
      booleanType0.matchConstraint(jSType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
      boolean boolean0 = jSType0.hasProperty("Unknown class name");
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.isInstanceType();
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      boolean boolean0 = objectType0.isCheckedUnknownType();
      assertFalse(objectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      boolean boolean0 = templateType0.isTheObjectType();
      assertFalse(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isEnumType();
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(booleanType0);
      assertTrue(noType0.hasCachedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      boolean boolean0 = nullType0.isInvariant(jSType_TypePair0.typeA);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumElementType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isStringValueType());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.forceResolve(simpleErrorReporter0, objectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isResolved());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumElementType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isStringValueType());
      assertTrue(errorFunctionType1.isConstructor());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertTrue(errorFunctionType1.isObject());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isAllType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertNotNull(nullType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      nullType0.clearResolved();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      errorFunctionType0.testForEquality(noObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNullType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertTrue(errorFunctionType1.isFunctionType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isEnumType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertNotNull(errorFunctionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(errorFunctionType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNullType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertTrue(errorFunctionType1.isFunctionType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isEnumType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertNotSame(errorFunctionType0, errorFunctionType1);
      assertNotSame(errorFunctionType1, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.equals((Object)errorFunctionType1));
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertNotNull(booleanType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = enumElementType0.isStruct();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2Ff9uUKIkr`3lPct`K");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = enumElementType0.isStruct();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertNotNull(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = objectType0.isStruct();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.matchesStringContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertNotNull(nullType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.isDict();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.matchesStringContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertNotNull(unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = unknownType0.isDict();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType("Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertNotNull(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = objectType0.isDict();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noType0.isGlobalThisType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNominalType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumElementType());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNominalType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      errorFunctionType0.testForEquality(enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNominalType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNullType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertNotNull(recordType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(recordType0, errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertNotNull(nullType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertNull(parameterizedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertNotNull(unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertNull(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "fMZ=LJI82s'<m($u");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(functionType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalConstructor());
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType(", ", "Unknown class name", 1, 1273);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isFunctionType());
      assertEquals(", ", namedType0.getReferenceName());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isUnionType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isEnumType());
      assertNotNull(namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NamedType namedType1 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a type name", 1, 865);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Not declared as a constructor", namedType1.getReferenceName());
      assertFalse(namedType1.isAllType());
      assertFalse(namedType1.isNativeObjectType());
      assertFalse(namedType1.isNominalConstructor());
      assertFalse(namedType1.isInterface());
      assertFalse(namedType1.isNullType());
      assertFalse(namedType1.isOrdinaryFunction());
      assertFalse(namedType1.isNumberValueType());
      assertFalse(namedType1.isUnionType());
      assertTrue(namedType1.hasReferenceName());
      assertFalse(namedType1.isStringValueType());
      assertTrue(namedType1.isNominalType());
      assertFalse(namedType1.isNoType());
      assertFalse(namedType1.isNoObjectType());
      assertFalse(namedType1.hasCachedValues());
      assertFalse(namedType1.isVoidType());
      assertFalse(namedType1.isBooleanValueType());
      assertFalse(namedType1.isRecordType());
      assertFalse(namedType1.isConstructor());
      assertFalse(namedType1.isEnumType());
      assertFalse(namedType1.isFunctionPrototypeType());
      assertFalse(namedType1.isCheckedUnknownType());
      assertTrue(namedType1.isObject());
      assertFalse(namedType1.isResolved());
      assertFalse(namedType1.isNoResolvedType());
      assertFalse(namedType1.isFunctionType());
      assertFalse(namedType1.isParameterizedType());
      assertFalse(namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertFalse(namedType1.isEnumElementType());
      assertNotNull(namedType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(namedType1.equals((Object)namedType0));
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) namedType1, (JSType) namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isFunctionType());
      assertEquals(", ", namedType0.getReferenceName());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isUnionType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isEnumType());
      assertEquals("Not declared as a constructor", namedType1.getReferenceName());
      assertFalse(namedType1.isAllType());
      assertFalse(namedType1.isNativeObjectType());
      assertFalse(namedType1.isNominalConstructor());
      assertFalse(namedType1.isInterface());
      assertFalse(namedType1.isNullType());
      assertFalse(namedType1.isOrdinaryFunction());
      assertFalse(namedType1.isNumberValueType());
      assertFalse(namedType1.isUnionType());
      assertTrue(namedType1.hasReferenceName());
      assertFalse(namedType1.isStringValueType());
      assertTrue(namedType1.isNominalType());
      assertFalse(namedType1.isNoType());
      assertFalse(namedType1.isNoObjectType());
      assertFalse(namedType1.hasCachedValues());
      assertFalse(namedType1.isVoidType());
      assertFalse(namedType1.isBooleanValueType());
      assertFalse(namedType1.isRecordType());
      assertFalse(namedType1.isConstructor());
      assertFalse(namedType1.isEnumType());
      assertFalse(namedType1.isFunctionPrototypeType());
      assertFalse(namedType1.isCheckedUnknownType());
      assertTrue(namedType1.isObject());
      assertFalse(namedType1.isResolved());
      assertFalse(namedType1.isNoResolvedType());
      assertFalse(namedType1.isFunctionType());
      assertFalse(namedType1.isParameterizedType());
      assertFalse(namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertFalse(namedType1.isEnumElementType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isVoidType());
      assertNotNull(unknownType0);
      assertNotSame(namedType0, namedType1);
      assertNotSame(namedType1, namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(namedType0.equals((Object)namedType1));
      assertFalse(namedType1.equals((Object)namedType0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNumberValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertNotNull(nullType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("Unknown class name", "/3mS^OLV%;IcNW]E#c", 0, 473);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertEquals("Unknown class name", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isBooleanValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) nullType0, (JSType) namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNumberValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertEquals("Unknown class name", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isBooleanValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertNotNull(unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(namedType0, unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNumberValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertEquals("Unknown class name", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isBooleanValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertNotNull(parameterizedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noType0.equals(parameterizedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertNotNull(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertTrue(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertTrue(proxyObjectType0.isObject());
      assertTrue(proxyObjectType0.hasReferenceName());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertTrue(proxyObjectType0.isNominalType());
      assertNotNull(proxyObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Number");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(proxyObjectType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertTrue(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertTrue(proxyObjectType0.isObject());
      assertTrue(proxyObjectType0.hasReferenceName());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertTrue(proxyObjectType0.isNominalType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNumberValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertNotNull(nullType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(nullType0, (JSType) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNumberValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertNotNull(recordType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = recordType0.equals((Object) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertNotNull(booleanType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = booleanType0.findPropertyType("Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.canAssignTo(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertNotNull(recordType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noResolvedType0.canAssignTo(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.base.CharMatcher$6");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseAllType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      errorFunctionType0.testForEquality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&,qO}", "Unknown class name", 1466, 1466);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("&,qO}", namedType0.getReferenceName());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.isObject());
      assertTrue(namedType0.hasReferenceName());
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      errorFunctionType0.testForEquality(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("&,qO}", namedType0.getReferenceName());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.isObject());
      assertTrue(namedType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesObjectContext());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      booleanType0.testForEquality(noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isConstructor());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      booleanType0.testForEquality(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertNotNull(booleanType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      booleanType0.testForEquality(enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertNotNull(unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(unknownType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "fMZ=LJI82s'<m($u");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isRecordType());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)JSType.getLeastSupertype((JSType) enumElementType0, (JSType) enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isAllType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isRecordType());
      assertEquals("Unknown class name", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isBooleanValueType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isInterface());
      assertNotNull(enumElementType1);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertNotNull(jSType0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoObjectType noObjectType1 = (NoObjectType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType1.isNominalConstructor());
      assertTrue(noObjectType1.matchesNumberContext());
      assertFalse(noObjectType1.isEnumElementType());
      assertFalse(noObjectType1.isEnumType());
      assertFalse(noObjectType1.isVoidType());
      assertFalse(noObjectType1.isNominalType());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType1.getPropertiesCount());
      assertFalse(noObjectType1.isNullType());
      assertFalse(noObjectType1.isCheckedUnknownType());
      assertFalse(noObjectType1.isUnionType());
      assertTrue(noObjectType1.matchesStringContext());
      assertTrue(noObjectType1.isNoObjectType());
      assertFalse(noObjectType1.isStringValueType());
      assertFalse(noObjectType1.isBooleanValueType());
      assertFalse(noObjectType1.isNumberValueType());
      assertFalse(noObjectType1.isNoResolvedType());
      assertTrue(noObjectType1.hasCachedValues());
      assertTrue(noObjectType1.isConstructor());
      assertFalse(noObjectType1.isRecordType());
      assertTrue(noObjectType1.hasInstanceType());
      assertFalse(noObjectType1.isFunctionPrototypeType());
      assertFalse(noObjectType1.isReturnTypeInferred());
      assertFalse(noObjectType1.isResolved());
      assertTrue(noObjectType1.isObject());
      assertFalse(noObjectType1.isTemplateType());
      assertTrue(noObjectType1.matchesObjectContext());
      assertFalse(noObjectType1.isParameterizedType());
      assertFalse(noObjectType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType1.isOrdinaryFunction());
      assertNull(noObjectType1.getReferenceName());
      assertTrue(noObjectType1.canBeCalled());
      assertFalse(noObjectType1.isAllType());
      assertFalse(noObjectType1.isFunctionType());
      assertFalse(noObjectType1.isInterface());
      assertNotNull(noObjectType1);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertNotNull(booleanType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "a5=]");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      errorFunctionType0.testForEquality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertNotNull(booleanType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertNotNull(nullType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) booleanType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "-G#bqwhr#B");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = functionType0.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2Ff9uUKIkr`3lPct`K");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertTrue(objectType0.hasCachedValues());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertTrue(objectType0.hasCachedValues());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoObjectType noObjectType1 = (NoObjectType)JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) noObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noObjectType1.isRecordType());
      assertTrue(noObjectType1.canBeCalled());
      assertTrue(noObjectType1.hasCachedValues());
      assertFalse(noObjectType1.isFunctionPrototypeType());
      assertTrue(noObjectType1.hasInstanceType());
      assertNull(noObjectType1.getReferenceName());
      assertTrue(noObjectType1.isConstructor());
      assertFalse(noObjectType1.isInterface());
      assertFalse(noObjectType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType1.matchesObjectContext());
      assertTrue(noObjectType1.matchesStringContext());
      assertFalse(noObjectType1.isParameterizedType());
      assertTrue(noObjectType1.isNoObjectType());
      assertFalse(noObjectType1.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noObjectType1.getPropertiesCount());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertFalse(noObjectType1.isStringValueType());
      assertFalse(noObjectType1.isReturnTypeInferred());
      assertFalse(noObjectType1.isResolved());
      assertTrue(noObjectType1.matchesNumberContext());
      assertFalse(noObjectType1.isEnumType());
      assertFalse(noObjectType1.isVoidType());
      assertFalse(noObjectType1.isNominalType());
      assertFalse(noObjectType1.isNominalConstructor());
      assertFalse(noObjectType1.isUnionType());
      assertFalse(noObjectType1.isNoResolvedType());
      assertFalse(noObjectType1.isEnumElementType());
      assertFalse(noObjectType1.isAllType());
      assertFalse(noObjectType1.isBooleanValueType());
      assertFalse(noObjectType1.isNullType());
      assertFalse(noObjectType1.isOrdinaryFunction());
      assertFalse(noObjectType1.isNumberValueType());
      assertFalse(noObjectType1.isNoType());
      assertTrue(noObjectType1.isObject());
      assertFalse(noObjectType1.isCheckedUnknownType());
      assertNotNull(noObjectType1);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertNotNull(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(6, immutableList0.size());
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(6, immutableList0.size());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertNotNull(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isParameterizedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(6, immutableList0.size());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertNotNull(jSType0);
      assertSame(stringType0, jSType0);
      assertSame(jSType0, stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.isStringValueType());
      assertNotNull(stringType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.isStringValueType());
      assertEquals(6, immutableList0.size());
      assertNotNull(immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.isStringValueType());
      assertEquals(6, immutableList0.size());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertNotNull(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        unionType0.getTypesUnderInequality(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNominalType());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertNotNull(jSType_TypePair0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "fMZ=LJI82s'<m($u");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)errorFunctionType0.getReturnType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertNotNull(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      stringType0.testForEquality(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2Ff9uUKIkr`3lPct`K");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNullType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isBooleanValueType());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isEnumType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isParameterizedType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertNotNull(indexedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createOptionalType(indexedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isBooleanValueType());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isEnumType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isParameterizedType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isConstructor());
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNativeObjectType());
      assertNotNull(unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNativeObjectType());
      assertNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }
}
