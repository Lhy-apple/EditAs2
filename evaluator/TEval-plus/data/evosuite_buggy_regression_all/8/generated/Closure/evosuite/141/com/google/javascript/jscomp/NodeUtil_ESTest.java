/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:29:08 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.rhino.FunctionNode;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString("*F,e:e6 Y2M^G p:$U");
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("-p~//", 53, 53);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertEquals(53, node0.getCharno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals(53, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("udBsD>,y%-g", 1096, 47);
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertEquals(47, node0.getCharno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals(1096, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 20);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 65377);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(0);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = NodeUtil.newName("ngeError", node0, (String) null);
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, "/=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = NodeUtil.newQualifiedNameNode("u_o4)Aie\"!.", node0, "u_o4)Aie\"!.");
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
      assertEquals(33, node1.getType());
      assertTrue(node1.isUnscopedQualifiedName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(1400);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.isFunctionObjectApply(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(64336);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(130, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("$$constant", 143, 76);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: NAME $$constant 143
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((double) 96);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("BOOLEAN_OBJECT_FUNCTION_TYPE");
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(122, node0.getType());
      
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(60);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: ENUM_ID
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newName("8TY}#u}J]1m5v!", node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertEquals("8TY}#u}J]1m5v!", string0);
      assertTrue(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(75);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(0.48245998926747025);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("0.48245998926747025", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$7");
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("com.google.common.base.CharMatcher$7", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber((double) 47);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("47", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("-p~//", 9, 9);
      Node node1 = new Node(0, node0, (-6021), 243);
      String string0 = NodeUtil.getFunctionName(node1, node0);
      assertEquals(38, node0.getType());
      assertEquals(9, node0.getLineno());
      assertEquals(9, node0.getCharno());
      assertEquals("-p~//", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = Node.newString(29, "NUMBER ");
      node0.addChildrenToFront(node1);
      String string0 = NodeUtil.getFunctionName(node0, node0);
      assertEquals("NUMBER ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      String string0 = NodeUtil.getFunctionName(node0, node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("REFERENCE_ERROR_TYPE", 3584, 3584);
      Node node1 = new Node(29, node0, node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node1);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals(3584, node0.getCharno());
      assertEquals(3584, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber((double) 29, 108, 108);
      boolean boolean0 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString(41, "*", 37, (-1149));
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      boolean boolean0 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString(122, "j");
      Node node1 = new Node(37, node0, node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(63);
      boolean boolean0 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = node0.cloneNode();
      node0.addChildrenToFront(node1);
      boolean boolean0 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(9, node0, node0, node0);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(10, "-p~//");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(11);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = Node.newString(12, "?roSd|@R 2`s", 4, 1008);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(103, 116, (-1566));
      Node node1 = new Node((byte)16, node0, 25, 28);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(19, "mlD", 110, 9);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(20);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      Node node1 = new Node(21, node0, node0, node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(23, 23, 23);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node0 = Node.newString(35, "&O@MQD_f", 117, 28);
      Node node1 = new Node(28, node0, node0, node0);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(29, "NUMBER ");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.base.Predicates$InstanceOfPredicate", 25, 1713);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertEquals(33, node0.getType());
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals(25, node0.getLineno());
      assertEquals(1713, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString(34, "NaN", 2, 33);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString(122, "j");
      Node node1 = new Node(37, node0, node0);
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("mlD", (-41), (-41));
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("undefined");
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(43);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(44);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.base.CharMatcher$7", (-1030), (-1030));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(33, node0.getType());
      assertFalse(boolean0);
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("Boolean", 39, 39);
      Node node1 = new Node(34, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
      assertEquals(39, node0.getCharno());
      assertEquals(39, node0.getLineno());
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(35, 35, 146);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(36);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(39);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(45);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString(69, ">fl");
      Node node1 = new Node(48, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(50);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(54);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(55);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(60);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(66);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(67);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(71);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(72);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(75);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(76);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(78);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(79);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(80);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(81);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(84);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(85);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("NUMBE ", 16, 16);
      Node node1 = new Node(87, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(103, ")");
      Node node1 = new Node(90, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(91);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(93, 93, 93);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(96);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(99);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString(102, "1;", 85, 30);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(106);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(109);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(111);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(1134, 113, 3584);
      Node node1 = new Node(113, node0, 25, 49);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(114);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(115);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(116, "NUMBE ", 104, 113);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(117, "Invalid attempt to remove node: ");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(10, "-p~//");
      Node node1 = new Node(119, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(120);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString(123, "");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString(69, "-p~//");
      Node node1 = new Node(42, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(43);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(74, node0, node0, node0, node0, 26, 34);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(98);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("NUMBE ", 16, 16);
      Node node1 = new Node(100, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString((-306), "-r/G.H%xF");
      Node node1 = new Node(110, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = NodeUtil.newVarNode("-r/G.H%xF", node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasChildren());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(10, 10, 10);
      Node node1 = new Node(127, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(129, node0, 1, 8);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//");
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = new Node(114);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got DO
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(101);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected CALL node, got AND
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("mlD", (-41), (-41));
      Node node1 = new Node(86, node0, node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString(122, "j");
      Node node1 = new Node(37, node0, node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("Boolean", 96, 96);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(96, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(96, node0.getCharno());
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(122, "j");
      Node node1 = new Node(37, node0, node0);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("mlD", (-41), (-41));
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node1 = new Node(86, node0, node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = NodeUtil.precedence(4);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for eol (type 1)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for goto (type 5)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifeq (type 6)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifne (type 7)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setname (type 8)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = NodeUtil.precedence(13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for getvar (type 54)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(55);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setvar (type 55)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=58> (type 58)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(59);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=59> (type 59)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(61);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for thisfn (type 61)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = NodeUtil.precedence(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(68);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=68> (type 68)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=70> (type 70)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(72);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=72> (type 72)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(73);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=73> (type 73)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=76> (type 76)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for try (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for semi (type 78)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rb (type 80)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lc (type 81)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      int int0 = NodeUtil.precedence(83);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = NodeUtil.precedence(86);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = NodeUtil.precedence(87);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      int int0 = NodeUtil.precedence(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = NodeUtil.precedence(90);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int int0 = NodeUtil.precedence(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = NodeUtil.precedence(102);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = NodeUtil.precedence(105);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = NodeUtil.precedence(108);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int int0 = NodeUtil.precedence(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(123);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for reserved (type 123)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int int0 = NodeUtil.precedence(124);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(101);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(92);
      boolean boolean0 = NodeUtil.isAssignmentOp(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(123, "");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(1, "Named type with empty name component");
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("-r/G.H%xF", (-2672), 47);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExpressionNode(node1);
      assertEquals(33, node0.getType());
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(boolean0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("{...}", (-1372), (-1372));
      boolean boolean0 = NodeUtil.isGet(node0);
      assertTrue(node0.isQualifiedName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(102, "1;", 85, 30);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.base.Predicates$InstanceOfPredicate", 25, 1713);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
      assertEquals(25, node0.getLineno());
      assertEquals(1713, node0.getCharno());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      boolean boolean0 = NodeUtil.isNew(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = NodeUtil.newVarNode("-r/G.H%xF", node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("", 123, 123);
      Node node1 = new Node(123, node0, 21, 83);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(123, node0.getCharno());
      assertEquals(123, node0.getLineno());
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("mlD", (-41), (-41));
      Node node1 = new Node(86, node0, node0);
      Node node2 = NodeUtil.getAssignedValue(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("-p~//", 52, 52);
      node0.addChildAfter(node0, node0);
      NodeUtil.getAssignedValue(node0);
      assertEquals(52, node0.getCharno());
      assertEquals(52, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString(3584, "RLFERENCE_ERROR_TYPE", 3584, 536870912);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString("hile");
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("mlD", (-41), (-41));
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(2287);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprAssign(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 908, 908);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode(" ^*4?([#7", 152, 152);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprCall(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
      assertEquals(152, node1.getCharno());
      assertEquals(152, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(75);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(1134, 113, 3584);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(126);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString("-=", (-1), (-313));
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING -= does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(111, node0, 1, 112);
      Node node2 = NodeUtil.getConditionExpression(node1);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("", (-506), (-506));
      Node node1 = new Node(112, node0, node0, 8292, 33);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DEFAULT 8292 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: NEW -p~// 30 of NEW -p~// 30
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(76);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("Ogx'@{T", linkedList0, node0, 1, 732);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionDeclaration(functionNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(74, node0, node0, node0, node0, 26, 34);
      boolean boolean0 = NodeUtil.isFunctionAnonymous(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(111, node0, 1, 112);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = NodeUtil.newQualifiedNameNode("NaN", 111, (-1713));
      Node node1 = new Node(112, node0, node0, 28, (-966));
      nodeArray0[1] = node1;
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(nodeArray0[1], node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("", 123, 123);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
      assertEquals(123, node0.getLineno());
      assertEquals(123, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("Boolean", 77, 77);
      Node node1 = new Node(36, node0, node0, node0, node0, 22, 6);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertEquals(77, node0.getLineno());
      assertTrue(boolean0);
      assertEquals(77, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      Node node1 = NodeUtil.newVarNode("NUMBE ", node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.base.CharMatcher$7", (-1030), (-1030));
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node(89);
      boolean boolean0 = NodeUtil.isCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString(30, "-p~//", 30, 30);
      Node node1 = new Node(37, node0, (-2844), 1);
      boolean boolean0 = NodeUtil.isCall(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList1);
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("mlD", linkedList0, node0, (-1629), 1072);
      boolean boolean0 = NodeUtil.isFunction(functionNode0);
      assertTrue(boolean0);
      assertEquals("mlD", functionNode0.getFunctionName());
      assertEquals((-1), functionNode0.getLineno());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString(2, "}]q)<gS", (-811), (-811));
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString("SUB");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(89);
      boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(76, (-513), (-513));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode(" : ", linkedList0, node0, (-1), 41);
      // Undeclared exception!
      try { 
        NodeUtil.isAnonymousFunction(functionNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = NodeUtil.newVarNode("G1HC+", node0);
      boolean boolean0 = NodeUtil.isLhs(node1, node1);
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(75);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(53);
      Node node1 = Node.newString("undefined");
      boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(9);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(10);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = NodeUtil.opToStr(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = NodeUtil.opToStr(21);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(29);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 35: GETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(45);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 54: GETVAR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Integer integer0 = new Integer(59);
      String string0 = NodeUtil.opToStr((int) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 60: ENUM_ID
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(63);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 63: ARRAYLIT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = NodeUtil.opToStr(72);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 74: REF_NS_MEMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 75: REF_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 76: REF_NS_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = NodeUtil.opToStr(81);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = NodeUtil.opToStr(82);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = NodeUtil.opToStr(83);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 85: COMMA
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = NodeUtil.opToStr(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = NodeUtil.opToStr(89);
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = NodeUtil.opToStr(91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = NodeUtil.opToStr(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = NodeUtil.opToStr(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = NodeUtil.opToStr(99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 103: DEC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 104: DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 106: EXPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 107: IMPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 110: SWITCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 112: DEFAULT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 113: WHILE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = NodeUtil.opToStr(114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 115: FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = NodeUtil.opToStr(116);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 117: CONTINUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 118: VAR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 119: WITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = NodeUtil.opToStr(120);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = NodeUtil.opToStr(121);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = NodeUtil.opToStr(307);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = NodeUtil.newVarNode("-r/G.H%xF", node0);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.base.CharMatcher$7", (-1030), (-1030));
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("mlD", (-41), 274);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.add(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("t>|V", linkedList0, node0, 21, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("uT;S@8#~F,{tv\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("assign_add");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("while");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("mlD", (-41), 274);
      NodeUtil.getVarsDeclaredInBranch(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = NodeUtil.newVarNode("-r/G.H%xF", node0);
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      NodeUtil.redeclareVarsInsideBranch(node1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode(".prototype.", 140, (-1283));
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = new Node(67, 67, 67);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("REFERENCE_ERROR_TYPE", 3584, 3584);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
      assertEquals(3584, node0.getCharno());
      assertEquals(3584, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("setvar", (Node) null);
      assertEquals(118, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("-p~//", 52, 52);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "j");
      assertEquals(52, node0.getLineno());
      assertEquals(52, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(103);
      Node node0 = Node.newString(103, ")");
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNodeType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("-p~//", 52, 52);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(5);
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
      assertEquals(52, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(52, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(111, node0, 1, 112);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, ">fl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("ddJ)QTlheO", 105, 81);
      Node node1 = new Node((-31), node0, node0, node0);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "ddJ)QTlheO");
      assertTrue(boolean0);
      assertEquals(81, node0.getCharno());
      assertEquals(105, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2));
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNodeType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(110);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString(117, "Invalid attempt to remove node: ");
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = Node.newNumber((-1040.93774));
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("-5Q!", linkedList0, node0, 3, (-3));
      Node node1 = NodeUtil.getFnParameters(functionNode0);
      assertEquals("-5Q!", functionNode0.getFunctionName());
      assertEquals((-1), functionNode0.getLineno());
      assertEquals(83, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = new Node(1134, 113, 3584);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = new Node(1134, 113, 3584);
      Node node1 = new Node(113, node0, 25, 49);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = NodeUtil.newVarNode("-r/G.H%xF", node0);
      assertTrue(node1.hasOneChild());
      
      node1.addChildrenToFront(node1);
      NodeUtil.getInfoForNameNode(node1);
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$StringPosition");
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }
}
