/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 02:11:53 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("Qd", sourceFile_Generator0);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=e[vB", "=e[vB");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromGenerator((String) null, (SourceFile.Generator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=e[vB", "=e[vB");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("1RD,=`", "1RD,=`", "1RD,=`");
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromReader("RD,=`", (Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.CharStreams", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Nm/y&", "com.google.javascript.jscomp.SourceFile$Preloaded");
      File file0 = MockFile.createTempFile("Nm/y&", "I9:4&b~Tn", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion(1765);
      assertNull(region0);
      
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile("Nm/y&");
      sourceFile0.clearCachedSource();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("index", "index");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.getCodeNoCache();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascript.jscomp.SourceFile$Preloaded", "com.google.javascript.jscomp.SourceFile$Preloaded");
      sourceFile_Preloaded0.getName();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I9:4&b~Tn");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("UTF-16BE", "UTF-16BE", "UTF-16BE");
      assertFalse(sourceFile_Preloaded0.isExtern());
      
      sourceFile_Preloaded0.setIsExtern(true);
      assertTrue(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile("com.google.javascript.jscomp.SourceFile$Preloaded");
      sourceFile0.toString();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        SourceFile.fromInputStream("\n", "\n", (InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("\n");
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        SourceFile.fromFile("", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("&", "&", "&");
      sourceFile_Preloaded0.getNumLines();
      sourceFile_Preloaded0.getLineOffset(1);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Nm/y&", "com.google.javascript.jscomp.SourceFile$Preloaded");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      // Undeclared exception!
      try { 
        sourceFile_OnDisk0.getLineOffset(1765);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 1765
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("H", "Nm/y&", "\nActual: ");
      // Undeclared exception!
      try { 
        sourceFile_Preloaded0.getLineOffset((-834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 2
         // Actual: -834
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("MziD2.ql-bH,", "?kV-8zo;:ZdIAo{", "?kV-8zo;:ZdIAo{");
      sourceFile_Preloaded0.getNumLines();
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("?kV-8zo;:ZdIAo{", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=e[vB", "=e[vB");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      String string0 = sourceFile_OnDisk0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("com.google.common.io.Closeables", (InputStream) sequenceInputStream0);
      String string0 = sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
      assertEquals("com.google.common.io.Closeables", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b2X>jhf$F[");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      try { 
        sourceFile_OnDisk0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("index", "index");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.getLine((-2195));
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      String string0 = sourceFile_Preloaded0.getLine(3135);
      assertNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n", "\n");
      String string0 = sourceFile_Preloaded0.getLine((-367));
      assertNotNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      Region region0 = sourceFile_Preloaded0.getRegion(3082);
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Nm/y&/Nm/y&0I9:4&b~Tn");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.google.javascript.jscomp.SourceFile$Preloaded");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Nm/y&");
      MockFile mockFile0 = new MockFile("Nm/y&");
      File file0 = MockFile.createTempFile("Nm/y&", "I9:4&b~Tn", (File) mockFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "I9:4&b~Tn");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.google.javascript.jscomp.SourceFile$Preloaded");
      Region region0 = sourceFile_OnDisk0.getRegion(2);
      assertEquals("com.google.javascript.jscomp.SourceFile$Preloaded\nNm/y&\n\nI9:4&b~Tn\ncom.google.javascript.jscomp.SourceFile$Preloaded\n", region0.getSourceExcerpt());
      assertEquals(6, region0.getEndingLineNumber());
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertNotNull(region0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Nm/y&/Nm/y&0I9:4&b~Tn");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.google.javascript.jscomp.SourceFile$Preloaded");
      MockFile mockFile0 = new MockFile("Nm/y&");
      File file0 = MockFile.createTempFile("Nm/y&", "I9:4&b~Tn", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion((-1315));
      assertEquals("com.google.javascript.jscomp.SourceFile$Preloaded", region0.getSourceExcerpt());
      assertEquals(1, region0.getBeginningLineNumber());
      assertNotNull(region0);
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertEquals(2, region0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("(,DM").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("=ev", sourceFile_Generator0);
      sourceFile_Generated0.getCodeReader();
      Region region0 = sourceFile_Generated0.getRegion((-8));
      assertFalse(sourceFile_Generated0.isExtern());
      assertNotNull(region0);
      assertEquals(1, region0.getEndingLineNumber());
      assertEquals("(,DM", region0.getSourceExcerpt());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile("?9y", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, (Charset) null);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }
}
