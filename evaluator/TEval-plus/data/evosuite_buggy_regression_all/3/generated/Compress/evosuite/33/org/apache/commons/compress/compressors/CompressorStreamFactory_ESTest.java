/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:28:40 GMT 2023
 */

package org.apache.commons.compress.compressors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompressorStreamFactory_ESTest extends CompressorStreamFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      boolean boolean0 = compressorStreamFactory0.getDecompressConcatenated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      compressorStreamFactory0.setDecompressConcatenated(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.setDecompressConcatenated(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot override the setting defined by the constructor
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Compressor found for the stream signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4218), (-4218));
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((String) null, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CompressorInputStream compressorInputStream0 = compressorStreamFactory0.createCompressorInputStream("deflate", (InputStream) pipedInputStream0);
      assertEquals(0L, compressorInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("z", (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4245), (-4245));
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      try { 
        compressorStreamFactory0.createCompressorInputStream("gz", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("bzip2", (InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1669, 12);
      try { 
        compressorStreamFactory0.createCompressorInputStream("xz", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("lzma", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("pack200", (InputStream) mockFileInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CompressorInputStream compressorInputStream0 = compressorStreamFactory0.createCompressorInputStream("snappy-raw", (InputStream) byteArrayInputStream0);
      assertEquals(1L, compressorInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("snappy-framed", (InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("z", (InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4257), (-4257));
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      try { 
        compressorStreamFactory0.createCompressorInputStream("org.apache.commons.compress.compressors.FileNameUtil", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: org.apache.commons.compress.compressors.FileNameUtil not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G~drxVbmTU1Q", false);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream((String) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      compressorStreamFactory0.createCompressorOutputStream("deflate", pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("%K!*;204E!=nnMjPgw", (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("gz", byteArrayOutputStream0);
      assertNotNull(compressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("pack200", byteArrayOutputStream0);
      compressorStreamFactory0.createCompressorOutputStream("bzip2", compressorOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xz", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("xz", filterOutputStream0);
      assertNotNull(compressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lzma", true);
      try { 
        compressorStreamFactory0.createCompressorOutputStream("z", mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: z not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }
}
