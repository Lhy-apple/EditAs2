/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:30:03 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(60012);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
      tarArchiveOutputStream0.getCount();
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 14);
      tarArchiveOutputStream0.setBigNumberMode(2);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("_UXC.U'#P$)xy%BNAv");
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "_UXC.U'#P$)xy%BNAv", map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(60012);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
      int int0 = tarArchiveOutputStream0.getRecordSize();
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 120, "cp437");
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField");
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      tarArchiveOutputStream0.setLongFileMode(114);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile(" - ", " - ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      tarArchiveOutputStream0.finish();
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(120);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 120);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(objectOutputStream0);
      tarArchiveOutputStream0.finish();
      try { 
        tarArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(120);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertNotNull(filterOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 120);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(objectOutputStream0);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("user id", true);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertNotNull(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("user id", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("user id", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      
      try { 
        tarArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archives contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile(" - ", " - ");
      assertNotNull(file0);
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 958);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      tarArchiveOutputStream0.close();
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1024L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1024, tarArchiveOutputStream0.getCount());
      assertEquals(1024L, tarArchiveOutputStream0.getBytesWritten());
      
      tarArchiveOutputStream0.close();
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1024L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1024, tarArchiveOutputStream0.getCount());
      assertEquals(1024L, tarArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile(" - ", " - ");
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(" - 0 - ", file0.getName());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      
      tarArchiveOutputStream0.close();
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(10240L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(10240L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(10240, tarArchiveOutputStream0.getCount());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertNotNull(tarArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(10240L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("tmp/ - 0 - ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(10240L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, " - ", map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 14);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      
      tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("_UXC.U'#P$)xy%BNAv");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertNotNull(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("_UXC.U'#P$)xy%BNAv", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "_UXC.U'#P$)xy%BNAv", map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile(" - ", " - ");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(" - 0 - ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.canExecute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(" - 0 - ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertNotNull(tarArchiveEntry0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(" - 0 - ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("tmp/ - 0 - ", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // request to write '637' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/'
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertFalse(tarArchiveOutputStream1.equals((Object)tarArchiveOutputStream0));
      assertNotNull(tarArchiveOutputStream1);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, tarArchiveOutputStream1.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream1.getCount());
      assertEquals(512, tarArchiveOutputStream1.getRecordSize());
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(120);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertNotNull(filterOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 120);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(objectOutputStream0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("user id", true);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertNotNull(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("user id", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "YCTr4Av%PG5Tn[", hashMap0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("user id", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.writePaxHeaders((TarArchiveEntry) null, "central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length ", map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("./PaxHeaders.X/", "./PaxHeaders.X/");
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/./PaxHeaders.X/0.", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/./PaxHeaders.X/0./PaxHeaders.X", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("PaxHeaders.X", file0.getName());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/./PaxHeaders.X/0.", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/./PaxHeaders.X/0./PaxHeaders.X", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("PaxHeaders.X", file0.getName());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertNotNull(tarArchiveEntry0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/./PaxHeaders.X/0.", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/./PaxHeaders.X/0./PaxHeaders.X", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("PaxHeaders.X", file0.getName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("tmp/./PaxHeaders.X/0./PaxHeaders.X", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "./PaxHeaders.X/", map0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/./PaxHeaders.X/0.", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(1536L, file0.length());
      assertEquals("/tmp/./PaxHeaders.X/0./PaxHeaders.X", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("PaxHeaders.X", file0.getName());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1536, tarArchiveOutputStream0.getCount());
      assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("tmp/./PaxHeaders.X/0./PaxHeaders.X", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("do9%O9]Ri.%AK%f", false);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertNotNull(tarArchiveEntry0);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("do9%O9]Ri.%AK%f", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "do9%O9]Ri.%AK%f", map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      MockFile mockFile0 = new MockFile("d0-", "");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry)tarArchiveOutputStream0.createArchiveEntry(mockFile0, "d0-");
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertNotNull(tarArchiveEntry0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertFalse(mockFile0.exists());
      assertEquals("/data/lhy/TEval-plus/d0-", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/data/lhy/TEval-plus", mockFile0.getParent());
      assertEquals("d0-", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("d0-", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile(" - ", " - ");
      assertNotNull(file0);
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 958);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      
      tarArchiveOutputStream0.close();
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(" - 0 - ", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1024L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/ - 0 - ", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1024L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(1024, tarArchiveOutputStream0.getCount());
      
      try { 
        tarArchiveOutputStream0.createArchiveEntry(file0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertNotNull(tarArchiveOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)111);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertNotNull(tarArchiveEntry0);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      
      tarArchiveEntry0.setModTime((-1000L));
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
