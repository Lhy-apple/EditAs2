/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:30:00 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", string0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("%@=r!d?e", (byte) (-89), true);
      long long0 = tarArchiveEntry0.getSize();
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertEquals("%@=r!d?e", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("windows", "windows");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "windows");
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(33188, int0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("windows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("-<&C;Dw");
      tarArchiveEntry0.setIds(4187, 4187);
      assertEquals(4187, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", false);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("]T~;o/");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.getOrDefault(tarArchiveEntry0, "]T~;o/");
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isFIFO());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", false);
      tarArchiveEntry0.setLinkName("");
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("netware");
      tarArchiveEntry0.setNames("netware", "netware");
      assertEquals("netware", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/CP850", (byte)54, false);
      tarArchiveEntry0.setName("/CP850");
      assertTrue(tarArchiveEntry0.isFIFO());
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("@&BAJzZ Ihf^2l", true);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, int0);
      assertEquals("@&BAJzZ Ihf^2l", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Major devic: nmber is out Af range: ");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("%@=r!d?e", (byte) (-89), true);
      tarArchiveEntry0.isCheckSumOK();
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("%@=r!d?e", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|B.", ";c7\u0005bX=iFwA+Z(");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("data/lhy/TEval-plus/|B./;c7\u0005bX=iFwA+Z(", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("GNU.sparse.size", "8:f JU7[");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("tmp/GNU.sparse.size08:f JU7[", tarArchiveEntry0.getName());
      assertEquals(0, int0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4t( ", (byte)0);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("4t( ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, long0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("maKO`-gcb");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "maKO`-gcb");
      tarArchiveEntry0.isExtended();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("maKO`-gcb", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, ";c7\u0005bX=iFwA+Z(");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(";c7\u0005bX=iFwA+Z(", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("(S*/^", (byte)59, false);
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("(S*/^", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("", string0);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("FumC@");
      MockDate mockDate0 = new MockDate();
      tarArchiveEntry0.setModTime((Date) mockDate0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("FumC@", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";c7\u0005bX=iFwA+Z(", "qk6/W");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("data/lhy/TEval-plus/;c7\u0005bX=iFwA+Z(/qk6/W", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("sMDaHh>3jH3.", (byte)32, false);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals("sMDaHh>3jH3.", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, int0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, int0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4t( ", (byte)0);
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("4t( ", tarArchiveEntry0.getName());
      assertEquals("", string0);
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/hh9`V<=;[XJx");
      tarArchiveEntry0.setMode(1000);
      assertEquals(1000, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" is too large for ");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$~57tw0?q-$|1-9g\"1", true);
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals("$~57tw0?q-$|1-9g\"1", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("1/S4D}5k-uM=", (byte)103, true);
      tarArchiveEntry0.setModTime(606L);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("1/S4D}5k-uM=", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isGlobalPaxHeader());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(".");
      Date date0 = tarArchiveEntry0.getLastModifiedDate();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(".", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$~57tw0?q-$|1-9g\"1", true);
      tarArchiveEntry0.getFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("$~57tw0?q-$|1-9g\"1", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.tar.TarArchiveEntry/");
      MockFile.createTempFile("org.apache.commons.compress.archivers.tar.TarArchiveEntry/", "org.apache.commons.compress.archivers.tar.TarArchiveEntry/", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.tar.TarArchiveEntry/");
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry/", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("@&BAJzZ Ihf^2l");
      boolean boolean0 = tarArchiveEntry0.equals((Object) null);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("@&BAJzZ Ihf^2l", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|B.", ";c7\u0005bX=iFwA+Z(");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.equals((Object) mockFile0);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("data/lhy/TEval-plus/|B./;c7\u0005bX=iFwA+Z(", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" ");
      tarArchiveEntry0.setSize(1000);
      assertEquals(1000L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" ");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((-5629L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -5629
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",}@");
      tarArchiveEntry0.setDevMajor(8);
      assertEquals(8, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",}n");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-1337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -1337
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)34);
      tarArchiveEntry0.setDevMinor((byte)34);
      assertEquals(34, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/++Ca}cGNAm9$m$\"}ji");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((-95));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -95
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Cp850");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals("Cp850", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Length ", (byte)75, true);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Length ", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/4t( ");
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertEquals("4t( ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("d", (byte)76);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("d", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("t", (byte)120, false);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals("t", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\"0l@A2t{gnnJ", (byte)88, true);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("\"0l@A2t{gnnJ", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|");
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals("|", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|B.", ";c7\u0005bX=iFwA+Z(");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals("data/lhy/TEval-plus/|B./;c7\u0005bX=iFwA+Z(", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("1/S4D}5k-uM=", (byte)103, true);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals("1/S4D}5k-uM=", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n CL/", (byte)92);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertTrue(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isFile());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertFalse(tarArchiveEntry0.isSparse());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n C");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "n C");
      tarArchiveEntry0.isDirectory();
      assertEquals("n C", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8>uwV/", (byte)53, false);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|B.", (byte)51, true);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertTrue(tarArchiveEntry0.isCharacterDevice());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(boolean0);
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("|B.", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("t", (byte)0, true);
      tarArchiveEntry0.isFile();
      assertEquals("t", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("windows", "windows");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "windows");
      tarArchiveEntry0.isFile();
      assertEquals("windows", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("tar\u0000/", (byte) (-78));
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/4t( ", true);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("/4t( ", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/4t( ", (byte)7, true);
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals("/4t( ", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertFalse(tarArchiveEntry0.isCharacterDevice());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("t", false);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("t", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|B.", (byte)50, true);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("|B.", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",}@");
      tarArchiveEntry0.isLink();
      assertEquals(",}@", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r", (byte)49);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals("r", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("[:~oCcw", (byte)33);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("[:~oCcw", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|B.", (byte)51, true);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals("|B.", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("tar\u0000/", (byte) (-78));
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(boolean0);
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|B.", (byte)52, true);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("|B.", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/CP850", (byte)54, false);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertTrue(boolean0);
      assertEquals("CP850", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8?K4<zE+@,R6gM_", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("8?K4<zE+@,R6gM_", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", false);
      assertFalse(tarArchiveEntry0.isSparse());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillStarSparseData(map0);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|B.", (byte)51, true);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals("|B.", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|B.", ";c7\u0005bX=iFwA+Z(");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("data/lhy/TEval-plus/|B./;c7\u0005bX=iFwA+Z(", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(">^jsA;p%]jg>2!:7fgD", true);
      hashMap0.put("SCHILY.realsize", "SCHILY.realsize");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SCHILY.realsize\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
