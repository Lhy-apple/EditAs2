/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:36:24 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.time.DayOfWeek;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.reader((JavaType) simpleType0);
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Throwable> class0 = Throwable.class;
      ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      simpleType0.getGenericSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      simpleType0.getErasedSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Class<Object> class1 = Object.class;
      JavaType javaType0 = simpleType0.widenBy(class1);
      assertFalse(simpleType0.useStaticType());
      assertFalse(javaType0.equals((Object)simpleType0));
      assertNotSame(javaType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      boolean boolean0 = mapType0.useStaticType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getContentType();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      simpleType0.isFinal();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType javaType0 = simpleType0.narrowBy(class0);
      assertSame(javaType0, simpleType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Throwable> class1 = Throwable.class;
      JavaType javaType0 = simpleType0.forcedNarrowBy(class1);
      assertNotSame(javaType0, simpleType0);
      assertFalse(javaType0.equals((Object)simpleType0));
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<Object> class0 = Object.class;
      JavaType javaType0 = simpleType0.forcedNarrowBy(class0);
      assertSame(javaType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Class<ObjectReader> class1 = ObjectReader.class;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      CollectionType collectionType1 = collectionType0.withValueHandler(dayOfWeek0);
      JavaType javaType0 = collectionType1.forcedNarrowBy(class1);
      assertFalse(javaType0.equals((Object)collectionType0));
      assertFalse(collectionType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      JavaType javaType0 = mapType0.widenBy(class0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, mapType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) simpleType0);
      assertFalse(simpleType0.useStaticType());
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) simpleType0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct(simpleType0, object0, object0);
      boolean boolean0 = arrayType0.hasGenericTypes();
      assertFalse(boolean0);
      assertFalse(arrayType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class0 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Class<?> class1 = collectionType0.getParameterSource();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      boolean boolean0 = arrayType0.hasGenericTypes();
      assertTrue(boolean0);
      assertFalse(arrayType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<ClassKey> class0 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
      ArrayType arrayType0 = ArrayType.construct(collectionLikeType0, collectionLikeType0, simpleType0);
      JavaType javaType0 = arrayType0.containedTypeOrUnknown(0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JavaType javaType0 = simpleType0.containedTypeOrUnknown(7);
      assertNotNull(javaType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<LongNode> class0 = LongNode.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        simpleType0.narrowBy(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not assignable to com.fasterxml.jackson.databind.node.LongNode
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }
}
