/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:41:40 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionLikeType_ESTest extends CollectionLikeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      String string0 = collectionLikeType0.getErasedSignature();
      assertEquals("Ljava/lang/String;", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      String string0 = collectionLikeType0.toString();
      assertEquals("[collection-like type; class com.fasterxml.jackson.databind.type.ArrayType, contains [simple type, class java.lang.Object]]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class0 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler("com.fasterxml.jackson.databind.type.CollectionType<java.lang.Object>");
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertTrue(collectionLikeType1.isFinal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      Object object0 = collectionLikeType0.getContentValueHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class0);
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      Object object0 = collectionType0.getContentTypeHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      Class<Object> class0 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      JavaType javaType1 = collectionLikeType0.refine(class0, (TypeBindings) null, javaType0, javaTypeArray0);
      assertFalse(javaType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      String string0 = collectionLikeType0.getGenericSignature();
      assertEquals("Lcom/fasterxml/jackson/databind/type/ReferenceType<Ljava/lang/Object;>;", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(class0);
      assertFalse(collectionLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionType> class1 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler("com.fasterxml.jackson.databind.type.CollectionType<com.fasterxml.jackson.databind.type.CollectionLikeType<com.fasterxml.jackson.databind.type.CollectionType>>");
      assertFalse(collectionLikeType1.isFinal());
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeFactory typeFactory0 = TypeFactory.instance;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionLikeType0);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      assertFalse(collectionLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(simpleType0);
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class0 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<Object> class1 = Object.class;
      collectionLikeType0._narrow(class1);
      assertFalse(collectionLikeType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionType> class1 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      JavaType javaType0 = collectionLikeType0.withContentType(collectionLikeType0);
      assertNotSame(javaType0, collectionLikeType0);
      assertFalse(javaType0.equals((Object)collectionLikeType0));
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionType0);
      JavaType javaType0 = collectionLikeType0.withContentType(collectionType0);
      assertEquals(1, javaType0.containedTypeCount());
      assertSame(javaType0, collectionLikeType0);
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionType> class1 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withStaticTyping();
      assertTrue(collectionLikeType2.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType2.isFinal());
      assertTrue(collectionLikeType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) mapLikeType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler((Object) null);
      CollectionType collectionType2 = collectionType1.withTypeHandler(typeFactory0);
      CollectionType collectionType3 = collectionType2.withContentValueHandler(collectionType0);
      CollectionType collectionType4 = collectionType3.withStaticTyping();
      CollectionType collectionType5 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType4);
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType5.hasHandlers());
      assertFalse(collectionType5.equals((Object)collectionType2));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionType> class1 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      Class<LinkedList> class2 = LinkedList.class;
      typeFactory0.constructCollectionType((Class<? extends Collection>) class2, (JavaType) collectionLikeType0);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class2, (JavaType) collectionLikeType0);
      assertFalse(collectionLikeType1.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType0.isFinal());
      assertEquals(1, collectionLikeType1.containedTypeCount());
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, (-3174));
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      String string0 = collectionLikeType0.buildCanonicalName();
      assertEquals("com.fasterxml.jackson.databind.type.CollectionLikeType", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      String string0 = collectionLikeType0.toCanonical();
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$Id<com.fasterxml.jackson.annotation.JsonTypeInfo$Id>", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      boolean boolean0 = collectionType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = typeFactory0.constructRawCollectionType(class0);
      boolean boolean0 = collectionType0.equals(collectionType1);
      assertFalse(boolean0);
      assertFalse(collectionType1.hasHandlers());
  }
}
