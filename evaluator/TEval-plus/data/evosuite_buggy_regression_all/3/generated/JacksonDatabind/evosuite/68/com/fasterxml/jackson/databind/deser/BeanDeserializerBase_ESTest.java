/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:43:08 GMT 2023
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.deser.impl.ValueInjector;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanDeserializerBase_ESTest extends BeanDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      try { 
        objectReader0.readValue(jsonParser0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of com.fasterxml.jackson.databind.deser.AbstractDeserializer out of START_ARRAY token
         //  at [Source: java.lang.String@0000000110; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeatureArray0[1];
      mapperFeatureArray0[3] = mapperFeatureArray0[0];
      mapperFeatureArray0[4] = mapperFeatureArray0[1];
      mapperFeatureArray0[5] = mapperFeature0;
      mapperFeatureArray0[6] = mapperFeatureArray0[2];
      MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[7] = mapperFeature1;
      mapperFeatureArray0[8] = mapperFeatureArray0[3];
      objectMapper0.disable(mapperFeatureArray0);
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      Class<ManagedReferenceProperty> class1 = ManagedReferenceProperty.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      Integer integer0 = new Integer(0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ValueNode valueNode0 = arrayNode0.numberNode(integer0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(valueNode0);
      Class<ValueInjector> class1 = ValueInjector.class;
      try { 
        objectMapper0.readValue(jsonParser0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (VALUE_NUMBER_INT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class com.fasterxml.jackson.databind.deser.impl.ValueInjector
         //  at [Source: java.lang.String@0000000110; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      FloatNode floatNode0 = FloatNode.valueOf((-1.0F));
      Class<PropertyBasedObjectIdGenerator> class1 = PropertyBasedObjectIdGenerator.class;
      try { 
        objectReader0.treeToValue((TreeNode) floatNode0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator: no double/Double-argument constructor/factory method to deserialize from Number value (-1.0)
         //  at [Source: java.lang.String@0000000110; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
