/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:37:55 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.lang.reflect.Type;
import java.time.chrono.HijrahEra;
import java.util.EnumSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDelegatingSerializer_ESTest extends StdDelegatingSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Converter<String, DOMSerializer> converter0 = (Converter<String, DOMSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(converter0).toString();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<String, ?>) converter0);
      Converter<Object, ?> converter1 = stdDelegatingSerializer0.getConverter();
      assertNotNull(converter1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any(com.fasterxml.jackson.databind.ser.BeanSerializer.class));
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stdDelegatingSerializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("62hP`{+2FF8F8^O\"");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serializeWithType(mapLikeType0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter<Integer, BeanSerializer> converter0 = (Converter<Integer, BeanSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.getDelegatee();
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any(com.fasterxml.jackson.databind.ser.BeanSerializer.class));
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty(serializerProvider0, (Object) jsonFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter<CoreXMLSerializers.XMLGregorianCalendarSerializer, ObjectReader> converter0 = (Converter<CoreXMLSerializers.XMLGregorianCalendarSerializer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumSet> class0 = EnumSet.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any(com.fasterxml.jackson.databind.ser.BeanSerializer.class));
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty((Object) dOMSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter<Object, StdDelegatingSerializer> converter0 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, arrayType0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      stdDelegatingSerializer0.resolve(defaultSerializerProvider_Impl0);
      assertFalse(stdDelegatingSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter1 = (Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer(converter1, mapLikeType0, stdDelegatingSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
      assertFalse(stdDelegatingSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter<Object, StdDelegatingSerializer> converter0 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, arrayType0, (JsonSerializer<?>) null);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter<Object, StdDelegatingSerializer> converter0 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, arrayType0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Converter<Object, HijrahEra> converter1 = (Converter<Object, HijrahEra>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, arrayType0, stdDelegatingSerializer0);
      JsonSerializer<?> jsonSerializer1 = stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
      assertNotSame(stdDelegatingSerializer0, jsonSerializer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      Converter<Object, DOMSerializer> converter0 = (Converter<Object, DOMSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn(dOMSerializer0).when(converter0).convert(any());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      Object object0 = new Object();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize(object0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Converter<Integer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<Integer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<BeanSerializer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter1 = (Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer(converter1, mapLikeType0, stdDelegatingSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      assertNull(jsonNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Converter<Object, DOMSerializer> converter0 = (Converter<Object, DOMSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<StdDelegatingSerializer> class0 = StdDelegatingSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      Converter<Object, Integer> converter1 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, mapLikeType0, stdDelegatingSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapType0, true);
      assertNull(jsonNode0.numberType());
  }
}
