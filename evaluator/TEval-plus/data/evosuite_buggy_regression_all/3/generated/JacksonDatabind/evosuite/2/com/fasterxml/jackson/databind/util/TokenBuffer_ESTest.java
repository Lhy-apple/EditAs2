/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:38:41 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextLength();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      FloatNode floatNode0 = FloatNode.valueOf(0);
      tokenBuffer_Segment0.append(0, jsonToken0, (Object) floatNode0, (Object) objectMapper0);
      tokenBuffer0.canWriteBinaryNatively();
      JsonParser jsonParser0 = tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonParser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._first;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.serialize(tokenBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      tokenBuffer_Parser0.getText();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer0._append(jsonToken0, jsonToken0);
      tokenBuffer0._typeId = (Object) bigInteger1;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger2 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: entry should be a Number, but is of type com.fasterxml.jackson.core.JsonToken
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      try { 
        tokenBuffer_Parser0._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      FloatNode.valueOf(16);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      tokenBuffer0.canWriteObjectId();
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer_Segment0.findObjectId(0);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Byte byte0 = new Byte((byte)6);
      tokenBuffer0._append(jsonToken0, byte0);
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      LongNode longNode0 = LongNode.valueOf((byte)6);
      tokenBuffer1.writeTree(longNode0);
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      boolean boolean0 = tokenBuffer0.canWriteObjectId();
      assertFalse(boolean0);
      
      tokenBuffer_Parser0.getTextCharacters();
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, int0);
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getTextCharacters();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.isTextual();
      Long long0 = new Long(16);
      objectNode0.put((String) null, long0);
      jsonNodeFactory0.objectNode();
      Double double0 = new Double(1.0);
      ObjectNode objectNode1 = objectNode0.put(" does not have build method '", double0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ObjectNode objectNode2 = objectNode1.remove((Collection<String>) set0);
      Float float0 = new Float(1.0);
      ObjectNode objectNode3 = objectNode2.put("", float0);
      ObjectNode objectNode4 = objectNode3.putNull("RI0MtngoF@ s~");
      objectNode4.has(16);
      tokenBuffer0.writeTree(objectNode4);
      tokenBuffer_Segment0.rawType(16);
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer0.canWriteObjectId();
      String string0 = "";
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer_Parser0.getTextCharacters();
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(41, jsonToken0, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      boolean boolean0 = tokenBuffer_Parser0.canReadObjectId();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.KOREAN;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      // Undeclared exception!
      try { 
        tokenBuffer0._reportUnsupportedOperation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BigDecimal bigDecimal0 = new BigDecimal((-242.67));
      tokenBuffer0.toString();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      tokenBuffer_Segment0.append(16, jsonToken0, (Object) deserializationFeature0, (Object) "[TokenBuffer: ]", (Object) "[TokenBuffer: ]");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.firstToken();
      tokenBuffer0.setFeatureMask(16);
      assertEquals(16, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      FloatNode floatNode0 = FloatNode.valueOf(16);
      tokenBuffer_Segment0.append(0, jsonToken0, (Object) floatNode0, (Object) objectMapper0);
      assertTrue(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      Float float0 = new Float((-907.61835F));
      tokenBuffer0.writeEndArray();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser1.getEmbeddedObject();
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeNumber((-1038L));
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeString("");
      tokenBuffer1.writeNumber("");
      tokenBuffer0.version();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer1.writeNumber(bigInteger0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Float float0 = new Float((-905.91174F));
      tokenBuffer0.writeEndArray();
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumberField((String) null, 2286.075F);
      tokenBuffer0._hasNativeId = true;
      Float float0 = new Float((-905.91174F));
      assertEquals((-905.91174F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0._typeId = (Object) bigInteger0;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.next();
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.serialize(tokenBuffer1);
      BigInteger bigInteger1 = BigInteger.TEN;
      tokenBuffer0.version();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.toString();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer1.writeObjectId(tokenBuffer_Segment0);
      tokenBuffer_Segment0.append(861, jsonToken0, (Object) "[TokenBuffer: ]", (Object) null, (Object) null);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.firstToken();
      tokenBuffer1.setFeatureMask(861);
      assertEquals(861, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      tokenBuffer0.canWriteObjectId();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("K8b*k-~|", 0, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping1 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping1, "Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
      ObjectReader objectReader0 = objectMapper3.readerWithView(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      SerializedString serializedString0 = new SerializedString("JSON");
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(1636, jsonToken0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer0.writeEndObject();
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object object0 = tokenBuffer0._objectId;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2489, jsonToken0, (Object) null, (Object) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer_Segment1);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, int0);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNull();
      tokenBuffer0.version();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer0.writeEndObject();
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValue();
      tokenBuffer0.writeNumber(bigInteger0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qsy6");
      Float float0 = new Float((float) 1L);
      tokenBuffer0.writeEndArray();
      JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer0.enable(jsonGenerator_Feature0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.asParser();
      tokenBuffer0.writeString((String) null);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeString("JSON");
      tokenBuffer0.toString();
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      deserializationFeatureArray0[3] = deserializationFeature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      objectMapper2.enable(serializationFeature0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.close();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.next();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      tokenBuffer0.writeNumber(bigInteger1);
      tokenBuffer0.getFeatureMask();
      tokenBuffer0.getOutputContext();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BigDecimal bigDecimal0 = new BigDecimal((-242.67));
      tokenBuffer0.toString();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.firstToken();
      JsonGenerator jsonGenerator0 = tokenBuffer0.setFeatureMask(16);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString((char[]) null, 3795, (-1347));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      tokenBuffer_Segment0.append((-1275), jsonToken0, (Object) "JSON", (Object) tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = new BigDecimal(16);
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer1.writeNumberField("JSON", (-389.479));
      tokenBuffer1.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.canWriteObjectId();
      String string0 = "";
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.writeStartArray();
      tokenBuffer1.writeEndObject();
      tokenBuffer1.writeString("");
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextLength();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      FloatNode floatNode0 = FloatNode.valueOf(0);
      tokenBuffer_Segment0.append(0, jsonToken0, (Object) floatNode0, (Object) objectMapper0);
      tokenBuffer_Parser0.isClosed();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextLength();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      objectMapper0.enable(serializationFeature0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('j');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Double double0 = new Double(16);
      injectableValues_Std0.addValue("#oOy`'", (Object) double0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      Double double1 = new Double((-9.223372036854776E18));
      ObjectNode objectNode1 = objectNode0.put("#oOy`'", (-907.22F));
      Double double2 = new Double(2449.556963);
      ObjectNode objectNode2 = objectNode1.put("#oOy`'", double2);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ObjectNode objectNode3 = objectNode2.remove((Collection<String>) set0);
      Float float0 = new Float((double) 16);
      Float float1 = new Float((-954.6447268));
      objectNode0.put("", float1);
      ObjectNode objectNode4 = objectNode3.putNull("k|+==!F|0");
      objectNode0.has(16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeTree(objectNode4);
      tokenBuffer_Segment0.rawType((-1311));
      try { 
        jsonParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.appendRaw(16, 16, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextLength();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      FloatNode floatNode0 = FloatNode.valueOf(0);
      tokenBuffer_Segment0.append(0, jsonToken0, (Object) floatNode0, (Object) objectMapper0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken0, tokenBuffer_Segment0);
      tokenBuffer0.writeNumber((long) 16);
      tokenBuffer_Segment0.next();
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("Unexpected character (");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValue();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer0._append(jsonToken0, jsonToken0);
      tokenBuffer0._typeId = (Object) bigInteger1;
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized value type for VALUE_NUMBER_FLOAT: com.fasterxml.jackson.core.JsonToken, can not serialize
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0);
      Integer integer0 = new Integer(566);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      Float float0 = new Float((-3005.12F));
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = tokenBuffer1.disable(jsonGenerator_Feature0);
      tokenBuffer0.serialize(jsonGenerator0);
      BigInteger bigInteger1 = BigInteger.TEN;
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[4] = mapperFeature4;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper4 = objectMapper3.setSubtypeResolver(stdSubtypeResolver0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4);
      tokenBuffer0.isClosed();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      objectMapper0.writeTree((JsonGenerator) tokenBuffer0, (TreeNode) objectNode0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._last;
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer1._append(jsonToken0, "oYBZ*\u0002PA/QhEGU");
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer2.serialize(tokenBuffer1);
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oYBZ*\u0002PA/QhEGU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      Float float0 = new Float((-907.61835F));
      tokenBuffer0.writeEndArray();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser1.getEmbeddedObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      jsonGeneratorDelegate0.getCodec();
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      try { 
        tokenBuffer_Parser1.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      tokenBuffer0.canWriteObjectId();
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer0.writeNumber((short)41);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer0.canWriteObjectId();
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer0.version();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer_Parser0.configure(jsonParser_Feature1, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer_Parser0.nextToken();
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.append(tokenBuffer0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = true;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BigDecimal bigDecimal0 = new BigDecimal((double) 16);
      tokenBuffer0.toString();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((-1301), jsonToken0, (Object) injectableValues_Std0, (Object) "[TokenBuffer: ]", (Object) jsonToken0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      Integer integer0 = new Integer(16);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.peekNextToken();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      tokenBuffer0._appendRaw(1, jsonParser_Feature0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      boolean boolean0 = true;
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-849), (-849), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -849
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      int int0 = (-1275);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      tokenBuffer0.useDefaultPrettyPrinter();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(320, 320, (Object) serializedString0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.getTextLength();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      FloatNode.valueOf(0.0F);
      tokenBuffer_Segment1.append(10, jsonToken0, (Object) null, (Object) serializedString0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger1 = BigInteger.TEN;
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeObjectFieldStart("");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getObjectId();
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._first;
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.writeEndObject();
      tokenBuffer1.writeString("");
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append((-1275), jsonToken0, (Object) "JSON", (Object) tokenBuffer_Parser0);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.writeEndObject();
      tokenBuffer0.writeString((String) null);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(class0, (Object) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.next();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector1);
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(annotationIntrospector0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader0, true, false);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      jsonFactory0.disable(jsonGenerator_Feature0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getValueAsLong((long) 16);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      objectMapper0.setDateFormat(dateFormat0);
      Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
      tokenBuffer_Parser0.readValuesAs(class0);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer0.writeBoolean(true);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("E\"!n?ZZR|0tDI5~`[r", 1266, 1266);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeBoolean(true);
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      tokenBuffer0.canWriteObjectId();
      tokenBuffer_Parser0.overrideCurrentName("");
      tokenBuffer_Parser0.getTextCharacters();
      int int0 = tokenBuffer0._generatorFeatures;
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValue();
      tokenBuffer0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      tokenBuffer0._append(jsonToken0, jsonToken0);
      tokenBuffer0.writeObject(bigInteger1);
      tokenBuffer0._typeId = (Object) bigInteger0;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.JsonToken cannot be cast to java.lang.Number
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Double double0 = new Double(16);
      injectableValues_Std0.addValue("#oOy`'", (Object) double0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeFieldName("#oOy`'");
      Float float0 = new Float((float) 16);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.writeEndObject();
      tokenBuffer1.writeString("");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer1.isEnabled(jsonGenerator_Feature0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      tokenBuffer0.writeTypeId(jsonParser_Feature0);
      tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
      FloatNode floatNode0 = FloatNode.valueOf(16);
      floatNode0.asLong();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNull();
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '#';
      charArray0[2] = 'q';
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue(charArray0, 56320, 56320);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.appendRaw(16, 16, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      FloatNode floatNode0 = FloatNode.valueOf(16);
      tokenBuffer_Segment0.append(0, jsonToken0, (Object) floatNode0, (Object) objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.writeEndObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeString("_^kmo");
      tokenBuffer_Parser0.version();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNull();
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeString("");
      tokenBuffer0.toString();
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer2.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(class0, (Object) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (byte)12, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken0, tokenBuffer_Segment0);
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumberField("", 584);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer1.writeEndArray();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.writeEndObject();
      tokenBuffer2.writeString(" from Boolean value (");
      tokenBuffer2.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer2._first;
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BigDecimal bigDecimal0 = new BigDecimal(3309.7097);
      objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.firstToken();
      tokenBuffer0.setFeatureMask(16);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0._location = null;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment1.append(41, jsonToken0, (Object) null, (Object) objectMapper0);
      FloatNode floatNode0 = FloatNode.valueOf(16);
      tokenBuffer_Segment0.append(0, jsonToken0, (Object) floatNode0, (Object) objectMapper0);
      tokenBuffer0.canWriteObjectId();
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      tokenBuffer_Parser0.getParsingContext();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      Float float0 = new Float((-493.79895F));
      tokenBuffer1.writeEndArray();
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer2.writeEndObject();
      tokenBuffer1.writeString("nZXIs0vE");
      tokenBuffer2.version();
      tokenBuffer_Parser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      Long long0 = new Long(1636);
      tokenBuffer0._appendRaw(1636, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer0._append(jsonToken0, bigInteger1);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.serialize(tokenBuffer1);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer1.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      tokenBuffer0._append(jsonToken0, jsonToken0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.JsonToken cannot be cast to java.lang.Number
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BigDecimal bigDecimal0 = new BigDecimal((-242.67));
      injectableValues_Std0.addValue("", (Object) bigDecimal0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      InjectableValues.Std injectableValues_Std1 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0);
      Integer integer0 = new Integer(16);
      tokenBuffer_Parser0.peekNextToken();
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.configure(jsonGenerator_Feature0, true);
      tokenBuffer1._appendRaw(343, (Object) null);
      tokenBuffer1._hasNativeId = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger1 = BigInteger.TEN;
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2302, 16, (Object) jsonFactory0, (Object) objectMapper0, (Object) tokenBuffer0);
      tokenBuffer_Segment1.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.setCodec(objectMapper0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.ZERO;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Long long0 = new Long(16);
      tokenBuffer0._append(jsonToken0, long0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger2 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BigDecimal bigDecimal0 = new BigDecimal((-242.67));
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer0._append(jsonToken0, injectableValues_Std0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)6;
      // Undeclared exception!
      try { 
        tokenBuffer1.writeUTF8String(byteArray0, (byte) (-126), 1687);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      tokenBuffer0._append(jsonToken0, "oYBZ*\u0002PA/QhEGU");
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer1);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'm';
      charArray0[2] = ':';
      charArray0[3] = 'R';
      charArray0[4] = 'L';
      charArray0[5] = 'y';
      charArray0[6] = '>';
      charArray0[7] = '~';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, (-4236), (-4236));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      Integer integer0 = new Integer(1443);
      tokenBuffer_Segment0.appendRaw(5, 821, (Object) jsonParser_Feature0, (Object) jsonParser_Feature0, (Object) integer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      objectMapper0.reader(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) null, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      tokenBuffer0.canWriteObjectId();
      JsonGenerator jsonGenerator0 = tokenBuffer0.setHighestNonEscapedChar(45);
      tokenBuffer0.serialize(jsonGenerator0);
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(tokenBuffer_Parser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber((BigInteger) null);
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonToken jsonToken1 = JsonToken.END_ARRAY;
      tokenBuffer0._append(jsonToken1, jsonToken0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.serialize(tokenBuffer1);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer1.writeNumber(bigDecimal0);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken0, tokenBuffer_Segment0);
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer0);
      tokenBuffer_Parser0.close();
      jsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeString((SerializableString) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0.canWriteObjectId();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeString((SerializableString) null);
      tokenBuffer1.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.nextValue();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append((-1275), jsonToken0, (Object) "JSON", (Object) tokenBuffer_Parser0);
      tokenBuffer_Parser0.getEmbeddedObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0, (Object) null);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      tokenBuffer_Segment1.next();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer0.append(tokenBuffer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      objectMapper0.reader((InjectableValues) injectableValues_Std0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.nextValue();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append((-1275), jsonToken0, (Object) "JSON", (Object) tokenBuffer_Parser0);
      tokenBuffer_Parser0.getEmbeddedObject();
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer0._append(jsonToken1, (Object) null);
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer1);
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      tokenBuffer0._append(jsonToken0, tokenBuffer_Segment0);
      tokenBuffer_Segment0.next();
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeObjectFieldStart("");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      Float float0 = new Float(0.0F);
      tokenBuffer1.writeEndArray();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.nextValue();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer1.writeBoolean(false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNull();
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.toString();
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer2.firstToken();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndObject();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      Byte byte0 = new Byte((byte)100);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      Long.getLong("tQ$q.");
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0, (Object) objectMapper0, (Object) null, (Object) "tQ$q.");
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
      tokenBuffer_Parser1.getTextLength();
      tokenBuffer_Segment0.append(63, jsonToken0, (Object) byte0, (Object) jsonToken0);
      tokenBuffer_Parser1.close();
      tokenBuffer_Parser0.nextToken();
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (END_ARRAY) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      tokenBuffer_Segment0.appendRaw(0, 648, (Object) jsonParser_Feature0, (Object) null, (Object) tokenBuffer0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      Float float0 = new Float((float) 0);
      tokenBuffer0.writeEndArray();
      BigDecimal bigDecimal0 = new BigDecimal(1972);
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      tokenBuffer2.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Float float0 = new Float((-406.0425F));
      tokenBuffer0.writeEndArray();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      tokenBuffer_Segment0.appendRaw(0, 648, (Object) jsonParser_Feature0, (Object) null, (Object) tokenBuffer0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      Float float0 = new Float(2909.953F);
      tokenBuffer0.writeEndArray();
      BigDecimal bigDecimal0 = new BigDecimal(15);
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.append(tokenBuffer0);
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      JsonGenerator jsonGenerator0 = tokenBuffer1.setHighestNonEscapedChar(16);
      tokenBuffer0.serialize(jsonGenerator0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer1.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken0, tokenBuffer_Segment0);
      tokenBuffer_Segment0.next();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-8);
      tokenBuffer1.writeBinaryField("!Bl", byteArray0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      tokenBuffer_Parser2.nextToken();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Long long0 = new Long(16);
      tokenBuffer0._append(jsonToken0, long0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Segment0.append(5, jsonToken0, (Object) serializedString0, (Object) serializedString1, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer0.canWriteObjectId();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.writeNumber(2159.4F);
      tokenBuffer1.writeString((SerializableString) null);
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      tokenBuffer_Segment0.appendRaw(0, 648, (Object) jsonParser_Feature0, (Object) null, (Object) tokenBuffer0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SimpleModule simpleModule0 = new SimpleModule();
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, false);
      Float float0 = new Float(1178.3441F);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeEndArray();
      BigDecimal bigDecimal0 = new BigDecimal(1972);
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper1, true);
      TokenBuffer tokenBuffer3 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer3.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.nextValue();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[2] = mapperFeature2;
      objectMapper0.disable(mapperFeatureArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      Integer integer0 = new Integer((-1275));
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValue();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0, "L+S={zYI");
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.serialize(tokenBuffer1);
      BigInteger bigInteger2 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer0.append(tokenBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-116);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer0._append(jsonToken0, jsonParser0);
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.serialize(tokenBuffer2);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.nextToken();
      tokenBuffer_Parser0.close();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      try { 
        tokenBuffer_Parser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000649; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeNumber(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      Long long0 = new Long(16);
      tokenBuffer0._append(jsonToken0, long0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer0._append(jsonToken0, "oYBZ*\u0002PA/QhEGU");
      tokenBuffer_Segment0.next();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oYBZ*\u0002PA/QhEGU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumberField("JSON", (long) 16);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.nextValue();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer_Segment0.append((-1275), jsonToken0, (Object) objectMapper0, (Object) tokenBuffer_Parser0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, true);
      tokenBuffer_Parser1.getEmbeddedObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      Byte byte0 = new Byte((byte)81);
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(byte0, (Object) null);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectReader0, false);
      TokenBuffer tokenBuffer3 = tokenBuffer2.append(tokenBuffer0);
      tokenBuffer3.firstToken();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-7), (byte) (-35));
      tokenBuffer0._append(jsonToken0, byteArrayInputStream0);
      tokenBuffer_Segment0.next();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }
}
