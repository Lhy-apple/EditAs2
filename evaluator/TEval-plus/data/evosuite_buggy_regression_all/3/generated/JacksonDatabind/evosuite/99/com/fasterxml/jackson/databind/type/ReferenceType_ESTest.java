/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:44:31 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[6];
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null, (Object) resolvedRecursiveType0, (Object) javaTypeArray0[1]);
      ReferenceType referenceType0 = new ReferenceType(arrayType0, javaTypeArray0[1]);
      // Undeclared exception!
      try { 
        referenceType0.refine(class0, (TypeBindings) null, javaTypeArray0[2], javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertSame(javaType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class int<int<[simple type, class int]>]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      StringBuilder stringBuilder0 = new StringBuilder("kgt+[u<Yt[S;%L&zgK+");
      StringBuilder stringBuilder1 = referenceType0.getErasedSignature(stringBuilder0);
      assertEquals("kgt+[u<Yt[S;%L&zgK+Ljava/lang/Comparable;", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Class<ArrayType> class0 = ArrayType.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0._narrow(class0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.hasContentType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      // Undeclared exception!
      try { 
        ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(referenceType0, referenceType0, referenceType0);
      StringBuilder stringBuilder0 = new StringBuilder("kgt+[u<Yt[S;%L&zgK+");
      mapType0.getGenericSignature(stringBuilder0);
      assertEquals("kgt+[u<Yt[S;%L&zgK+Ljava/lang/Comparable<Ljava/lang/Comparable<Ljava/lang/Comparable;>;Ljava/lang/Comparable<Ljava/lang/Comparable;>;>;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[7];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1424);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapType0);
      JavaType javaType0 = referenceType0.getAnchorType();
      assertNotNull(javaType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      JavaType javaType0 = referenceType0.getContentType();
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(referenceType0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(referenceType0);
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(simpleType0);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(simpleType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1349));
      ReferenceType referenceType1 = referenceType0.withValueHandler(placeholderForType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1349));
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(placeholderForType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      MapType mapType0 = new MapType(referenceType0, referenceType1, referenceType0);
      mapType0.withStaticTyping();
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertNotSame(referenceType0, referenceType1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[7];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1424);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(placeholderForType0);
      boolean boolean0 = referenceType1.isAnchorType();
      assertFalse(boolean0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isAnchorType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1349));
      boolean boolean0 = referenceType0.equals(placeholderForType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(arrayType0, referenceType0);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertTrue(referenceType1.isAbstract());
      assertFalse(boolean0);
  }
}
