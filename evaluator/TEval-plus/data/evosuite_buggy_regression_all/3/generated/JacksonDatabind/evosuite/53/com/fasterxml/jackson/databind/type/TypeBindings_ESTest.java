/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:40:35 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeBindings_ESTest extends TypeBindings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeBindings.TypeParamStash typeBindings_TypeParamStash0 = new TypeBindings.TypeParamStash();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Collection> class0 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      JavaType[] javaTypeArray0 = collectionType0.findTypeParameters(class0);
      assertEquals(1, javaTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      typeBindings0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) simpleType0);
      TypeBindings typeBindings1 = (TypeBindings)typeBindings0.readResolve();
      assertEquals(1, typeBindings1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<TypeBindings> class0 = TypeBindings.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      vector0.add((JavaType) null);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class com.fasterxml.jackson.databind.type.TypeBindings with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      assertEquals(0, typeBindings0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Collection with 0 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaType[] javaTypeArray0 = new JavaType[2];
      Class<Collection> class0 = Collection.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Collection with 2 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Collection> class0 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionType0);
      assertFalse(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Map with 1 type parameter: class expects 2
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded(class0, javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertEquals(0, typeBindings0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded(class0, (JavaType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not create TypeBindings for class java.util.Collection with 0 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("(8DRnBqAL");
      TypeBindings typeBindings2 = typeBindings1.withUnboundVariable("(8DRnBqAL");
      assertNotSame(typeBindings2, typeBindings0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.instance;
      typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      resolvedRecursiveType0.setReference(simpleType0);
      TypeFactory typeFactory0 = TypeFactory.instance;
      typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      String string0 = typeBindings0.getBoundName((-4033));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      String string0 = typeBindings0.getBoundName(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      Class<TypeBindings> class1 = TypeBindings.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class0, (JavaType) collectionType0);
      String string0 = typeBindings1.getBoundName(0);
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType javaType0 = simpleType0.containedTypeOrUnknown((-3447));
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType[] javaTypeArray0 = new JavaType[2];
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      javaTypeArray0[0] = (JavaType) simpleType0;
      Class<Collection> class0 = Collection.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0[0]);
      JavaType javaType0 = typeBindings0.getBoundType(0);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeBindings0.getBoundType(2617);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("(8DRBqAL");
      boolean boolean0 = typeBindings1.hasUnbound("(8DRBqAL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("Can not create TypeBindings for class ");
      boolean boolean0 = typeBindings1.hasUnbound(" with ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      String string0 = typeBindings0.toString();
      assertEquals("<Ljava/lang/Enum;>", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      String string0 = typeBindings0.toString();
      assertEquals("<>", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      boolean boolean0 = typeBindings0.equals(resolvedRecursiveType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      boolean boolean0 = typeBindings0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("(8DRBqAL");
      Object object0 = typeBindings1.readResolve();
      boolean boolean0 = typeBindings1.equals(object0);
      assertNotSame(object0, typeBindings1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class0, (JavaType) resolvedRecursiveType0);
      boolean boolean0 = typeBindings1.equals(typeBindings0);
      assertFalse(boolean0);
      assertFalse(typeBindings0.equals((Object)typeBindings1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) simpleType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("(8DXRnqAL");
      boolean boolean0 = typeBindings1.equals(typeBindings0);
      assertTrue(boolean0);
  }
}
