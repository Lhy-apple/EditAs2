/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:39:24 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UntypedObjectDeserializer_ESTest extends UntypedObjectDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
      ObjectMapper objectMapper0 = new ObjectMapper();
      IntNode intNode0 = new IntNode((-3357));
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer0, untypedObjectDeserializer_Vanilla0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
      JsonDeserializer<?> jsonDeserializer0 = untypedObjectDeserializer0.instance._withResolved(untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer_Vanilla0);
      assertNotSame(untypedObjectDeserializer0, jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      JsonDeserializer<Object> jsonDeserializer0 = untypedObjectDeserializer0.instance._clearIfStdImpl((JsonDeserializer<Object>) null);
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectNode objectNode1 = objectNode0.put((String) null, boolean0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = arrayNode0.addRawValue((RawValue) null);
      JsonParser jsonParser0 = arrayNode1.traverse();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.mapArray(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putPOJO("JSON", (Object) null);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.mapArray(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
      ObjectMapper objectMapper0 = new ObjectMapper();
      UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer1.mapArrayToArray(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(untypedObjectDeserializer_Vanilla0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer_Vanilla0, untypedObjectDeserializer0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer1.mapArrayToArray(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TextNode textNode0 = TextNode.valueOf("JSON");
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(textNode0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer1.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Class<Integer> class0 = Integer.class;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, class0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, asExternalTypeDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParser jsonParser1 = arrayNode0.traverse();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser1, jsonParser0);
      jsonParserSequence0.nextToken();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      untypedObjectDeserializer0.mapArray(jsonParser1, defaultDeserializationContext_Impl0);
      untypedObjectDeserializer_Vanilla0.mapObject(jsonParserSequence0, defaultDeserializationContext_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Class<Integer> class0 = Integer.class;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, class0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, asExternalTypeDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Long long0 = new Long(2057L);
      arrayNode0.add(long0);
      ArrayNode arrayNode1 = arrayNode0.addRawValue((RawValue) null);
      JsonParser jsonParser0 = arrayNode1.traverse();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.mapArray(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectNode objectNode0 = arrayNode0.addObject();
      ObjectNode objectNode1 = objectNode0.put((String) null, boolean0);
      objectNode1.put("", (-36.96F));
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        untypedObjectDeserializer0.mapObject(jsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of java.lang.Object out of null token
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = UntypedObjectDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectNode objectNode1 = objectNode0.put((String) null, boolean0);
      hashMap0.put("uGsFAV|&Y/ZDj", objectNode1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ObjectNode objectNode2 = objectNode0.put("", bigDecimal0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode2);
      // Undeclared exception!
      untypedObjectDeserializer0.mapArray(jsonParser0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Double double0 = new Double((-2797.28229967));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("JSON", (-2797.28229967));
      Long long0 = new Long((-2124L));
      ObjectNode objectNode2 = objectNode1.put("' (", long0);
      objectNode2.put("", double0);
      Float float0 = new Float((float) (-2124L));
      objectNode1.put("pkxO,=jEdG@2; +>", float0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.mapArray(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      jsonParserSequence0.nextToken();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      Object[] objectArray0 = untypedObjectDeserializer0.mapArrayToArray(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
      ObjectMapper objectMapper0 = new ObjectMapper();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, jsonDeserializer0, jsonDeserializer0, jsonDeserializer0, untypedObjectDeserializer_Vanilla0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      Object[] objectArray0 = untypedObjectDeserializer1.mapArrayToArray(jsonParser0, deserializationContext0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      jsonParserSequence0.nextToken();
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0.mapArray(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0.mapArrayToArray(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0.deserializeWithType(jsonParser0, deserializationContext0, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
