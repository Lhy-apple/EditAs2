/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:46:18 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, mockSimpleDateFormat0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(calendarSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        calendarSerializer0.serialize(calendar0, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null SerializerProvider passed for java.util.Calendar
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, mockSimpleDateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = calendarSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);
      assertSame(calendarSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = calendarSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Boolean boolean0 = Boolean.valueOf("QY4C\"j_uI'd5dS#n");
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      DateSerializer dateSerializer0 = new DateSerializer(boolean0, stdDateFormat0);
      JsonNode jsonNode0 = dateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 772);
      Class<?> class1 = coreXMLDeserializers_Std0.handledType();
      JsonNode jsonNode0 = dateSerializer0.getSchema(serializerProvider0, (Type) class1, false);
      assertFalse(jsonNode0.isFloat());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        calendarSerializer0.serialize(calendar0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      calendarSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, placeholderForType0, true);
      assertFalse(calendarSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, mockSimpleDateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Calendar calendar0 = MockCalendar.getInstance();
      CalendarSerializer calendarSerializer1 = calendarSerializer0.withFormat(boolean0, (DateFormat) null);
      // Undeclared exception!
      try { 
        calendarSerializer1.serialize(calendar0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, mockSimpleDateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Calendar calendar0 = MockCalendar.getInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      calendarSerializer0.serialize(calendar0, (JsonGenerator) filteringGeneratorDelegate0, (SerializerProvider) defaultSerializerProvider_Impl0);
      calendarSerializer0.serialize(calendar0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
  }
}
