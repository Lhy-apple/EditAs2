/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:37:23 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.MapSerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.Writer;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<StdArraySerializers.IntArraySerializer> class0 = StdArraySerializers.IntArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
      JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer1);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<StdArraySerializers.FloatArraySerializer> class0 = StdArraySerializers.FloatArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((Map) null).when(pOJOPropertiesCollector0).getInjectables();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, beanSerializerBuilder0, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
      assertFalse(beanSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<StdArraySerializers.IntArraySerializer> class0 = StdArraySerializers.IntArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[0];
      BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, (BeanSerializerBuilder) null, beanPropertyWriterArray0, beanPropertyWriterArray0);
      beanSerializer0.resolve(defaultSerializerProvider_Impl0);
      assertFalse(beanSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanSerializer0.resolve(defaultSerializerProvider_Impl0);
      assertFalse(beanSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)MapSerializer.UNSPECIFIED_TYPE;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
      boolean boolean0 = beanSerializer0.usesObjectId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<StdArraySerializers.FloatArraySerializer> class0 = StdArraySerializers.FloatArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Integer integer0 = new Integer(389);
      ArrayType arrayType0 = ArrayType.construct(simpleType0, integer0, integer0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(arrayType0);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, (PropertyName) null, (ObjectIdGenerator<?>) null, true);
      BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
      boolean boolean0 = beanSerializerBase0.usesObjectId();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<StdArraySerializers.IntArraySerializer> class0 = StdArraySerializers.IntArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      beanSerializer0.serializeWithType(typeFactory0, jsonGenerator0, defaultSerializerProvider_Impl0, asWrapperTypeSerializer0);
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeSerializer0.getTypeInclusion());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StdArraySerializers.ShortArraySerializer stdArraySerializers_ShortArraySerializer0 = new StdArraySerializers.ShortArraySerializer();
      JavaType javaType0 = stdArraySerializers_ShortArraySerializer0.getContentType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) javaType0);
      assertEquals(2, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<StdArraySerializers.IntArraySerializer> class0 = StdArraySerializers.IntArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
      assertFalse(simpleType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<StdArraySerializers.IntArraySerializer> class0 = StdArraySerializers.IntArraySerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
  }
}
