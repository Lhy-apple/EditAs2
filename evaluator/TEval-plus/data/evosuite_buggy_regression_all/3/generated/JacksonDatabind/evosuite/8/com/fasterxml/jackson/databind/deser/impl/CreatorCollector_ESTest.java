/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:36:43 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorCollector_ESTest extends CreatorCollector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
      creatorCollector0.addLongCreator((AnnotatedWithParams) null, true);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      creatorCollector0.addLongCreator((AnnotatedWithParams) null);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      // Undeclared exception!
      try { 
        creatorCollector0.verifyNonDup((AnnotatedWithParams) null, 190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 190
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, true);
      creatorCollector0.addIntCreator((AnnotatedWithParams) annotatedConstructor0);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      creatorCollector0.addIntCreator((AnnotatedWithParams) null, false);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, false);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
      CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[1];
      creatorCollector0.addDelegatingCreator((AnnotatedWithParams) annotatedConstructor0, creatorPropertyArray0);
      // Undeclared exception!
      try { 
        creatorCollector0.constructValueInstantiator((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      creatorCollector0.addBooleanCreator((AnnotatedWithParams) null);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, false);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
      creatorCollector0.setDefaultCreator(annotatedConstructor0);
      boolean boolean0 = creatorCollector0.hasDefaultCreator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
      // Undeclared exception!
      try { 
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, (CreatorProperty[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, false);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      creatorCollector0.addDoubleCreator((AnnotatedWithParams) annotatedConstructor0);
      ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator((DeserializationConfig) null);
      assertTrue(valueInstantiator0.canCreateFromBoolean());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
      creatorCollector0.addStringCreator((AnnotatedWithParams) null);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
      creatorCollector0.addDoubleCreator((AnnotatedWithParams) null, true);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(858);
      boolean boolean0 = creatorCollector_Vanilla0.canCreateUsingDefault();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(858);
      boolean boolean0 = creatorCollector_Vanilla0.canInstantiate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, false);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
      creatorCollector0.verifyNonDup(annotatedConstructor0, 6, true);
      // Undeclared exception!
      try { 
        creatorCollector0.constructValueInstantiator((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, false);
      ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator((DeserializationConfig) null);
      assertFalse(valueInstantiator0.canCreateFromLong());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, false);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
      CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[1];
      PropertyName propertyName0 = PropertyName.construct("!C&t<d(KB ", "!C&t<d(KB ");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter(annotatedConstructor0, javaType0, annotationMap0, (-4168));
      Integer integer0 = new Integer((-4168));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(false, "!C&t<d(KB ", integer0, "!C&t<d(KB ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 56319, creatorCollector0, propertyMetadata0);
      creatorPropertyArray0[0] = creatorProperty0;
      creatorCollector0.addDelegatingCreator((AnnotatedWithParams) annotatedConstructor0, creatorPropertyArray0);
      // Undeclared exception!
      try { 
        creatorCollector0.constructValueInstantiator((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[0];
      creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, creatorPropertyArray0);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2365, creatorCollector0, (PropertyMetadata) null);
      CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[5];
      creatorPropertyArray0[0] = creatorProperty0;
      creatorPropertyArray0[1] = creatorProperty0;
      creatorPropertyArray0[2] = creatorProperty0;
      creatorPropertyArray0[3] = creatorProperty0;
      creatorPropertyArray0[4] = creatorProperty0;
      creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, creatorPropertyArray0);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1, (Object) null, (PropertyMetadata) null);
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      PropertyName propertyName1 = new PropertyName("(3R`5", "com.fasterxml.jackson.core.sym.Name1");
      CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[9];
      CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName1);
      creatorPropertyArray0[0] = creatorProperty1;
      // Undeclared exception!
      try { 
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, creatorPropertyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1, (Object) null, (PropertyMetadata) null);
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, false);
      CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[9];
      creatorPropertyArray0[0] = creatorProperty0;
      creatorPropertyArray0[1] = creatorProperty0;
      // Undeclared exception!
      try { 
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, creatorPropertyArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate creator property \"\" (index 0 vs 1)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (Type) null, annotationMap0, 91);
      creatorCollector0.addIncompeteParameter(annotatedParameter0);
      creatorCollector0.addIncompeteParameter(annotatedParameter0);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, true);
      boolean boolean0 = creatorCollector0.hasDefaultCreator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, true);
      creatorCollector0.verifyNonDup(annotatedConstructor0, 6, true);
      creatorCollector0.verifyNonDup(annotatedConstructor0, 6, false);
      assertFalse(creatorCollector0.hasDefaultCreator());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, false);
      creatorCollector0.verifyNonDup(annotatedConstructor0, 6, false);
      // Undeclared exception!
      try { 
        creatorCollector0.verifyNonDup(annotatedConstructor0, 6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Conflicting delegate creators: already had explicitly marked [constructor for java.lang.String, annotations: [null]], encountered [constructor for java.lang.String, annotations: [null]]
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, true);
      creatorCollector0.verifyNonDup(annotatedConstructor0, 6, true);
      // Undeclared exception!
      try { 
        creatorCollector0.verifyNonDup(annotatedConstructor0, 6, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Conflicting delegate creators: already had explicitly marked [constructor for java.lang.String, annotations: [null]], encountered [constructor for java.lang.String, annotations: [null]]
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorCollector_Vanilla0.createFromString(defaultDeserializationContext_Impl0, ", creator: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not instantiate value of type java.util.ArrayList from String value (', creator: '); no single-String constructor/factory method
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(2);
      String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
      assertEquals("java.util.LinkedHashMap", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ArrayList<InputStream> arrayList0 = new ArrayList<InputStream>();
      try { 
        creatorCollector_Vanilla0.createUsingDelegate(defaultDeserializationContext_Impl0, arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not instantiate value of type java.util.HashMap using delegate
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(1060);
      String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ArrayList arrayList0 = (ArrayList)creatorCollector_Vanilla0.createUsingDefault(defaultDeserializationContext_Impl0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)creatorCollector_Vanilla0.createUsingDefault(defaultDeserializationContext_Impl0);
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(3);
      HashMap hashMap0 = (HashMap)creatorCollector_Vanilla0.createUsingDefault(defaultDeserializationContext_Impl0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(8);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorCollector_Vanilla0.createUsingDefault(defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown type 8
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector$Vanilla", e);
      }
  }
}
