/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:44:56 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(dateSerializer0, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        dateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null SerializerProvider passed for java.util.Date
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = dateSerializer0.isEmpty((Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1028, 1028, 1586, 1586, 1586);
      boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) null, (Date) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      MockDate mockDate0 = new MockDate(0L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      MockDate mockDate0 = new MockDate();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      Class<Integer> class0 = Integer.class;
      Locale locale0 = Locale.JAPAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      DateSerializer dateSerializer1 = dateSerializer0.withFormat((Boolean) null, dateFormat0);
      JsonNode jsonNode0 = dateSerializer1.getSchema((SerializerProvider) null, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DateSerializer dateSerializer0 = new DateSerializer();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Locale locale0 = Locale.JAPAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      DateSerializer dateSerializer1 = dateSerializer0.withFormat(boolean0, dateFormat0);
      JsonNode jsonNode0 = dateSerializer1.getSchema((SerializerProvider) null, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        dateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(sqlDateSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      dateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, true);
      assertFalse(dateSerializer0.isUnwrappingSerializer());
  }
}
