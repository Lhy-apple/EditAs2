/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:11:08 GMT 2023
 */

package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math.ode.sampling.FixedStepHandler;
import org.apache.commons.math.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RungeKuttaIntegrator_ESTest extends RungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(579.0102921164985);
      double double0 = eulerIntegrator0.integrate(firstOrderConverter0, 1, doubleArray0, 579.0102921164985, doubleArray0);
      assertEquals(579.0102921164985, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1811.0586674967);
      double[] doubleArray1 = new double[2];
      double double0 = eulerIntegrator0.integrate(firstOrderConverter0, 1811.0586674967, doubleArray0, (-587.8032167493992), doubleArray1);
      assertEquals((-587.8032167493993), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1811.0586674967);
      StepNormalizer stepNormalizer0 = new StepNormalizer(1, (FixedStepHandler) null);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate(firstOrderConverter0, 1, doubleArray0, 1811.0586674967, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1811.0586674967);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1, 1811.0586674967, 1013);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(Double.NaN);
      double double0 = midpointIntegrator0.integrate(firstOrderConverter0, 112847.0, doubleArray0, (-0.9371424300859873), doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
