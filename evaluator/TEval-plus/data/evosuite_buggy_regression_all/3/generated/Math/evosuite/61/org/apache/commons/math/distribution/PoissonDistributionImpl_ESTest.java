/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:08:19 GMT 2023
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PoissonDistributionImpl_ESTest extends PoissonDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(121645100408832000L);
      poissonDistributionImpl0.inverseCumulativeProbability(0.0036);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5, 0.5);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(121645100408832000L);
      // Undeclared exception!
      poissonDistributionImpl0.sample(3290);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(Double.POSITIVE_INFINITY, (-1099));
      double double0 = poissonDistributionImpl0.probability((-1099));
      assertEquals(Double.POSITIVE_INFINITY, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5, 0.5);
      double double0 = poissonDistributionImpl0.normalApproximateProbability((-1989));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(0.0, (-3139.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the Poisson mean must be positive (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(121645100408832000L);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(121645100408832000L);
      double double0 = poissonDistributionImpl0.probability(121645100408832000L);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.21645100408832E17, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(121645100408832000L);
      double double0 = poissonDistributionImpl0.probability(1048575);
      assertEquals(1.21645100408832E17, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(121645100408832000L);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-965.0), (-965.0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.21645100408832E17, poissonDistributionImpl0.getMean(), 0.01);
  }
}
