/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:06:00 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Log10;
import org.apache.commons.math3.analysis.function.Sinh;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.125, 0.125);
      GoalType goalType0 = GoalType.MINIMIZE;
      Sinh sinh0 = new Sinh();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1259, (UnivariateFunction) sinh0, goalType0, (-1.0), 404.3224313372868, 404.3224313372868);
      assertEquals((-0.7673945838988211), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-0.16162140635232158), (-0.16162140635232158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.162 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.22422435470870872, (-0.1275278893606981));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.128 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(4.440892098500626E-16, 4.440892098500626E-16);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1072, (UnivariateFunction) log10_0, goalType0, 4.440892098500626E-16, 4.440892098500626E-16, (double) 1072);
      assertEquals(1071.999999999999, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.224224354709, 0.224224354709);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1068, (UnivariateFunction) log10_0, goalType0, 0.224224354709, (double) 1068, 0.224224354709);
      assertEquals(808.3909691926884, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.22422435470870872, 0.22422435470870872, convergenceChecker0);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2446, (UnivariateFunction) log10_0, goalType0, 3474.53682, (-914.74), 1.2160992719555806E-37);
      assertEquals((-0.41447221921112776), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.22422435470870872, 0.22422435470870872, convergenceChecker0);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2446, (UnivariateFunction) log10_0, goalType0, (double) 2446, (-914.74), 1.2160992719555806E-37);
      assertEquals(1.2160992719555806E-37, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals((-36.91503097152482), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.22422435470870872, 0.22422435470870872);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1046, (UnivariateFunction) log10_0, goalType0, (double) 1046, 0.22422435470870872, (-156.9286424));
      assertEquals(1.2689587782050809, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.22422435470870872, 0.22422435470870872);
      Log10 log10_0 = new Log10();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(3012, (UnivariateFunction) log10_0, goalType0, 0.22422435470870872, (-2300.057), (double) 3012);
      assertEquals((-0.48308682106068485), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.125, 0.125);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Log10 log10_0 = new Log10();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1259, (UnivariateFunction) log10_0, goalType0, (double) 1259, (double) 1259, (double) 1259);
      assertEquals(1259.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(3.1000257301078626, univariatePointValuePair0.getValue(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }
}
