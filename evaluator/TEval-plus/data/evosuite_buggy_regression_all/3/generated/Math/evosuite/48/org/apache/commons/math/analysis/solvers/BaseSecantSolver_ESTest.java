/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:08:38 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      pegasusSolver0.solve(144, (UnivariateRealFunction) sinc0, 20.864565305859234, (double) 144, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.5003310162197948, 0.5003310162197948, 0.5003310162197948);
      assertEquals(0.5003310162197948, illinoisSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Log10 log10_0 = new Log10();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(2769, (UnivariateRealFunction) log10_0, 0.5, (double) 2769, (double) 2769);
      assertEquals(0.5, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0000000000005997, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Log10 log10_0 = new Log10();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(2764, (UnivariateRealFunction) log10_0, 1.0, (-278.0), (double) 2764);
      assertEquals((-278.0), pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Log10 log10_0 = new Log10();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(2747, (UnivariateRealFunction) log10_0, (double) 2747, 1.0, 1.0);
      assertEquals(1.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Log10 log10_0 = new Log10();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(2774, (UnivariateRealFunction) log10_0, 0.07692307692307693, (double) 2774, (double) 2774);
      assertEquals(2774.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 2811);
      Log10 log10_0 = new Log10();
      // Undeclared exception!
      illinoisSolver0.solve(2811, (UnivariateRealFunction) log10_0, 0.0, (double) 2811, 304.5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(510.569889979);
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1832, (UnivariateRealFunction) cbrt0, (-0.1666666567325592), (double) 1832, allowedSolution0);
      assertEquals(1832.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(78.68908131288481, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.176342548272881E-8, 1.176342548272881E-8);
      Sinc sinc0 = new Sinc();
      double double0 = pegasusSolver0.solve(224, (UnivariateRealFunction) sinc0, 1.176342548272881E-8, (double) 224, 1.176342548272881E-8);
      assertEquals(1.176342548272881E-8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(223.05307840487532, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(175, (UnivariateRealFunction) sinc0, (double) 175, 1308.8764936014927, allowedSolution0);
      assertEquals(741.9382468007464, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(722.5663101338791, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(167, (UnivariateRealFunction) sinc0, (-33.557279), (double) 167, allowedSolution0);
      assertEquals(66.7213605, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(160.22122533614063, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(173, (UnivariateRealFunction) sinc0, 1.910162323677134E-5, (double) 173, allowedSolution0);
      assertEquals(86.50000955081163, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(172.7875959474386, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-33.63972294236612), (-33.63972294236612));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(144, (UnivariateRealFunction) sinc0, (-33.63972294236612), (double) 144, allowedSolution0);
      assertEquals((-33.63972294236612), pegasusSolver0.getMin(), 0.01);
      assertEquals(128.8052987971815, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-33.63972294236612), (-33.63972294236612));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(144, (UnivariateRealFunction) sinc0, (-33.63972294236612), (double) 144, allowedSolution0);
      assertEquals((-33.63972294236612), pegasusSolver0.getMin(), 0.01);
      assertEquals(128.80529879718154, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(173, (UnivariateRealFunction) sinc0, 1.039134509928639, (double) 173, allowedSolution0);
      assertEquals(173.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(172.78759594743863, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(173, (UnivariateRealFunction) sinc0, 1.039134509928639, (double) 173, allowedSolution0);
      assertEquals(173.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(172.787595938044, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(144, (UnivariateRealFunction) sinc0, 1.039134509928639, (double) 144, allowedSolution0);
      assertEquals(72.51956725496433, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(141.37166941154018, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(1589456320, (UnivariateRealFunction) log0, 1.0E-6, 3130.4, allowedSolution0);
      assertEquals(1565.2000005000002, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.9999999999833448, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(144, (UnivariateRealFunction) sinc0, 1.039134509928639, (double) 144, allowedSolution0);
      assertEquals(1.039134509928639, pegasusSolver0.getMin(), 0.01);
      assertEquals(141.37166941154018, double0, 0.01);
  }
}
