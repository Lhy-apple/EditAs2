/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:08:44 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      illinoisSolver0.solve(1960, (UnivariateRealFunction) tan0, (double) 1960, 0.0, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.06173482394308642, 0.06173482394308642, 0.06173482394308642);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(33, (UnivariateRealFunction) tan0, 0.06173482394308642, (double) 33, allowedSolution0);
      assertEquals(0.06173482394308642, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.524028174171501, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0E-6, 1.0E-6);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(56, (UnivariateRealFunction) tan0, 1.0E-6, (double) 56, allowedSolution0);
      assertEquals(56.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(54.97787516819382, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0, 0.0);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(5, (UnivariateRealFunction) tan0, 0.0, (double) 5, allowedSolution0);
      assertEquals(5.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Tanh tanh0 = new Tanh();
      double double0 = illinoisSolver0.solve(1947, (UnivariateRealFunction) tanh0, (-1.0), (double) 1947, allowedSolution0);
      assertEquals(973.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sinh sinh0 = new Sinh();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.061734824, 0.061734824);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1024, (UnivariateRealFunction) sinh0, (-1215.77976), 35.8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,024) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.06173482394308642, 0.06173482394308642, 0.06173482394308642);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(33, (UnivariateRealFunction) tan0, 0.06173482394308642, (double) 33, allowedSolution0);
      assertEquals(16.530867411971546, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(21.966546988863918, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.06173482394308642, 0.06173482394308642, 0.06173482394308642);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(33, (UnivariateRealFunction) tan0, 0.06173482394308642, (double) 33, allowedSolution0);
      assertEquals(16.530867411971546, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.524028174171501, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(8.409352622589322, 8.409352622589322, 8.409352622589322);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(63, (UnivariateRealFunction) tan0, 8.409352622589322, (double) 63, allowedSolution0);
      assertEquals(63.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(8.409352622589322, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(22.38646270592302, 22.38646270592302, 22.38646270592302);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(33, (UnivariateRealFunction) tan0, 22.38646270592302, (double) 33, allowedSolution0);
      assertEquals(27.69323135296151, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(22.444944233229936, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.06173482394308642, 0.06173482394308642, 0.06173482394308642);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(33, (UnivariateRealFunction) tan0, 0.06173482394308642, (double) 33, allowedSolution0);
      assertEquals(16.530867411971546, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(21.966546988863918, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0617, 0.0617, 0.0617);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(33, (UnivariateRealFunction) tan0, 0.0617, (double) 33, allowedSolution0);
      assertEquals(16.530849999999997, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(21.946694698233465, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5290801839497221, 1.5290801839497221, 1.5290801839497221);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(24, (UnivariateRealFunction) tan0, 1.5290801839497221, (double) 24, allowedSolution0);
      assertEquals(12.76454009197486, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(22.161423928950168, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(1947, (UnivariateRealFunction) tan0, 261.0, (double) 1947, allowedSolution0);
      assertEquals(1104.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(903.2078881996734, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2145065834, (UnivariateRealFunction) tan0, (double) 1963, (double) 2145065834, allowedSolution0);
      assertEquals(1.0725338985E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(4.2152972880813174E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1947, (UnivariateRealFunction) tan0, 258.9958854246058, (double) 1947, allowedSolution0);
      assertEquals(1102.9979427123028, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(708.4291430393689, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2145065834, (UnivariateRealFunction) tan0, (double) 1963, (double) 2145065834, allowedSolution0);
      assertEquals(1.0725338985E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(4.2152972880812824E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1947, (UnivariateRealFunction) tan0, 261.0, (double) 1947, allowedSolution0);
      assertEquals(1104.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(903.2078878877858, double0, 0.01);
  }
}
