/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:10:06 GMT 2023
 */

package org.apache.commons.math.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      // Undeclared exception!
      try { 
        brentOptimizer0.doOptimize();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.resetRelativeAccuracy();
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      GoalType goalType0 = GoalType.MINIMIZE;
      brentOptimizer0.resetAbsoluteAccuracy();
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[7];
      brentOptimizer0.resetMaximalIterationCount();
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      try { 
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, 1871.1524024);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1871.1524024;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 1871.1524024, (-1958.57810232837));
      assertEquals(63, brentOptimizer0.getIterationCount());
      assertEquals((-1958.5781023282286), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 1.0E-14;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 1946.0, (-1.0), 1946.0);
      assertEquals(47, brentOptimizer0.getEvaluations());
      assertEquals(4.4901952565049775E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1871.1524024;
      doubleArray0[2] = 1871.1524024;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 1871.1524024, (-1958.8742412226745));
      assertEquals(37, brentOptimizer0.getEvaluations());
      assertEquals((-0.4999999991817392), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[9];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 704.5806876753893, 0.0, 704.5806876753893);
      assertEquals(62, brentOptimizer0.getEvaluations());
      assertEquals(1.0355056872263999E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 1525.732;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize(univariateRealFunction0, goalType0, 1525.732, (-1423.0));
      assertEquals(5, brentOptimizer0.getIterationCount());
      assertEquals(0.0, double0, 0.01);
  }
}
