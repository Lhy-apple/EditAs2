/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:03:41 GMT 2023
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.MultivariateNormalDistribution;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultivariateNormalDistribution_ESTest extends MultivariateNormalDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[2][6];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0287251472473145;
      doubleArray0[1] = 3.5154233637639507;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
      double double0 = multivariateNormalDistribution0.density(doubleArray0);
      assertArrayEquals(new double[] {1.0287251472473145, 3.5154233637639507}, doubleArray0, 0.01);
      assertEquals(4090987.298694988, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0287251472473145;
      doubleArray0[1] = 3.5154233637639507;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Well1024a well1024a0 = new Well1024a();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(well1024a0, doubleArray0, doubleArray1);
      RealMatrix realMatrix0 = multivariateNormalDistribution0.getCovariances();
      assertEquals(2, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[0][0];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(well19937a0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.552713678800501E-15);
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(well19937a0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -0 at index 0
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0287251472473145;
      doubleArray0[1] = 3.5154233637639507;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Well1024a well1024a0 = new Well1024a();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(well1024a0, doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[3];
      try { 
        multivariateNormalDistribution0.density(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0287251472473145;
      doubleArray0[1] = 3.5154233637639507;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Well1024a well1024a0 = new Well1024a();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(well1024a0, doubleArray0, doubleArray1);
      double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
      assertArrayEquals(new double[] {1.0142608871721883, 1.874946229566051}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0287251472473145;
      doubleArray0[1] = 3.5154233637639507;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Well44497a well44497a0 = new Well44497a();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(well44497a0, doubleArray0, doubleArray1);
      double[][] doubleArray2 = multivariateNormalDistribution0.sample(1461);
      assertNotSame(doubleArray2, doubleArray1);
  }
}
