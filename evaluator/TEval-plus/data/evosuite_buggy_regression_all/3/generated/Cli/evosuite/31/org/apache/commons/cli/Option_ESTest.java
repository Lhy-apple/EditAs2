/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:06:16 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("7", "7");
      option0.setType("7");
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option: 7  :: 7 :: 7 ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getDescription();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getArgName();
      assertEquals("arg", string0);
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setRequired(true);
      assertTrue(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.isRequired();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValuesList();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("O85", "O85");
      option0.setDescription("O85");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertTrue(option0.hasArgName());
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "", false, "57.");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("", option0.getLongOpt());
      assertTrue(boolean0);
      assertEquals("57.", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("7", "7");
      option0.setArgs(2993);
      option0.toString();
      assertEquals(2993, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("a", "a");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('n');
      option0.addValueForProcessing("[ option:   [ARG] ::  ]");
      assertEquals('n', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('c');
      option0.addValueForProcessing("[ option:   [ARG] ::  ]");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("a*aOdJb$L2N)GTMecl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("}tU");
      String string0 = option0.getValue("");
      assertEquals("}tU", string0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("[ option:   [ARG] ::  ]");
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("4", "4");
      option0.getValue((-1));
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(1661);
      option0.addValueForProcessing("");
      option0.getValues();
      assertEquals(1661, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      String[] stringArray0 = option0.getValues();
      assertTrue(option0.hasArgName());
      assertNull(stringArray0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option:    ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:   [ARG] ::  ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option("", "", false, "");
      boolean boolean0 = option1.equals(option0);
      assertEquals("arg", option1.getArgName());
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.equals("");
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED");
      Option option1 = new Option("", true, "a");
      Option option2 = (Option)option0.clone();
      boolean boolean0 = option1.equals(option2);
      assertNotSame(option2, option0);
      assertFalse(boolean0);
      assertFalse(option2.hasLongOpt());
      assertEquals((-1), option2.getArgs());
      assertEquals("", option1.getOpt());
      assertEquals("a", option1.getDescription());
      assertTrue(option2.equals((Object)option0));
      assertEquals("arg", option2.getArgName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("4", "4");
      Option option1 = new Option((String) null, "4");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", false, "");
      Option option1 = new Option("", "", false, "");
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = (Option)option0.clone();
      assertFalse(option1.hasLongOpt());
      
      option1.setLongOpt("");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hashCode();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.hashCode();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("a", "a");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("a", "a");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      assertTrue(option0.hasArgs());
      
      option0.addValueForProcessing("a");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }
}
