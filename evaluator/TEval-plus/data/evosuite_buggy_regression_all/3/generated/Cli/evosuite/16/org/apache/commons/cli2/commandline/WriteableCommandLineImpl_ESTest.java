/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:03:32 GMT 2023
 */

package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteableCommandLineImpl_ESTest extends WriteableCommandLineImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.getProperty("-D");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getOptionTriggers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty("9Wx0qI?I62\"U", "#F3");
      writeableCommandLineImpl0.addProperty("-D", "9Wx0qI?I62\"U");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.fvrQ:U", "):.fvrQ:U", (-122683469), (-122683469), '.', '.', dateValidator0, "):.fvrQ:U", linkedList0, (-122683469));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getProperties();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.fvrQ:U", "):.fvrQ:U", (-122683469), (-122683469), '6', '6', dateValidator0, "):.fvrQ:U", linkedList0, (-122683469));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      int int0 = writeableCommandLineImpl0.getOptionCount((Option) argumentImpl0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getNormalised();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.fvrQ:U", "):.fvrQ:U", (-122683469), (-122683469), '6', '6', dateValidator0, "):.fvrQ:U", linkedList0, (-122683469));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.hasOption("):.fvrQ:U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.fvrQ:U", "):.fvrQ:U", (-122683469), (-122683469), '6', '6', dateValidator0, "):.fvrQ:U", linkedList0, (-122683469));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addValue(argumentImpl0, "):.fvrQ:U");
      boolean boolean0 = writeableCommandLineImpl0.hasOption("):.fvrQ:U");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
      assertEquals("-D", propertyOption0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.pflvrQ:U", "):.pflvrQ:U", (-10), 487, '7', '7', dateValidator0, "):.pflvrQ:U", linkedList0, (-10));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addValue(argumentImpl0, "):.pflvrQ:U");
      writeableCommandLineImpl0.addValue(argumentImpl0, argumentImpl0);
      assertEquals('\u0000', ArgumentImpl.DEFAULT_SUBSEQUENT_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 23, 23);
      DefaultOption defaultOption0 = new DefaultOption("", "", true, "", "", linkedHashSet0, linkedHashSet0, false, (Argument) null, groupImpl0, 68);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(defaultOption0, linkedList0);
      Command command0 = new Command("\"", "ClassValidator.class.notfound", linkedHashSet0, false, (Argument) null, groupImpl0, (-104365462));
      writeableCommandLineImpl0.addSwitch(command0, true);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addSwitch(command0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Switch already set.
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addSwitch(propertyOption0, false);
      assertEquals("Passes properties and values to the application", propertyOption0.getDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.fvrQ:U", "):.fvrQ:U", (-122683469), (-122683469), '6', '6', dateValidator0, "):.fvrQ:U", linkedList0, (-122683469));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addValue(argumentImpl0, "):.fvrQ:U");
      List list0 = writeableCommandLineImpl0.getValues((Option) argumentImpl0, (List) linkedList0);
      List list1 = writeableCommandLineImpl0.getValues((Option) argumentImpl0, (List) list0);
      assertSame(list1, list0);
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("Passes properties and values to the application");
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.pflvrQ:U", "UR", 0, 487, '7', '7', dateValidator0, "-D-DURLValidator.malformed.URL", linkedList0, 0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      Properties properties0 = new Properties();
      linkedHashSet0.add(properties0);
      linkedList0.addAll((Collection<? extends Properties>) linkedHashSet0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      linkedList0.add(properties0);
      writeableCommandLineImpl0.addValue(argumentImpl0, "-D-DURLValidator.malformed.URL");
      List list0 = writeableCommandLineImpl0.getValues((Option) argumentImpl0, (List) linkedList0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("):.fvrQ:U", "):.fvrQ:U", (-122683469), (-122683469), '.', '.', dateValidator0, "):.fvrQ:U", linkedList0, (-122683469));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addValue(argumentImpl0, "):.fvrQ:U");
      // Undeclared exception!
      try { 
        argumentImpl0.process(writeableCommandLineImpl0, (ListIterator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 91, (-544));
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      writeableCommandLineImpl0.addSwitch(groupImpl0, false);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = writeableCommandLineImpl0.getSwitch("VL<Urk\"xt", boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch("-D");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "'E,ApO7D xN2S]|", "'E,ApO7D xN2S]|", 0, 1506);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addProperty((Option) groupImpl0, "'E,ApO7D xN2S]|", "'E,ApO7D xN2S]|");
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.getProperty((Option) groupImpl0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "'E,ApO7D xN2S]|", "'E,ApO7D xN2S]|", 0, 1506);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addProperty((Option) groupImpl0, "'E,ApO7D xN2S]|", "'E,ApO7D xN2S]|");
      Set set0 = writeableCommandLineImpl0.getProperties((Option) groupImpl0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("Passes properties and values to the application");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-D");
      linkedList0.addLast("Passes properties and values to the application");
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.toString();
      assertEquals("-D \"Passes properties and values to the application\"", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("-DURUVli}ator.^alformed.URL", "G?'PHssMnS*AS~a&", (-37));
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
      assertEquals("G?'PHssMnS*AS~a&", propertyOption0.getDescription());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Boolean boolean0 = new Boolean(false);
      writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 91, (-544));
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      writeableCommandLineImpl0.setDefaultSwitch(groupImpl0, (Boolean) null);
      assertEquals(91, groupImpl0.getMinimum());
  }
}
