/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:04:31 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionImpl_ESTest extends OptionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("true", "true", 0, 0, 'I', 'I', fileValidator0, "true", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "true", "true", 0, 0);
      DefaultOption defaultOption0 = new DefaultOption("true", "true", true, "true", "true", linkedHashSet0, linkedHashSet0, true, argumentImpl0, groupImpl0, 0);
      String string0 = defaultOption0.toString();
      assertEquals(0, defaultOption0.getId());
      assertEquals("true  [true ()]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[?~e6'6{", "<4I[?~e6'6{", 3, 3, 'r', 'r', fileValidator0, "<4I[?~e6'6{", linkedList0, 3);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(3, argumentImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0, '9', '9', fileValidator0, "<4I[/?~26%6{", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList1.listIterator();
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (ListIterator) listIterator0);
      assertFalse(boolean0);
      assertEquals(0, groupImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      ListIterator<PropertyOption> listIterator0 = (ListIterator<PropertyOption>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn(propertyOption0).when(listIterator0).next();
      // Undeclared exception!
      try { 
        propertyOption0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (ListIterator) listIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli2.option.PropertyOption cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0, '9', '9', fileValidator0, "<4I[/?~26%6{", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0);
      DefaultOption defaultOption0 = new DefaultOption("<4I[/?~26%6{", "<4I[/?~26%6{", true, "<4I[/?~26%6{", "<4I[/?~26%6{", linkedHashSet0, linkedHashSet0, true, argumentImpl0, groupImpl0, 0);
      boolean boolean0 = defaultOption0.equals("--");
      assertEquals(0, defaultOption0.getId());
      assertFalse(boolean0);
      assertTrue(defaultOption0.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0, '9', '9', fileValidator0, "<4I[/?~26%6{", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0);
      DefaultOption defaultOption0 = new DefaultOption("<4I[/?~26%6{", "<4I[/?~26%6{", true, "<4I[/?~26%6{", "<4I[/?~26%6{", linkedHashSet0, linkedHashSet0, true, argumentImpl0, groupImpl0, 0);
      boolean boolean0 = defaultOption0.equals(groupImpl0);
      assertFalse(boolean0);
      assertEquals(0, defaultOption0.getId());
      assertTrue(defaultOption0.isRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[?~e6'6{", "<4I[?~e6'6{", 3, 3, 'c', 'c', fileValidator0, "<4I[?~e6'6{", linkedList0, 3);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '\u0000', "<4I[?~e6'6{", linkedList0);
      boolean boolean0 = sourceDestArgument0.equals(argumentImpl0);
      assertFalse(boolean0);
      assertEquals(3, argumentImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[/?~2%{", "<4I[/?~2%{", 0, 0, 'I', 'I', fileValidator0, "<4I[/?~2%{", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<4I[/?~2%{", "<4I[/?~2%{", 0, 0);
      DefaultOption defaultOption0 = new DefaultOption("<4I[/?~2%{", "<4I[/?~2%{", false, "<4I[/?~2%{", "<4I[/?~2%{", linkedHashSet0, linkedHashSet0, false, argumentImpl0, groupImpl0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      boolean boolean0 = defaultOption0.equals(sourceDestArgument0);
      assertFalse(boolean0);
      assertEquals(0, sourceDestArgument0.getId());
      assertFalse(defaultOption0.isRequired());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[/?~e6%'6{", "<4I[/?~e6%'6{", 0, 0, ';', ';', dateValidator0, "org.apache.commons.cli2.option.OptionImpl", linkedList0, 0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', 'c', "--", linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "SourceDestArgument", "--", (-1814), 0);
      boolean boolean0 = sourceDestArgument0.equals(groupImpl0);
      assertFalse(boolean0);
      assertEquals(0, groupImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[?~e6'6{", "<4I[?~e6'6{", 3, 3, 'r', 'r', fileValidator0, "<4I[?~e6'6{", linkedList0, 3);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '\u0000', "<4I[?~e6'6{", linkedList0);
      boolean boolean0 = sourceDestArgument0.equals(sourceDestArgument0);
      assertTrue(boolean0);
      assertEquals(3, argumentImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0, ';', ';', fileValidator0, "<4I[/?~26%6{", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0);
      DefaultOption defaultOption0 = new DefaultOption("<4I[/?~26%6{", "<4I[/?~26%6{", false, "<4I[/?~26%6{", "<4I[/?~26%6{", linkedHashSet0, linkedHashSet0, false, argumentImpl0, groupImpl0, 0);
      LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "<4I[/?~26%6{", (String) null, 0, 0);
      boolean boolean0 = defaultOption0.equals(groupImpl1);
      assertEquals(0, groupImpl1.getId());
      assertFalse(groupImpl0.equals((Object)groupImpl1));
      assertFalse(defaultOption0.isRequired());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[?~e6'6{", "<4I[?~e6'6{", 41, 41, '`', '`', fileValidator0, "<4I[?~e6'6{", linkedList0, 41);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 41);
      argumentImpl0.defaultValues(writeableCommandLineImpl0, propertyOption0);
      assertFalse(propertyOption0.isRequired());
      assertEquals(41, propertyOption0.getId());
      assertEquals(41, argumentImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<4I[/?~26%6{", "<4I[/?~26%6{", 0, 0, 'I', 'I', fileValidator0, "", linkedList0, 0);
      Option option0 = argumentImpl0.findOption("Option.trigger.needs.prefix");
      assertEquals(0, argumentImpl0.getId());
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 41);
      Option option0 = propertyOption0.findOption((String) null);
      assertNotNull(option0);
      assertEquals(41, option0.getId());
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<4I[?~2%{", "<4I[?~2%{", 0, 0);
      groupImpl0.checkPrefixes(linkedHashSet0);
      assertEquals(0, groupImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("true", "true", 0, 0, '[', '[', fileValidator0, "true", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "true", "true", 0, 0);
      DefaultOption defaultOption0 = null;
      try {
        defaultOption0 = new DefaultOption("true", "O#d;d", true, "--", "O#d;d", linkedHashSet0, linkedHashSet0, true, argumentImpl0, groupImpl0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trigger -- must be prefixed with a value from java.util.HashSet@0000000007
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }
}
