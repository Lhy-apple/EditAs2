/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:01:34 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("sc#~ ct|52", "sc#~ ct|52", (-1));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("fJx* KM1U{4E2");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("{+G[p5\tU0 .}a`uFy", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: {+G[p5\tU0 .}a`uFy
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = StringUtils.length("s~ c1|w2");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" 2ye 2ye");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 1127);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("%eUj++P/J`Z`(", "%eUj++P/J`Z`(");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(14, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("path.separator", "[", (int) 'K');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("%eUj++P/J`Z`(", "%eUj++P/J`Z`(");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.center("G:Tx||\"iFq{z##{", (int) 'y');
      assertNotNull(string0);
      assertEquals("                                                     G:Tx||\"iFq{z##{                                                     ", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("6", "6", "6");
      assertEquals("6", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.rightPad("ESTO<TUn1;2O.+", (int) '8');
      assertEquals("ESTO<TUn1;2O.+                                          ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.leftPad("QJxE`?pz]4!\"[;N8YCm", (int) 'y');
      assertNotNull(string0);
      assertEquals("                                                                                                      QJxE`?pz]4!\"[;N8YCm", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("flkoat", "flkoat", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly(" ", stringArray0, (String[]) null);
      assertEquals(" ", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", (String) null, (-1));
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(",hogX R6?Jdu", "Serih and Replce arra lengths don't match: ");
      assertEquals(",hogX R6?Jdu", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.substringBetween(">?", "t z@OZ3g,0v}?*C");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("illegalaccessexception occurred dur.y&{|<s0]ackcompat code", "", (-4));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("K", "K");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("Cannot pad a negative amount: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.trimToNull("rL ");
      assertNotNull(string0);
      assertEquals("rL", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("5.1");
      assertEquals("5.1", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripToNull("illegalaccessexception occurred dur.y&{|<s0]ackcompat code");
      assertEquals("illegalaccessexception occurred dur.y&{|<s0]ackcompat code", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("s\"MLmgG[TxyB|,");
      assertEquals("s\"MLmgG[TxyB|,", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripStart("er", "/}Zgm\u0006xek ");
      assertEquals("r", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("7[o(", "MX");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.strip("_i:Wgi}", "_i:Wgi}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripEnd("z %_'", "Search and Replace array lengths don't match: ");
      assertEquals("z %_", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "$");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.stripAccents("java.awt.graphicsen");
      assertEquals("java.awt.graphicsen", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "java.io.tmpdir");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "java.endorsed.dirs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "PfhMAZxozy[B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("\"M4&['k|Y|", ')');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '+');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("9)_PE)\"E", 'H', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 'E', 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "java.lang.String@0000000001");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOf("IllegalAccessException occurred during 1.6 backcompat code", "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOf("...", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "&Q", (-887));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf("w>|I0NKwD|+NSa", "w>|I0NKwD|+NSa", 1773);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf("WNh@.7>e", (String) null, 860);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((String) null, (String) null, 124);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("java.text.Normalizer$Form", (String) null, 738);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("SeGrch and ReplLce array lengths don't match: ", "SeGrch and ReplLce array lengths don't match: ", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, "[", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("", (String) null, 1332);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("SeGrch and ReplKce array lengths don't match: ", "SeGrch and ReplKce array lengths don't match: ", (-2551));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("[", "MX", 4747);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("java.text.Normalizer$Form", "crVHR,M&Bw-(=u");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("vAWSq?p[_Gonb\"[s", '2');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("java.runtime.name", 'F', (int) 'F');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'h', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "O$-yZRDA{t");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("y", "y");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("*tDVJ\"mx%&@;Yk,Search and Replace array lengths don't match: ", "*tDVJ\"mx%&@;Yk,Search and Replace array lengths don't match: ", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(",`7'mw yse?-wfp", (String) null, 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("M2p_T$/zyq/cb ", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null, 3767);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("xsU1d3moqbK}lZQG-Yi", (String) null, 78);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "", 258);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Caught a SecurityException reading the system property '", "Caught a SecurityException reading the system property '", (-42));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("user.name", "user.name", 15);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("java.class.version", "yX");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(".~.M)Gs,=Arlt2l=", 'g');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, '\u001D');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(".~.MGs,=Arltrl=", '');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, ",`7'MW YRJnW-WFp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("java.runtime.verion", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Search and Replace array lengths don't match: ", "java.vm.specification.vendor");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("t z@OZ3g,0v}?*C", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("IllegalAccessException occurred during 1.6 backcompat code", " is not in therange '0'&- '9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("fJx* KM1U{4E2", "fJx* KM1U{4E2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'v');
      int int0 = StringUtils.indexOfAny((CharSequence) string0, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "user.name", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "d*20iS~ C1|W2", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "s~ c1|w2", "Mac OS X");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "s~ c1|w2", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "sisisisisisisisisisisisi", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "user.coutry", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'n';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ":K:8 in]_", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "$", "$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w6S7T^g0x?sk86", "os.name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "y", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "d~P yGa{`;", "BYTE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "eto", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width is 4", "Minimum abbreviation width is 4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("~b0)'", "?^p_?BB5j_5L1#@2l");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Xg$R'QEr2", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("[", "[");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "$", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "!/*7q&vf'", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "UkA)c?Rg?fLF78?yau");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Cannot pad a negative amount: ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" @k", " @k");
      assertNull(string0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "[", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "$", "la");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "%eUj++P/J`Z`(", "%eUj++P/J`Z`(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "U]O5/5r}95jv/VeM", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("1.6", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("xPh(BpqeQ<nx@0%");
      int int0 = StringUtils.indexOfAny("xPh(BpqeQ<nx@0%", stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("[");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny(" rv>q=\"", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".1}D[=^";
      stringArray0[1] = ".1}D[=^";
      int int0 = StringUtils.lastIndexOfAny(".1}D[=^", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substring("$", (-1413));
      assertNotNull(string0);
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" @k", " @k");
      String string1 = StringUtils.substring(string0, (-244));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring("6S7TFgpxsck86", (int) 'H');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring("Gs,=Arlt2l=.~.M", (-658), (-658));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-332), (-332));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substring("`i5sBDu\"/$g7/@?~'s(", 15, 15);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substring("5", 127, (int) '{');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.left("FlXmuqzvM#c~IK9 K", 37);
      assertNotNull(string0);
      assertEquals("FlXmuqzvM#c~IK9 K", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.left(stringArray0[5], (-972));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.left("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.left("J", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.right("4?1f3&Xk", (-1240));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 55296);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.right("6S7TFgpxsck86", '0');
      assertEquals("6S7TFgpxsck86", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.right("Tp)/X7!", 4);
      assertEquals("/X7!", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 24, (-1077));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.mid("&V;B", (-216), (-216));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.mid("", 'r', 'r');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.mid("6$r-63czw88\"XMm,`Y", 14, 14);
      assertEquals("Mm,`Y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.mid("[", (-1), 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, ".5S]F<d__8$3%");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBefore("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBefore("cfI", (String) null);
      assertEquals("cfI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBefore("os.arch", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBefore("D3U_ 9('`UJyGv<GPj", "must not be nul");
      assertEquals("D3U_ 9('`UJyGv<GPj", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" ", "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringAfter("H0|Ub79#", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("ESTO<T9Un1;2O.+", "ESTO<T9Un1;2O.+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("org.apache.commons.lang3.StringUtils", (String) null);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("org.apache.commons.lang3.exception.CloneFailedException", "% ");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("/`4pZ|0%Np6,", "(1< Kir%i4) &h");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("&*Y/e4P4;2r-", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("6long)7+m+n~aq", ")7+m");
      assertEquals("+n~aq", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("SeGrch and ReplLce array lengths don't match: ", "SeGrch and ReplLce array lengths don't match: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.substringBetween("java.text.Normalizer", "java.text.Normalizer", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.clasyxversionjava.clasyxversionjava.clasyxversionjava.clasyxversionjava.clasyxversion", "si", "va");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "java.cas.yxrsion", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "clone", "clone");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("K", "K", "K");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("tIMEtOlIVE OF ", "cl", "cl");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("@po-9o` >HGd", (String) null);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SunOS", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(";T ovKz_`", " ");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Search an Replace array lengths don't match: ", "Search an Replace array lengths don't match: ");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'e');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Search and Replace array lngths Mon'tmatchP ", 'S');
      assertNotNull(string0);
      assertEquals("earch and Replace array lngths Mon'tmatchP ", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("w6S7T^g0x?k86", '6');
      assertNotNull(string0);
      assertEquals("S7T^g0x?k86w", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("DUu=,2D", "2");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M", "M");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("IllegalArgumentException occurred during 1.6 backcompat code", "Search and Replace array lengths don't match: ", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("6S1TFgpxsckn86");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ' ');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '8', 55, 97);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.join((Object[]) stringArray0, '3');
      assertEquals("33333333", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "'.$o5.1b4lhdwi:", (-614), 128);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "Serch and Replce array lengths don't match: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'Q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '_');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category0, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '_');
      assertEquals("DISPLAY_FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      stack0.setSize(720);
      Iterator<CharBuffer> iterator0 = stack0.iterator();
      String string0 = StringUtils.join(iterator0, '(');
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "fbw7[o(8");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, "java.util.Locale$Category@0000000001");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      vector0.setSize(28);
      String string0 = StringUtils.join((Iterable<?>) vector0, "za@za@za@za@za@za@zuser.name");
      assertEquals("za@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.nameza@za@za@za@za@za@zuser.name", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      vector0.add(charBuffer0);
      vector0.add(charBuffer0);
      String string0 = StringUtils.join((Iterable<?>) vector0, (String) null);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) treeSet0);
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, '');
      assertFalse(treeSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Search and Replace array lengths don't match: ");
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeStart("Irix", "6S7g^TFgpxs{k6");
      assertEquals("Irix", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeStart("ii*h1lY", (String) null);
      assertEquals("ii*h1lY", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeStart("O9Y{!-uk", "O9Y{!-uk");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("user.region", (String) null);
      assertNotNull(string0);
      assertEquals("user.region", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Serch and6Replace array leEgts don't mWqch: ", "Serch and6Replace array leEgts don't mWqch: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeEnd("illegalaccessexception occurred dur.y&{|<s0]ackcompat code", "");
      assertEquals("illegalaccessexception occurred dur.y&{|<s0]ackcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeEnd("#K&Gfc,*GH", "%&]3'3_");
      assertEquals("#K&Gfc,*GH", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("w6S7T^g0x?k86", (String) null);
      assertEquals("w6S7T^g0x?k86", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Cannot pad a negative amount: ", "w`[");
      assertEquals("Cannot pad a negative amount: ", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.remove("rL rL ", (String) null);
      assertNotNull(string0);
      assertEquals("rL rL ", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.remove("[", "[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'G');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.remove(" ", 'u');
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.remove("6S7TFgpxsck86", '6');
      assertEquals("S7TFgpxsck8", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replace("*o]]", "", "sc#~ ct|52", 253);
      assertEquals("*o]]", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replace("ang3.objectutil", "ang3.objectutil", (String) null, 1183);
      assertNotNull(string0);
      assertEquals("ang3.objectutil", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replace("$", "$", "$", 0);
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replace("eGrch and ReplKce array lengths do't match: ", "mx", "mx");
      assertEquals("eGrch and ReplKce array lengths do't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replace("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 222);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly(" ", (String[]) null, (String[]) null);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("0=8@Rm", stringArray0, stringArray0);
      assertEquals("0=8@Rm", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray1);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("x+'z4LV@4`94", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = "Windows 9";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Windows 9", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Windows 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "eU<EE{:N5hOo0M}W#";
      stringArray0[1] = "eU<EE{:N5hOo0M}W#";
      String[] stringArray1 = new String[7];
      stringArray1[1] = "eU<EE{:N5hOo0M}W#";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("eU<EE{:N5hOo0M}W#", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: eU<EE{:N5hOo0M}W#
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "2c'_(/nfJ";
      String[] stringArray1 = new String[4];
      stringArray1[1] = " is not in he range '0' - '9'";
      String string0 = StringUtils.replaceEachRepeatedly("2c'_(/nfJ", stringArray0, stringArray1);
      assertEquals(" is not in he range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " is not in he range '0' - '9'";
      stringArray0[1] = "2c'_(/nfJ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("2c'_(/nfJ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 2c'_(/nfJ
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "4@=W";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("4@=W", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 4@=W
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "t";
      stringArray0[1] = "t";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("NoSuchFieldEDception occurred durin .6 backcompat code", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: NoSuchFieldEDception occurred durin .6 backcompat code
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Wn~indows 9";
      String string0 = StringUtils.replaceEach("Wn~indows 9", stringArray0, stringArray0);
      assertEquals("Wn~indows 9", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'K', 'K');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'g', 'g');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "7[o(", "7[o(");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.replaceChars("illegalaccessexception occurred dur.y&{|<s0]ackcompat code", "", "");
      assertEquals("illegalaccessexception occurred dur.y&{|<s0]ackcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.replaceChars("user.country", "=mn", (String) null);
      assertEquals("user.coutry", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars("}scccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", "7[o(", "7[o(");
      assertEquals("}scccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars("fbw18f~8", "k9_'.wg`", " is not in the range '[' - '9'");
      assertEquals("fbo18f~8", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 258, 258);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.overlay("vqsx/~3 ", (String) null, (-3414), (-4315));
      assertEquals("vqsx/~3 ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.overlay("P X", "P X", 'r', (-20));
      assertEquals("P X", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.overlay("G:Tx||\"iFq{z##{", "G:Tx||\"iFq{z##{", ':', ':');
      assertEquals("G:Tx||\"iFq{z##{G:Tx||\"iFq{z##{", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.chomp("NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chomp("(1< Kir4) &h", "/`4pZ|0%Nv6,");
      assertEquals("(1< Kir4) &h", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chomp("UESTO<TUn1;2O.+", (String) null);
      assertNotNull(string0);
      assertEquals("UESTO<TUn1;2O.+", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chomp("6.1", "6.1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chop("java.awt.graphicsenv");
      assertNotNull(string0);
      assertEquals("java.awt.graphicsen", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.repeat("si", 12);
      assertEquals("sisisisisisisisisisisisi", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, 2021);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.repeat("InvocationTargetException occurred during 1.6 backcompat code", 1);
      assertEquals("InvocationTargetException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 1358);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", (int) '3');
      assertEquals("                                                   ", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.repeat("", "[", 8201);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.repeat("T}X,4mWt", "[", 64);
      assertEquals("T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt[T}X,4mWt", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.repeat("5", (String) null, (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-1), 'j');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.rightPad("`C:]`/J", (-1), 'O');
      assertEquals("`C:]`/J", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("java.runtime.version", 55296, 'w');
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 2094, "f_ lTwDz<");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.rightPad("p{InCombiningDiacriticalMarks}+", 1, (String) null);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.center("X_,", 9, "! 8");
      assertEquals("! 8X_,! 8", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad("G:Tx||\"iFq{z##{", 16, "G:Tx||\"iFq{z##{");
      assertEquals("G:Tx||\"iFq{z##{G", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad("G:Tx||\"iFq{z##{", (int) '=', "G:Tx||\"iFq{z##{");
      assertEquals("G:Tx||\"iFq{z##{G:Tx||\"iFq{z##{G:Tx||\"iFq{z##{G:Tx||\"iFq{z##{G", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (int) '=', '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.leftPad(" is less than 0: ", 0, 'v');
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad("AIX", 56319, '0');
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 3233, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.leftPad(":K:8 in]_", (-1), "UkA)c?Rg?fLF78?yau");
      assertEquals(":K:8 in]_", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.leftPad("upL/J0*xN", 14, "normalize");
      assertEquals("normaupL/J0*xN", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.leftPad("qPP}!", 32, "qPP}!");
      assertEquals("qPP}!qPP}!qPP}!qPP}!qPqPP}!", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 49, 't');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.center("]16", 0, '$');
      assertEquals("]16", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.center("ClassNotFounEception occurred during 1.6 bac#compat code", 16, 'z');
      assertEquals("ClassNotFounEception occurred during 1.6 bac#compat code", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 64, "?03");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.center("?s{SCm{B7n5X", (-2553), "?s{SCm{B7n5X");
      assertEquals("?s{SCm{B7n5X", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.center("", 32, "");
      assertEquals("                                ", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.center("^an?&wUg|.", 7, "The String must not be empty");
      assertEquals("^an?&wUg|.", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.upperCase("Search andReplace array lngths Mon'tmatchP ");
      assertEquals("SEARCH ANDREPLACE ARRAY LNGTHS MON'TMATCHP ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = StringUtils.upperCase("jamk}zq`-&.version", locale0);
      assertNotNull(string0);
      assertEquals("JAMK}ZQ`-&.VERSION", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(" <a}9b(N6");
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.lowerCase("$");
      assertEquals("$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = StringUtils.lowerCase("TimeToLive of ", locale0);
      assertEquals("timetolive of ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.capitalize("?s{SCm{B7n5X");
      assertEquals("?s{SCm{B7n5X", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("user.coutry");
      assertEquals("user.coutry", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.swapCase("/}Zgm\u0006xek ");
      assertEquals("/}zGM\u0006XEK ", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = StringUtils.countMatches("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = StringUtils.countMatches("$", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnaix");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("*h,z8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" is not in the range '[' - '9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("PDeaxU:'JE6k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("1O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("NoSuchMethodException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("c\"?*qd;,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("h-27Mi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("1O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("5.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" @k", " @k");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("gUo?\u0004F$V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.isAllUpperCase(stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("d*20iS~ C1|W2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("J");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.defaultString("Yn+}C}O7ECiSc{<(");
      assertEquals("Yn+}C}O7ECiSc{<(", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.defaultString("|2y", "|2y");
      assertEquals("|2y", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "6S7TFgpxsck6", (CharSequence) "6S7TFgpxsck6");
      assertEquals("6S7TFgpxsck6", charSequence0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.reverse("illegalaccessexception occurred dur.y&{|<s0]ackcompat code");
      assertNotNull(string0);
      assertEquals("edoc tapmockca]0s<|{&y.rud derrucco noitpecxesseccalagelli", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '8');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.abbreviate("java.text.Normalizer$Form", 8, 8);
      assertEquals("...t....", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.abbreviate("eRi  (\"pB", 83);
      assertEquals("eRi  (\"pB", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.abbreviate("java.class.vyxsion", (int) 'y', 16);
      assertEquals("...class.vyxsion", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\"ey%euj++p/j`z`(@", 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 730);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("ESTO<T9Un1;2O.+", "", 4);
      assertEquals("ESTO<T9Un1;2O.+", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("EST8O<TUn;2O.+", "EST8O<TUn;2O.+", 20);
      assertEquals("EST8O<TUn;2O.+", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("cfI", "5.1", (-378));
      assertEquals("cfI", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("`XgrNzuCW<a[", "MX", 10);
      assertEquals("`XgrMXW<a[", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.difference("V9B_|3", "5.1");
      assertEquals("5.1", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.difference("UaH77", (String) null);
      assertNotNull(string0);
      assertEquals("UaH77", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.difference("SeGrch and ReplKce array lengths don't match: ", "SeGrch and ReplKce array lengths don't match: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Py^09LQwlhvOs,*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.difference("", "*h,z86_qiAWu");
      assertEquals("*h,z86_qiAWu", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "S7T^g0x?k86w", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code", (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("%eUj++P/J`Z`(", "%eUj++P/J`Z`(");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(14, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Search and Replace array lengths don't match:";
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Search and Replace array lengths don't match:", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("$", "$");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, "");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(string0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("illegalaccessexception occurred dur.y&{|<s0]ackcompat code", "");
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("NoSuchFieldException occurred during 1.6 backcompat code", "s\"MLmgG[TxyB|,");
      assertEquals(55, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.startsWithAny(")7+m", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("NoSuchFieldException occurred during 1.6 backcompat code", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = ")7+m";
      boolean boolean0 = StringUtils.startsWithAny(")7+m", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("liblib", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "8KimQhW7]0vP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("yX", "fJx* KM1U{4E2");
      assertFalse(boolean0);
  }
}
