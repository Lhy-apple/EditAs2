/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:00:34 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("/5w%^@A D~>Ki:Y", "/5w%^@A D~>Ki:Y", (-2904));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("/!P\"~D&$w*:ly=g", "/!P\"~D&$w*:ly=g");
      String string0 = StringUtils.replaceEach("/!P\"~D&$w*:ly=g", stringArray0, stringArray0);
      assertEquals("/!P\"~D&$w*:ly=g", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.abbreviate("GaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGa", 97, 97);
      assertEquals("...aGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGa...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B", "B");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" and element cannot both be null", "", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("V~0J=", " is not in the range '0' - '9'");
      assertEquals("V~0J=", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.center(", '", (-971));
      assertEquals(", '", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("; ra %uV JVu: ");
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.removeEnd("OIljBl_ly6", "OIljBl_ly6");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(string0, "OIljBl_ly6", 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 108);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("C6Sn\"rq'L9", "WZf8sbMUzOP\u0000~", (String) null);
      assertNotNull(string0);
      assertEquals("C6Sn\"rq'L9", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8203);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("A", ")nRgd4X&T|sr");
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.lang.Object@585c2a8bRF<lp!T9<%=&aRjava.lang.Object@75f157dRF<lp!T9<%=&aRF<lp!T9<%=&aRjava.lang.Object@75f157dRF<lp!T9<%=&aRF<lp!T9<%=&aRF<lp!T9<%=&a", 'R');
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("java.lang.Object@585c2a8bRF<lp!T9<%=&aRjava.lang.Object@75f157dRF<lp!T9<%=&aRF<lp!T9<%=&aRjava.lang.Object@75f157dRF<lp!T9<%=&aRF<lp!T9<%=&aRF<lp!T9<%=&a", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", (-1));
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot clone Cloneable type ");
      assertEquals("Cannot clone Cloneable type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.chomp("%Dc", "([W|yqH'KMzOX/E");
      assertEquals("%Dc", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.substringBetween("{\"{p- W0| |Nr'XC", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("d4s^=*ag.w ", 'd');
      assertEquals("4s^=*ag.w ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("fr-CA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) " ", (CharSequence) " ");
      assertEquals(" ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("G)K/OT^suT<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.trimToNull("jB?SePKwz68");
      assertEquals("jB?SePKwz68", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(", Length: ");
      assertEquals(", Length:", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.stripToNull(stringArray0[0]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("/ Lenyth ");
      assertEquals("/ Lenyth", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.strip(", Length: 0", "");
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripStart("Pfu)+Hw", "Pfu)+Hw");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripStart("Minimum abbreviation width is 4", "', is neither of type Map.Entry nor an Array");
      assertEquals("mum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripEnd("'k+xO1L", "%>$DO2sp`IalG&}{v");
      assertEquals("'k+xO1L", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Ga", "Ga");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Cannot store ");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.stripAccents(stringArray0[0]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "gA", (CharSequence) "Ga");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.center(".", 4424, ".");
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "de1M$2ub");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "OKxFv", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("decompose", "decompose");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) " ", (-830));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 97);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "?<HcTH*J!lx(", (-988), (-988));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (int) '~', (int) '~');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "gA", (CharSequence) "Ga");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "00", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 42);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) " in an arraMy of ", (CharSequence) "*CB+PYeGi\nI", 25);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Exception cloning Cloneable type ", (CharSequence) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-4657));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("; )r a %uV JVu: ", (CharSequence) null, 608);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", " in an array of ", (-914));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("d4s^=*ag.w ", "4s^=*ag.w ", 2227);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("IllegalAccessException occurred", "IllegalAccessException occurred", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Q@vWo{Q+Yv%", (CharSequence) "", (-807));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "sun.text.Normalizer");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "-jeZ8Uf>", (CharSequence) "-jeZ8U8f>");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = StringUtils.rightPad("`|xy}/CZ", 4021, "-Ds9/p-nT}!Qgr");
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) "-Ds9/p-nT}!Qgr");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "j*QlRJL", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "E6CAz$", 6, (-1655));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (-6020), 512);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "nTf=9%vt''J^N_^A", (CharSequence) "");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) ",>8n7CZ27l~lSJ`<W?", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "|[x:B%S4ES6m/pb|[x:B%S4ES6m/p", (CharSequence) "|[x:B%S4ES6m/pb|[x:B%S4ES6m/pb", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) null, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "zcvWGka%uR9'~qgjx%u", (CharSequence) "egalArgumentException occurred");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) stringArray0[2], (CharSequence) "de1M$2u", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ";TQ", (CharSequence) null, (int) '9');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "(,a9.`", (CharSequence) "(,a9.`", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) charBuffer0, 256);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "IllegalArgumentException occurred", (CharSequence) "yvf");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "Bk[@DL", 64);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", 160);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "p{InCombiningDiacriticalMarks}+", 690);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "ixJ<4@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "U^", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "IllegalArgumentException occurred", (CharSequence) "IllegalArgumentException occurred");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("java.text.Normalizer is not available                                                                                                                                                                                     ", ">z_&M7_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "\\u00";
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("/v:", "/v:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace(">n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("; or a Sun JVM: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot store ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "mi7BL]{1,81qNcB", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "V~0J=", "V~0J=");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "_eC[(,w`|3/m", "normalize");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Ga", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "tdLw3+Bd^ Ns", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence) " ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "y", (CharSequence) "F<u>~Xw5{U}b)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "sun.text.Normalizer", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oneab", "Cloneabe typet");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Ny^<", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "A", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "X[7OJ", (CharSequence) "vVR");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "bd4s$=*ag.wwH", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "C6Sn\"rq'L9", "V(q|3~&O1UA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "b0", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "X[7OJ", "vVR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ",81qNcB", "mi7BL]{1,81qNcB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "+Wi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "?<HcTH*J!lx(", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "*KA+PYeG,\nI";
      int int0 = StringUtils.indexOfAny((CharSequence) "OIljBl_ly6", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.rightPad(string0, 178, string0);
      assertEquals("\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u00\\u", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) string0;
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("Cannot store ", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Ga", "(,a9.`");
      int int0 = StringUtils.lastIndexOfAny("@dT_E}", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.lastIndexOfAny("*KA+PYeG,\nI", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "|[x:B%S4ES6m/pb|[x:B%S4ES6m/pb";
      int int0 = StringUtils.lastIndexOfAny("|[x:B%S4ES6m/pb|[x:B%S4ES6m/pb", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 797);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substring("b%!1H", (-1500));
      assertEquals("b%!1H", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substring("{", 8190);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substring("NNV6I?", (-2101), (-2101));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 13, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substring("java.text.Normalizer$Form", 10, 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substring("(,a9.`", 97, 97);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.left("Cannot get the toString of a null identity", Integer.MAX_VALUE);
      assertNotNull(string0);
      assertEquals("Cannot get the toString of a null identity", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 4096);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.left("Te Aray must notbenull", (-212));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.left("Cannot clone Cloneable type ", 16);
      assertEquals("Cannot clone Clo", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.right("mi7BL]{1,81qNcB", 7);
      assertNotNull(string0);
      assertEquals(",81qNcB", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 982);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.right("clone", (-914));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.right(", Length ", 2037);
      assertEquals(", Length ", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.mid("Cloneabe typet", 2, 5);
      assertEquals("oneab", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-807), 34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.mid("; )r a %uV JVu: ", (-1401), (-1401));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.mid("", 8192, 8192);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.mid(string0, (-2094), 11);
      assertEquals("\\u000", string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, "A");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBefore("; )r a %uV JVu: ", "}[KNQA*X+pOu)Yk#");
      assertEquals("; )r a %uV JVu: ", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBefore("?<HcTH*J!lx(", (String) null);
      assertNotNull(string0);
      assertEquals("?<HcTH*J!lx(", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBefore("a", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBefore("-Ds9/p-nT}!Qgr", "-Ds9/p-nT}!Qgr");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.ArrayUtils", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringAfter("){J6kG)S_#k]ZQ", "){J6kG)S_#k]ZQ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringAfter("(,2a9.`", "S0}N `hIfu:LN");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("gF*lR{uAp@7:8Mq<Xg}", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Yk&Uz\"}Ud-:AGm>0s/>", "a-#u$");
      assertEquals("Yk&Uz\"}Ud-:AGm>0s/>", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("\"XJ#IT8#h\",Bs", "\"XJ#IT8#h\",Bs");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("xpDt#N(Z~|?e4#9do'l", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("6#,\"39C0x; _KzBz", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("WpXzA", "WpXzA");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("The Array must not be null", "o");
      assertEquals("t be null", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.substringBetween("VxV&$&0an+mgRx~H", "; or a Sun JVM: ", "VxV&$&0an+mgRx~H");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.substringBetween("g$h;v02(*t", "g$h;v02(*t", "g$h;v02(*t");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Te Array must notbenull", "Ny^<B", "Ny^<B");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "awc:%dJ7", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("GaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGa", "Ga", "Ga");
      assertNotNull(stringArray0);
      assertEquals(48, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils", "0fF/mt?Wu!&48*$");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-1));
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is not in the range '0' - '9'", (String) null);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The Array must not be null", " ");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'C');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Array mst notbenull", 'l');
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("N^<B", 'B');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Array and element cannot both be null", "y");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.repeat("W", 8193);
      String[] stringArray0 = StringUtils.split(string0, "W");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("kle:=w", "~Wmkwf?SPb5ijy");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.rightPad(",q4j", 1596, ",q4j");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, ",q4j", 1596);
      assertNotNull(stringArray0);
      assertEquals(1596, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Array nd elment cannot both b null");
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("k|VcY]G9Mf$AB0!,pp");
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'u');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '9', 7, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'y');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = StringUtils.join(objectArray0, 'R');
      assertNotNull(string0);
      assertEquals("RRRRRRRR", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "#,\"39C0x; _KzBz");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "Search and Replae rrayElengths don't match: ", (-554), (-554));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Ny^<B", 'B');
      String string0 = StringUtils.join((Object[]) stringArray0, "Ny^<B");
      assertEquals("Ny^<Ny^<B", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      String string0 = StringUtils.join(integerArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst((Object) null);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, '3');
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst((Object) null);
      linkedList0.add((Object) null);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '3');
      assertTrue(listIterator0.hasPrevious());
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '2');
      assertEquals("AUTOSELECT_FILTERING2EXTENDED_FILTERING2IGNORE_EXTENDED_RANGES2MAP_EXTENDED_RANGES2REJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "wx");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      linkedList0.add((CharBuffer) null);
      ListIterator<CharBuffer> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      linkedList0.add((CharBuffer) null);
      linkedList0.add((CharBuffer) null);
      ListIterator<CharBuffer> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "y");
      assertEquals("AUTOSELECT_FILTERINGyEXTENDED_FILTERINGyIGNORE_EXTENDED_RANGESyMAP_EXTENDED_RANGESyREJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string0 = StringUtils.join((Iterable<?>) arrayList0, '5');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'J');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, "N^<B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "_]z3s25ITWY,");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("nvocationTargetException occurred");
      assertEquals("nvocationTargetExceptionoccurred", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeStart("UV(jyMC9(]1>C", "");
      assertEquals("UV(jyMC9(]1>C", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.removeStart("'gd.?65bnH$l", "MX}P>ak{'*x*`_Pl");
      assertEquals("'gd.?65bnH$l", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeStart("Arguments cannot both be null", "Arguments cannot both be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("z#J=D=<", (String) null);
      assertNotNull(string0);
      assertEquals("z#J=D=<", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("!m()Hr{ oCK9", "!m()Hr{ oCK9");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.removeEnd(", Length: ", "");
      assertEquals(", Length: ", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("&O R=GH?pe8Rp2g7", "");
      assertEquals("&O R=GH?pe8Rp2g7", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("IllegalAccessException occurred", "IllegalAccessException occurred");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.remove(",7zen&h ", (String) null);
      assertEquals(",7zen&h ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("O", "O");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'E');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: 0", ' ');
      assertEquals(",Length:0", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.remove("A", 'Y');
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Pfu)+Hw", "", "");
      assertEquals("Pfu)+Hw", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replace("ZSmSjYsA\\", "ZSmSjYsA\\", "ZSmSjYsA\\", 0);
      assertEquals("ZSmSjYsA\\", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replace(" in an array of Strings must not be null", "MQ8+QPFsI?~&?bQZY)", " in an array of Strings must not be null");
      assertEquals(" in an array of Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replace("I", "I", "Ny^<B", 70);
      assertEquals("Ny^<B", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(":^GL+H!a>\t,|Ma2d?", ":^GL+H!a>\t,|Ma2d?", ":^GL+H!a>\t,|Ma2d?");
      assertEquals(":^GL+H!a>\t,|Ma2d?", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("normalize", stringArray0, stringArray0);
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("Arguments cannot both be null", (String[]) null, (String[]) null);
      assertEquals("Arguments cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("sun.text.Normalizer", stringArray0, (String[]) null);
      assertEquals("sun.text.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("A", stringArray0, stringArray1);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("6#,\"39C0x; _KzBz", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", 'r');
      String string0 = StringUtils.replaceEachRepeatedly("G<vh*i", stringArray0, stringArray0);
      assertEquals("G<vh*i", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "y";
      stringArray0[3] = "Array and element cannot both be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Array and element cannot both be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ga";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "Ga";
      stringArray1[2] = "Ga";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Ga", stringArray1, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ", Length ";
      stringArray0[1] = "N/Z{hCW&9L";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "N/Z{hCW&9L";
      stringArray1[1] = "N/Z{hCW&9L";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("N/Z{hCW&9L", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "V(q|3~&O1UAIndex: V(|3~&O1UAIndex: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("V(q|3~&O1UAIndex: V(|3~&O1UAIndex: ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Te Array must notbenull", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cug9,gavmrS^;-";
      String string0 = StringUtils.replaceEach("cug9,gavmrS^;-", stringArray0, stringArray0);
      assertEquals("cug9,gavmrS^;-", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.replaceChars("ixJ<4@", '>', 'j');
      assertNotNull(string0);
      assertEquals("ixJ<4@", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ']', ']');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Ny^<B", "JkK!(E6!E", "nY^<b");
      assertEquals("Ny^<B", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Index: ", (String) null, "x*Pb");
      assertNotNull(string0);
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.replaceChars("*@Bf9\"11ZD@v^", "*@Bf9\"11ZD@v^", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.replaceChars("i", "i", "i");
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.overlay("Ny^<B", "Ny^<B", (-863), (-863));
      assertNotNull(string0);
      assertEquals("Ny^<BNy^<B", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "A", (-1), 72);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.overlay(string0, (String) null, 2, (-111));
      assertEquals("00", string1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.overlay("60pnm:'Uz^!{/}EO$>", "60pnm:'Uz^!{/}EO$>", 1522, (-3303));
      assertEquals("60pnm:'Uz^!{/}EO$>", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 8192, 8192);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.chomp("$4yxyrJk(Pt");
      assertEquals("$4yxyrJk(Pt", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.chomp("Z");
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.chop(":Lq}V?#fG\"");
      assertNotNull(string0);
      assertEquals(":Lq}V?#fG", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, 1143);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.repeat("a", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 1);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.repeat("", 3);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.repeat("O", 8160);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.repeat("Ga", 97);
      assertEquals("GaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGa", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.repeat("qy", "qy", 64);
      assertEquals("qyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqyqy", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.repeat("java.text.Normalizer$Form", (String) null, 38);
      assertEquals("java.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Formjava.text.Normalizer$Form", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 31, ']');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad(",7zen&h ", (-641));
      assertEquals(",7zen&h ", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, Integer.MAX_VALUE, ":^GL+H!a]\t,|M.2d?");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.rightPad("x8HN\u0007OP3gT", (-93), "U#KD]yxD");
      assertEquals("x8HN\u0007OP3gT", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.rightPad("EozaQ|`b|H1q/%_ dP", 36, "EozaQ|`b|H1q/%_ dP");
      assertEquals("EozaQ|`b|H1q/%_ dPEozaQ|`b|H1q/%_ dP", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.rightPad("zL*u^:hQyhiam", 16, "zL*u^:hQyhiam");
      assertEquals("zL*u^:hQyhiamzL*", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 32, '8');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8194);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 585, "Ny^<B");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.leftPad("ro2 #X(!?e", 1, "");
      assertEquals("ro2 #X(!?e", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.center("Ga", 97, "Ga");
      assertEquals("GaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGa", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.center("1|h[w", 16, "1|h[W");
      assertEquals("1|h[W1|h[w1|h[W1", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 117, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect againsAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = StringUtils.length("org.apache.commons.lang3.StringUtils$InitStripAccents");
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-3568));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.center("The Array must not be null", 2);
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 13, "M6ckuvA0`t)[2x*}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.center("u<+h4t|?PPz7;WE6", (-863), "");
      assertEquals("u<+h4t|?PPz7;WE6", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.center("", 16, "");
      assertEquals("                ", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.center(":ixTS Lz7~br}gZxk", 9, "org.apache.commons.lang3.StringUtils$InitStripAccents");
      assertEquals(":ixTS Lz7~br}gZxk", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.upperCase("I");
      assertEquals("I", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("The character ", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Ga");
      assertEquals("ga", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      String string0 = StringUtils.lowerCase("V(q|3~&O1UAIndex: ", locale0);
      assertEquals("v(q|3~&o1uaindex: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.capitalize("V");
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("?<HcTH*J!lx(");
      assertEquals("?<HcTH*J!lx(", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.swapCase("TDlW3+bD^ nS");
      assertEquals("tdLw3+Bd^ Ns", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = StringUtils.countMatches("r??", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = StringUtils.countMatches("Z5ZTD#", "Z5ZTD#");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("array and element cannot both be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("yvf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Array and element cannot both be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Z5ZTD#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("FBqp@,u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(", '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("IllegalAccessException occurred");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("@]{^VMe>O>R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("0fF/mt?Wu!&48*$UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("?RmQy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("The Array must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.defaultString("jhf-~k?P:.k}T");
      assertEquals("jhf-~k?P:.k}T", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "d4s^=*ag.w ", (CharSequence) "d4s^=*ag.w ");
      assertEquals("d4s^=*ag.w ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.reverse(",7zen&h ");
      assertNotNull(string0);
      assertEquals(" h&nez7,", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'G');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 2248, 2248);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("r??", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.ArrayUtils", (-986), (int) 'U');
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" i)aeg\"(1]om~kV", 748, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.abbreviate("OU?:FxOU?:Fx", 10, 10);
      assertEquals("...xOU?:Fx", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, "^]-dz=XU&JFgF", 12);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("X[7OJ", (String) null, (-336));
      assertEquals("X[7OJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(" ", " ", 0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("tm/<", "-GyWIJ g{", 141);
      assertEquals("tm/<", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("The String must not be empty", "Ga", 25);
      assertEquals("The String mGaot be empty", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.difference("OU?:Fx", "OU?:Fx");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.difference("(,a9.`", (String) null);
      assertEquals("(,a9.`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.rightPad("/cc]Q%6jX", 8192, "/cc]Q%6jX");
      String string1 = StringUtils.difference("?RmQy", string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) ",htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg;tg:,htvg");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) ",htvg;tg:", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.difference("zj+x>}\u0007Lj&rVS", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.difference("6!yh}56cfmq>ova", "6!Yh}56cFMq>OVA");
      assertEquals("Yh}56cFMq>OVA", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.remove("Om9_uJMGc&Rb,Nw?W:", "E6CAz$");
      int int0 = StringUtils.indexOfDifference((CharSequence) "Om9_uJMGc&Rb,Nw?W:", (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Q)]J{w'~p *q.V");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("de1M$2ub", 'N');
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String[] stringArray0 = new String[4];
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/5w%^@A D~>Ki:Y", "/5w%^@A D~>Ki:Y");
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Ga";
      charSequenceArray0[1] = (CharSequence) "GaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGaGa";
      charSequenceArray0[2] = (CharSequence) "Ga";
      StringUtils.indexOfDifference(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Array and element cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Array and element cannot both be null";
      charSequenceArray0[2] = (CharSequence) "Array and element cannot both be null";
      StringUtils.indexOfDifference(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      StringUtils.getCommonPrefix((String[]) null);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "0fF/mt?Wu!&48*$UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", "0fF/mt?Wu!&48*$");
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^lonea)e type ";
      stringArray0[1] = "^LONEA)E TYPE ";
      stringArray0[2] = "^lonea)e type ";
      stringArray0[3] = "^LONEA)E TYPE ";
      stringArray0[4] = "^lonea)e type ";
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "yDY9wI94.YFb'`", (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "', has a length less than 2", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "org.apache.commons.lang3.StringUtils");
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "yDY9wI94.YFb'`", (CharSequence) "fr-CA");
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "The character GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", (CharSequence) "The character GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG");
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "'re", 2);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "java.text.Normalizer$Form", (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "The character ", (CharSequence) ", Length: ", (-2904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("/5w%^@A D~>Ki:Y", "/5w%^@A D~>Ki:Y");
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "KD_<|C", 149);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "zcvWGka%uR9'~qgjx%uegalArgumentException occurredegalArgumentException occurredegalArgumentException occurredegalArgumentException occurredegalArgumentException occurredegalArgumentException occurredegalArgumentException occurredegal", 233);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "&w5y7z", (CharSequence) "", 0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "/V:", (CharSequence) "", 64);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.stripToNull(string0);
      StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) "KD_<|C", 149);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "                                                             ", (CharSequence) "'re", 1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      StringUtils.getLevenshteinDistance((CharSequence) "vJ@z20;]66", (CharSequence) "l[{o#p#rM@EDuf", 13);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      StringUtils.startsWith((CharSequence) null, "");
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      StringUtils.startsWithIgnoreCase("h=qs.&SR~!bJGtkbX`", (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      StringUtils.startsWith((CharSequence) null, (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      StringUtils.startsWithAny("", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      StringUtils.startsWithAny("U^", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.startsWithAny("(Spq(Qf=", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "U^";
      StringUtils.startsWithAny("U^", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((CharSequence) null, "OU?:Fx");
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      StringUtils.endsWith((CharSequence) null, (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      StringUtils.normalizeSpace(",7zength ");
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      StringUtils.normalizeSpace((String) null);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      StringUtils.endsWithAny("Array and element cannot both be null", stringArray0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.center(",q{;4j", 848);
      charSequenceArray0[1] = (CharSequence) string0;
      StringUtils.endsWithAny(charSequenceArray0[1], charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      StringUtils.endsWithAny("syel7f5", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, ")Q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringUtils.toString(byteArray0, (String) null);
  }
}
