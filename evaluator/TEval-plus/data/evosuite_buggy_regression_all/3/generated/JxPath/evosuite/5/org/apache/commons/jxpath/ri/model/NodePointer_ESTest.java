/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:56:06 GMT 2023
 */

package org.apache.commons.jxpath.ri.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodePointer_ESTest extends NodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = beanPropertyPointer0.getName();
      BeanPointer beanPointer0 = new BeanPointer(beanPropertyPointer0, qName0, (Object) null, jXPathBasicBeanInfo0);
      NodePointer nodePointer0 = beanPropertyPointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      
      int int0 = beanPointer0.compareTo(nodePointer0);
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(0, int0);
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = new QName("", "");
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      Locale locale0 = Locale.KOREA;
      BeanPointer beanPointer0 = new BeanPointer(qName0, "", jXPathBasicBeanInfo0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) class0);
      // Undeclared exception!
      try { 
        beanPointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an object for path ''/:[-2147483647], operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      Class<NodePointer> class1 = NodePointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      boolean boolean0 = beanPropertyPointer0.isAttribute();
      assertTrue(beanPropertyPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<NodePointer> class0 = NodePointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      Locale locale0 = Locale.CHINESE;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, jXPathBasicBeanInfo0, jXPathBasicBeanInfo0, locale0);
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      assertTrue(beanPointer0.isRoot());
      
      propertyPointer0.printPointerChain();
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, "K", locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "K");
      // Undeclared exception!
      try { 
        nodePointer0.createPath((JXPathContext) null, (Object) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName("$cBFe4A>fJ]I");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        variablePointer0.isLanguage("$cBFe4A>fJ]I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = new QName("<<unknown namespace>>");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespaceIterator();
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("qM'h");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.getDefaultNamespaceURI();
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName("<<unknown namespace>>");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
      VariablePointer variablePointer1 = (VariablePointer)nodePointer0.getNodeValue();
      assertFalse(nodePointer0.isRoot());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.US;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, locale0, locale0);
      // Undeclared exception!
      try { 
        nodePointer0.createAttribute((JXPathContext) null, (QName) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path //@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QName qName0 = new QName("<<UNKNOWN NAMESPACE>>");
      NullPointer nullPointer0 = new NullPointer((NodePointer) null, qName0);
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      propertyPointer0.remove();
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QName qName0 = new QName("", "");
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      Locale locale0 = Locale.KOREA;
      BeanPointer beanPointer0 = new BeanPointer(qName0, "", jXPathBasicBeanInfo0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) class0);
      NodePointer nodePointer0 = beanPointer0.createPath(jXPathContext0);
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QName qName0 = new QName("TdIEup");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
      nodePointer0.getNamespaceURI();
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = new QName("m.<yl}8?5;");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("m.<yl}8?5;");
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<NodeNameTest> class0 = NodeNameTest.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex((-20));
      beanPropertyPointer0.printPointerChain();
      assertEquals((-20), beanPropertyPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      QName qName1 = new QName("<<unknown namespace>>", "<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
      assertFalse(variablePointer0.isAttribute());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      // Undeclared exception!
      try { 
        variablePointer0.getPointerByKey((JXPathContext) null, "@%wLf", "@%wLf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, locale0, locale0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        nodePointer0.createChild((JXPathContext) null, (QName) null, (-1124), object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an object for path //null[-1123], operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
      // Undeclared exception!
      try { 
        variablePointer0.getPointerByID(jXPathContext0, "<<unknown namespace>>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QName qName0 = new QName("\"!=\"", "\"!=\"");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      variablePointer0.setNamespaceResolver(namespaceResolver0);
      variablePointer0.getNamespaceResolver();
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      nodePointer0.getNamespaceResolver();
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<NodePointer> class0 = NodePointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      Locale locale0 = Locale.CHINESE;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, jXPathBasicBeanInfo0, jXPathBasicBeanInfo0, locale0);
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      NodePointer nodePointer0 = propertyPointer0.getParent();
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QName qName0 = new QName("TelEJ");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      NodePointer nodePointer1 = nodePointer0.getParent();
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNull(nodePointer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QName qName0 = new QName("TdMEJ");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Class<NodeNameTest> class0 = NodeNameTest.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(variablePointer0, qName0, class0, jXPathBasicBeanInfo0);
      boolean boolean0 = beanPointer0.isRoot();
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QName qName0 = new QName("<<UNKNOWN NAMESPACE>>FR-CA");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      boolean boolean0 = variablePointer0.isRoot();
      assertTrue(boolean0);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<NodeNameTest> class0 = NodeNameTest.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      boolean boolean0 = beanPropertyPointer0.isNode();
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QName qName0 = new QName("(", "(");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        variablePointer0.getValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: (:(
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QName qName0 = new QName("AW8)", "AW8)");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
      boolean boolean0 = nodePointer0.isActual();
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<NodeNameTest> class0 = NodeNameTest.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = new QName("<<unknown namespace>>");
      Locale locale0 = Locale.forLanguageTag(beanPropertyPointer0.UNKNOWN_NAMESPACE);
      BeanPointer beanPointer0 = new BeanPointer(qName0, beanPropertyPointer0, jXPathBasicBeanInfo0, locale0);
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      
      beanPointer0.setIndex(0);
      boolean boolean0 = beanPointer0.isActual();
      assertEquals(0, beanPointer0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QName qName0 = new QName("I");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPointer beanPointer0 = new BeanPointer(variablePointer0, qName0, variablePointer0, jXPathBasicBeanInfo0);
      beanPointer0.setIndex((-3419));
      boolean boolean0 = beanPointer0.isActual();
      assertEquals((-3419), beanPointer0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QName qName0 = new QName("]+[TelEJ", "]+[TelEJ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
      BeanPointer beanPointer0 = new BeanPointer(qName0, "]+[TelEJ", jXPathBasicBeanInfo0, locale0);
      beanPointer0.setIndex(6);
      boolean boolean0 = beanPointer0.isActual();
      assertEquals(6, beanPointer0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QName qName0 = new QName("vo0lNL\"'cqP$6BU");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "vo0lNL\"'cqP$6BU", locale0);
      assertNotNull(nodePointer0);
      
      Object object0 = nodePointer0.getRootNode();
      assertNotNull(object0);
      
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      jXPathContext0.getRelativeContext(nodePointer0);
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QName qName0 = new QName("<<UNKNOWN NAMESPACE>>FR-CA");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NullPointer nullPointer0 = new NullPointer(variablePointer0, qName0);
      // Undeclared exception!
      try { 
        nullPointer0.getRootNode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: <<UNKNOWN NAMESPACE>>FR-CA
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      boolean boolean0 = variablePointer0.testNode((NodeTest) null);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = new QName("<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = beanPropertyPointer0.testNode(nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertFalse(boolean0);
      assertFalse(beanPropertyPointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "<<unknown namespace>>");
      boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<NodeNameTest> class0 = NodeNameTest.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = beanPropertyPointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
      assertFalse(variablePointer0.isAttribute());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      boolean boolean0 = variablePointer0.testNode(processingInstructionTest0);
      assertFalse(variablePointer0.isAttribute());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      boolean boolean0 = variablePointer0.testNode(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(boolean0);
      assertFalse(variablePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      boolean boolean0 = variablePointer0.testNode(nodeNameTest0);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.UK;
      NullPointer nullPointer0 = new NullPointer((QName) null, locale0);
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      Locale locale1 = propertyPointer0.getLocale();
      assertNotNull(locale1);
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      beanPropertyPointer0.childIterator(processingInstructionTest0, false, (NodePointer) null);
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = new QName("<<unknown namespace>>");
      NodeIterator nodeIterator0 = beanPropertyPointer0.attributeIterator(qName0);
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertNotNull(nodeIterator0);
      assertFalse(beanPropertyPointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      boolean boolean0 = variablePointer0.isDefaultNamespace("<<unknown namespace>>");
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(boolean0);
      assertFalse(variablePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      boolean boolean0 = variablePointer0.isDefaultNamespace((String) null);
      assertTrue(boolean0);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QName qName0 = new QName("=<*N<B<@ if 5q1xe", "=<*N<B<@ if 5q1xe");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      nodePointer0.printPointerChain();
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      NullPointer nullPointer0 = new NullPointer((QName) null, locale0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(nullPointer0, (QName) null, locale0);
      String string0 = nodePointer0.asPath();
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertEquals("null()/null", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<NodeNameTest> class0 = NodeNameTest.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      assertFalse(beanPropertyPointer0.isAttribute());
      
      beanPropertyPointer0.setAttribute(true);
      beanPropertyPointer0.printPointerChain();
      assertTrue(beanPropertyPointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = beanPropertyPointer0.getName();
      BeanPointer beanPointer0 = new BeanPointer(beanPropertyPointer0, qName0, (Object) null, jXPathBasicBeanInfo0);
      NullPointer nullPointer0 = new NullPointer(beanPropertyPointer0, qName0);
      beanPointer0.compareTo(nullPointer0);
      assertFalse(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(beanPointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      QName qName0 = new QName("~=O!Eaw/;uh5Q=j:td");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      int int0 = variablePointer0.compareTo(variablePointer0);
      assertEquals(0, int0);
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      QName qName0 = new QName("+eNUP", "+eNUP");
      Class<Integer> class0 = Integer.class;
      Class<NodePointer> class1 = NodePointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.forLanguageTag("+eNUP");
      BeanPointer beanPointer0 = new BeanPointer(qName0, "+eNUP", jXPathBasicBeanInfo0, locale0);
      NullPointer nullPointer0 = new NullPointer(beanPointer0, qName0);
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      int int0 = beanPointer0.compareTo(propertyPointer0);
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals((-1), int0);
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      QName qName0 = new QName("<<unknown namespace>>");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, variablePointer0);
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPointer beanPointer0 = new BeanPointer(nodePointer0, qName0, object0, jXPathBasicBeanInfo0);
      int int0 = beanPointer0.compareTo(variablePointer0);
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, (QName) null);
      // Undeclared exception!
      try { 
        variablePointer1.compareTo(nodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot compare pointers that do not belong to the same tree: '$null' and '$null'
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }
}
