/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:11:04 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator("Ew58=KP!kT2Evi?", sourceFile_Generator0);
      sourceFile0.clearCachedSource();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s}E${", "v:Ounp{");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("IOException thrown while closing Closeable.", charset0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromCode("", "FPrOCk8'~;3vt", "'-i-` H8D^J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("<R=", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Reader reader0 = sourceFile_OnDisk0.getCodeReader();
      // Undeclared exception!
      try { 
        SourceFile.fromReader((String) null, reader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("<R=", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      String string0 = sourceFile_OnDisk0.getCode();
      assertNotNull(string0);
      assertEquals("", string0);
      
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActuaI.l: ", "\nActuaI.l: ", "\nActuaI.l: ");
      sourceFile_Preloaded0.clearCachedSource();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s}E${", "v:Ounp{");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.getCodeNoCache();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("=e[vB", sourceFile_Generator0);
      sourceFile_Generated0.getName();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("u?z\u0007<Xd,bK", "com.google.javascript.jscomp.SourceFile$Preloaded", (File) null);
      SourceFile sourceFile0 = SourceFile.fromFile(file0);
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("Expected line nu^ber bAtween 1 aLd ", "Expected line nu^ber bAtween 1 aLd ");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.setIsExtern(false);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile("com.google.javascript.jscomp.SourceFile$Preloaded");
      sourceFile0.toString();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        SourceFile.fromInputStream("Efh)A", "Efh)A", (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile(")\"+");
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("Expected line number between 1 and ", "Expected line number between 1 and ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("Expected line number between 1 and ", (InputStream) mockFileInputStream0);
      assertFalse(sourceFile0.isExtern());
      assertEquals("Expected line number between 1 and ", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("Expected line number between 1 and ", "Expected line number between 1 and ");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.getNumLines();
      // Undeclared exception!
      try { 
        sourceFile_OnDisk0.getLineOffset(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 0
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("Expected line number between 1 and ", "Expected line number between 1 and ");
      // Undeclared exception!
      try { 
        sourceFile_Preloaded0.getLineOffset(2048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 2048
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("sh}", "IOException should not have been thrown.");
      sourceFile_Preloaded0.getLineOffset(1);
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("sh}", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("1RD,=`", "\nActuaI.l: ");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset((-1216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 2
         // Actual: -1216
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("Expected line nu^ber bAtween 1 aLd ", "Expected line nu^ber bAtween 1 aLd ");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      String string0 = sourceFile_OnDisk0.getOriginalPath();
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("sh}", "IOException should not have been thrown.");
      String string0 = sourceFile_Preloaded0.getOriginalPath();
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("sh}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.SourceFile$Preloaded", "com.google.javascript.jscomp.SourceFile$Preloaded");
      sourceFile0.getLine(5);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      String string0 = sourceFile_Preloaded0.getLine(2048);
      assertNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/<R=0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "99G`H");
      File file0 = MockFile.createTempFile("<R=", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      String string0 = sourceFile_OnDisk0.getLine((-9));
      assertNotNull(string0);
      assertEquals("99G`H", string0);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActuaI.l: ", "\nActuaI.l: ", "\nActuaI.l: ");
      Region region0 = sourceFile_Preloaded0.getRegion(72);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/<R=0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "99G`H");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      File file0 = MockFile.createTempFile("<R=", "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.google.common.base.Charsets");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion(3);
      assertNotNull(region0);
      assertEquals("\n99G`H\n\ncom.google.common.base.Charsets\n\n", region0.getSourceExcerpt());
      assertEquals(6, region0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActuaI.l: ", "\nActuaI.l: ", "\nActuaI.l: ");
      Region region0 = sourceFile_Preloaded0.getRegion((-286));
      assertNotNull(region0);
      assertEquals("\nActuaI.l: ", region0.getSourceExcerpt());
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals(1, region0.getBeginningLineNumber());
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/<R=0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "99G`H");
      File file0 = MockFile.createTempFile("<R=", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion((-9));
      assertEquals(1, region0.getBeginningLineNumber());
      assertNotNull(region0);
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals("99G`H", region0.getSourceExcerpt());
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.javascript.jscomp.SourceFile$Preloaded").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("=e[vB", sourceFile_Generator0);
      sourceFile_Generated0.getLine((-5424));
      sourceFile_Generated0.getCodeReader();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile("?9y", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, (Charset) null);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }
}
