/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:15:26 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = new Node(105);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("dvM-zRq");
      Node node1 = new Node(4);
      node0.addChildrenToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode("dvM-qtl&");
      Node node1 = new Node(4);
      node0.addChildrenToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("[}3}5=$sJ-$Qx~");
      Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, "[}3}5=$sJ-$Qx~", "[}3}5=$sJ-$Qx~");
      node1.addChildrenToBack(node0);
      unreachableCodeElimination0.process(node0, node1);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("[}3}5=$sJ-$Qx~");
      Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, "[}3}5=$sJ-$Qx~", "[}3}5=$sJ-$Qx~");
      node1.addChildrenToBack(node0);
      Node node2 = new Node(29);
      node0.addChildrenToFront(node2);
      unreachableCodeElimination0.process(node0, node1);
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode("dvM-qtl&");
      Node node1 = new Node(4);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = new Node(0, (-1551), 3070);
      Node node3 = peepholeRemoveDeadCode0.tryOptimizeBlock(node2);
      node1.addChildrenToBack(node3);
      node0.addChildrenToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode(";sa*e");
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("Pce`{Z`oa\"|1_mP", "Pce`{Z`oa\"|1_mP");
      Node node1 = compiler0.parseTestCode("Pce`{Z`oa\"|1_mP");
      node0.addChildToFront(node1);
      Node node2 = compiler0.parseTestCode("Pce`{Z`oa\"|1_mP");
      node1.addChildrenToFront(node2);
      unreachableCodeElimination0.process(node1, node0);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
  }
}
