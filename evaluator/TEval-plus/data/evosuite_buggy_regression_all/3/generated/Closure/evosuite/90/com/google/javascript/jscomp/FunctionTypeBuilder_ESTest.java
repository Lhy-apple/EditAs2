/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:15:07 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("b6fi:q", "b6fi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, (String) null, (Scope) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("bfi:q", "bfi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("bfi:q", compiler0, node0, "bfi:q", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      functionTypeBuilder1.inferFromOverriddenFunction(functionType0, (Node) null);
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'TLk:xVn{Iv{", "`u?'TLk:xVn{Iv{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'TLk:xVn{Iv{", compiler0, node0, "`u?'TLk:xVn{Iv{", (Scope) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[4];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("{0} @extends non-object type {1}", "{0} @extends non-object type {1}");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("{0} @extends non-object type {1}", compiler0, node0, "{0} @extends non-object type {1}", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (Node) null);
      JSType[] jSTypeArray0 = new JSType[6];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("bfiHq", "bfiHq");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("bfiHq", compiler0, node0, "bfiHq", (Scope) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'TLk:xVn{Iv{", "`u?'TLk:xVn{Iv{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'TLk:xVn{Iv{", compiler0, node0, "`u?'TLk:xVn{Iv{", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[4];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder1.inferFromOverriddenFunction(functionType0, node1);
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("bfi:q", "bfi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("bfi:q", compiler0, node0, "bfi:q", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("'", "'");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("'", compiler0, node0, "'", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("bfi:q", "bfi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("bfi:q", compiler0, node0, "bfi:q", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort((Node) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'TLk:xVn{Iv{", "`u?'TLk:xVn{Iv{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'TLk:xVn{Iv{", compiler0, node0, "`u?'TLk:xVn{Iv{", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("bfi:q", "bfi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("bfi:q", compiler0, node0, "bfi:q", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("b6fi:q", "b6fi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a constructor", compiler0, node0, "Not declared as a type name", (Scope) null);
      functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'TLk:xVn{Iv{", "`u?'TLk:xVn{Iv{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'TLk:xVn{Iv{", compiler0, node0, "`u?'TLk:xVn{Iv{", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("bfi:q", "bfi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("bfi:q", compiler0, node0, "bfi:q", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("'", "'");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("'", compiler0, node0, "'", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("b6fi:q", "b6fi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a constructor", compiler0, node0, "Not declared as a type name", (Scope) null);
      Node node1 = new Node(42, 33, 42);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'TLk:xVn{Iv{", "`u?'TLk:xVn{Iv{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'TLk:xVn{Iv{", compiler0, node0, "`u?'TLk:xVn{Iv{", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder1.inferParameterTypes(node0, jSDocInfo0);
      assertSame(functionTypeBuilder2, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'TLk:xVn{Iv{", "`u?'TLk:xVn{Iv{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'TLk:xVn{Iv{", compiler0, node0, "`u?'TLk:xVn{Iv{", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[5];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'TLk:xVn{Iv{", "`u?'TLk:xVn{Iv{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'TLk:xVn{Iv{", compiler0, node0, "`u?'TLk:xVn{Iv{", (Scope) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("bfi:q", "bfi:q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("bfi:q", compiler0, node0, "bfi:q", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("'", "'");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("'", compiler0, node0, "'", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      functionTypeBuilder1.buildAndRegister();
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("`u?'=LkWxVn{Iv{p", "`u?'=LkWxVn{Iv{p");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("`u?'=LkWxVn{Iv{p", compiler0, node0, "`u?'=LkWxVn{Iv{p", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
  }
}
