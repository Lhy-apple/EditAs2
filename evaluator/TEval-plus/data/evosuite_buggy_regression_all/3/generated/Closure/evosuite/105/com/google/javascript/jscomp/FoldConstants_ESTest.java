/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:17:35 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newNumber(1416.34981);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("OBMgt");
      foldConstants0.process(node0, node0);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "@y#(*2%CP");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      boolean boolean0 = foldConstants0.hasBreakOrContinue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("&A$u");
      Node node1 = new Node(32, node0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(11, Node.USES_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(45.0);
      Node node1 = new Node(32, node0, node0, 11, 143);
      SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, symbolTable0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(45.0);
      Node node1 = Node.newString("Infinity", 103, 34);
      Node node2 = new Node(32, node1, node0, (-16), 143);
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler0, arrayList0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = new Node(26, node0);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2.1474836755612288E9));
      Node node1 = new Node(29, node0, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("9)");
      Node node1 = new Node(27, node0, node0, 2, 37);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newString("&A$u");
      Node node1 = new Node(130, 40, 39);
      Node node2 = new Node(26, node0, node0, 9, 9);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, (NodeTraversal.Callback) null);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(45.0);
      Node node1 = new Node(27, node0, node0, 11, 4095);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = new Node(30, node0, node0, 2, 17);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node1, (Node) null);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node0 = compiler0.parseTestCode("#[reG]WCsW*VZ]=TWa");
      Node node1 = new Node(4, node0, node0, (-3), 39);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("42Q\"X8gwWo@E=4sytqj");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1529.3958488353878);
      Node node1 = Node.newString("42Q\"X8gwWo@E=4sytqj", 13, (-2));
      Node node2 = new Node(14, node0, node1, 28, (-1));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newString("n^DnOte", (-2), 21);
      Node node2 = new Node(98, node0, node1, 1419, (-586));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = new Node(114, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      node1.addChildAfter(node1, node0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(1416.3498056452);
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(11, node0, node1, (-1027), (-2447));
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("EcY.d.+IyT g_");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = compiler0.parseTestCode("MsW%PdyeQ MQ>7c");
      Node node2 = new Node(18, node0, node1, 17, (-4252));
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(1880.76504604818);
      Node node1 = Node.newString("t{X5@y|!=^N]ay$o:K=", 4562, 1489);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node2 = new Node(19, node0, node0, node1, node1, 1587, 9);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(1416.3498056452);
      Node node1 = compiler0.parseTestCode("+Xsy+Luf%U7");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      Node node2 = new Node(20, node1, node0, (-3), 31);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(14, Node.DEFAULT_PROP);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("EcY.d.+IyT g_");
      Node node1 = compiler0.parseTestCode("MsW%PdyeQ MQ>7c");
      Node node2 = new Node(18, node0, node1, 17, (-4252));
      node2.setType(33);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = Node.newNumber((-5896.806692430301));
      Node node1 = Node.newString("3!t*JK!^YQwz&?", 39, 9830);
      Node node2 = new Node(37, node1, node0, 49, (-810));
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString(34, "Infinity", 47, 47);
      Node node2 = new Node(21, node1, node0, 2, 12);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newString((-3), "n^DnOte");
      Node node2 = new Node(36, node0, node1, node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newString("@,T8Uc", 33, (-668));
      Node node2 = new Node(21, node1, node0, 1, (-155));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newString("n^DnOte", (-2), 21);
      Node node2 = new Node(23, node0, node1, 15, 33);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = Node.newNumber(4.294967294501644E9);
      Node node1 = Node.newString("&tau", 6, 29);
      Node node2 = new Node(24, node0, node1, 49, 27);
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = Node.newNumber((-3213.8826247));
      Node node1 = Node.newString("t{X5@y|!=^N]ay$o:K=", 38, 39);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node2 = new Node(17, node0, node1, node1, node1, 49, 99);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unknown bitwise operator");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newString("", 1, 19);
      Node node2 = new Node(45, node0, node1, 63, 24);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertFalse(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("42Q\"X8gwWo@E=4sytqj");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1528.7548832);
      Node node1 = Node.newString("42Q\"X8gwWo@E=4sytqj", 103, (-2));
      Node node2 = new Node(46, node1, node0, 1, 35);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newString("&A$u", 73, 8);
      Node node2 = new Node(35, node0, node1, 339, 4095);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertFalse(node2.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2.147483669120623E9));
      Node node1 = Node.newString("Infinity", (-3365), 47);
      Node node2 = new Node(49, node0, node1, 6, 161);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertFalse(node2.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("&A$u");
      Node node1 = new Node(32, node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("OBMgt");
      Node node1 = new Node(100, node0, node0, 42, 45);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("");
      foldConstants0.tryFoldBlock(nodeTraversal0, node0, node0);
      assertFalse(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("%I<Mww!");
      foldConstants0.process(node0, node0);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("EcY.d.+IyT g_");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(18, node0, node0, 17, (-4252));
      foldConstants0.visit(nodeTraversal0, node0, node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(1416.34981);
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(10, node1, node0, 23, 27);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldHookIf(nodeTraversal0, node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("EcY.d.+IyT g_");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = compiler0.parseTestCode("MsW%PdyeQ MQ>7c");
      Node node2 = new Node(18, node0, node1, 17, (-4252));
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node1);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("&A$u");
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node0 = Node.newNumber((double) 0, 1681, 1681);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      SyntheticAst syntheticAst0 = new SyntheticAst("@y#(*2%CP");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = new Node(39, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node2 = Node.newString(34, "Infinity", 47, 47);
      Node node3 = new Node(21, node2, node1, 2, 12);
      foldConstants0.visit(nodeTraversal0, node3, node1);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node0 = new Node(2525, 8292, 2525);
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(49, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = Node.newString("com.google.javascript.jscomp.CustomPassExecutionTime");
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node1, node0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = Node.newString("&A$u");
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node1 = Node.newString(37, "&A$u");
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node1, node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-36), 1681, 1681);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown arithmetic operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-2403), "\"cyE|0QJ<", (-2403), (-2403));
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Node node0 = Node.newNumber(4.294967294501644E9);
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = Node.newNumber((-2.1474836840845985E9));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Node node0 = Node.newNumber((-2.147483648E9));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown bitwise operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Node node0 = Node.newNumber((-3945.3));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Node node0 = Node.newNumber((-2.14748366744237E9));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Node node0 = Node.newNumber(4.294967296E9);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Node node0 = Node.newNumber((-6.958476287245255));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown shift operator: number
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node1 = Node.newString(19, "tP");
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node1, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node0 = Node.newNumber((-6233.750096844562));
      Node node1 = new Node(41, node0, node0, 12, 2);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(1416.3498056452);
      Node node1 = compiler0.parseTestCode("+Xsy+Luf%U7");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(41, 41, (-1413));
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newString("(d$u");
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = Node.newNumber(0.0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, (Node) null);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(16, 1, 1113);
      Node node1 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node((-1413));
      Node node1 = new Node(33, node0);
      foldConstants0.tryFoldStringIndexOf(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("%I<Mww!");
      Node node1 = new Node(33, node0);
      foldConstants0.tryFoldStringJoin(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Node node0 = Node.newString("&A$u");
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("&A$u");
      Node node1 = new Node(32, node0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node1, node0);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node((-1413), (-1413), (-1413));
      Node node1 = Node.newString("", 26, 46);
      Node node2 = new Node((-234), node0, node1, 1, 6);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node1);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode(",");
      Node node1 = compiler0.parseTestCode("<4-G{'+hK@xAu4dF&m");
      Node node2 = new Node(49, node0, node1, 12, 21);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Node node0 = Node.newNumber((-3213.8826247));
      Node node1 = Node.newString("t{X5@y|!=^N]ay$o:K=", 38, 39);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node2 = new Node(17, node0, node1, node1, node1, 49, 2);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = FoldConstants.containsUnicodeEscape(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("-0");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2.147483648E9));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("it6LOI^N[cHK#o");
      Node node1 = new Node(115, node0, node0, 46, 7);
      foldConstants0.tryFoldFor(nodeTraversal0, node1, node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unknown bitwise operator");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1.0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("OBMgt");
      Node node1 = new Node(100, node0, node0, 42, 45);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("length", ")^a3");
      Node node1 = new Node(101, node0, node0, node0, node0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node0 = Node.newNumber((double) 0, 1684, 1684);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(1416.3498056452);
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(3, node1, node0, 23, 4);
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node1);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("EcY.d.+IyT g_");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = compiler0.parseTestCode("MsW%PdyeQ MQ>7c");
      Node node2 = new Node(18, node0, node1, 17, (-4250));
      node1.addChildrenToBack(node2);
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node1);
      assertFalse(node2.equals((Object)node0));
  }
}
