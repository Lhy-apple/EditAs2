/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:25:32 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$38");
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(41, "XNb~a*;>oW|F!.m<Kk%");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString((-1392), "infinity.", (-4114), (-4114));
      Collection<Node> collection0 = NodeUtil.getVarsDeclaredInBranch(node0);
      assertFalse(collection0.contains(node0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(0, "XV\"#_Y'-v");
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got NUMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newNumber(618.3);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, (String) null, node0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 164);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString(112, "|L&", 23, (-573));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("-infinity");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString(48, "", 46, 1416);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "!==");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString(617, "com.google.javascript.rhino.jstype.PropertyMap$1");
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(1416, "XNb~a*;>oW|F!.m<Kk%", 9, 428);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-303), nodeUtil_MatchDeclaration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(0);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(617, 617, 122);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.NodeUtil$MatchNodeType");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("@");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString(112, "|L&", 23, (-573));
      boolean boolean0 = NodeUtil.isImmutableResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("~");
      NodeUtil.setDebugInformation(node0, node0, "J2uTJ`Wq");
      assertEquals(55, Node.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node((-2863));
      // Undeclared exception!
      try { 
        NodeUtil.newExpr(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ";w");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node((-1802), (-1802), (-1802));
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(0);
      Node node1 = NodeUtil.newName(closureCodingConvention0, "n|", node0, "NCcx cmAQ;O");
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertTrue(boolean0);
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber((-1046.83));
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(41, "XNb~a*;>oW|F!.m<Kk%");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = NodeUtil.getStringValue(53.0);
      assertEquals("53", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(41, "XNb~a*;>oW|F!.m<Kk%");
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ";w");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      Node node1 = NodeUtil.newVarNode("3", node0);
      NodeUtil.getNumberValue(node1);
      assertFalse(node0.hasOneChild());
      assertTrue(node1.isVar());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("3");
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace(" (type ");
      assertEquals("(type", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("\n parent:");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber(2621.5040494525);
      String string0 = NodeUtil.getNearestFunctionName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      Node node1 = new Node(29, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.isImmutableResult(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      boolean boolean0 = NodeUtil.isImmutableResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(41, "XNb~a*;>oW|F!.m<Kk%");
      boolean boolean0 = NodeUtil.isImmutableResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(43, (-2183), 46);
      boolean boolean0 = NodeUtil.isImmutableResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(580);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(15);
      Node node1 = new Node(52, node0, node0, node0, node0, 254, 3458);
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(119, "|L&");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(1392);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(0);
      Node node1 = NodeUtil.newName(closureCodingConvention0, "n|", node0, "NCcx cmAQ;O");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber((-1749.7367871816));
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      boolean boolean0 = exploitAssigns0.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      boolean boolean0 = exploitAssigns0.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString(41, "XNb~a*;>oW|F!.m<Kk%");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(122, nodeArray0, 122, 0);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber((-1749.7367871816));
      Node node1 = new Node(43, node0, node0, node0, 39, 1);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(130);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(145);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(122, nodeArray0, 0, 0);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = new Node(85);
      // Undeclared exception!
      try { 
        NodeUtil.anyResultsMatch(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.anyResultsMatch(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(122, nodeArray0, 0, 0);
      Node node1 = new Node(12, node0, node0, node0, node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(122, nodeArray0, 0, 0);
      Node node1 = new Node(31, node0, node0, node0, node0, (-687), 57);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString("8@<QZQ!\"RT7i");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = new Node(34, node0, node0, node0);
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber(2622.2529759640606);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.anyResultsMatch(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertEquals(44, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50, node0, node0, node0, node0, 1, 54);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(122, "XV\"#_'-v");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(35);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("@");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:SCRIPT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "Invalid attempt to remove node: ", node0, "Invalid attempt to remove node: ");
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2562, 2562, 2562);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(0, "XV\"#_'-v");
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      NodeUtil.isWithinLoop(node0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString(112, "|L&", 23, (-573));
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(601, 601, 122);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((double) 20, 2562, 2562);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString(119, "|L&");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("Date");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SCRIPT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000072] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000071] does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50, node0, node0, node0, node0, 1, 54);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50, node0, node0, node0, node0, 1, 54);
      boolean boolean0 = NodeUtil.isStatement(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(41, "XNb~a*;>oW|F!.m<Kk%");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("@");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "a;Fo'2k2x");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString(1416, "XNb~a*;>oW|F!.m<Kk%", 9, 428);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      MockPrintStream mockPrintStream0 = new MockPrintStream("===");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      boolean boolean0 = NodeUtil.isConstantByConvention(closureCodingConvention0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("Node cannot be refined. \n", 119, 1327);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: STRING Node cannot be refined. 
         //  119
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = NodeUtil.opToStr(10);
      assertNotNull(string0);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = NodeUtil.opToStr(51);
      assertEquals("in", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(105);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 105: FUNCTION
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = NodeUtil.opToStr(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newNumber(2621.060772);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("NaN");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidSimpleName("this");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName(".infmnity");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("n|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node((-2863));
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(601, 601, 122);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, node0, node0, node0, 32, (-363));
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString(0, "XV\"#_Y'-v");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("1l #s.&Qf&m=_`~", 917, 917);
      Node node1 = new Node((-869), node0, node0, node0, node0);
      int int0 = NodeUtil.getNameReferenceCount(node1, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(0);
      Node node1 = NodeUtil.newName(closureCodingConvention0, "n|", node0, "NCcx cmAQ;O");
      NodeUtil.isConstantByConvention(closureCodingConvention0, node1, node1);
      assertTrue(node1.isName());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(0, "XV\"#_Y'-v");
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("3zU8K@;?");
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.NodeUtil$MatchNodeType");
      InputId inputId0 = NodeUtil.getInputId(node0);
      assertNull(inputId0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.NodeUtil$MatchNodeType");
      Compiler compiler0 = new Compiler();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      InputId inputId0 = NodeUtil.getInputId(node0);
      assertEquals("com.google.javascript.jscomp.NodeUtil$MatchNodeType", inputId0.getIdName());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(617, 617, 122);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(122, node1.getCharno());
      assertEquals(122, node1.getType());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$38");
      boolean boolean0 = NodeUtil.isCallOrNewTarget(node0);
      assertEquals(2, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(617, "com.google.javascript.rhino.jstype.PropertyMap$1");
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(57, node0, node0, node0, node0, 0, 16);
      Node node2 = NodeUtil.getBestLValue(node0);
      assertNull(node2);
      assertFalse(node0.isTrue());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = NodeUtil.getBestLValueOwner((Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(617, 617, 122);
      Node node1 = NodeUtil.getBestLValueOwner(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = NodeUtil.getBestLValueName((Node) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(122, "XV\"#_'-v");
      String string0 = NodeUtil.getBestLValueName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("1l #s.&Qf&m=_`~", 917, 917);
      Node node1 = NodeUtil.numberNode(Double.POSITIVE_INFINITY, node0);
      assertEquals(38, node1.getType());
      assertEquals(917, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = NodeUtil.numberNode(Double.NaN, node0);
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber(618.3);
      Node node1 = NodeUtil.numberNode(2621.060772, node0);
      assertTrue(node1.isNumber());
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = NodeUtil.numberNode(0.0, (Node) null);
      assertEquals(39, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("~");
      boolean boolean0 = NodeUtil.isNaN(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber((-1749.7367871816));
      Node node1 = new Node(43, node0, node0, node0, 39, 1);
      Map<Node, Node> map0 = NodeUtil.mapMainToClone(node1, node1);
      assertEquals(1, map0.size());
  }
}
