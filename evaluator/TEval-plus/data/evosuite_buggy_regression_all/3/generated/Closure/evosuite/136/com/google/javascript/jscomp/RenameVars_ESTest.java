/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:20:54 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AmbiguateProperties;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "T94A", false, false, false, (VariableMap) null, charArray0, linkedHashSet0);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[4];
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, charArray0);
      Map<String, String> map0 = ambiguateProperties0.getRenamingMap();
      VariableMap variableMap0 = new VariableMap(map0);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.externMethodsWithoutSignatures;
      RenameVars renameVars0 = new RenameVars(compiler0, "0(_[;+`+", false, false, false, variableMap0, charArray0, set0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.RenameVars$2");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment("$gt[FP6Y+Mvqo", compilerInput0);
      renameVars_Assignment0.setNewName("$gt[FP6Y+Mvqo");
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName("^>9M3-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      RenameVars renameVars0 = new RenameVars(compiler0, "l", true, true, true, (VariableMap) null, charArray0, (Set<String>) null);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("l", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("com.google.javascript.jscomp.RenameVars$2", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("Od%t3<tZ(p@wo<F,:+L", "dangerous use of 'this' in static method {0}");
      renameVars0.process(node0, node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[5];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.javascript.jscomp.RenameVars$2", "", 3584, (-1769));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", namedType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Set<String> set0 = enumElementType0.getPropertyNames();
      RenameVars renameVars0 = new RenameVars(compiler0, "", false, false, true, (VariableMap) null, charArray0, set0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[5] = (JSType) enumElementType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      renameVars0.process(node0, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "getParamOrVarName", true, true, true, (VariableMap) null, charArray0, treeSet0);
      Node node0 = compiler0.parseSyntheticCode("getParamOrVarName", "getParamOrVarName");
      renameVars0.process(node0, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node0 = compiler0.parseSyntheticCode("l", "l");
      RenameVars renameVars0 = new RenameVars(compiler0, "l", false, true, false, (VariableMap) null, charArray0, linkedHashSet0);
      renameVars0.process(node0, node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      VariableMap variableMap0 = new VariableMap(hashMap0);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Set<String> set0 = inlineGetters0.externMethodsWithoutSignatures;
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, true, variableMap0, (char[]) null, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("$$", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("com.google.javascript.jscomp.RenameVars$Assignment", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("com.google.javascript.jscomp.RenameVars$Assignment", (CompilerInput) null);
      Node node0 = new Node((-922), 2477, (-922));
      renameVars0.process(node0, node0);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "$$", false, false, false, (VariableMap) null, charArray0, treeSet0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("getParamOrVarName", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("$$", "$$");
      renameVars0.process(node0, node0);
      renameVars0.process(node0, node0);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "T94A", false, false, false, (VariableMap) null, charArray0, linkedHashSet0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("$$", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("$$", "$$");
      renameVars0.process(node0, node0);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[4];
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      RenameVars renameVars0 = new RenameVars(compiler0, "b", false, false, false, (VariableMap) null, charArray0, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("L com.gnogle.javascript:jscomp.RenameVars$Assignment", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("L com.gnogle.javascript:jscomp.RenameVars$Assignment", "L com.gnogle.javascript:jscomp.RenameVars$Assignment");
      renameVars0.process(node0, node0);
      assertEquals(11, Node.USES_PROP);
  }
}
