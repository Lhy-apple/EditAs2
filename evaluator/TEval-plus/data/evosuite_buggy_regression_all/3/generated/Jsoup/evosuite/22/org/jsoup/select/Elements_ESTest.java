/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:50:04 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import java.util.function.UnaryOperator;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.addAll((Collection<? extends Element>) elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Elements elements0 = new Elements();
      String[] stringArray0 = new String[3];
      String[] stringArray1 = elements0.toArray(stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.remove(629);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 629, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "NJxpOIn)hr8N%g\"YD3O");
      Set<String> set0 = document0.classNames();
      boolean boolean0 = elements0.removeAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Elements elements0 = new Elements();
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        elements0.add(217, (Element) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 217, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Elements elements0 = document0.getElementsMatchingText("");
      linkedList0.add((Object) elements0);
      boolean boolean0 = elements0.containsAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.remove((Object) document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.is("section");
      assertFalse(elements0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      elements0.clear();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elements elements0 = new Elements();
      Document document0 = Document.createShell("");
      int int0 = elements0.indexOf(document0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Object object0 = new Object();
      int int0 = elements0.lastIndexOf(object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.not("section");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", "");
      elements0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.addAll((-4465), (Collection<? extends Element>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4465, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      UnaryOperator<Element> unaryOperator0 = UnaryOperator.identity();
      elements0.replaceAll(unaryOperator0);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      // Undeclared exception!
      try { 
        elements0.subList((-2634), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2634
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.set(2147483645, (Element) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.retainAll(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.clone();
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      String string0 = elements0.attr("section");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.attr("section", "section");
      String string0 = elements1.attr("section");
      assertEquals("section", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.hasAttr("section");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      Elements elements1 = elements0.attr("OElig", "");
      boolean boolean0 = elements1.hasAttr("OElig");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.removeAttr("section");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.addClass("section");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.removeClass("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.toggleClass("q5_0d");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.hasClass("%?k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("--!");
      Elements elements0 = document0.getElementsByAttributeStarting("Uring");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("section");
      document0.prependElement("section");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.val("J");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Element[] elementArray0 = new Element[3];
      elementArray0[0] = (Element) document0;
      elementArray0[1] = (Element) document0;
      elementArray0[2] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.html("section");
      String string0 = elements1.text();
      assertEquals("section section section", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      elements0.append("%?k");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Element[] elementArray0 = new Element[6];
      elementArray0[0] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.tagName("section");
      boolean boolean0 = elements1.is("section");
      assertTrue(document0.isBlock());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("section");
      document0.prependElement("section");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.prepend("J");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.before("");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "qSj");
      // Undeclared exception!
      try { 
        elements0.before("%o8w: Gq_[LiBV2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.after("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.wrap("7'fA8M4w");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Element[] elementArray0 = new Element[7];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.wrap("section");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.empty();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("lQB5Ow");
      Elements elements0 = document0.getElementsByAttributeValueMatching("qhABisC-!ubN", (Pattern) null);
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      Elements elements1 = elements0.eq(117);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.eq((-1470));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.parents();
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",nP");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByTag(",nP");
      Element element1 = elements0.last();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.contains("DETeX&uNpw^p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("section");
      Elements elements0 = document0.getElementsByAttributeValueNot("section", "section");
      boolean boolean0 = elements0.containsAll(elements0);
      assertTrue(boolean0);
  }
}
