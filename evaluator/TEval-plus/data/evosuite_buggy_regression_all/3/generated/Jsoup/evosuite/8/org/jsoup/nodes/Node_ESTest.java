/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:48:28 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("abs:dcaron");
      Elements elements0 = document0.getElementsByAttributeValueNot("abs:dcaron", "abs:dcaron");
      assertEquals(4, elements0.size());
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("lrar");
      document0.setBaseUri("lrar");
      assertEquals("lrar", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(",8?cXQ R");
      document0.attr("#text", "abs:,8?cxq r");
      String string0 = document0.absUrl("#text");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("XY]Is({a", "XY]Is({a");
      Node node0 = textNode0.removeAttr("XY]Is({a");
      assertEquals("XY]Is({a", node0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Gscr");
      assertEquals(0, (int)document0.siblingIndex());
      
      document0.prepend("Gscr");
      String string0 = document0.toString();
      assertEquals("Gscr", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("lrar");
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("(coW~V2");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment(",8?cXQ R", ",8?cXQ R");
      // Undeclared exception!
      try { 
        comment0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("(coW~V2");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("XY]Is({a", "XY]Is({a");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("Y2j^!V2U(#?@/]HB\u0006");
      Element element0 = document0.appendChild(document0);
      document0.setParentNode(element0);
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("larrbfs");
      Element element0 = document0.appendElement(",8?cXQ R");
      document0.replaceChild(element0, document0);
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("abs:hb9");
      Element element0 = document0.appendElement("abs:hb9");
      // Undeclared exception!
      try { 
        document0.replaceChild(element0, element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("<1~kCV=r");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("]");
      Element element0 = document0.prependChild(document0);
      Node node0 = element0.previousSibling();
      assertNull(node0);
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("larr");
      document0.appendChild(document0);
      Node node0 = document0.previousSibling();
      assertEquals("larr", node0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell(",8?sQ R");
      Elements elements0 = document0.getElementsByIndexLessThan(515);
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = new TextNode("#text", "#text");
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell(",8?cXQ R");
      Element element0 = document0.head();
      element0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell(",8?cXQ R");
      document0.attributes = null;
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell(",8?sQ R");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }
}
