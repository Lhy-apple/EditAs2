/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:52:38 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Evaluator_ESTest extends Evaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(42);
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IndexEquals0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev:eq(42)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("jF{/E=5^s]p");
      Elements elements0 = document0.getElementsByIndexLessThan((-675));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(2);
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_IndexLessThan0);
      Evaluator[] evaluatorArray0 = new Evaluator[5];
      evaluatorArray0[0] = (Evaluator) structuralEvaluator_Parent0;
      evaluatorArray0[1] = (Evaluator) structuralEvaluator_Parent0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      String string0 = combiningEvaluator_Or0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      String string0 = evaluator_IsLastChild0.toString();
      assertEquals(":last-child", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting(":root", "22>fP{(]u!3,^}F)oP");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_AttributeWithValueStarting0);
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has([:root^=22>fp{(]u!3,^}f)op])", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("SKIP_CHILDREN", "SKIP_CHILDREN");
      String string0 = evaluator_AttributeWithValue0.toString();
      assertEquals("[skip_children=skip_children]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("es78D~.G2\"&Gpms", "es78D~.G2\"&Gpms");
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_AttributeWithValueNot0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*[es78d~.g2\"&gpms!=es78d~.g2\"&gpms]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-873));
      String string0 = evaluator_IndexGreaterThan0.toString();
      assertEquals(":gt(-873)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsOnlyOfType0);
      String string0 = structuralEvaluator_Not0.toString();
      assertEquals(":not:only-of-type", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(2978, 2978);
      String string0 = evaluator_IsNthLastOfType0.toString();
      assertEquals(":nth-last-of-type(2978n+2978)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      String string0 = evaluator_IsEmpty0.toString();
      assertEquals(":empty", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("oOQ");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("oOQ", pattern0);
      String string0 = evaluator_AttributeWithValueMatching0.toString();
      assertEquals("[ooq~=oOQ]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_IsFirstChild0);
      String string0 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent:first-child", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("Y", "\"{#?sLA ,");
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_AttributeWithValueEnding0);
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(structuralEvaluator_ImmediatePreviousSibling0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*:prev[y$=\"{#?sla ,]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_IsOnlyChild0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*:only-child", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("*");
      String string0 = evaluator_AttributeStarting0.toString();
      assertEquals("[^*]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      String string0 = evaluator_IsRoot0.toString();
      assertEquals(":root", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(3, (-6254807));
      String string0 = evaluator_IsNthOfType0.toString();
      assertEquals(":nth-of-type(3n-6254807)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("nth-last-child", "nth-last-child");
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_AttributeWithValueContaining0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev[nth-last-child*=nth-last-child]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(">QO5Ds~8l", 1440);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      Document document0 = new Document("");
      boolean boolean0 = evaluator_Matches0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Ev", 6);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      String string0 = evaluator_Matches0.toString();
      assertEquals(":matches(Ev)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("W/");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_ContainsText0);
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:contains(w/))", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("|");
      Document document0 = Document.createShell("|");
      boolean boolean0 = evaluator_ContainsText0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 72);
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_IsNthChild0);
      String string0 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent:nth-child(72)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.head();
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-509), 100);
      boolean boolean0 = evaluator_IsNthChild0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("Q?Fa`%S$U6v.x&_*");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_ContainsData0);
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(:containsData(q?fa`%s$u6v.x&_*))", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("aa,\"/CRH C/aKg>:");
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_ContainsData0);
      Document document0 = new Document("$ 1T<[|hGf>iOoHVj%");
      boolean boolean0 = structuralEvaluator_Not0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("jF{/E=5^s]p");
      Element element0 = document0.getElementById("jF{/E=5^s]p");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("'o");
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_Id0);
      String string0 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent#'o", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("\"]niv3z(sB~Tj>%[;5q\"");
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_Class0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*.\"]niv3z(sB~Tj>%[;5q\"", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("jF{/E=5^s]p");
      Elements elements0 = document0.getElementsByClass("ZWxWKC51(z_'1X");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(49, (-100722684));
      String string0 = evaluator_IsNthLastChild0.toString();
      assertEquals(":nth-last-child(49n-100722684)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(1303, 3572);
      Document document0 = new Document(":first-child");
      // Undeclared exception!
      try { 
        evaluator_IsNthLastChild0.calculatePosition(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthLastChild", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Elements elements0 = document0.getElementsMatchingOwnText("Split offset must be not be negative");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn((Pattern) null);
      String string0 = evaluator_MatchesOwn0.toString();
      assertEquals(":matchesOwn(null)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      String string0 = evaluator_IsLastOfType0.toString();
      assertEquals(":last-of-type", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("g2Ll'D64phaa$");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("g2Ll'D64phaa$");
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_TagEndsWith0);
      boolean boolean0 = structuralEvaluator_Not0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("'\"]niv3z(sB~Tj>%[;5q");
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_TagEndsWith0);
      String string0 = structuralEvaluator_ImmediateParent0.toString();
      assertEquals(":ImmediateParent'\"]niv3z(sB~Tj>%[;5q", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("jF{/E=5^s]p");
      Elements elements0 = document0.getElementsByAttribute("BogusComment");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("e=w;*vZ");
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_Attribute0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev*[e=w;*vZ]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("@3TpNx0YcB!B >7`^+1");
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_ContainsOwnText0);
      // Undeclared exception!
      try { 
        structuralEvaluator_Not0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$ContainsOwnText", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("':empty");
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_ContainsOwnText0);
      String string0 = structuralEvaluator_Parent0.toString();
      assertEquals(":parent:containsOwn(':empty)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag((String) null);
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_Tag0);
      String string0 = structuralEvaluator_Has0.toString();
      assertEquals(":has(null)", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Entities");
      Document document1 = document0.normalise();
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IsFirstOfType0);
      String string0 = structuralEvaluator_ImmediatePreviousSibling0.toString();
      assertEquals(":prev:first-of-type", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_AllElements0);
      String string0 = structuralEvaluator_PreviousSibling0.toString();
      assertEquals(":prev**", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(1, 30);
      Document document0 = Document.createShell("g2Ll'D64phaa$");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsNthOfType0);
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Element element0 = new Element("i");
      Element element1 = element0.toggleClass(":empty");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("\"XqE3");
      boolean boolean0 = evaluator_AttributeStarting0.matches(element0, element1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("*");
      Document document0 = new Document("$VALUES");
      document0.attr("*", "$VALUES");
      boolean boolean0 = evaluator_AttributeStarting0.matches((Element) null, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Entities");
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("org.jsoup.nodes.Entities", "org.jsoup.select.Evaluator");
      boolean boolean0 = evaluator_AttributeWithValue0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("SKIP_CHILDREN", "SKIP_CHILDREN");
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("SKIP_CHILDREN", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("SKIP_CHILDREN", "SKIP_CHILDREN");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "nth-last-child", attributes1);
      boolean boolean0 = evaluator_AttributeWithValue0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("nth-last-child");
      Element element0 = document0.attr("nth-last-child", true);
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("nth-last-child", ":prev[nth-last-child*=nth-last-child]");
      boolean boolean0 = evaluator_AttributeWithValue0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("b", "b");
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$ContainsData");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("b", "b");
      FormElement formElement0 = new FormElement(tag0, "W/", attributes1);
      boolean boolean0 = evaluator_AttributeWithValueNot0.matches(document0, formElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("Split offset must be not be negative", "'noframes");
      boolean boolean0 = evaluator_AttributeWithValueNot0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("Xu+qR~ch;2[m", "Xu+qR~ch;2[m");
      Document document0 = Document.createShell("Xu+qR~ch;2[m");
      boolean boolean0 = evaluator_AttributeWithValueStarting0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("Xu+qR~ch;2[m", "Xu+qR~ch;2[m");
      Document document0 = Document.createShell("Xu+qR~ch;2[m");
      Tag tag0 = Tag.valueOf("AttributeValue_doubleQuoted");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Xu+qR~ch;2[m", "Mf", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Xu+qR~ch;2[m", attributes1);
      boolean boolean0 = evaluator_AttributeWithValueStarting0.matches(document0, formElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("Xu+qR~ch;2[m", "Xu+qR~ch;2[m");
      Document document0 = Document.createShell("Xu+qR~ch;2[m");
      Tag tag0 = Tag.valueOf("AttributeValue_doubleQuoted");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Xu+qR~ch;2[m", "Xu+qR~ch;2[m", attributes0);
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Xu+qR~ch;2[m", attributes0);
      boolean boolean0 = evaluator_AttributeWithValueStarting0.matches(document0, formElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValueEnding("", "");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("\"");
      document0.attr("\"", "\"");
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("\"", "\"");
      boolean boolean0 = evaluator_AttributeWithValueEnding0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("\"");
      Element element0 = document0.attr("\"", "\"");
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("\"", "TagName");
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_AttributeWithValueEnding0);
      boolean boolean0 = structuralEvaluator_Not0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Comment comment0 = new Comment("RGtn8981pZ", "org.jsoup.nodes.Entities");
      Attributes attributes0 = comment0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("g", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Entities", attributes0);
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("xfd", "td8uo||zA%Ly/aVc\"h");
      boolean boolean0 = evaluator_AttributeWithValueContaining0.matches(formElement0, formElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("nth-last-child", "nth-last-child");
      Document document0 = new Document("nth-last-child");
      document0.attr("nth-last-child", true);
      boolean boolean0 = evaluator_AttributeWithValueContaining0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Element element0 = new Element("meta");
      Elements elements0 = element0.getElementsByAttributeValueMatching("org.jsoup.select.Evaluator", "");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("nth-last-child");
      document0.attr("nth-last-child", true);
      Elements elements0 = document0.getElementsByAttributeValueMatching("nth-last-child", "nth-last-child");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("\"");
      document0.attr("\"", "\"");
      Pattern pattern0 = Pattern.compile("\"");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("\"", pattern0);
      boolean boolean0 = evaluator_AttributeWithValueMatching0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = null;
      try {
        evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("\"", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("'Split offset must be not be negative''", "'Split offset must be not be negative''");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Elements elements0 = document0.getElementsByIndexLessThan(74);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("8jN?_-*K`q");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1117);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Element element0 = new Element("meta");
      Elements elements0 = element0.getElementsByIndexGreaterThan((-137190182));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("jF{/E=5^s]p");
      Elements elements0 = document0.getElementsByIndexEquals((-903));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      boolean boolean0 = evaluator_IsLastChild0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("W/");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsLastChild0);
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Comment comment0 = new Comment("RGtn8981pZ", "org.jsoup.nodes.Entities");
      Attributes attributes0 = comment0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("g", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Entities", attributes0);
      Document document0 = new Document("org.jsoup.nodes.Entities");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      boolean boolean0 = evaluator_IsFirstOfType0.matches(formElement0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      Element element0 = document0.head();
      boolean boolean0 = evaluator_IsFirstOfType0.matches(document0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.before("1tr");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      boolean boolean0 = evaluator_IsFirstOfType0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("'\"]niv3z(sB~Tj>%[;5q");
      Element element0 = document0.head();
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(3, (-6254807));
      boolean boolean0 = evaluator_IsNthOfType0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-1059), 0);
      String string0 = evaluator_IsNthChild0.toString();
      assertEquals(":nth-child(-1059n)", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      Document document0 = Document.createShell("Ev");
      Element element0 = document0.head();
      int int0 = evaluator_IsLastOfType0.calculatePosition(element0, element0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      boolean boolean0 = evaluator_IsFirstChild0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.head();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      boolean boolean0 = evaluator_IsFirstChild0.matches(document0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_IsFirstChild0);
      Element element0 = document0.body();
      boolean boolean0 = structuralEvaluator_ImmediateParent0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.body();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      boolean boolean0 = evaluator_IsFirstChild0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("$ 1T<[|hGf>iOoHVj%");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Element element0 = document0.createElement(":root");
      boolean boolean0 = evaluator_IsRoot0.matches(element0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      Document document0 = Document.createShell("Split offset must be not be negative");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsEmpty0);
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      evaluatorArray0[0] = (Evaluator) evaluator_IsRoot0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      structuralEvaluator_Has0.evaluator = (Evaluator) combiningEvaluator_Or0;
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.appendChild(document0);
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.head();
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      boolean boolean0 = evaluator_IsOnlyChild0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = new Document("/");
      boolean boolean0 = evaluator_IsOnlyOfType0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      Document document0 = Document.createShell("Ev");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsLastOfType0);
      structuralEvaluator_Has0.evaluator = (Evaluator) evaluator_IsOnlyOfType0;
      boolean boolean0 = structuralEvaluator_Has0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = Document.createShell("Ev");
      Element element0 = document0.head();
      element0.after(":last-of-type");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      boolean boolean0 = evaluator_IsOnlyOfType0.matches(document0, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      Comment comment0 = new Comment("RGtn8981pZ", "org.jsoup.nodes.Entities");
      Attributes attributes0 = comment0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("g", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Entities", attributes0);
      Element element0 = formElement0.prependChild(comment0);
      boolean boolean0 = evaluator_IsEmpty0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      Document document0 = Document.createShell("Split offset must be not be negative");
      boolean boolean0 = evaluator_IsEmpty0.matches(document0, document0);
      assertFalse(boolean0);
  }
}
