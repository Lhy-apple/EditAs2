/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:50:53 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@@[_g");
      TextNode textNode0 = TextNode.createFromEncoded(" />", "$=TDUK:Q");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Y\"", attributes0);
      formElement0.appendText("");
      boolean boolean0 = formElement0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "fX.Jk]93>lnu", attributes0);
      Document document0 = new Document("del");
      formElement0.prependChild(document0);
      Element element0 = document0.prepend("Pattern syntax error: ");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("del");
      Element element0 = document0.appendChild(document0);
      document0.prepend("Pattern syntax error: ");
      element0.getElementsMatchingText("</");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("ij`vH?xxrd^#Z&D");
      // Undeclared exception!
      try { 
        document0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "DE", attributes0);
      Element element0 = new Element(tag0, "DE");
      formElement0.prependChild(element0);
      String string0 = formElement0.toString();
      assertEquals("<del><del></del></del>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      Element element0 = document0.prependText("Children collection to be inserted must not be null.");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("applet");
      Element element0 = document0.prependElement("applet");
      element0.text("applet");
      String string0 = element0.ownText();
      assertEquals("applet", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("is");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("QGr7A6q7fCZ%l");
      Elements elements0 = document0.getElementsContainingOwnText("QGr7A6q7fCZ%l");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("is");
      // Undeclared exception!
      try { 
        document0.html("is");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("t>");
      Elements elements0 = document0.getElementsByAttributeValue("Z{wH&/:TmLVJV", "Z{wH&/:TmLVJV");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("is");
      Elements elements0 = document0.getElementsByAttributeValueStarting("is", "is");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("m(PPy(");
      // Undeclared exception!
      try { 
        document0.select("m(PPy(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'm(PPy(': unexpected token at '(PPy('
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("izj`vh?xxrdf#b*zd");
      Elements elements0 = document0.getElementsMatchingOwnText("izj`vh?xxrdf#b*zd");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("|cls");
      // Undeclared exception!
      try { 
        document0.after("|cls");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("kbd");
      Elements elements0 = document0.getElementsByIndexLessThan(2147483645);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("DoctpeSystemIdentifier_singleQuoted");
      Elements elements0 = document0.getElementsByAttributeStarting("DoctpeSystemIdentifier_singleQuoted");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("|cls");
      Elements elements0 = document0.getElementsByIndexEquals((-1578));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.wrap("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell("t[GP|lJ^R]]h[o>:zz");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("oEYt6^aQR>q'*n$%q0d");
      Element element0 = document0.val("oEYt6^aQR>q'*n$%q0d");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("</");
      Elements elements0 = document0.getElementsByAttributeValueMatching("</", "</");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("oEYt6^aQR>q'*n$%q0d");
      Elements elements0 = document0.getElementsByAttributeValueEnding("oEYt6^aQR>q'*n$%q0d", "oEYt6^aQR>q'*n$%q0d");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("plaiIntext");
      Elements elements0 = document0.getElementsByClass("plaiIntext");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("t>");
      Elements elements0 = document0.getElementsContainingText("<y\"></y\">");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("e_5my?c|ljrt9=yp*");
      Elements elements0 = document0.getElementsByAttributeValueContaining("e_5my?c|ljrt9=yp*", "e_5my?c|ljrt9=yp*");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("j7\"etj\"t_AOP,Aw>f");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("|cls");
      Elements elements0 = document0.getElementsByAttributeValueNot("|cls", "|cls");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("math");
      Elements elements0 = document0.getElementsByAttribute("math");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("V\"");
      // Undeclared exception!
      try { 
        document0.before("V\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("m(PPy(");
      Document document1 = (Document)document0.removeClass("m(PPy(");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("izj`vH?xxrdF#B*Z&D");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("izj`vh?xxrdf#b*zd");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("izj`vh?xxrdf#b*zd");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("zi");
      document0.parentNode = (Node) document0;
      document0.prepend("zi");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("t>");
      Element element0 = document0.prependElement("Y\"");
      assertEquals("y\"", element0.tagName());
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("2");
      Element element0 = document0.prepend("2");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("is");
      document0.prepend("^w");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("id");
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      DataNode dataNode0 = new DataNode("id", "id");
      formElement0.prependChild(dataNode0);
      List<DataNode> list0 = formElement0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("Y*Un/l_j`ZUZ%y.");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren(0, linkedHashSet0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("B<");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-3109), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("L_");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(3528, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("oEYt6^aQR>q'*n$%q0d");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("oEYt6^aQR>q'*n$%q0d");
      Element element0 = document0.prependElement("oEYt6^aQR>q'*n$%q0d");
      element0.after((Node) document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.prependElement("class");
      Element element1 = element0.before((Node) document0);
      Element element2 = element1.nextElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("iPWOdci0G");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("?1t,fjgwvo;x1ojt{-n");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.prependElement("?1t,fjgwvo;x1ojt{-n");
      Element element1 = element0.nextElementSibling();
      assertEquals("#root", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("t>");
      Document document1 = (Document)document0.doClone(document0);
      // Undeclared exception!
      try { 
        document1.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("izj`vH?xxrdF#B*Z&D");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("izj`rvH?xxrdF#B*Z&D");
      Element element0 = document0.prependElement("izj`rvH?xxrdF#B*Z&D");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("?1t,fjgwvo;x1ojt{-n");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.prependElement("?1t,fjgwvo;x1ojt{-n");
      Element element0 = document0.previousElementSibling();
      assertEquals("?1t,fjgwvo;x1ojt{-n", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("izj`vH?xxrdF#B*Z&D");
      Element element0 = document0.prependElement("izj`vH?xxrdF#B*Z&D");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("oEYt6^aQR>q'*n$%q0d");
      Element element0 = document0.prependElement("oEYt6^aQR>q'*n$%q0d");
      element0.after((Node) document0);
      Element element1 = element0.firstElementSibling();
      assertEquals("oeyt6^aqr>q'*n$%q0d", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("is");
      Element element0 = document0.prependElement("is");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("izj`vH?xxrdF B*Z&D");
      Element element0 = document0.prependElement("izj`vH?xxrdF B*Z&D");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("izj`vH?xxrdF B*Z&D");
      Element element0 = document0.prependElement("izj`vH?xxrdF B*Z&D");
      element0.before((Node) document0);
      Element element1 = element0.lastElementSibling();
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("e_5my?c|ljrt9=yp*");
      Element element0 = document0.getElementById("e_5my?c|ljrt9=yp*");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("plaiIntext");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("plaiIntext", "plaiIntext", false);
      document0.prependChild(xmlDeclaration0);
      Elements elements0 = document0.getElementsMatchingText("plaiIntext");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "fX.Jk]93>lnu", attributes0);
      Document document0 = new Document("del");
      Element element0 = document0.appendChild(formElement0);
      document0.prepend("Pattern syntax error: ");
      Elements elements0 = element0.getElementsMatchingText("</");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      TextNode textNode0 = new TextNode("br", (String) null);
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      document0.appendChild(element0);
      Element element1 = document0.prepend("br");
      Elements elements0 = element1.getElementsMatchingText("&");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("t>");
      document0.prependElement("Y\"");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("d;lJFe>J");
      DataNode dataNode0 = DataNode.createFromEncoded("quirks", "mI]T{g");
      document0.prependChild(dataNode0);
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("is");
      document0.prepend("^w");
      document0.tagName("textarea");
      document0.val();
      assertEquals("textarea", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DataNode dataNode0 = new DataNode("id", "id");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("izj`rvH?xxrdF#B*Z&D");
      document0.prependElement("izj`rvH?xxrdF#B*Z&D");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("+[W");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("e+u']xu)+", "+[W", false);
      document0.prependChild(xmlDeclaration0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("izj`rvH?xxrdF#B*Z&D");
      Element element0 = document0.prependElement("izj`rvH?xxrdF#B*Z&D");
      element0.appendText("@1");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "fX.Jk]93>lnu", attributes0);
      Document document0 = new Document("del");
      formElement0.prependChild(document0);
      String string0 = formElement0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextNode textNode0 = new TextNode("br", "a+=N J#Q");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, " ", attributes0);
      DataNode dataNode0 = new DataNode("qnTgr}`~\bZGiWgl", "qnTgr}`~\bZGiWgl");
      formElement0.prependChild(dataNode0);
      String string0 = formElement0.data();
      assertEquals("qnTgr}`~\bZGiWgl", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("ij`vH?xxrd^#Z&D");
      Element element0 = document0.prepend("ij`vH?xxrd^#Z&D");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("Z-7pK]!tm xyha@6");
      document0.addClass("Z-7pK]!tm xyha@6");
      Elements elements0 = document0.getElementsByClass("Z-7pK]!tm xyha@6");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("zi");
      Element element0 = document0.toggleClass("zi");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("id");
      Document document1 = (Document)document0.toggleClass("");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("del");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("AfterAfterBody");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("jlhtaalq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("textarea");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 724, document_OutputSettings0);
      assertEquals("textarea<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "fX.Jk]93>lnu", attributes0);
      Document document0 = new Document("del");
      formElement0.prependChild(document0);
      StringBuilder stringBuilder0 = new StringBuilder();
      formElement0.outerHtml(stringBuilder0);
      assertEquals("<del>\n <#root></#root></del>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlTail(stringBuilder0, 2566, document_OutputSettings0);
      formElement0.outerHtmlHead(stringBuilder0, 2566, document_OutputSettings0);
      assertEquals("</del><del>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("is");
      FormElement formElement0 = new FormElement(tag0, "is", attributes0);
      Document document0 = new Document("del");
      Element element0 = document0.createElement("del");
      formElement0.prependChild(element0);
      String string0 = formElement0.toString();
      assertEquals("<is>\n <del></del>\n</is>", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 2566, document_OutputSettings0);
      formElement0.outerHtmlHead(stringBuilder0, 2566, document_OutputSettings1);
      assertEquals("", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("]");
      Element element0 = document0.prependElement("br");
      String string0 = element0.outerHtml();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("8rnt&.y");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 15, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Document document0 = new Document("del");
      FormElement formElement1 = (FormElement)formElement0.prependChild(document0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement1.outerHtmlTail(stringBuilder0, 2566, document_OutputSettings0);
      assertEquals(0, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "fX.Jk]93>lnu", attributes0);
      Document document0 = new Document("del");
      formElement0.prependChild(document0);
      Document document1 = new Document("");
      formElement0.prependChild(document1);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail(stringBuilder0, (-2374), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("del");
      FormElement formElement0 = new FormElement(tag0, "7l2", attributes0);
      TextNode textNode0 = new TextNode("del", "del");
      formElement0.prependChild(textNode0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, (-326), document_OutputSettings1);
      assertEquals("</del>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("t>");
      document0.prependElement("Y\"");
      String string0 = document0.outerHtml();
      assertEquals("<y\"></y\">", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("del");
      document0.hashCode();
  }
}
