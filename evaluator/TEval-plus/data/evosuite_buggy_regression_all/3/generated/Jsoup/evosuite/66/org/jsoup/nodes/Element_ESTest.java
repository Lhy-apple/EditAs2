/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:53:28 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("~K!`Rx},+");
      // Undeclared exception!
      try { 
        document0.wrap("~K!`Rx},+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.TokeniserState");
      document0.appendText("org.jsoup.parser.TokeniserState");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("$0zz/{ve1Ii|+v)bX");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("m*yjP*b__");
      Element element0 = document0.text(" />");
      document0.appendElement("br");
      element0.getElementsMatchingText(" />");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("s2+");
      // Undeclared exception!
      try { 
        document0.child(71);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 71, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("fG-M>2Cve_2");
      document0.prependText("fG-M>2Cve_2");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.tagName("br");
      document0.appendElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsLastChild", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.select.Evaluator$IsLastChild");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsLastChild", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapedLessthanSign");
      Element element0 = document0.addClass("ScriptDataDoubleEscapedLessthanSign");
      assertEquals("ScriptDataDoubleEscapedLessthanSign", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Element element0 = new Element("p");
      String string0 = element0.outerHtml();
      assertEquals("<p></p>", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document(":wR~TFGD@");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Element element0 = document0.html("body");
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("XmqNb!t");
      Element element0 = document0.attr("XmqNb!t", false);
      assertEquals(1, element0.childNodeSize());
      assertEquals("XmqNb!t", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueStarting("", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      Elements elements0 = document0.getElementsByIndexLessThan(1011);
      assertEquals("org.jsoup.select.Evaluator$IsLastChild", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("Gy2F{Vn[r");
      document0.getElementsByAttributeStarting("MuP!SRvDMx-\"F");
      assertEquals("Gy2F{Vn[r", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("p");
      document0.getElementsByAttributeValueMatching("p", "p");
      assertEquals(1, document0.childNodeSize());
      assertEquals("p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("AU");
      document0.is("AU");
      assertEquals(1, document0.childNodeSize());
      assertEquals("AU", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element element0 = new Element("c");
      Elements elements0 = element0.getElementsByAttributeValueEnding("c", "c");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      Elements elements0 = document0.getElementsByClass("iA:)z`uMIOJi|cx:,KG");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("org.jsoup.helper.W3CDom", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("Xi5dz_?!Xo|65V_!cw");
      Elements elements0 = document0.getElementsContainingText("Xi5dz_?!Xo|65V_!cw");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("Xi5dz_?!Xo|65V_!cw", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("Array must not contain any null objects");
      document0.getElementsByAttributeValueContaining("Array must not contain any null objects", "Array must not contain any null objects");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Array must not contain any null objects", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("fG-M>2Cve_2");
      document0.setBaseUri("fG-M>2Cve_2");
      assertEquals("fG-M>2Cve_2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.toggleClass("");
      Document.createShell("");
      Document document3 = document2.normalise();
      document0.getElementsByAttributeValueNot("", "2~qbt74u{");
      document2.toggleClass("java.lang.string@0000000032");
      boolean boolean0 = document3.hasClass("java.lang.string@0000000032");
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document3.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      document0.appendTo(document0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueNot("", "2~qbt74u{");
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      String string0 = document0.toString();
      assertEquals("org.jsoup.helper.W3CDom", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("$0zz/G{ve1U+v#)bX");
      document0.getElementsByAttribute("$0zz/G{ve1U+v#)bX");
      assertEquals(1, document0.childNodeSize());
      assertEquals("$0zz/G{ve1U+v#)bX", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Entities$1");
      Element element0 = document0.removeClass("org.jsoup.nodes.Entities$1");
      assertEquals("org.jsoup.nodes.Entities$1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("_S");
      document0.getAllElements();
      assertEquals("_S", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("CIs+F_kpDP");
      document0.selectFirst("CIs+F_kpDP");
      assertEquals(1, document0.childNodeSize());
      assertEquals("CIs+F_kpDP", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1023));
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsLastChild", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.before("");
      element0.cssSelector();
      assertEquals(2, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.body();
      element0.append("s+");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("Xi5dz_?!Xo|65V_!cw");
      document0.append("Xi5dz_?!Xo|65V_!cw");
      document0.getElementsByIndexEquals((-1));
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("org.jsoup.helper.W3CDom", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.appendElement("rp");
      Element element1 = element0.text("Ky{FAu");
      List<TextNode> list0 = element1.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("p");
      DataNode dataNode0 = DataNode.createFromEncoded("value", "v-y3dl$-TNJ~e31");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("$0zz/G{ve1Ui|+v#)bX");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("$0zz/G{ve1Ui|+v#)bX", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-3673), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000014");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(22, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-822), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(1082, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.helper.W3CDom", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.appendElement("s+");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("I$-@KYXr<tSkquh");
      document0.siblingElements();
      assertEquals("I$-@KYXr<tSkquh", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("Gy2F{Vn[r");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Gy2F{Vn[r", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("Gy2F{Vn[r");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals("Gy2F{Vn[r", element1.baseUri());
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Element element0 = document0.appendChild(document0);
      element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("OFcJxpt-{:M\"iMv");
      document0.previousElementSibling();
      assertEquals("OFcJxpt-{:M\"iMv", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.reparentChild(document0);
      document0.previousElementSibling();
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("KnI8KlAsL3rY");
      document0.setParentNode(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals("KnI8KlAsL3rY", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Element element0 = document0.appendElement("p");
      assertEquals(2, document0.childNodeSize());
      
      element0.firstElementSibling();
      assertEquals("p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsLastChild");
      document0.reparentChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
      assertEquals("org.jsoup.select.Evaluator$IsLastChild", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("org.sup.select.Evaluator$IsLastChild");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals("org.sup.select.Evaluator$IsLastChild", element1.baseUri());
      assertNotNull(element1);
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      Element element0 = document0.getElementById("#M!My~y~e<@");
      assertNull(element0);
      assertEquals("org.jsoup.helper.W3CDom", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("6afAQV?~8Y7q3>7");
      DataNode dataNode0 = new DataNode("czRn(+)e5:f/");
      document0.appendChild(dataNode0);
      Elements elements0 = document0.getElementsMatchingText("6afAQV?~8Y7q3>7");
      assertTrue(elements0.isEmpty());
      assertEquals("6afAQV?~8Y7q3>7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      Element element0 = document0.prepend("org.jsoup.helper.W3CDom");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("=");
      document0.text("=");
      document0.appendElement("=");
      Elements elements0 = document0.getElementsMatchingText("=");
      assertEquals("=", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("p");
      DataNode dataNode0 = DataNode.createFromEncoded("value", "v-y3dl$-TNJ~e31");
      document0.appendChild(dataNode0);
      document0.ownText();
      assertEquals("p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("\"");
      document0.title("        ");
      Pattern pattern0 = Pattern.compile("\"", 4);
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals("\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("e+,7ai&Zjf[Rp;W");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.ownText();
      assertEquals("e+,7ai&Zjf[Rp;W", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Pattern syntax error: ", "Pattern syntax error: ");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.text("");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("^+");
      Element element0 = document0.text("^+");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals("^+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("Dav3l+JZ\"WJ");
      DocumentType documentType0 = new DocumentType("Dav3l+JZ\"WJ", "Dav3l+JZ\"WJ", "U&5>2T{i", "&b[V", "Dav3l+JZ\"WJ");
      document0.prependChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("Dav3l+JZ\"WJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("p");
      DataNode dataNode0 = DataNode.createFromEncoded("value", "v-y3dl$-TNJ~e31");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals("p", element0.baseUri());
      assertEquals("value", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.text("Ky{FAu");
      document0.data();
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$AttributeWithValueMatching");
      document0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValueMatching");
      boolean boolean0 = document0.hasClass("org.jsoup.select.Evaluator$AttributeWithValueMatching");
      assertFalse(boolean0);
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueMatching", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("$OvOqi VU2m4G/Sq(");
      document0.toggleClass("$OvOqi VU2m4G/Sq(");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000010");
      assertEquals("$OvOqi VU2m4G/Sq(", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      document0.toggleClass("org.jsoup.nodes.Element");
      document0.toggleClass("<html>\n <head></head>\n <body></body>\n</html>");
      document0.hasClass("org.jsoup.nodes.Element");
      assertEquals("org.jsoup.helper.W3CDom", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.toggleClass("");
      element0.toggleClass("java.lang.string@0000000032");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000032");
      assertTrue(boolean0);
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.toggleClass("");
      element0.toggleClass("");
      boolean boolean0 = document0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.W3CDom");
      Element element0 = document0.toggleClass("org.jsoup.helper.W3CDom");
      element0.toggleClass("org.jsoup.helper.W3CDom");
      Element element1 = element0.toggleClass("org.jsoup.helper.W3CDom");
      assertEquals("org.jsoup.helper.W3CDom", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000010 ");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "9$= Ojk*HZ'", attributes0);
      element0.val();
      assertEquals("9$= Ojk*HZ'", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      Element element0 = document0.val("org.jsoup.helper.W3CDom");
      assertEquals("org.jsoup.helper.W3CDom", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      Element element0 = document0.appendElement("textarea");
      element0.val("9x6DWLS{/IHD'_9R");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("i");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals("i", document1.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Element element0 = document0.createElement("track");
      StringBuilder stringBuilder0 = new StringBuilder("java.lang.string@0000000026");
      element0.outerHtmlHead(stringBuilder0, 1240, document_OutputSettings1);
      assertEquals("+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("Xi5dz_?!Xo|65V_!cw");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Xi5dz_?!Xo|65V_!cw");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Element element0 = document0.createElement("track");
      StringBuilder stringBuilder0 = new StringBuilder("java.lang.string@0000000026");
      element0.outerHtmlHead(stringBuilder0, 1240, document_OutputSettings1);
      assertEquals("+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.appendElement("rp");
      element0.text("Ky{FAu");
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<rp>Ky{FAu</rp>Ky{FAu</rp>", string0);
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("[ib;ta'dr{pRDOk,");
      PipedWriter pipedWriter0 = new PipedWriter();
      document0.html(pipedWriter0);
      assertEquals("[ib;ta'dr{pRDOk,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.W3CDom");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, element0);
      assertEquals("org.jsoup.helper.W3CDom", document1.baseUri());
  }
}
