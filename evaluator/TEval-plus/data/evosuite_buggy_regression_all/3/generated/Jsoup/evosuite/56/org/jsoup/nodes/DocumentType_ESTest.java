/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:50:52 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("publicId", "", "meta[name=charset]", "");
      String string0 = documentType0.nodeName();
      assertEquals("#doctype", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("publicId", "", "meta[name=charset]", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("area");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlTail(mockPrintWriter0, (-30), document_OutputSettings0);
      assertEquals(0, documentType0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("N?]9U}+b$e?,yO", "open", "org.jsoup.nodes.DocumentType", "S");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "SYSTEM", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(charBuffer0, 1156, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("publicId", "", "meta[name=charset]", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("area");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(mockPrintWriter0, (-1288), document_OutputSettings0);
      assertEquals("", documentType0.baseUri());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("~0a}IrCsuwo,", "~0a}IrCsuwo,", "#5Z", "~0a}IrCsuwo,");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(mockPrintWriter0, (-1288), document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("#5Z", "M.", "M.", "#5Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attributes attributes0 = new Attributes();
      documentType0.attributes = attributes0;
      documentType0.outerHtmlHead(mockPrintWriter0, 347, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }
}
