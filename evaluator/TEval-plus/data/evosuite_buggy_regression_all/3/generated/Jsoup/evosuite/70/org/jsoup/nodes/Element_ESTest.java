/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:53:47 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("pN8W+Ii6\"_");
      document0.appendText(":nth-child(%d)");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("org.jsoup.nodes.Element");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("utf");
      // Undeclared exception!
      try { 
        document0.child(46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("i/]1");
      document0.prependText("i/]1");
      document0.getElementsByIndexLessThan(46);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("i/]1");
      document0.tagName("var");
      document0.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 124, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("_k");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("_k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("action");
      document0.addClass("action");
      document0.cssSelector();
      assertEquals("action", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("Zt8'{");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("@~wj=k");
      Element element0 = document0.attr("-$5mU9Lqq]HEyy", false);
      assertEquals("@~wj=k", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("E");
      document0.getElementsByAttributeValue("E", "E");
      assertEquals("E", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsByAttributeValueStarting("br", "br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("dbiz+LU-FR[v?C(C65k");
      document0.prepend("dbiz+LU-FR[v?C(C65k");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("tt");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("i/]1");
      document0.getElementsByAttributeStarting("i/]1");
      assertEquals(1, document0.childNodeSize());
      assertEquals("i/]1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Elements elements0 = document0.getElementsByIndexEquals(55);
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("utf");
      // Undeclared exception!
      try { 
        document0.wrap("utf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("-$5aU9Lqq]HEyy");
      document0.getElementsByAttributeValueMatching("-$5aU9Lqq]HEyy", "-$5aU9Lqq]HEyy");
      assertEquals(1, document0.childNodeSize());
      assertEquals("-$5aU9Lqq]HEyy", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("utf");
      document0.is("utf");
      assertEquals(1, document0.childNodeSize());
      assertEquals("utf", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("FE&o");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "FE&o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("br");
      document0.getElementsByAttributeValueContaining("br", "br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document(" />");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$NodeList");
      element0.setBaseUri("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("{.>5@Rd4J~<L,;}>");
      Element element0 = document0.shallowClone();
      assertEquals("{.>5@Rd4J~<L,;}>", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("body");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("-$5mU9HLqq]HEyy");
      document0.getElementsByAttributeValueNot("-$5mU9HLqq]HEyy", "-$5mU9HLqq]HEyy");
      assertEquals("-$5mU9HLqq]HEyy", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("QnuevZvTs-wvz");
      String string0 = document0.toString();
      assertEquals("QnuevZvTs-wvz", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("utf");
      document0.getElementsByAttribute("utf");
      assertEquals(1, document0.childNodeSize());
      assertEquals("utf", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("qywhxu");
      // Undeclared exception!
      try { 
        document0.before("qywhxu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("QnuevZvTs-wvz");
      Element element0 = document0.removeClass("QnuevZvTs-wvz");
      assertEquals("QnuevZvTs-wvz", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("utf");
      document0.getAllElements();
      assertEquals("utf", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("=aJ^W%/_!(ibgq8&K%z");
      // Undeclared exception!
      try { 
        document0.selectFirst("=aJ^W%/_!(ibgq8&K%z");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '=aJ^W%/_!(ibgq8&K%z': unexpected token at '=aJ^W%/_!(ibgq8&K%z'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("</");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2678);
      assertEquals("</", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("@~wj=k");
      Element element0 = document0.body();
      element0.after("@~wj=k");
      String string0 = element0.cssSelector();
      assertEquals("@~wj=k", element0.baseUri());
      assertEquals("html > body:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000007 insert position utf of bounds.");
      Element element0 = document0.body();
      element0.html("java.lang.string@0000000007 insert position utf of bounds.");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("pN8W+Ii6\"_");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals("pN8W+Ii6\"_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("JAY19P[");
      DataNode dataNode0 = DataNode.createFromEncoded("JAY19P[", "JAY19P[");
      Element element0 = document0.prependChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("QywHXTU");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      assertEquals("QywHXTU", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("QnuevZvTs-wvz");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1168976148), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("`Fe1M[]e!!3%R}HH");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(60, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(56, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("pZp sQdEtQwEyl:G){");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1969095572), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("`Fe1M[]e!!3%R}HH");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-1), nodeArray0);
      assertEquals("`Fe1M[]e!!3%R}HH", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("@~wj=k");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("@~wj=k", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("</", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.siblingElements();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("7h<&(5>@py} s<j!UI");
      Element element0 = document0.appendElement("hVjrsk");
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("7h<&(5>@py} s<j!UI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("-V#WEkXq(");
      document0.nextElementSibling();
      assertEquals("-V#WEkXq(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("Z~%KL_giQ |~D");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      Element element2 = element1.nextElementSibling();
      assertNotNull(element2);
      assertEquals("body", element2.nodeName());
      assertEquals("Z~%KL_giQ |~D", element2.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("-$5mU9HLqq]HEyy");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals("-$5mU9HLqq]HEyy", element1.baseUri());
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("bo0dy");
      document0.previousElementSibling();
      assertEquals("bo0dy", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("Z~%KL_giQ |~D");
      document0.setParentNode(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z~%KL_giQ |~D", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("{");
      document0.setParentNode(document0);
      Element element0 = document0.firstElementSibling();
      assertEquals("{", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("FE&o");
      document0.setParentNode(document0);
      document0.lastElementSibling();
      assertEquals("FE&o", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      assertEquals(2, document0.childNodeSize());
      
      Element element1 = element0.lastElementSibling();
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("i/]1");
      Element element0 = document0.getElementById("var");
      assertNull(element0);
      assertEquals("i/]1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("tcZh%S]0ap)}.y");
      Node[] nodeArray0 = new Node[1];
      DocumentType documentType0 = new DocumentType("br", "tcZh%S]0ap)}.y", "br", "1_\"p6SEO|`");
      nodeArray0[0] = (Node) documentType0;
      document0.addChildren(1, nodeArray0);
      Elements elements0 = document0.getElementsContainingText("tcZh%S]0ap)}.y");
      assertEquals("tcZh%S]0ap)}.y", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("^|pN8W+Ii6\"_");
      document0.appendElement("br");
      document0.title("0hM0*");
      Elements elements0 = document0.getElementsContainingText("link");
      assertEquals("^|pN8W+Ii6\"_", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.appendElement("!aoK*%JYH5xk;Y2uU");
      document0.title("body");
      Elements elements0 = document0.getElementsContainingText("body");
      assertEquals("body", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.text("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(1, elements0.size());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("FE&o");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("FE&o", true);
      document0.prependChild(xmlDeclaration0);
      Elements elements0 = document0.getElementsContainingOwnText("FE&o");
      assertEquals("FE&o", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertTrue(elements0.isEmpty());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      DocumentType documentType0 = new DocumentType("br", "tcZh%S]0ap)}.y", "br", "1_\"p6SEO|`");
      nodeArray0[0] = (Node) documentType0;
      boolean boolean0 = Element.preserveWhitespace(nodeArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("^|pN8W+Ii6\"_");
      document0.append("0hM0*");
      document0.getElementsContainingText("link");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Element element0 = new Element("textarea");
      Document document0 = Document.createShell("textarea");
      document0.setParentNode(element0);
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertEquals("textarea", document0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("QnuevZvTs-wvz");
      document0.title("QnuevZvTs-wvz");
      boolean boolean0 = document0.hasText();
      assertEquals("QnuevZvTs-wvz", document0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("wLm/!-.w!<OcS,", parseSettings0);
      Element element0 = new Element(tag0, "qHf[!~sIE", (Attributes) null);
      Element element1 = element0.prependText("");
      boolean boolean0 = element1.hasText();
      assertFalse(boolean0);
      assertEquals("qHf[!~sIE", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("JAY19P[");
      DataNode dataNode0 = DataNode.createFromEncoded("JAY19P[", "JAY19P[");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertEquals("JAY19P[", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("`Fe1M[]e!!3%R}HH");
      DataNode dataNode0 = new DataNode("'z", "'z");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals("'z", string0);
      assertEquals("`Fe1M[]e!!3%R}HH", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("inert");
      Comment comment0 = new Comment("r(Nc5?,o3|d-", "+Cs/-o5rB?7W\"");
      document0.appendChild(comment0);
      String string0 = document0.data();
      assertEquals("inert", document0.baseUri());
      assertEquals("r(Nc5?,o3|d-", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("QnuevZvTs-wvz");
      document0.title("QnuevZvTs-wvz");
      document0.data();
      assertEquals("QnuevZvTs-wvz", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      Elements elements0 = document0.getElementsByClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      Elements elements0 = element0.getElementsByClass("org.jsoup.nodes.Element$NodeList");
      assertEquals(1, elements0.size());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("!k-d, 35z}K9W");
      document0.toggleClass("!k-d, 35z}K9W");
      document0.toggleClass("!k-d, 35z}K9W");
      Elements elements0 = document0.getElementsByClass("Queue not long enough to consume sequence");
      assertEquals("!k-d, 35z}K9W", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell(" 1e|7K(CL|Y:ZB^9x");
      Element element0 = document0.toggleClass(" 1e|7K(CL|Y:ZB^9x");
      element0.toggleClass(" 1e|7K(CL|Y:ZB^9x");
      Elements elements0 = element0.getElementsByClass("BeforeDoctypeName");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      element0.toggleClass("7sSAA\".un!");
      Elements elements0 = element0.getElementsByClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("!k-d, 35z}K9W");
      document0.toggleClass("!k-d, 35z}K9W");
      document0.toggleClass("Insen position out of bounds.");
      Elements elements0 = document0.getElementsByClass("vN");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell(")WX9");
      document0.toggleClass("o'+^\"n-_, ");
      document0.toggleClass("o'+^\"n-_, ");
      Elements elements0 = document0.getElementsByClass("Insern position out of bounds.");
      assertEquals(0, elements0.size());
      assertEquals(")WX9", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("QnuevZvTs-wvz");
      document0.toggleClass("QnuevZvTs-wvz");
      Element element0 = document0.toggleClass("QnuevZvTs-wvz");
      Element element1 = element0.toggleClass("QnuevZvTs-wvz");
      assertEquals("QnuevZvTs-wvz", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "textarea", (Attributes) null);
      formElement0.val();
      assertEquals("textarea", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("FE&o");
      Element element0 = document0.val("FE&o");
      assertEquals("FE&o", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "/", (Attributes) null);
      formElement0.val("/");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("br", document0.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Element element0 = new Element("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringBuilder0, 44, document_OutputSettings0);
      assertEquals("textarea<textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Element element0 = new Element("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuilder0, 44, document_OutputSettings0);
      assertEquals("textarea\n                                            <textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helperZStrindUtil$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("jbTytNfPr");
      document0.html(mockPrintStream0);
      assertEquals("org.jsoup.helperZStrindUtil$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.html();
      assertEquals("br", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<br />\n<br />", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("^G");
      document0.title("^G");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>^G</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("^G", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = Document.createShell("^G");
      document0.title("^G");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("<html>\n <head>\n  <title>^G</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("^G", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
  }
}
