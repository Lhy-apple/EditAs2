/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:49:39 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.setBaseUri("");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("\n");
      Element element0 = document0.attr(">i|=lt,]", ">i|=lt,]");
      String string0 = element0.absUrl(">i|=lt,]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode(")@lg", ")@lg");
      Node node0 = textNode0.removeAttr(")@lg");
      assertEquals("#text", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(";");
      Element element0 = document0.append(";");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("abs:itlgamn gq");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(")@lg", ")@lg");
      Node node0 = textNode0.clone();
      assertEquals(0, (int)node0.siblingIndex());
      assertNotNull(node0);
      assertNotSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("E@73f8;o,;/<=sOb=", "E@73f8;o,;/<=sOb=");
      // Undeclared exception!
      try { 
        comment0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("ntgl", "ntgl");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("abs:itlgamn gq");
      String string0 = document0.attr("abs:itlgamn gq");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      assertEquals(0, (int)document0.siblingIndex());
      
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:b!", "abs:b!");
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("abs:b!", dataNode0.baseUri());
      assertEquals(0, (int)dataNode0.siblingIndex());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) dataNode0;
      nodeArray0[4] = (Node) dataNode0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:b!", "abs:b!", false);
      assertNotNull(xmlDeclaration0);
      assertEquals("abs:b!", xmlDeclaration0.baseUri());
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      nodeArray0[5] = (Node) xmlDeclaration0;
      nodeArray0[6] = (Node) dataNode0;
      dataNode0.addChildren(nodeArray0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("abs:b!", dataNode0.baseUri());
      assertEquals(1, (int)dataNode0.siblingIndex());
      assertEquals(7, nodeArray0.length);
      
      dataNode0.setParentNode(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("abs:b!", dataNode0.baseUri());
      assertEquals(1, (int)dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document(";");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("abs:itlgamn gq", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      
      document1.replaceWith(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("abs:itlgamn gq", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell(")@lg");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(")@lg", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      TextNode textNode0 = new TextNode(")@lg", ")@lg");
      assertNotNull(textNode0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(")@lg", textNode0.baseUri());
      
      textNode0.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertEquals(")@lg", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(")@lg", textNode0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.replaceChild(textNode0, textNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("abs:itlgamn gq");
      assertNotNull(document0);
      assertEquals("abs:itlgamn gq", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("\n");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals(0, (int)document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:b!", "abs:b!");
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("abs:b!", dataNode0.baseUri());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) dataNode0;
      nodeArray0[4] = (Node) dataNode0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:b!", "abs:b!", false);
      assertNotNull(xmlDeclaration0);
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertEquals("abs:b!", xmlDeclaration0.baseUri());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      nodeArray0[5] = (Node) xmlDeclaration0;
      nodeArray0[6] = (Node) dataNode0;
      dataNode0.addChildren(nodeArray0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(1, (int)dataNode0.siblingIndex());
      assertEquals("abs:b!", dataNode0.baseUri());
      assertEquals(7, nodeArray0.length);
      
      Node node0 = dataNode0.previousSibling();
      assertNotNull(node0);
      assertSame(node0, xmlDeclaration0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(1, (int)dataNode0.siblingIndex());
      assertEquals("abs:b!", dataNode0.baseUri());
      assertEquals("#declaration", node0.nodeName());
      assertEquals("abs:b!", node0.baseUri());
      assertEquals(0, (int)node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(")@lg", ")@lg");
      assertNotNull(textNode0);
      assertEquals(")@lg", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = textNode0.equals(")@lg");
      assertEquals(")@lg", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(">", ">");
      assertNotNull(textNode0);
      assertEquals(">", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      
      boolean boolean0 = textNode0.equals(textNode0);
      assertEquals(">", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell(",.-y#4q");
      assertNotNull(document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(",.-y#4q", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.select(",.-y#4q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown combinator: ,
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      textNode0.setParentNode(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      // Undeclared exception!
      try { 
        textNode0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertNotNull(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      
      textNode0.hashCode();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode(")@lg", ")@lg");
      assertNotNull(textNode0);
      assertEquals(")@lg", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = textNode0.toString();
      assertNotNull(string0);
      assertEquals(")@lg", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(")@lg", string0);
  }
}
