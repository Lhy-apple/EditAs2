/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:51:10 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("address");
      FormElement formElement0 = new FormElement(tag0, "address", attributes0);
      formElement0.prependElement("address");
      String string0 = formElement0.outerHtml();
      assertEquals("<address><address></address></address>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Oj;zJN[#)!", attributes0);
      formElement0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlTail(stringBuilder0, 11, document_OutputSettings0);
      formElement0.outerHtmlHead(stringBuilder0, 11, document_OutputSettings0);
      assertEquals("</br><br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependText("br");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(")");
      // Undeclared exception!
      try { 
        document0.child(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.html("r");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("dXH)_-N^zo'j! F");
      Elements elements0 = document0.getElementsByAttributeValue("dXH)_-N^zo'j! F", "dXH)_-N^zo'j! F");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueStarting("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prepend("br");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Elements elements0 = document0.getElementsByIndexLessThan(2924);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("reversed");
      Elements elements0 = document0.getElementsByAttributeStarting("reversed");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("reesd");
      Elements elements0 = document0.getElementsByIndexEquals(25);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("bL)]jO_");
      // Undeclared exception!
      try { 
        document0.wrap("bL)]jO_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("p,k={er2sn$jm2brt");
      Element element0 = document0.val("p,k={er2sn$jm2brt");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getElementsByAttributeValueMatching("r", "r");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getElementsByAttributeValueEnding("r", "r");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("p,k={er2sn$jm2brt");
      Elements elements0 = document0.getElementsByClass("p,k={er2sn$jm2brt");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsContainingText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("ndVyAy");
      Elements elements0 = document0.getElementsByAttributeValueContaining("ndVyAy", "ndVyAy");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = document0.clone();
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("td_S@OIE");
      Elements elements0 = document0.getElementsByAttributeValueNot("td_S@OIE", "p)Jhf>]{dT\"g");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("optgroup");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("4ti#q");
      Elements elements0 = document0.getElementsByAttribute("4ti#q");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("&{br");
      // Undeclared exception!
      try { 
        document0.before("&{br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("reversed");
      Element element0 = document0.removeClass("reversed");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("attributeSingleValueCharsSorted");
      Elements elements0 = document0.getElementsByIndexGreaterThan(46);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("r");
      FormElement formElement0 = new FormElement(tag0, "r", attributes0);
      Element element0 = formElement0.appendElement("r");
      Elements elements0 = element0.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("5");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.after("5");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependText("br");
      Elements elements0 = element0.children();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.appendElement("org.jsoup.nodes.Element");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependText("");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-kgse;z]5wp)y");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-kgse;z]5wp)y", attributes0);
      Element element0 = formElement0.appendElement("textarea");
      assertEquals("textarea", element0.nodeName());
      
      List<DataNode> list0 = formElement0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = DataNode.createFromEncoded("br", "br");
      Element element0 = document0.appendChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("%/e2sI");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(828, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("resI");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      Element element0 = document0.insertChildren((-1), linkedHashSet0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2046412864), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("reesd");
      Element element0 = document0.toggleClass("reesd");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("r");
      FormElement formElement0 = new FormElement(tag0, "r", attributes0);
      Element element0 = formElement0.appendElement("r");
      String string0 = element0.cssSelector();
      assertEquals("r > r", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.appendElement("org.jsoup.nodes.Element");
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.nodes.element", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("e^");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("td_S@OIE");
      document0.appendElement("Pattern syntax error: ");
      document0.prependChild(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("5");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("*/");
      Element element0 = document0.appendElement("*/");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Element element0 = document0.appendElement("org.jsoup.nodes.element$1");
      element0.after((Node) document0);
      Document document1 = (Document)element0.nextElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("reversed");
      Element element0 = document0.appendElement("reversed");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("_n91");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("reversed");
      Element element0 = document0.appendElement("reversed");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) element0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.previousElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Element element0 = document0.appendElement("org.jsoup.nodes.element$1");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      document0.prependChild(document0);
      Element element0 = document0.appendElement("Insert position out of bounds.");
      Element element1 = element0.firstElementSibling();
      assertEquals("insert position out of bounds.", element0.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("r=e:2yoe6");
      Element element0 = document0.appendElement("r=e:2yoe6");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("<");
      Element element0 = document0.appendElement("<");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("td_S@OIE");
      document0.appendElement("Pattern syntax error: ");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNotNull(element0);
      assertEquals("pattern syntax error:", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("br", "br", true);
      element0.replaceWith(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("br");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document(")");
      document0.prependText(")");
      document0.appendElement("s");
      Pattern pattern0 = Pattern.compile("s");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("b");
      document0.prependText("b");
      document0.appendElement("b");
      Elements elements0 = document0.getElementsMatchingText("b");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependText("br");
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = DataNode.createFromEncoded("'x", "t+v=2A_DPj.O");
      document0.appendChild(dataNode0);
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("rbr");
      document0.appendElement("rbr");
      Elements elements0 = document0.getElementsMatchingOwnText("rbr");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("ol", "ol");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("bz");
      Element element0 = document0.appendElement("PLAINTEXT");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("reesd");
      Element element0 = document0.appendElement("reesd");
      element0.appendText("reesd");
      String string0 = document0.html();
      assertEquals("<reesd>\n reesd\n</reesd>", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("0p_6?2>d-Jg%|]r^p");
      document0.appendElement("0p_6?2>d-Jg%|]r^p");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("0p_6?2>d-Jg%|]r^p");
      Element element0 = document0.appendElement("0p_6?2>d-Jg%|]r^p");
      element0.prependText("0p_6?2>d-Jg%|]r^p");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("O,jqpdfM]?aGb2");
      Element element0 = document0.appendElement("O,jqpdfM]?aGb2");
      element0.text("O,jqpdfM]?aGb2");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("A({dgL5{([");
      Element element0 = document0.toggleClass("A({dgL5{([");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000005");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("r=e:2yoe6");
      Element element0 = document0.toggleClass("r=e:2yoe6");
      boolean boolean0 = element0.hasClass("r=e:2yoe6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("reversed");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-kgse;z]5wp)y");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-kgse;z]5wp)y", attributes0);
      Element element0 = formElement0.appendElement("textarea");
      element0.val();
      assertEquals("textarea", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("reesd");
      Element element0 = document0.createElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("reversed");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-324));
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder1, (-324), document_OutputSettings1);
      assertEquals("-324<#root>", stringBuilder1.toString());
      assertEquals("-324<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("j91");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-kgse;z]5wp)y");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-kgse;z]5wp)y", attributes0);
      formElement0.appendElement("textarea");
      String string0 = formElement0.outerHtml();
      assertEquals("<-kgse;z]5wp)y>\n <textarea></textarea>\n</-kgse;z]5wp)y>", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Oj;zJN[#)!", attributes0);
      formElement0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 11, document_OutputSettings0);
      formElement0.outerHtmlHead(stringBuilder0, 11, document_OutputSettings0);
      assertEquals("\n           </br>\n           <br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      String string0 = document0.html();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("&_K#!v?[{[p");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "&_K#!v?[{[p", attributes0);
      Element element0 = formElement0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 436, document_OutputSettings0);
      assertEquals("<br />", stringBuilder0.toString());
      assertEquals("br", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("Bs%V.Y :Fo=`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 1553, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("address");
      FormElement formElement0 = new FormElement(tag0, "address", attributes0);
      Element element0 = formElement0.prependElement("address");
      element0.after((Node) formElement0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail(stringBuilder0, (-1103100072), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("address");
      FormElement formElement0 = new FormElement(tag0, "address", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.text("address");
      document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, (-1103100043), document_OutputSettings0);
      assertEquals("</address>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("&{br");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("rvtwsed");
      Document document1 = document0.clone();
      document1.addClass("rvtwsed");
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-kgse;z]5wp)y");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-kgse;z]5wp)y", attributes0);
      formElement0.hashCode();
  }
}
