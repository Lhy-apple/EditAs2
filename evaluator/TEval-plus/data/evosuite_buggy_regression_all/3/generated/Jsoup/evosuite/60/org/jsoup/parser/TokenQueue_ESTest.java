/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:51:56 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3-~");
      tokenQueue0.chompTo("35O");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("/");
      boolean boolean0 = tokenQueue0.matchesCS("/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7g=Mf8)x5 U1\"&AX2))");
      Character character0 = new Character('\'');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('\'', '\'');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.chompToIgnoreCase("       ");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("BoBmN{I;TuAh");
      String string0 = tokenQueue0.toString();
      assertEquals("BoBmN{I;TuAh", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=,bDug");
      char char0 = tokenQueue0.peek();
      assertEquals('=', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("BoBmN{I;TuAh");
      tokenQueue0.chompToIgnoreCase(" ");
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("xx~xwve");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("BoBmN{I;TuAh");
      tokenQueue0.consumeElementSelector();
      assertEquals('{', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C:mdJrvi6");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C:mdJrvi6";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals('C', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C:mdJrvi6");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      
      boolean boolean0 = tokenQueue0.matchesAny((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("b9S-/M#JYkTJ");
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("b9S-/M#JYkTJ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("e<2");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("e<2");
      tokenQueue0.consumeAttributeKey();
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<d");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7g=Mf8)x5 U1\"&AX2))");
      tokenQueue0.chompToIgnoreCase("7g=Mf8)x5 U1\"&AX2))");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("  ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("(\"Oa$TI");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7g=fx5 U1\"AX2LL)");
      tokenQueue0.advance();
      assertEquals('g', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C:mdJrvi6");
      tokenQueue0.consume("C:mdJrvi6");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("35O");
      tokenQueue0.chompTo("35O");
      assertEquals('\u0000', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("^");
      tokenQueue0.consumeToIgnoreCase("jvrnoh_ ");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";ZP(u+\\Qq0;");
      Character character0 = new Character('f');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('f', 'f');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7g=Mf8)x5 U1\"&AX2))");
      tokenQueue0.addFirst("7g=Mf8)x5 U1\"&AX2))");
      Character character0 = Character.valueOf('y');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('y', 'y');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Character character0 = new Character('f');
      TokenQueue tokenQueue0 = new TokenQueue("7g=Mf8)x5 U1\"&AX2))");
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('f', 'f');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7]lyJx6Anhx:");
      tokenQueue0.chompBalanced('', '7');
      assertEquals(']', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "\\us-p$]Fb#T!";
      String string1 = TokenQueue.unescape(string0);
      assertEquals("us-p$]Fb#T!", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = TokenQueue.unescape("Sl_+\\fu\"");
      assertEquals("Sl_+fu\"", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Mz*xXX~xwvEdL65");
      tokenQueue0.consumeWord();
      assertEquals("*xXX~xwvEdL65", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8`x`wbm");
      tokenQueue0.consumeTagName();
      assertEquals('`', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C:mdJrvi6");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }
}
