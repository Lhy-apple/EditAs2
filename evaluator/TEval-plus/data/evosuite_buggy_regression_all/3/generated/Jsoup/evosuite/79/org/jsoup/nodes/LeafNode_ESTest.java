/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:53:02 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      String string0 = textNode0.getWholeText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.removeAttr("");
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("{%#^", "{%#^");
      // Undeclared exception!
      try { 
        dataNode0.ensureChildNodes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("xmlns", "xmlns", false);
      xmlDeclaration0.coreValue("org.jsoup.nodes.LeafNode");
      assertEquals("#declaration", xmlDeclaration0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("Kaam!");
      // Undeclared exception!
      try { 
        comment0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataNode dataNode0 = new DataNode("", "");
      dataNode0.doSetBaseUri("yE=}:~5,/M|VQ");
      assertEquals("#data", dataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = comment0.traverse(nodeVisitor0);
      assertSame(comment0, node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("E!Or`tmss", "name", "InRow", "@85~k?_1HgI[", "Leaf Nodes do not have child nodes.");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("h5");
      comment0.hasAttr("");
      String string0 = comment0.getData();
      assertEquals("h5", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      String string0 = comment0.attr("td");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("{%#^", "{%#^");
      String string0 = dataNode0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("{%#^", "{%#^");
      Document document0 = Document.createShell("7-N|4J");
      dataNode0.parentNode = (Node) document0;
      String string0 = dataNode0.baseUri();
      assertEquals("7-N|4J", string0);
  }
}
