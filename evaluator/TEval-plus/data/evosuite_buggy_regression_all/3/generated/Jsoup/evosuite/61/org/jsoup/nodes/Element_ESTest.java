/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:52:48 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PipedWriter;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("InHead", parseSettings0);
      Element element0 = new Element(tag0, "wf2k[{_r4");
      boolean boolean0 = element0.isBlock();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("Zmnuitem");
      // Undeclared exception!
      try { 
        document0.child(26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.append("menuitem");
      element0.outerHtml();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("menuitem");
      document0.tagName("menuitem");
      document0.prependElement("menuitem");
      String string0 = document0.toString();
      assertEquals("<menuitem>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("iD+$Vl|>(");
      // Undeclared exception!
      try { 
        document0.html("iD+$Vl|>(");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DocumentType");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Element element0 = document0.addClass("menuitem");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("`gi$`~");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = (Document)document0.attr("br", true);
      assertEquals("br", document1.location());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("mcenuictem");
      Elements elements0 = document0.getElementsByAttributeValue("mcenuictem", "mcenuictem");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("wf2k[{_r4");
      Elements elements0 = document0.getElementsByAttributeValueStarting("wf2k[{_r4", "wf2k[{_r4");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Element element0 = document0.prepend("menuitem");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document(" 6zha`S\".0<O#^*kF");
      Elements elements0 = document0.getElementsMatchingOwnText(" 6zha`S\".0<O#^*kF");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("_8z");
      // Undeclared exception!
      try { 
        document0.after("_8z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("Peie");
      Elements elements0 = document0.getElementsByIndexLessThan(671);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("iy$KVa.k>(t5");
      document0.prependElement("iy$KVa.k>(t5");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Elements elements0 = document0.getElementsByAttributeStarting("menuitem");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("InHead", parseSettings0);
      Element element0 = new Element(tag0, "wf2k[{_r4");
      Elements elements0 = element0.getElementsByIndexEquals((-1780));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("Doctype");
      // Undeclared exception!
      try { 
        document0.wrap("Doctype");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell(" RhW+8=d|ZpHPM");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Document document1 = (Document)document0.val(".~b3t#g:kQ#5|!");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Elements elements0 = document0.getElementsByAttributeValueMatching("menuitem", "menuitem");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      boolean boolean0 = element0.is((Evaluator) evaluator_AllElements0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Elements elements0 = document0.getElementsByAttributeValueEnding("menuitem", "menuitem");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("jenuitvm");
      Elements elements0 = document0.getElementsByClass("jenuitvm");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Elements elements0 = element0.getElementsByAttributeValueContaining("menuitem", "menuitem");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Element element1 = element0.clone();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Elements elements0 = element0.getElementsByAttributeValueNot("menuitem", "<menuitem>");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document(":lt(%d)");
      Elements elements0 = document0.getElementsByAttribute(":lt(%d)");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("menuitem");
      // Undeclared exception!
      try { 
        document0.before("menuitem");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("menuictqm");
      Element element0 = document0.removeClass(":matches(");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("iy$KVa.hk>(t5");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("%");
      // Undeclared exception!
      try { 
        document0.is("%");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%': unexpected token at '%'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Elements elements0 = element0.getElementsByTag("menuitem");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("hb?onc9_AO1");
      Elements elements0 = document0.getElementsByIndexGreaterThan(46);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      Element element0 = document0.prependElement("#x?,T0X?Vn~KM<olFu");
      element0.unwrap();
      element0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.append("#x?,T0X?Vn~KM<olFu");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      Element element0 = document0.prependElement("#x?,T0X?Vn~KM<olFu");
      // Undeclared exception!
      try { 
        element0.append("#x?,T0X?Vn~KM<olFu");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Element element0 = new Element("menu@tIm");
      element0.append("menu@tIm");
      element0.children();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      document0.prependText("G 2EiQQ' c3>5#|gtc");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("menuitem");
      DataNode dataNode0 = DataNode.createFromEncoded("menuitem", "menuitem");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document(";(--e4U=k7zO@.>3");
      document0.prependElement(";(--e4U=k7zO@.>3");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("wf2k[{_r4");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(62, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document(" RhW+8=d|Z7pHPM");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2021912153), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Elements elements0 = document0.siblingElements();
      Document document1 = (Document)document0.insertChildren((-1), elements0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("meuitem");
      Element element0 = document0.toggleClass("meuitem");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("iy$KVa.k>(t5");
      Element element0 = document0.prependElement("iy$KVa.k>(t5");
      String string0 = element0.cssSelector();
      assertEquals("iy$KVa.k>(t5", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = new Element("br");
      formElement0.prependChild(element0);
      String string0 = element0.cssSelector();
      assertEquals("br > br", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("jenuitvm");
      Element element0 = document0.prependElement("jenuitvm");
      element0.after((Node) document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document(" RhW+8=d|Z7pHPM");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      document0.prependChild(document0);
      Element element0 = document0.prependElement("#x?,T0X?Vn~KM<olFu");
      Element element1 = element0.nextElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document(";(--e4U=k7zO@.>3");
      Element element0 = document0.prependElement(";(--e4U=k7zO@.>3");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("wf2k[{_r4");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("==vS");
      Element element0 = document0.prependElement("LHbqMH");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      document0.addChildren(nodeArray0);
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals("LHbqMH", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document(" RhW+8=d|Z7pHPM");
      Element element0 = document0.prependElement(" RhW+8=d|Z7pHPM");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("menuictem");
      Element element0 = document0.prependElement("menuictem");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = document0.firstElementSibling();
      assertEquals("menuictem", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IndexGreaterThan", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      Element element0 = document0.prependElement("#x?,T0X?Vn~KM<olFu");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("menuitem");
      document0.appendChild(document0);
      document0.prependElement("menuitem");
      Element element0 = document0.lastElementSibling();
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("java.lang.string@0000000008   rgw!wp8o", parseSettings0);
      TextNode textNode0 = new TextNode("", "fSKmw9XC-SEeJxv,8");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Q+>C.n0Jlo", attributes0);
      Element element0 = formElement0.getElementById("+j>/*3+]qx@PI@");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("! RGw2!wEP8Ou*");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("br", "Y&sU#<2`z#>%sGUp", true);
      document0.appendChild(xmlDeclaration0);
      Elements elements0 = document0.getElementsContainingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("Peie");
      document0.prependText("Peie");
      Elements elements0 = document0.getElementsContainingOwnText("Peie");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document(";2(--e4U=k7zO@.>3");
      Comment comment0 = new Comment(";2(--e4U=k7zO@.>3", ";2(--e4U=k7zO@.>3");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsContainingOwnText(";2(--e4U=k7zO@.>3");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      element0.appendText("p-XY/Jh(");
      Elements elements0 = document0.getElementsMatchingText("textarea");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document(";2(--e4U=k7zO@.>3");
      document0.prependElement(";2(--e4U=k7zO@.>3");
      Elements elements0 = document0.getElementsContainingOwnText(";2(--e4U=k7zO@.>3");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DataNode dataNode0 = new DataNode("br", "br");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("iy$KVa.k>(t5");
      Element element0 = document0.prependElement("iy$KVa.k>(t5");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Comment comment0 = new Comment("menuitem", "value");
      element0.prependChild(comment0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      document0.prependElement("#x?,T0X?Vn~KM<olFu");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("jenuitvm");
      Element element0 = document0.prependElement("jenuitvm");
      element0.appendText("jenuitvm");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000008   rgw!wp8o");
      DataNode dataNode0 = new DataNode("fSKmw9XC-SEeJxv,8", "fSKmw9XC-SEeJxv,8");
      Element element1 = element0.prependChild(dataNode0);
      String string0 = element1.data();
      assertEquals("fSKmw9XC-SEeJxv,8", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Comment comment0 = new Comment("org.jsoup.parser.Token$EndTag", "org.jsoup.parser.Token$EndTag");
      document0.appendChild(comment0);
      String string0 = document0.data();
      assertEquals("org.jsoup.parser.Token$EndTag", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("G 2EiQQ' c3>5#|gtc");
      Element element0 = document0.appendText("G 2EiQQ' c3>5#|gtc");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("menuictqm");
      Element element0 = document0.toggleClass("menuictqm");
      boolean boolean0 = element0.hasClass("org.jsoup.select.Evaluator$AttributeWithValueNot");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("Zmnuitem");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      boolean boolean0 = element0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("iy+$Va.k>(");
      Element element0 = document0.toggleClass("iy+$Va.k>(");
      document0.toggleClass("! RGw2!wEP8Ou*");
      boolean boolean0 = element0.hasClass(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("br");
      document0.toggleClass("br");
      document0.toggleClass(" ");
      boolean boolean0 = document0.hasClass("br");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("p{pH&p<vY'H`8K!{YJa");
      document0.toggleClass("p{pH&p<vY'H`8K!{YJa");
      document0.toggleClass("! RGw!wP8O");
      boolean boolean0 = document0.hasClass("!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("menuitem");
      document0.toggleClass("menuitem");
      document0.toggleClass("menuitem");
      boolean boolean0 = document0.hasClass("menuitem");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("iy+{Va.k>(");
      Element element0 = document0.toggleClass("iy+$Va.k>(");
      document0.toggleClass("Yzgo)f02o.1[OC$l1t\"");
      Element element1 = element0.toggleClass("Yzgo)f02o.1[OC$l1t\"");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Element element0 = new Element("menuitem");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("menuitem");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("0ew%");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.prependElement("0ew%");
      String string0 = document0.toString();
      assertEquals("<0ew%></0ew%>", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("menuitem");
      document0.prependElement("menuitem");
      String string0 = document0.toString();
      assertEquals("<menuitem>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Element element0 = new Element("menuitem");
      StringBuilder stringBuilder0 = new StringBuilder(1858);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuilder0, 1858, document_OutputSettings0);
      assertEquals("<menuitem>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("#x?,T0X?Vn~KM<olFu");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8_");
      document0.outerHtml((Appendable) mockPrintStream0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Element element0 = new Element("menuitem");
      StringBuilder stringBuilder0 = new StringBuilder(1858);
      Element element1 = element0.append("menuitem");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 1858, document_OutputSettings1);
      element1.outerHtmlHead(stringBuilder0, 1858, document_OutputSettings0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Element element0 = new Element("menuitem");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 2927, document_OutputSettings1);
      assertEquals("<menuitem />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Element element0 = new Element("#x?,T0X?Vn~KM<olFu");
      element0.append("#x?,T0X?Vn~KM<olFu");
      element0.outerHtml();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Element element0 = new Element("menuitem");
      StringBuilder stringBuilder0 = new StringBuilder(1827);
      Element element1 = element0.append("menuitem");
      element1.prependText("menuitem");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 1827, document_OutputSettings1);
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      FormElement formElement1 = (FormElement)formElement0.prependChild(formElement0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("<br>", "br");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        formElement1.outerHtmlTail(mockPrintStream0, (-1842001214), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Document document0 = new Document("n$Wem");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = document0.html(pipedWriter0);
      assertSame(pipedWriter0, pipedWriter1);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Element element1 = element0.prependChild(element0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(82);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      element1.html(mockPrintWriter0);
  }
}
