/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:53:19 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tokeniser_ESTest extends Tokeniser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      tokeniser0.createTempBuffer();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
      tokeniser0.emitDoctypePending();
      Token.Doctype token_Doctype0 = (Token.Doctype)tokeniser0.read();
      assertEquals("", token_Doctype0.getSystemIdentifier());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("S]-\"rSlPwQ~5]vBB8");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.acknowledgeSelfClosingFlag();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("t=$BS,-&B{[8(*5)K*");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createCommentPending();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&quot~%;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Rz0<Z\">ipm");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
      String string0 = tokeniser0.appropriateEndTagName();
      assertEquals("Z\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emitCommentPending();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&quot;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createDoctypePending();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("formnovalida.e");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.getState();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("formnovalidate");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.emit((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("t=$BS,-&B{[8(*5)K*");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      tokeniser0.emit(token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("}c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      tokeniser0.emit(token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("}c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      Attributes attributes0 = new Attributes();
      token_EndTag1.attributes = attributes0;
      tokeniser0.emit(token_EndTag1);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("NHo]*-3l&");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("NHo]*-3l&", token0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("t=$BS,-&B{[8(*5)K*");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = new Character('t');
      int[] intArray0 = tokeniser0.consumeCharacterReference(character0, false);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&quot;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      int[] intArray0 = tokeniser0.consumeCharacterReference((Character) null, true);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&#9");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals("\t", token0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&#xa9");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("\u00A9", token0.toString());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&#xP;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("&#xP;", token0.toString());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&#xa0;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      Token token0 = tokeniser0.read();
      assertEquals("\u00A0", token0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nubI");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = new Character('Y');
      int[] intArray0 = tokeniser0.consumeCharacterReference(character0, false);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&qot;");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(951);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertFalse(parseErrorList0.isEmpty());
      assertEquals("&qot;", token0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&quot;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.unescapeEntities(true);
      assertEquals(6, characterReader0.pos());
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&quot-;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.unescapeEntities(true);
      assertEquals(7, characterReader0.pos());
      assertEquals("&quot-;", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|m-Z*0Q!]9X.9yVWx");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      assertNotNull(token_Tag0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("formnovalida.e");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("q<Zl<>m0");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("q", token0.toString());
      
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("W|{rM");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.appropriateEndTagName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("6Yxz<@d:$@7`D{8!_.`");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals("6Yxz<@d:$@7`D{8!_.`", token0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Q1=mAQ\"><{|>9WP");
      ParseErrorList parseErrorList0 = new ParseErrorList(45, 45);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertFalse(parseErrorList0.isEmpty());
      assertEquals("Q1=mAQ\"><{|>9WP", token0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("* y<Zl<tm0");
      ParseErrorList parseErrorList0 = new ParseErrorList(1623, 1623);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals(1, parseErrorList0.size());
      assertEquals("* y", token0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(",O1b0R");
      ParseErrorList parseErrorList0 = new ParseErrorList(101, 101);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.error("6)1DE(_mO");
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }
}
