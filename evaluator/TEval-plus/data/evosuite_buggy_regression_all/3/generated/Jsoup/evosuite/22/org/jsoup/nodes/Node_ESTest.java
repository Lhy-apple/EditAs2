/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:49:53 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("A-?");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("A-?");
      document0.setBaseUri("A-?");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("A-?");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("-NwWR~(");
      document0.prependChild(document0);
      document0.unwrap();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("starf", "starf");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("SfA<fq*3W5lG2o");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("abs:(/+xg$d!}[i");
      // Undeclared exception!
      try { 
        document0.before("abs:(/+xg$d!}[i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Topf", "Topf");
      textNode0.removeAttr("DLpPDiv M$gV[");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("#text", "q`SI5M%Xc4$3dTNj9X");
      textNode0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("G-wWR~L(");
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("squa");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      textNode0.attributes();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("abs:(/+xg$d!}[i");
      document0.absUrl("abs:(/+xg$d!}[i");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("A-?");
      Element element0 = document0.attr("A-?", "abs:e1 o1a3nx^@||ak");
      Pattern pattern0 = Pattern.compile("abs:e1 o1a3nx^@||ak", (-164345658));
      element0.getElementsByAttributeValueMatching("abs:a-?", pattern0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("-WR~}");
      document0.prependChild(document0);
      document0.after("-WR~}");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("abs:(/+xg$d!}[i");
      // Undeclared exception!
      try { 
        document0.wrap("abs:(/+xg$d!}[i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("A-?");
      Element element0 = document0.body();
      element0.wrap("A-?");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("-NwWR~(");
      document0.prependChild(document0);
      document0.wrap("-NwWR~(");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Document document1 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.prependChild(document1);
      document1.unwrap();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("-WR~}");
      document0.prependChild(document0);
      document0.setParentNode(document0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("ab:abs:abs:a-e01|:%");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("abs:(/+xg$d!}[i");
      document0.prependChild(document0);
      Element element0 = document0.createElement("abs:(/+xg$d!}[i");
      document0.replaceChild(document0, element0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document(":<[5t");
      TextNode textNode0 = TextNode.createFromEncoded(":<[5t", ":<[5t");
      // Undeclared exception!
      try { 
        document0.removeChild(textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      document0.prependChild(document0);
      document0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("-NwWR~(");
      Element element0 = document0.appendElement("-NwWR~(");
      element0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("o0)G#7jra?)SLC", "o0)G#7jra?)SLC");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      textNode0.equals(linkedList0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode("@nU", "o");
      textNode0.equals(textNode0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("wQ");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        linkedHashSet0.contains(document0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("k\"Io\"]?QAb7o41N");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.contains(document0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("k\")o\"]?QAb7o41N");
      document0.append("k\")o\"]?QAb7o41N");
      document0.clone();
  }
}
