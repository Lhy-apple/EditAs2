/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:55:19 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("RH8ew>4e", "RH8ew>4e");
      String string0 = attribute0.toString();
      assertEquals("RH8ew>4e=\"RH8ew>4e\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("]LfK<&Kh[n:b+", "]LfK<&Kh[n:b+");
      attribute0.setKey("]LfK<&Kh[n:b+");
      assertEquals("]LfK<&Kh[n:b+", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("(25'O?](-%", "(25'O?](-%");
      String string0 = attribute0.getKey();
      assertEquals("(25'O?](-%", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-replacementChar", "s-l}D`lQ");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("s-l}D`lQ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("^m&v2x)TohjH|4", "^m&v2x)TohjH|4", attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("(25'O?](-%", "(25'O?](-%");
      String string0 = attribute0.getValue();
      assertEquals("(25'O?](-%", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("i88&V=", "");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("fornovqOalidate", "fornovqOalidate", attributes0);
      attribute0.setKey("fornovqOalidate");
      assertEquals("fornovqOalidate", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("sortale", "sortale");
      Attribute attribute0 = new Attribute("sortale", "sortale", attributes0);
      attribute0.setKey("sortale");
      assertEquals("sortale", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("sortale", "sortale");
      Attribute attribute0 = new Attribute("sortale", "sortale", attributes0);
      String string0 = attribute0.setValue("sortale");
      assertEquals("sortale", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("inert", "inert");
      String string0 = attribute0.html();
      assertEquals("inert", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("${IJ2^[Mm\"k&5;x", "${IJ2^[Mm\"k&5;x");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "data-");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("(\"m", (String) null);
      String string0 = attribute0.html();
      assertEquals("(\"m", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("^s+", "", (Attributes) null);
      String string0 = attribute0.html();
      assertEquals("^s+=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("RH8eC>4e", "h");
      String string0 = attribute0.html();
      assertEquals("RH8eC>4e=\"h\"", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("sortable", "sortable");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("|", "|");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("~Ng7<7*", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("RH8ew>4e", "RH8ew>4e");
      boolean boolean0 = attribute0.equals("RH8ew>4e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("RH8ew>4e", "RH8ew>4e");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("RH8ew>4e", "RH8ew>4e");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("zc;v=XR", "zc;v=XR");
      Attribute attribute1 = new Attribute("zzc;v=FXR", "zzc;v=FXR");
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("^m&v2x)TohjH|4", "^m&v2x)TohjH|4", attributes0);
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      
      attribute1.setValue((String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute(":matches(%s)", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("^s+", "", (Attributes) null);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("(\"m", (String) null);
      attribute0.hashCode();
  }
}
