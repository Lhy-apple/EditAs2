/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:51:14 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("p");
      Element element0 = document0.getElementById("6V?=mUU");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document(":matches(regex) query must not be empty");
      Document document1 = (Document)document0.appendText(":matches(regex) query must not be empty");
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("XB5J7]8i2`");
      document0.toggleClass("XB5J7]8i2`");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.prependText(" ");
      Element element1 = document0.appendElement("br");
      assertEquals(1, element1.siblingIndex());
      
      Elements elements0 = element0.getElementsContainingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.child(411);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 411, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("aoi");
      Element element0 = document0.tagName("aoi");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("rp");
      Element element0 = document0.prependElement("rp");
      element0.text("rp");
      StringBuilder stringBuilder0 = new StringBuilder("rp");
      document0.outerHtml(stringBuilder0);
      assertEquals("rp\n<#root>\n <rp>rp</rp>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("rp");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("<");
      Element element0 = document0.addClass("<");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("*");
      // Undeclared exception!
      try { 
        document0.html("*");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("T$g name must Koz b5 empty.");
      Elements elements0 = document0.getElementsByAttributeValue("T$g name must Koz b5 empty.", "T$g name must Koz b5 empty.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("iR{oQ`N_u");
      Elements elements0 = document0.getElementsByAttributeValueStarting("iR{oQ`N_u", "iR{oQ`N_u");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("'1/");
      Element element0 = document0.createElement("'1/");
      element0.reparentChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("'1/ > #root", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getElementsMatchingOwnText("i .oQ`N_u");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("i.QN_y");
      // Undeclared exception!
      try { 
        document0.after("i.QN_y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("i .TQ`N_u");
      Elements elements0 = document0.getElementsByIndexLessThan((-2401));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getElementsByAttributeStarting("i .oQ`N_u");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexEquals((-11));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      // Undeclared exception!
      try { 
        document0.wrap("i .oQ`N_u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("iR{oQ2'`N_u");
      Document document1 = (Document)document0.val("iR{oQ2'`N_u");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("f");
      Elements elements0 = document0.getElementsByAttributeValueMatching("f", "f");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Insert position out of bounds.", "Insert position out of bounds.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getElementsByClass("i .oQ`N_u");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueContaining("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getElementsByAttributeValueNot("i .oQ`N_u", "i .oQ`N_u");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("j1/'w,{{!!z-o(z");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("iR{_Io<Q`_u");
      Elements elements0 = document0.getElementsByAttribute("iR{_Io<Q`_u");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("&[s&@UxEYU");
      // Undeclared exception!
      try { 
        document0.before("&[s&@UxEYU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("Z\"zleq=ky|icZRCViFo");
      Element element0 = document0.removeClass("Z\"zleq=ky|icZRCViFo");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("\"");
      Elements elements0 = document0.getElementsByTag("\"");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("iR{oQ`N_u");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1943));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("'1/");
      document0.reparentChild(document0);
      Elements elements0 = document0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("'1/");
      Element element0 = document0.createElement("'1/");
      element0.reparentChild(document0);
      Elements elements0 = document0.parents();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("\"");
      Element element0 = document0.prependText("\"");
      Element element1 = element0.appendElement("\"");
      Element element2 = element1.previousElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.appendElement("i .oQ`N_u");
      assertEquals(0, element0.siblingIndex());
      
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Document");
      document0.prependText("org.jsoup.nodes.Document");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeWithValueStarting");
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.Evaluator$AttributeWithValueStarting", "org.jsoup.select.Evaluator$AttributeWithValueStarting");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeWithValueStarting");
      Element element0 = document0.appendElement("org.jsoup.select.Evaluator$AttributeWithValueStarting");
      assertEquals(0, element0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(411, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("#root");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1466), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren((-1), linkedList0);
      assertEquals("i .oQ`N_u", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("=V");
      document0.reparentChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.appendElement("i .oQ`N_u");
      Elements elements0 = element0.siblingElements();
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.appendElement("i .oQ`N_u");
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendElement("x%");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("Tag name mus not be empty.");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendElement("x%");
      element0.after((Node) document0);
      Element element1 = element0.nextElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("fn}VaUGG");
      Element element0 = document0.appendElement("ir");
      element0.before((Node) document0);
      Element element1 = element0.previousElementSibling();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("=m");
      Element element0 = document0.appendElement("=m");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("%>maf}>euIOPC");
      Element element0 = document0.appendElement("%>maf}>euIOPC");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element1 = element0.firstElementSibling();
      assertEquals("%>maf}>euiopc", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("p_nduy6ltbuqO$bo_");
      Element element0 = document0.appendElement("p_nduy6ltbuqO$bo_");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.appendElement("i .oQ`N_u");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("T$g name must Koz b5 empty.");
      Element element0 = document0.appendElement("ir");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.lastElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("#");
      Comment comment0 = new Comment("#", "#");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsMatchingText("#");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("s");
      document0.prependText("s");
      document0.appendElement("s");
      Elements elements0 = document0.getElementsMatchingText("s");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("T$g name must Koz b5 empty.");
      Element element0 = document0.prependText("T$g name must Koz b5 empty.");
      document0.appendElement("T$g name must Koz b5 empty.");
      Elements elements0 = element0.getElementsMatchingText("T$g name must Koz b5 empty.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("=V");
      document0.prependText("=V");
      Elements elements0 = document0.getElementsContainingOwnText("=V");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("=V");
      DataNode dataNode0 = new DataNode("=V", "=V");
      document0.appendChild(dataNode0);
      Elements elements0 = document0.getElementsContainingOwnText("=V");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      document0.appendChild(element0);
      document0.prependElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextNode textNode0 = new TextNode("w5x#k_^3Db", "w5x#k_^3Db");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendElement("textarea");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Tag tag0 = Tag.valueOf("LLw,d6\u0000*b");
      Element element0 = new Element(tag0, "LLw,d6\u0000*b");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("qH", "LLw,d6\u0000*b", true);
      element0.prependChild(xmlDeclaration0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependText("");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendElement("textarea");
      element0.val(",`+ao+");
      assertEquals(1, element0.childNodeSize());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.appendElement("textarea");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("XB5J7]82`");
      DataNode dataNode0 = DataNode.createFromEncoded("XB5J7]82`", "XB5J7]82`");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals("XB5J7]82`", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("XB5J7]82`");
      document0.prependText("XB5J7]82`");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("fn}VaUGG");
      document0.appendElement("ir");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.toggleClass("i .oQ`N_u");
      boolean boolean0 = document0.hasClass("Y9whsC2{3'Ktq3p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.toggleClass("i .oQ`N_u");
      boolean boolean0 = document0.hasClass("Insert position out of bounds.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      document0.toggleClass("i .oQ`N_u");
      boolean boolean0 = document0.hasClass("java.lang.String@0000000005");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("i .oQ`N_u");
      Element element0 = document0.toggleClass("i .oQ`N_u");
      element0.toggleClass("R4CMZ;hnRh{]");
      Element element1 = element0.toggleClass("R4CMZ;hnRh{]");
      assertEquals("#root", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("Z\"zleq=ky|icZRCViFo");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("=");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "=");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 74, document_OutputSettings0);
      assertEquals("=<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("p");
      Element element0 = document0.createElement("p");
      StringBuilder stringBuilder0 = new StringBuilder("p");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringBuilder0, 72, document_OutputSettings0);
      assertEquals("p<p>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("p");
      Element element0 = document0.createElement("p");
      StringBuilder stringBuilder0 = new StringBuilder("p");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuilder0, 72, document_OutputSettings0);
      assertEquals("p\n                                                                        <p>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n <br>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document0.outputSettings(document_OutputSettings1);
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n <br />\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("iR{_Io<Q`_u");
      StringBuilder stringBuilder0 = new StringBuilder(993);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 46, document_OutputSettings1);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("rp");
      Element element0 = document0.prependElement("rp");
      element0.text("rp");
      StringBuilder stringBuilder0 = new StringBuilder("rp");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.outerHtml(stringBuilder0);
      assertEquals("rp\n<#root>\n <rp>rp</rp>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("rp");
      Element element0 = document0.prependElement("rp");
      Element element1 = element0.text("rp");
      element1.prependText("org.jsoup.nodes.element");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n <rp>\n  org.jsoup.nodes.element\n  rp\n </rp>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.appendElement(":nth-child(%d)");
      String string0 = document0.html();
      assertEquals("<:nth-child(%d)></:nth-child(%d)>", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("%$l-w`");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Document document1 = document0.clone();
      boolean boolean0 = document0.equals(document1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      
      document0.prepend("R>");
      boolean boolean0 = document0.equals(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = new Document("lIX eS%JC4+?*,");
      document0.hashCode();
  }
}
