/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:53:31 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("~=");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "~=", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "figure", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Element element0 = new Element("title");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("title", element0, "title", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      CharacterReader characterReader0 = new CharacterReader("h");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("m<YoPUs{>xOsL", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("G~;]7a");
      htmlTreeBuilder0.parse(stringReader0, "G~;]7a", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.processEndTag("G~;]7a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("html");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("tbody");
      htmlTreeBuilder0.parseFragment("tbody", element0, "tbody", parseErrorList0, (ParseSettings) null);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(formElement0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      htmlTreeBuilder0.setPendingTableCharacters(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("'rMK06");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("th");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("ypp");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("dt", (Element) null, "dt", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("dt", (Attributes) null);
      token_StartTag1.selfClosing = true;
      htmlTreeBuilder0.insert(token_StartTag0);
      htmlTreeBuilder0.generateImpliedEndTags("thead");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("ul");
      htmlTreeBuilder0.parseFragment("ul", document0, "ul", (ParseErrorList) null, (ParseSettings) null);
      htmlTreeBuilder0.generateImpliedEndTags("html");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("iframe");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("input", element0, "input", parseErrorList0, parseSettings0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      Element element0 = document0.createElement("script");
      htmlTreeBuilder0.parseFragment("script", element0, "[g[bGx4]", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("noscript");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", element0, "noscript", parseErrorList0, (ParseSettings) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("plaintext");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("plaintext", element0, "plaintext", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("lx}dq:fBNQyoey@5A");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = Document.createShell("dd");
      Element element0 = document0.createElement("table");
      ParseErrorList parseErrorList0 = new ParseErrorList(509, 509);
      htmlTreeBuilder0.parseFragment("dd", element0, "dd", parseErrorList0, parseSettings0);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("dt", (Attributes) null);
      token_StartTag1.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("butto#");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "butto#", attributes0);
      htmlTreeBuilder0.parseFragment("*p", formElement0, "butto#", (ParseErrorList) null, parseSettings0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("button", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals("butto#", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parseFragment("m<YoPUs{>QOsL", (Element) null, "m<YoPUs{>QOsL", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("m<YoPUs{>QOsL", (Attributes) null);
      token_StartTag1.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("[g[bGx4]", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("BeforeAttributeValue");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("x&~I_jA<?,#", document0, "BeforeAttributeValue", parseErrorList0, parseSettings0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("p", (Element) null, "p", (ParseErrorList) null, parseSettings0);
      Attributes attributes0 = new Attributes();
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.nameAttr("button", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("", (Element) null, "", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.getFromStack("body");
      assertNotNull(element0);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("plaint gext", (Element) null, "plaint gext", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      StringReader stringReader0 = new StringReader("|Eo");
      htmlTreeBuilder0.parse(stringReader0, "|Eo", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.currentElement();
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToClose("body");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseErrorList parseErrorList0 = new ParseErrorList(857, 857);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "[g[bGx4]";
      stringArray0[2] = "[g[bGx4]";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parseErrorList0, parseSettings0);
      String[] stringArray0 = new String[9];
      stringArray0[4] = "body";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("G22]@a");
      htmlTreeBuilder0.parse(stringReader0, "G22]@a", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToBefore((String) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("html");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "<html>\n <head></head>\n <body>\n  [g[bGx4]\n </body>\n</html>", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.clearStackToTableRowContext();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.clearStackToTableRowContext();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("r");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "r", (ParseErrorList) null, parseSettings0);
      Element element0 = document0.body();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("dt", (Element) null, "dt", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "figure", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.currentElement();
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("~=");
      htmlTreeBuilder0.initialiseParse(stringReader0, "~=", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parseFragment("m<YoPUs{>OsL", (Element) null, "m<YoPUs{>OsL", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Element element0 = new Element("select");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-78142568));
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "select", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("td");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("VEH1p@oXml,w", element0, "td", (ParseErrorList) null, parseSettings0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("th");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, "th", (ParseErrorList) null, parseSettings0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = new Document("[g[bGx4]");
      Element element0 = document0.createElement("tr");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("[g[bGx4]", element0, "[g[bGx4]", (ParseErrorList) null, parseSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("thead");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("thead", element0, "thead", (ParseErrorList) null, parseSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = new Document("[g[bGx4]");
      Element element0 = document0.createElement("tfoot");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tfoot", element0, "Dk4AI$(", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = Document.createShell("Unexpected token [%s] when in state [%s]");
      Element element0 = document0.createElement("caption");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("scuript", element0, "scuript", parseErrorList0, parseSettings0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("colgroup");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("colgroup", element0, "colgroup", (ParseErrorList) null, parseSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("head");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("head", element0, "w(13l VrHGHmx#4$5/", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("frameset");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, "section", parseErrorList0, parseSettings0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("html");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, "html", (ParseErrorList) null, parseSettings0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("l+P\"FySXdh-XF6^1_");
      htmlTreeBuilder0.initialiseParse(stringReader0, "l+P\"FySXdh-XF6^1_", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("E<YoPU{>OsL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("BZrI$\u0006$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("plaint gext", (Element) null, "plaint gext", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("plaint gext");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[g[bGx4]");
      ParseErrorList parseErrorList0 = new ParseErrorList(857, 857);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "[g[bGx4]", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToClose("h!`.j:JhiWE.@rA+Z");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("[g[bGx4]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      StringReader stringReader0 = new StringReader("|Eo");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "|Eo", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("|Eo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("qc@@Pq^Wj}q)2u}7W");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "qc@@Pq^Wj}q)2u}7W", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("dt", (Element) null, "dt", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.generateImpliedEndTags("thead");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("m<YoPUs{>O", (Element) null, "m<YoPUs{>O", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = Document.createShell("?Av)&;sBj&");
      htmlTreeBuilder0.parseFragment("table", document0, ":3RLl", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("9<du6");
      htmlTreeBuilder0.parseFragment("ul", element0, "E<YpPU>O}L", parseErrorList0, (ParseSettings) null);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Tag tag0 = Tag.valueOf("9<du6");
      Comment comment0 = new Comment("E<YpPU>O}L");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "L|h@2bU", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[gbG]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1790943563));
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "[gbG]", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader(";d~6SwK]'z");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ";d~6SwK]'z", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(";d~6SwK]'z", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("r");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "r", (ParseErrorList) null, parseSettings0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader(";d~6SwK]'z");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ";d~6SwK]'z", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("K)e'U6N%<|:[aU");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "j,C'zA~o|a", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("rm4/GYMz", (Element) null, "rm4/GYMz", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.getFromStack("body");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("pF&", (Element) null, "pF&", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("pF&");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[gbG]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1790943563));
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "[gbG]", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("[gbG]");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("[gbG]");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1790943563));
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "[gbG]", parseErrorList0, parseSettings0);
      Element element0 = document0.createElement("[gbG]");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("[gbG]");
      assertEquals("[gbG]", element1.baseUri());
  }
}
