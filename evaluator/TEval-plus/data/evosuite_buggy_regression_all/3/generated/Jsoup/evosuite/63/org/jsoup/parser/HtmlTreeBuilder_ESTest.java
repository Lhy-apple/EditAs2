/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:52:25 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "$H#D", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("R`4KeSkMJ");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "R`4KeSkMJ", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("NwV", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("\":7 TApsb");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "\":7 TApsb", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.processEndTag("\":7 TApsb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("tbody");
      htmlTreeBuilder0.parseFragment("nr)", element0, "tbody", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("5G>H'Fx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setPendingTableCharacters((List<String>) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(".GnCQ5_AF[%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("RfK5/vL}e0pJ<?9<(h");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "/@YTE}(jI<'", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("!m!~wkFi", (Element) null, "!m!~wkFi", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt&QbA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "kbd", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("style", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("E~vt&QbA>[zl8c", element0, "E~vt&QbA>[zl8c", parseErrorList0, parseSettings0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("script");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("rp", element0, "rp", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("noscript");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", element0, "select", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("plaintext");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("R`4K{}SkMJ", element0, "R`4K{}SkMJ", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "dl", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("dl", formElement0, "S^bT}h", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("R`4K{}SkMJ");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "R`4K{}SkMJ", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("R`4K{}SkMJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("table");
      ParseErrorList parseErrorList0 = new ParseErrorList(617, 617);
      htmlTreeBuilder0.parseFragment("tfoot", element0, "table", parseErrorList0, parseSettings0);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "E~vt2&Q~pA>[zl8c", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("E~vt2&Q~pA>[zl8c", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt&Q~A>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "kbd", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("link", attributes0);
      token_StartTag0.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt&Q~A>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "kbd", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("E~vt&Q~A>[zl8c", attributes0);
      token_StartTag0.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt&Q~A>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "kbd", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("style", attributes0);
      token_StartTag0.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "E~vt2&Q~pA>[zl8c", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("E~vt2&Q~pA>[zl8c", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt&Q~A>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "l@", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("script", attributes0);
      htmlTreeBuilder0.insert(token_StartTag1);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Character token_Character0 = tokeniser0.charPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("thead");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "thead", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("fieldset");
      htmlTreeBuilder0.parse(stringReader0, "fieldset", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("fieldset");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("fieldset");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "fieldset", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("R`4K{}SkMJ");
      htmlTreeBuilder0.parse(stringReader0, "R`4K{}SkMJ", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("R`4K{}SkMJ");
      Element element0 = htmlTreeBuilder0.getFromStack("R`4K{}SkMJ");
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "body", parseErrorList0, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("option");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "4)7(%NVfafq$^4UQ2^", parseErrorList0, parseSettings0);
      Element element0 = document0.body();
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(boolean0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("option");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "option", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToClose("option");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("\":7 TApsb");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "\":7 TApsb", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToClose("body");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("R`4K{}SkMJ");
      htmlTreeBuilder0.parse(stringReader0, "R`4K{}SkMJ", (ParseErrorList) null, parseSettings0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "R`4K{}SkMJ";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "body", parseErrorList0, parseSettings0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "body";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "E~vt2&Q~pA>[zl8c", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("\":7 TApsb");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "E~vt2&Q~pA>[zl8c", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("html");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      StringReader stringReader0 = new StringReader("R`4KeSkMJ");
      htmlTreeBuilder0.parse(stringReader0, "R`4KeSkMJ", (ParseErrorList) null, parseSettings0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "R`4KeSkMJ";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      htmlTreeBuilder0.clearStackToTableContext();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "E~vt2&Q~pA>[zl8c", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.clearStackToTableContext();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("option");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "option", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("option");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(1, element0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "E~vt2&Q~pA>[zl8c", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("option");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "option", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("thead");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "$H#D", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("bthead");
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      StringReader stringReader0 = new StringReader("rp");
      htmlTreeBuilder0.parse(stringReader0, "select", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("select");
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("td");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("$pK", element0, "head", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("vO[{I2DkC3");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "X8Cg<B=xf,N-?aEO.J", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("vO[{I2DkC3");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "X8Cg<B=xf,N-?aEO.J", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("vO[{I2DkC3", element0, "th", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("fieldset");
      htmlTreeBuilder0.parse(stringReader0, "[SRuizO3CN25TR}*</", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("tr");
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("thead");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "thead", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("thead");
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("tfoot");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("Tl9rt.", element0, "Tl9rt.", (ParseErrorList) null, parseSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Element element0 = new Element("caption");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "plaintext", (ParseErrorList) null, (ParseSettings) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("\":7 TApsb");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "\":7 TApsb", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("colgroup");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("A{>%L:0#", element0, "colgroup", parseErrorList0, parseSettings0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("fieldset");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "fieldset", parseErrorList0, parseSettings0);
      Element element0 = document0.head();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", element0, "8S_E%4Q", parseErrorList0, parseSettings0);
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("frameset");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("menu", element0, "nv~Rq'j>\"dlH`NNb", parseErrorList0, parseSettings0);
      assertEquals(0, list0.size());
      assertEquals(0, parseErrorList0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("frameset");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("html");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("sytemId", element0, "sytemId", (ParseErrorList) null, (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt&QbA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "kbd", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("style", attributes0);
      htmlTreeBuilder0.insert(token_StartTag0);
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = new ArrayList<Element>();
      htmlTreeBuilder0.stack = arrayList0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("\":7 TApsb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("fieldset");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "fieldset", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("fieldset");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("fieldset");
      htmlTreeBuilder0.parse(stringReader0, "fieldset", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("fieldset");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("fieldset");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("`ccClq2");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`ccClq2", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("`ccClq2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("R`4K{}SkMJ");
      htmlTreeBuilder0.parse(stringReader0, "R`4K{}SkMJ", (ParseErrorList) null, parseSettings0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "R`4K{}SkMJ";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("R`4K{}SkMJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("fieldset");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "fieldset", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("fieldset");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("fieldset");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("PUBLIC");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.parser.Token$Doctype", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.generateImpliedEndTags("body");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("\":7 TApsb");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "\":7 TApsb", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("li");
      htmlTreeBuilder0.generateImpliedEndTags("T:9aF$mC'\"%*<K]");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("R`4K{}SkMJ");
      htmlTreeBuilder0.parse(stringReader0, "R`4K{}SkMJ", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("option");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "0R.", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("option");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "4)7(%NVfafq$^4UQ2^", parseErrorList0, parseSettings0);
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "7z2", parseErrorList0, parseSettings0);
      document0.dataset();
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "l@", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("option");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "option", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("option");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "option", parseErrorList0, parseSettings0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[F1CF04-g/~d[y");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "[F1CF04-g/~d[y", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[F1CF04-g/~d[y");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "[F1CF04-g/~d[y", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "body", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt2&Q~pA>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "E~vt2&Q~pA>[zl8c", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "body", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement(">K`8g[#XzZ+vYRUA)");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      StringReader stringReader0 = new StringReader("\":7 TA~[b");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parse(stringReader0, "\":7 TA~[b", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("\":7 TA~[b");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E~vt&Q~A>[zl8c");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "kbd", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("style", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("style");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }
}
