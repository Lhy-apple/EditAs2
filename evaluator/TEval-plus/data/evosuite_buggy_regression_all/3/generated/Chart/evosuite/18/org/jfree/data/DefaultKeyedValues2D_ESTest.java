/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:02:17 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.DefaultKeyedValues2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultKeyedValues2D_ESTest extends DefaultKeyedValues2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((-2348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      defaultKeyedValues2D0.clear();
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getRowKey(2680);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2680, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      defaultKeyedValues2D0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(4256.7F);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Short short0 = new Short((short) (-1));
      defaultKeyedValues2D0.addValue(float0, short0, short0);
      Object object0 = defaultKeyedValues2D0.clone();
      boolean boolean0 = defaultKeyedValues2D0.equals(object0);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Byte byte0 = new Byte((byte)29);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      defaultKeyedValues2D0.addValue(byte0, byte0, byte0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(0.0F);
      int int0 = defaultKeyedValues2D0.getColumnIndex(float0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(4256.7F);
      Short short0 = new Short((short) (-1));
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) short0, (Comparable) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: 4256.7
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) byte0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(4256.7F);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Short short0 = new Short((short) (-1));
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) short0, (Comparable) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised rowKey: -1
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(4256.7F);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Short short0 = new Short((short) (-1));
      defaultKeyedValues2D0.addValue(float0, short0, short0);
      Number number0 = defaultKeyedValues2D0.getValue((Comparable) short0, (Comparable) float0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(0.0F);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Number number0 = defaultKeyedValues2D0.getValue((Comparable) float0, (Comparable) float0);
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(0.0F);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Byte byte0 = new Byte((byte) (-15));
      defaultKeyedValues2D0.removeValue(float0, byte0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(0.0F);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      defaultKeyedValues2D0.removeValue("SortOrder.ASCENDING", "SortOrder.ASCENDING");
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Double double0 = new Double((-1105.13));
      defaultKeyedValues2D0.setValue(double0, double0, "");
      defaultKeyedValues2D0.removeValue("", "");
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(4256.7F);
      boolean boolean0 = defaultKeyedValues2D0.equals(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte)0);
      defaultKeyedValues2D0.addValue(byte0, byte0, byte0);
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D();
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Short short0 = new Short((short)3744);
      defaultKeyedValues2D0.addValue(short0, short0, short0);
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      defaultKeyedValues2D1.removeColumn((Comparable) short0);
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(4256.7F);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Short short0 = new Short((short) (-1));
      defaultKeyedValues2D0.addValue(float0, short0, short0);
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      defaultKeyedValues2D1.addValue(short0, short0, float0);
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertFalse(boolean0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(4256.7F);
      Short short0 = new Short((short) (-1));
      defaultKeyedValues2D0.addValue(float0, short0, short0);
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      defaultKeyedValues2D1.setValue(short0, short0, short0);
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(boolean0);
  }
}
