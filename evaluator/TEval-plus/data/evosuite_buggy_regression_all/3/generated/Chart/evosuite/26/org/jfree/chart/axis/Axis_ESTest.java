/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 17:04:27 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.time.Day;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("y UD\"]ImTI)TucVG:p");
      periodAxis0.setAxisLineVisible(false);
      PeriodAxis periodAxis1 = new PeriodAxis("y UD\"]ImTI)TucVG:p");
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(periodAxis0.isAxisLineVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertNotSame(dateAxis1, dateAxis0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!ansSeif");
      periodAxis0.setLabelAngle(992.403);
      PeriodAxis periodAxis1 = new PeriodAxis("!ansSeif");
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertEquals(992.403, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-709.1234), "Null 'state' argument.");
      cyclicNumberAxis0.getLabelURL();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("&c'_l9d-r~8^f0e");
      categoryAxis3D0.getLabelToolTip();
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("y UD\"dImTI)T!cVG:p");
      periodAxis0.setTickMarkInsideLength(Float.NEGATIVE_INFINITY);
      PeriodAxis periodAxis1 = new PeriodAxis("y UD\"dImTI)T!cVG:p");
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertEquals(Float.NEGATIVE_INFINITY, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("0P(gFVrVI0Yr&i1+Bek");
      assertTrue(categoryAxis3D0.isVisible());
      
      categoryAxis3D0.setVisible(true);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setLabel((String) null);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("o`lRlo");
      subCategoryAxis0.setLabel("SansSerif");
      assertEquals("SansSerif", subCategoryAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setLabel("");
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      subCategoryAxis0.setLabel("5)~x+_<*jp,'p");
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("qP=kfVDf1.i+kytM");
      periodAxis0.setLabelFont(periodAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("*+,(hkl/YsE05P>1");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      RingPlot ringPlot0 = new RingPlot();
      periodAxis0.setLabelFont(ringPlot0.DEFAULT_LABEL_FONT);
      PeriodAxis periodAxis1 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertTrue(periodAxis1.isAxisLineVisible());
      assertTrue(periodAxis1.isVisible());
      assertTrue(periodAxis1.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis1.isTickMarksVisible());
      assertFalse(boolean0);
      assertFalse(periodAxis0.equals((Object)periodAxis1));
      assertEquals(0.0, periodAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("({Xf%/");
      // Undeclared exception!
      try { 
        periodAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("qP=kfVDf1.i+kytM");
      periodAxis0.setLabelInsets(periodAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Y!(}kopk%h]x.x");
      // Undeclared exception!
      try { 
        periodAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("/rg.j@ree.cha/t.utilPaintList");
      // Undeclared exception!
      try { 
        periodAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("~9n}L0U?A");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(true);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{YtE+?j$X7de");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("@OmuKGX&");
      logarithmicAxis0.setTickLabelFont(categoryAxis0.DEFAULT_TICK_LABEL_FONT);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("~9n}L0U?A");
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      subCategoryAxis0.setTickLabelPaint(color0);
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("ZOOM_DOMAIN_BOTH", stringArray0);
      // Undeclared exception!
      try { 
        symbolAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("*+,(hkl/YsE05P>1");
      // Undeclared exception!
      try { 
        numberAxis3D0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(", but the TimeSeries is expecting an instance of ");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(", but the TimeSeries is expecting an instance of ");
      numberAxis3D0.setTickLabelInsets(subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("o`lRlo");
      subCategoryAxis0.setTickMarksVisible(false);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.", day0, day0, day0.DEFAULT_TIME_ZONE);
      periodAxis0.setTickMarkStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      // Undeclared exception!
      try { 
        periodAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("/rg.j@ree.cha/t.utilPaintList");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      periodAxis0.setTickMarkStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      PeriodAxis periodAxis1 = new PeriodAxis("/rg.j@ree.cha/t.utilPaintList");
      periodAxis1.equals(periodAxis0);
      assertTrue(periodAxis1.isTickLabelsVisible());
      assertTrue(periodAxis1.isVisible());
      assertEquals(2.0F, periodAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) periodAxis0);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("y UD\"dImTI)T!cVG:p");
      periodAxis0.removeChangeListener((AxisChangeListener) null);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      MeterPlot meterPlot0 = new MeterPlot();
      boolean boolean0 = periodAxis0.hasListener(meterPlot0);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.util.PaintList");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("$?3_P0");
      subCategoryAxis0.addChangeListener(combinedDomainXYPlot0);
      boolean boolean0 = subCategoryAxis0.hasListener(combinedDomainXYPlot0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(boolean0);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)subCategoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      AxisSpace axisSpace0 = periodAxis0.reserveSpace(graphics2D0, fastScatterPlot0, (Rectangle2D) null, rectangleEdge0, (AxisSpace) null);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(55.96875, axisSpace0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("d");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.drawLabel("Null 'state' argument.", (Graphics2D) null, rectangle2D0, rectangle2D0, (RectangleEdge) null, (AxisState) null, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(10);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 500, 10, 15);
      Rectangle rectangle0 = new Rectangle();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        symbolAxis0.draw(graphics2D0, 0.0F, rectangle0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(15, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jfree.chart.axis.Axis";
      stringArray0[1] = "org.jfree.chart.axis.Axis";
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.axis.Axis", stringArray0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 500, 10, 15);
      Rectangle rectangle0 = new Rectangle();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        symbolAxis0.draw(graphics2D0, 2.0, rectangle0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(15, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(10);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jfree.chart.axis.Axis";
      stringArray0[1] = "org.jfree.chart.axis.Axis";
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.axis.Axis", stringArray0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 500, 10, 15);
      Rectangle rectangle0 = new Rectangle();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        symbolAxis0.draw(graphics2D0, 0.0F, rectangle0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(62, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(62);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_I&BY>~D\"rD/N8|YS";
      stringArray0[1] = "_I&BY>~D\"rD/N8|YS";
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.axis.Axis", stringArray0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 500, 1141.2409733, 15);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        symbolAxis0.draw(graphics2D0, 0.05, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("*+,(hkl/YsE05P>1");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 2334.23636359, (Rectangle2D) null, (Rectangle2D) null, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.Axis");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(500);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 3.0, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 2.0F, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 1.0F, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(500);
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 10, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      PeriodAxis periodAxis1 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertEquals(0.0, periodAxis1.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertTrue(periodAxis1.isTickMarksVisible());
      assertEquals(0.0F, periodAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis1.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis1.isAxisLineVisible());
      assertTrue(periodAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      PeriodAxis periodAxis1 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      periodAxis1.setVisible(false);
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(periodAxis1.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("orgjfree.car'.axis.Axis");
      PeriodAxis periodAxis1 = new PeriodAxis("org.jfree.data.statistics.DefaultStatisticalCategoryDataset");
      boolean boolean0 = periodAxis0.equals(periodAxis1);
      assertTrue(periodAxis1.isTickLabelsVisible());
      assertTrue(periodAxis1.isAxisLineVisible());
      assertEquals(2.0F, periodAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis1.isVisible());
      assertEquals(0.0, periodAxis1.getLabelAngle(), 0.01);
      assertTrue(periodAxis1.isTickMarksVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, periodAxis1.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.");
      PeriodAxis periodAxis1 = new PeriodAxis("Null 'state' argument.");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis1.setLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      boolean boolean0 = periodAxis0.equals(periodAxis1);
      assertFalse(periodAxis1.equals((Object)periodAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'statea rgume.");
      PeriodAxis periodAxis1 = new PeriodAxis("Null 'statea rgume.");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis1.setLabelInsets(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      boolean boolean0 = periodAxis0.equals(periodAxis1);
      assertFalse(periodAxis1.equals((Object)periodAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      PeriodAxis periodAxis1 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis0.setLabelToolTip("?4Nz=$?V09UeG Yy*");
      boolean boolean0 = periodAxis0.equals(periodAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("ull 'st9e' argjm9e?t");
      PeriodAxis periodAxis1 = new PeriodAxis("ull 'st9e' argjm9e?t");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis1.setLabelURL("VvfP%hPNii");
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.", day0, day0, day0.DEFAULT_TIME_ZONE);
      RingPlot ringPlot0 = new RingPlot();
      PeriodAxis periodAxis1 = new PeriodAxis("Null 'state' argument.");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis1.setAxisLineStroke(ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(periodAxis1.equals((Object)periodAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_IN_RANGE");
      PeriodAxis periodAxis1 = new PeriodAxis("ZOOM_IN_RANGE");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis1.setAxisLinePaint(periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
      boolean boolean0 = periodAxis0.equals(periodAxis1);
      assertFalse(periodAxis1.equals((Object)periodAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("SansSerif");
      PeriodAxis periodAxis1 = new PeriodAxis("SansSerif");
      periodAxis0.setTickLabelsVisible(false);
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(periodAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      PeriodAxis periodAxis1 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis1.setTickLabelFont(periodAxis0.DEFAULT_AXIS_LABEL_FONT);
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("ull 'st9e' argjm9e?t");
      PeriodAxis periodAxis1 = new PeriodAxis("ull 'st9e' argjm9e?t");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis1.setTickLabelInsets(periodAxis0.DEFAULT_AXIS_LABEL_INSETS);
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("y UD\"]ImTI)TucVG:p");
      PeriodAxis periodAxis1 = new PeriodAxis("y UD\"]ImTI)TucVG:p");
      periodAxis1.setTickMarksVisible(false);
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(periodAxis1.isTickMarksVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      PeriodAxis periodAxis1 = new PeriodAxis("?4Nz=$?V09UeG Yy*");
      periodAxis1.setTickMarkOutsideLength(500);
      boolean boolean0 = periodAxis0.equals(periodAxis1);
      assertEquals(500.0F, periodAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("8oTqASS'cDc,E");
      PeriodAxis periodAxis1 = new PeriodAxis("8oTqASS'cDc,E");
      assertTrue(periodAxis1.equals((Object)periodAxis0));
      
      periodAxis0.setTickMarkPaint(periodAxis1.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertFalse(periodAxis1.equals((Object)periodAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!asSef");
      periodAxis0.setFixedDimension((-639.393371071));
      PeriodAxis periodAxis1 = new PeriodAxis("!asSef");
      boolean boolean0 = periodAxis1.equals(periodAxis0);
      assertEquals((-639.393371071), periodAxis0.getFixedDimension(), 0.01);
      assertFalse(boolean0);
  }
}
