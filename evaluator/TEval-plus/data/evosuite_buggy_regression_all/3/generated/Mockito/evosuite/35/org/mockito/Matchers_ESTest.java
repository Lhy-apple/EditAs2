/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:15:12 GMT 2023
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.IsSame;
import org.hamcrest.object.HasToString;
import org.junit.runner.RunWith;
import org.mockito.Matchers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matchers_ESTest extends Matchers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HasProperty<Float> hasProperty0 = new HasProperty<Float>("org.mockito.Matchers");
      AnyOf<Float> anyOf0 = AnyOf.anyOf((Matcher<Float>) hasProperty0, (Matcher<? super Float>) hasProperty0, (Matcher<? super Float>) hasProperty0, (Matcher<? super Float>) hasProperty0);
      float float0 = Matchers.floatThat(anyOf0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Float float0 = new Float((-518.432095));
      Matcher<Object> matcher0 = IsNot.not((Object) float0);
      CombinableMatcher<Object> combinableMatcher0 = new CombinableMatcher<Object>(matcher0);
      Is<Object> is0 = new Is<Object>(combinableMatcher0);
      Matcher<Short> matcher1 = AllOf.allOf((Matcher<? super Short>) is0, (Matcher<? super Short>) matcher0, (Matcher<? super Short>) is0, (Matcher<? super Short>) combinableMatcher0, (Matcher<? super Short>) is0);
      Short short0 = Matchers.argThat(matcher1);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = Matchers.isNotNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Set<Double> set0 = Matchers.anySetOf(class0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char char0 = Matchers.eq(';');
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Matcher<Boolean> matcher0 = IsIn.isIn(booleanArray0);
      boolean boolean0 = Matchers.booleanThat(matcher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 1);
      AnyOf<Double> anyOf0 = AnyOf.anyOf((Matcher<? super Double>[]) matcherArray0);
      double double0 = Matchers.doubleThat(anyOf0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = Matchers.eq((int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      IsSame<Integer> isSame0 = new IsSame<Integer>(integer0);
      int int0 = Matchers.intThat(isSame0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = Matchers.byteThat((Matcher<Byte>) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = Matchers.longThat((Matcher<Long>) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = Matchers.isNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char char0 = Matchers.anyChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = Matchers.any(class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = Matchers.endsWith("pnI|k,p`/`4aOc%u");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Collection<Integer> collection0 = Matchers.anyCollectionOf(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = Matchers.contains("el6h3!6n\"a`2;h?GL8J");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Collection collection0 = Matchers.anyCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Map map0 = Matchers.anyMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Matchers.startsWith("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Matchers.anyString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short short0 = Matchers.eq((short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Long long0 = Matchers.refEq((Long) null, stringArray0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = Matchers.anyVararg();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matcher<Short> matcher0 = HasToString.hasToString("k3ZO7Un$.L7Zdn ");
      short short0 = Matchers.shortThat(matcher0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte byte0 = Matchers.eq((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = Matchers.anyInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = Matchers.isA(class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char char0 = Matchers.charThat((Matcher<Character>) null);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = Matchers.anyByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Matchers.same(boolean0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Matchers.matches((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float float0 = Matchers.eq(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = Matchers.eq(short0);
      assertNull(short1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = Matchers.anyLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = Matchers.eq(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      short short0 = Matchers.anyShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = Matchers.anyBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float float0 = Matchers.anyFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = Matchers.anyDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = Matchers.eq(815L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set set0 = Matchers.anySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      List<Byte> list0 = Matchers.anyListOf(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      List list0 = Matchers.anyList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = Matchers.any();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Matchers matchers0 = new Matchers();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = Matchers.eq(false);
      assertFalse(boolean0);
  }
}
