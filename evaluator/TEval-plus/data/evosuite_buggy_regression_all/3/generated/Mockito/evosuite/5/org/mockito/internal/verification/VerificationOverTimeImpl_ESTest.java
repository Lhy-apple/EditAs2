/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 18:14:41 GMT 2023
 */

package org.mockito.internal.verification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.verification.AtMost;
import org.mockito.internal.verification.NoMoreInteractions;
import org.mockito.internal.verification.VerificationOverTimeImpl;
import org.mockito.internal.verification.api.VerificationData;
import org.mockito.verification.Timeout;
import org.mockito.verification.VerificationMode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VerificationOverTimeImpl_ESTest extends VerificationOverTimeImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-3920L), (-3920L), (VerificationMode) null, true);
      long long0 = verificationOverTimeImpl0.getDuration();
      assertEquals((-3920L), long0);
      assertEquals((-3920L), verificationOverTimeImpl0.getPollingPeriod());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-3570L), (-3570L), (VerificationMode) null, false);
      verificationOverTimeImpl0.getDelegate();
      assertEquals((-3570L), verificationOverTimeImpl0.getDuration());
      assertEquals((-3570L), verificationOverTimeImpl0.getPollingPeriod());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-3044L), (-3044L), (VerificationMode) null, false);
      long long0 = verificationOverTimeImpl0.getPollingPeriod();
      assertEquals((-3044L), long0);
      assertEquals((-3044L), verificationOverTimeImpl0.getDuration());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-637L), (-637L), (VerificationMode) null, true);
      VerificationOverTimeImpl verificationOverTimeImpl1 = new VerificationOverTimeImpl(2089L, 2089L, verificationOverTimeImpl0, true);
      verificationOverTimeImpl1.verify((VerificationData) null);
      assertEquals(2089L, verificationOverTimeImpl1.getPollingPeriod());
      assertEquals(2089L, verificationOverTimeImpl1.getDuration());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-8L), (-8L), (VerificationMode) null, false);
      VerificationOverTimeImpl verificationOverTimeImpl1 = new VerificationOverTimeImpl((-8L), 0L, verificationOverTimeImpl0, false);
      // Undeclared exception!
      verificationOverTimeImpl1.verify((VerificationData) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-3570L), (-3570L), (VerificationMode) null, false);
      AtMost atMost0 = new AtMost(1662);
      boolean boolean0 = verificationOverTimeImpl0.canRecoverFromFailure(atMost0);
      assertEquals((-3570L), verificationOverTimeImpl0.getPollingPeriod());
      assertFalse(boolean0);
      assertEquals((-3570L), verificationOverTimeImpl0.getDuration());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-3901L), (-3901L), (VerificationMode) null, false);
      boolean boolean0 = verificationOverTimeImpl0.canRecoverFromFailure(verificationOverTimeImpl0);
      assertEquals((-3901L), verificationOverTimeImpl0.getDuration());
      assertTrue(boolean0);
      assertEquals((-3901L), verificationOverTimeImpl0.getPollingPeriod());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
      Timeout timeout0 = new Timeout(2336L, noMoreInteractions0);
      VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(2336L, 2336L, timeout0, false);
      boolean boolean0 = verificationOverTimeImpl0.canRecoverFromFailure(noMoreInteractions0);
      assertEquals(2336L, verificationOverTimeImpl0.getPollingPeriod());
      assertEquals(2336L, verificationOverTimeImpl0.getDuration());
      assertFalse(boolean0);
  }
}
