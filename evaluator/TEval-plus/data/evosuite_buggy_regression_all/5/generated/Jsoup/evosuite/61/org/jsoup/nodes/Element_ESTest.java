/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:16:20 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      Element element0 = document0.getElementById(":contains");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendText("textarea");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      document0.prependChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      Element element0 = document0.createElement("br");
      Element element1 = document0.prependChild(element0);
      document0.prepend(" ");
      element1.getElementsMatchingText(":contains");
      assertEquals(2, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.child((-2659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("br");
      element0.text("br");
      StringBuilder stringBuilder0 = new StringBuilder(38);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 38, document_OutputSettings1);
      assertEquals("</br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("textarea");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("6yM0IA#G6");
      Elements elements0 = document0.getElementsContainingOwnText("6yM0IA#G6");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("b");
      Element element1 = element0.addClass("b");
      assertEquals("b", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document(":has");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.html("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.attr("br", true);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("tz+ktu");
      Elements elements0 = document0.getElementsByAttributeValue("tz+ktu", "tz+ktu");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeValueStarting("Tag name must not be empty.", "Tag name must not be empty.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = new Document("meta");
      Elements elements0 = document0.getElementsMatchingOwnText("meta");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("br");
      // Undeclared exception!
      try { 
        element0.after("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("Pattern syntax rror: ");
      Elements elements0 = document0.getElementsByIndexLessThan((-1385));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Element element0 = new Element("bgsound");
      Element element1 = element0.prependElement("bgsound");
      String string0 = element0.outerHtml();
      assertEquals("<bgsound><bgsound></bgsound>", string0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("p{");
      Elements elements0 = document0.getElementsByAttributeStarting("p{");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("=,.s]&oSa");
      Elements elements0 = document0.getElementsByIndexEquals(1433);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("meta");
      // Undeclared exception!
      try { 
        element0.wrap("meta");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      Elements elements0 = element1.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document document1 = (Document)document0.val("textarea");
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("V7");
      Elements elements0 = document0.getElementsByAttributeValueMatching("V7", "V7");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("txtaea");
      boolean boolean0 = document0.is("txtaea");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document(":has");
      Elements elements0 = document0.getElementsByAttributeValueEnding(":has", "8x.0^?BNZL%FZ|");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("7ZLx@vWbre5]08(");
      Elements elements0 = document0.getElementsByClass("7ZLx@vWbre5]08(");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("ar)0//6C%w$^.7Mul6f");
      Elements elements0 = document0.getElementsContainingText("ar)0//6C%w$^.7Mul6f");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("B\"][i).(^AMy<Q~[");
      Elements elements0 = element0.getElementsByAttributeValueContaining("B\"][i).(^AMy<Q~[", "B\"][i).(^AMy<Q~[");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("bgsound");
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("VLE$Fx+` . ;oye61g");
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("Pattern syntax rror: ");
      Elements elements0 = document0.getElementsByAttributeValueNot("O6-#(aC$p >Yf54..PF", "Pattern syntax rror: ");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder(1851);
      stringBuilder0.append((Object) element0);
      assertEquals("<br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document(":has");
      Elements elements0 = document0.getElementsByAttribute(":has");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("InCell");
      // Undeclared exception!
      try { 
        document0.before("InCell");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Nlement");
      Element element0 = document0.removeClass("org.jsoup.nodes.Nlement");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      Elements elements0 = document0.getElementsByTag("ttetarea");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Element element0 = new Element("bgsound");
      Elements elements0 = element0.getElementsByIndexGreaterThan(2680);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      Element element0 = document0.createElement("hjtu-HDC7U.1");
      element0.setParentNode(document0);
      Element element1 = element0.prepend("hjtu-HDC7U.1");
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      document0.prependChild(document0);
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      Element element0 = document0.prepend("t;z+ktu");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document(":has");
      DataNode dataNode0 = new DataNode(":has", "bu4xyz !xY=Y]M2rmJ");
      Element element0 = document0.prependChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      Element element0 = document0.prependChild(document0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.siblingElements();
      Document document1 = (Document)document0.insertChildren(0, elements0);
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("br");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        element0.insertChildren((-2076), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element element0 = new Element("br");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        element0.insertChildren(49, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("tz+ktu");
      document0.toggleClass("tz+ktu");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      Element element0 = document0.createElement("textarea");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      element0.addChildren(nodeArray0);
      String string0 = document0.cssSelector();
      assertEquals("textarea > #root", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Element element0 = new Element("r");
      Element element1 = new Element("r");
      Node[] nodeArray0 = new Node[1];
      Element element2 = element1.appendElement("r");
      nodeArray0[0] = (Node) element0;
      element1.addChildren(nodeArray0);
      assertNotSame(element1, element2);
      
      String string0 = element0.cssSelector();
      assertEquals("r > r:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Element element0 = new Element("B\"][i).(^AMy<Q~[");
      Element element1 = new Element("B\"][i).(^AMy<Q~[");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element1;
      TextNode textNode0 = new TextNode("B\"][i).(^AMy<Q~[", "B\"][i).(^AMy<Q~[");
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element1;
      element0.addChildren(nodeArray0);
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Element element0 = formElement0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      document0.prependElement("hjtu-HDC7U.1");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("hjtu-HDC7U.1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("LE$Fo+` 3;oyem1");
      document0.prependChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element element0 = new Element("class");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("LE$Fo+` 3;oyem1");
      Element element0 = document0.createElement("]jk");
      Element element1 = document0.prependChild(element0);
      document0.prependChild(document0);
      Element element2 = element0.previousElementSibling();
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      Element element0 = document0.createElement("textarea");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      document0.addChildren(nodeArray0);
      Element element1 = element0.firstElementSibling();
      assertEquals("#root", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      Tag tag0 = Tag.valueOf("ruby");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "iframe", attributes0);
      nodeArray0[1] = (Node) formElement0;
      document0.addChildren(nodeArray0);
      Element element0 = formElement0.lastElementSibling();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = DataNode.createFromEncoded(".", "br");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsMatchingText("Insert position out of bounds.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document("3~R;t34nB!&");
      Element element0 = document0.createElement("figcaption");
      document0.prependChild(element0);
      document0.prepend("mmc#Eeu>Hm\"8$`");
      Elements elements0 = document0.getElementsMatchingText("9Qq/P}FZ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = new Document("br");
      document0.prependChild(document1);
      document0.prepend("br");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      document0.prependChild(document0);
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("?");
      DataNode dataNode0 = new DataNode("?", "n{E0~mr5");
      Element element0 = document0.prependChild(dataNode0);
      String string0 = element0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.prepend("textarea");
      element0.ownText();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      Element element0 = document0.createElement("br");
      document0.prependChild(element0);
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      Element element0 = document0.createElement("br");
      document0.prependChild(element0);
      document0.prepend(" ");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DataNode dataNode0 = new DataNode("tz+ktu", "tz+ktu");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      boolean boolean0 = Element.preserveWhitespace(nodeArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("hjtu-HDC7U.1");
      Element element0 = document0.createElement("textarea");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      element0.addChildren(nodeArray0);
      boolean boolean0 = Element.preserveWhitespace(nodeArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      DataNode dataNode0 = new DataNode(".", ">?Tt?B~'E!O*");
      Element element0 = document0.prependChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("/G/f/NRT_c");
      Element element0 = document0.createElement("/G/f/NRT_c");
      element0.append("/G/f/NRT_c");
      document0.prependChild(element0);
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document(":has");
      Element element0 = document0.createElement(":has");
      document0.prependChild(element0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.prepend("textarea");
      element1.data();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document(":has");
      DataNode dataNode0 = DataNode.createFromEncoded(":has", ":has");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals(":has", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("Pattern syntax rror: ");
      Comment comment0 = new Comment("<;u7&(b7iC.=-xwX", "<;u7&(b7iC.=-xwX");
      document0.prependChild(comment0);
      String string0 = document0.data();
      assertEquals("<;u7&(b7iC.=-xwX", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("bX");
      document0.toggleClass("#root");
      boolean boolean0 = document0.hasClass("Tag name must not be em&ty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("tz+ktu");
      document0.toggleClass("tz+ktu");
      boolean boolean0 = document0.hasClass("org.jsoup.parser.ParseSettings");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("Pattern syntax rror: ");
      document0.toggleClass("Pattern syntax rror: ");
      boolean boolean0 = document0.hasClass("Pattern syntax rror: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("fsq?~f(4dy&4`z");
      document0.toggleClass("fsq?~f(4dy&4`z");
      document0.toggleClass(" ");
      boolean boolean0 = document0.hasClass("fsq?~f(4dy&4`z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("fsQ?~F(4dy&4`z");
      document0.toggleClass("fsQ?~F(4dy&4`z");
      Element element0 = document0.toggleClass("fsQ?~F(4dy&4`z");
      document0.toggleClass("muted");
      boolean boolean0 = element0.hasClass("fsQ?~F(4dy&4`z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("fsQ?~F(4dy&4`z");
      Element element0 = document0.toggleClass("fsQ?~F(4dy&4`z");
      document0.toggleClass("fsQ?~F(4dy&4`z");
      element0.toggleClass("Kp[#8B)`ySBDz");
      boolean boolean0 = document0.hasClass("Kp[#8B)`ySBDz");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.toggleClass("tMy~Nc<k$");
      document0.toggleClass("org.jsoup.select.Evaluator$ContainsText");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$ContainsText");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("noscript");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.createElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("qju-HD7U.1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 62, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("textaGrea");
      String string0 = element0.outerHtml();
      assertEquals("<textaGrea></textaGrea>", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder(2575);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuilder0, 2575, document_OutputSettings0);
      assertEquals("<br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("6yM0IA#G6");
      // Undeclared exception!
      try { 
        document0.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("ttetarea");
      Element element0 = document0.createElement("br");
      Element element1 = document0.prependChild(element0);
      document0.prepend(" ");
      String string0 = element1.outerHtml();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder(1851);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 1851, document_OutputSettings1);
      assertEquals("<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 9, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("textaGrea");
      Element element1 = element0.prepend("textaGrea");
      String string0 = element1.outerHtml();
      assertEquals(1, element0.childNodeSize());
      assertEquals("<textaGrea>\n textaGrea\n</textaGrea>", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.text("br");
      element1.append(".[/hb}@<LS&v;A{6&e");
      StringBuilder stringBuilder0 = new StringBuilder(38);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 38, document_OutputSettings1);
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("1QNpx");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Element element0 = new Element("#root");
      MockPrintStream mockPrintStream0 = new MockPrintStream("}&value");
      MockPrintStream mockPrintStream1 = element0.html(mockPrintStream0);
      assertSame(mockPrintStream0, mockPrintStream1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("t;z+ktu");
      document0.prependChild(document0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      document0.html(pipedWriter0);
  }
}
