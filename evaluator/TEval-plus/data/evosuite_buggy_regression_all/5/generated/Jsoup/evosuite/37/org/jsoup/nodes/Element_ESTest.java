/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:15:08 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      Element element1 = document0.createElement("textarea");
      Element element2 = element0.appendChild(element1);
      String string0 = element2.toString();
      assertEquals(1, document0.childNodeSize());
      assertEquals("<textarea><textarea></textarea></textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Elements elements0 = document0.getElementsMatchingText("psMOr*M~%4");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("ed!k.4 ga/_cfw");
      // Undeclared exception!
      try { 
        document0.child(202);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 202, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("A{ P/7;dpj('V`6zo8");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("rYpSC<z~*^x");
      Elements elements0 = document0.getElementsContainingOwnText("rYpSC<z~*^x");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("edok.4 g9/_Gncw");
      Document document1 = (Document)document0.addClass("edok.4 g9/_Gncw");
      assertEquals("edok.4 g9/_Gncw", document1.location());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("fieldse");
      // Undeclared exception!
      try { 
        document0.html("fieldse");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("#root");
      Elements elements0 = document0.getElementsByAttributeValue("#root", "#root");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Elements elements0 = document0.getElementsByAttributeValueStarting("Insert position out of bounds.", "Insert position out of bounds.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("FUhT,B&sy+B(72xVj;T");
      // Undeclared exception!
      try { 
        document0.select("FUhT,B&sy+B(72xVj;T");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'B&sy': unexpected token at '&sy'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("?iwqb:=ki");
      Elements elements0 = document0.getElementsMatchingOwnText("?iwqb:=ki");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("J2}ZAPuJO[ok+1");
      // Undeclared exception!
      try { 
        document0.after("J2}ZAPuJO[ok+1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Elements elements0 = document0.getElementsByIndexLessThan((-2028178998));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("edok.4 g9/_cfw");
      Elements elements0 = document0.getElementsByAttributeStarting("edok.4 g9/_cfw");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("#root");
      Elements elements0 = document0.getElementsByIndexEquals(31);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("A{ P/7;dpj(PV`6zo8");
      // Undeclared exception!
      try { 
        document0.wrap("A{ P/7;dpj(PV`6zo8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("action");
      Document document1 = (Document)document0.val("action");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("textarea");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.nodes.element$1", "org.jsoup.nodes.element$1");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("sMOrM~%");
      Elements elements0 = document0.getElementsByAttributeValueEnding("sMOrM~%", "sMOrM~%");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("noembed");
      Elements elements0 = document0.getElementsByClass("noembed");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("4+86}<Z");
      Elements elements0 = document0.getElementsContainingText("4+86}<Z");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("fieldset");
      Elements elements0 = document0.getElementsByAttributeValueContaining("fieldset", "fieldset");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("ed!k.4 ga/_cfw");
      Elements elements0 = document0.getElementsByAttributeValueNot("ed!k.4 ga/_cfw", "ed!k.4 ga/_cfw");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("AfterAttributeValue_quoted");
      Elements elements0 = document0.getElementsByAttribute("AfterAttributeValue_quoted");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document(".R~$$GP,n(eeNzZ@");
      // Undeclared exception!
      try { 
        document0.before(".R~$$GP,n(eeNzZ@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("edok.4 g9/_cfw");
      Document document1 = (Document)document0.removeClass("edok.4 g9/_cfw");
      assertEquals("edok.4 g9/_cfw", document1.location());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("limitedQuirks");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Elements elements0 = document0.getElementsByTag("Insert position out of bounds.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-597));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.getElementById("br");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("e!k.4 ga/cfw");
      Element element0 = document0.appendElement("e!k.4 ga/cfw");
      element0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.prepend("\r)OD-oB|6F)BJGpJ{m");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("0psMOr*M~~4");
      Element element0 = document0.appendElement("0psMOr*M~~4");
      DataNode dataNode0 = DataNode.createFromEncoded("<0psmor*m~~4></0psmor*m~~4>", "tag name must not be empty.");
      element0.before((Node) dataNode0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("ed!k.4 ga/_cfw");
      DocumentType documentType0 = new DocumentType("ed!k.4 ga/_cfw", "ed!k.4 ga/_cfw", "ed!k.4 ga/_cfw", "ed!k.4 ga/_cfw");
      document0.prependChild(documentType0);
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("BeforeDoctypeName");
      Element element0 = document0.appendText("BeforeDoctypeName");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("A{ P/7;dpj('V`6zo8");
      DataNode dataNode0 = new DataNode("A{ P/7;dpj('V`6zo8", "A{ P/7;dpj('V`6zo8");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("sMOrM~%");
      document0.appendElement("sMOrM~%");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("lZA4p{z )~=cbbn");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(10618, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("br");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-540), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("T'%=J#*|lb");
      List<TextNode> list0 = document0.textNodes();
      Element element0 = document0.insertChildren((-1), list0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      Element element1 = element0.after((Node) document0);
      Elements elements0 = element1.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document(">':`](IN5$EwS8");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("e7}{");
      Element element0 = document0.appendElement("e7}{");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      element0.after((Node) document0);
      Element element1 = element0.nextElementSibling();
      assertSame(element1, document0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("t<");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) element0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.previousElementSibling();
      assertSame(element1, document0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) element0;
      element0.addChildren(nodeArray0);
      Document document1 = (Document)element0.firstElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("og.jsoup.selctcombiningevaluator$or");
      Element element0 = document0.appendElement("og.jsoup.selctcombiningevaluator$or");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      element0.after((Node) document0);
      Document document1 = (Document)element0.lastElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("t<");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.appendText("textarea");
      Comment comment0 = new Comment("textarea", "textarea");
      element1.replaceWith(comment0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("#root");
      Element element0 = document0.appendElement("br");
      assertEquals("br", element0.nodeName());
      
      document0.prependText("br");
      String string0 = document0.text();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      document0.appendElement("psMOr*M~%4");
      document0.prependText("psMOr*M~%4");
      String string0 = document0.text();
      assertEquals("psMOr*M~%4", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("ed!k.4 ga/_cfw");
      Element element0 = document0.appendElement("td");
      assertEquals("td", element0.nodeName());
      
      document0.prependText("     ");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("og.jsoup.selctcombiningevaluator$or");
      document0.appendElement("og.jsoup.selctcombiningevaluator$or");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("T'%=J#*|lb");
      document0.prependText("T'%=J#*|lb");
      String string0 = document0.ownText();
      assertEquals("T'%=J#*|lb", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("textarea");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("textarea", ",vB4MQKxZC>", true);
      document0.prependChild(xmlDeclaration0);
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      element0.appendText("textarea");
      String string0 = element0.ownText();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      TextNode textNode0 = TextNode.createFromEncoded("ATR;#'HQ 13:~", "ATR;#'HQ 13:~");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      document0.appendChild(element0);
      document0.prependElement("br");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.parser.Token$EOF", "org.jsoup.parser.Token$EOF");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("u]~");
      assertEquals("u]~", element0.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      document0.appendText((String) null);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      document0.prepend("psMOr*M~%4");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      DataNode dataNode0 = DataNode.createFromEncoded("psMOr*M~%4", "psMOr*M~%4");
      nodeArray0[3] = (Node) dataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      element0.appendText("psMOr*M~%4");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("0psMOr*M~~4");
      Element element0 = document0.appendElement("0psMOr*M~~4");
      DataNode dataNode0 = DataNode.createFromEncoded("<0psmor*m~~4></0psmor*m~~4>", "tag name must not be empty.");
      element0.before((Node) dataNode0);
      String string0 = document0.data();
      assertEquals("<0psmor*m~~4></0psmor*m~~4>", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("t<");
      Element element0 = document0.prependText("t<");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.toggleClass("textarea");
      boolean boolean0 = document0.hasClass("textarea");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.toggleClass("");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      StringBuilder stringBuilder0 = new StringBuilder("psMOr*M~%4");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-1845506848), document_OutputSettings0);
      assertEquals("psMOr*M~%4<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringBuilder0, 8, document_OutputSettings0);
      assertEquals("textarea<textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.appendChild(document0);
      // Undeclared exception!
      element1.toString();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      Element element1 = element0.appendChild(document0);
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element1.outerHtmlHead(stringBuilder0, 8, document_OutputSettings1);
      assertEquals("textarea\n        <textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      String string0 = element0.toString();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.jsoup.nodes.element$1");
      document0.outerHtmlTail(stringBuilder0, (-4184), document_OutputSettings1);
      assertEquals("org.jsoup.nodes.element$1</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("psMOr*M~%4");
      Element element0 = document0.appendElement("psMOr*M~%4");
      element0.appendText("psMOr*M~%4");
      String string0 = element0.toString();
      assertEquals("<psmor*m~%4>\n psMOr*M~%4\n</psmor*m~%4>", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("?iwqb:=ki");
      Element element0 = document0.createElement("abbr");
      element0.appendText("abbr");
      StringBuilder stringBuilder0 = new StringBuilder("abbr");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 10996, document_OutputSettings1);
      assertEquals("abbr</abbr>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("iwqb:=ki");
      Element element0 = document0.createElement("abbr");
      Element element1 = element0.appendText("abbr");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element1.prependElement("iwqb:=ki");
      element1.outerHtmlTail(stringBuilder0, 97, document_OutputSettings0);
      assertEquals("\n                                                                                                 </abbr>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("br");
      document0.hashCode();
  }
}
