/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:17:14 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.appendText("");
      document0.ownText();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("<s!!dh.mo#ZU0:_");
      Comment comment0 = new Comment("<s!!dh.mo#ZU0:_", "<s!!dh.mo#ZU0:_");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("span");
      // Undeclared exception!
      try { 
        document0.child(981);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 981, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("gw-iQQ,l\"|}To,6Cyy");
      document0.prependText("gw-iQQ,l\"|}To,6Cyy");
      document0.getElementsByIndexGreaterThan((-752));
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.tagName("#root");
      assertEquals("#root", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("aroot");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("aroot", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("huY#e-[-j4lmJn20`");
      Elements elements0 = document0.getElementsContainingOwnText("huY#e-[-j4lmJn20`");
      assertEquals("huY#e-[-j4lmJn20`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Element element0 = new Element("t*m");
      element0.addClass("t*m");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("w");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document(";ro~&%ot");
      document0.html(";ro~&%ot");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("l(ss?V+H");
      Element element0 = document0.attr("l(ss?V+H", true);
      assertEquals("l(ss?V+H", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.getElementsByAttributeValue("#root", "#root");
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.getElementsByAttributeValueStarting("#root", "#root");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("3SIbe$`NgT=0g)+]}G,");
      document0.prepend("3SIbe$`NgT=0g)+]}G,");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("<s!!dh.mo#ZU0:_");
      Elements elements0 = document0.getElementsMatchingOwnText("<s!!dh.mo#ZU0:_");
      assertEquals("<s!!dh.mo#ZU0:_", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Entities$EscapeMode");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.nodes.Entities$EscapeMode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("wwoot");
      document0.getElementsByIndexLessThan(2241);
      assertEquals("wwoot", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("P5[i");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.getElementsByAttributeStarting("#root");
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("X2#~G!m+B");
      Elements elements0 = document0.getElementsByIndexEquals((-1503));
      assertTrue(elements0.isEmpty());
      assertEquals("X2#~G!m+B", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueMatching("small", "");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("[.9");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$1", "aK:VGNJ^F");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("#root");
      Elements elements0 = document0.getElementsByClass("#root");
      assertEquals("#root", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("mOmb|,sH<EjT@==");
      Elements elements0 = document0.getElementsContainingText("mOmb|,sH<EjT@==");
      assertEquals("mOmb|,sH<EjT@==", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^;_");
      document0.getElementsByAttributeValueContaining("-@x=Z^;_", "-@x=Z^;_");
      assertEquals("-@x=Z^;_", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("c-s\"~w;&b)c2]");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("3SIbe$`NgT=0g)+]}G,");
      document0.setBaseUri("3SIbe$`NgT=0g)+]}G,");
      assertEquals(1, document0.childNodeSize());
      assertEquals("3SIbe$`NgT=0g)+]}G,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("KI!Y");
      document0.appendTo(document0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("#|0?t");
      document0.getElementsByAttributeValueNot("#|0?t", "br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#|0?t", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("gw-iQQ,l\"|}To,6Cyy");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("gw-iQQ,l\"|}To,6Cyy", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Entities$EscapeMode");
      document0.getElementsByAttribute("org.jsoup.nodes.Entities$EscapeMode");
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("#root");
      // Undeclared exception!
      try { 
        document0.before("#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("wwoot");
      Element element0 = document0.removeClass("wwoot");
      assertEquals("wwoot", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("c;s\"~w;&b)c8]");
      document0.getAllElements();
      assertEquals("c;s\"~w;&b)c8]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("X2#~G!m+B");
      // Undeclared exception!
      try { 
        document0.is("X2#~G!m+B");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.selectFirst("#root");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1605);
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("rJ;p]5[gl");
      Element element0 = document0.head();
      Elements elements0 = element0.parents();
      assertEquals("rJ;p]5[gl", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("Ci%{K?`wO>/e]");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ci%{K?`wO>/e]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("acronym");
      Element element0 = document0.append("acronym");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("KI!Y");
      DataNode dataNode0 = new DataNode("KI!Y", "-");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("c;s\"~w;&b)c8]");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(28, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("c;s\"~w;&b)c8]");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1722310144), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("C0");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("C0", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("2rcSo&");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(3954, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("#rot");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-862), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell(">O");
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("#|0?t");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      
      String string0 = element1.cssSelector();
      assertEquals("#|0?t", element1.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("c-s\"~w;&b)c2]");
      Element element0 = document0.body();
      element0.wrap("c-s\"~w;&b)c2]");
      String string0 = element0.cssSelector();
      assertEquals("c-s\"~w;&b)c2]", element0.baseUri());
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("Tag name must not be empty.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.siblingElements();
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("                   ");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("                   ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertEquals("#root", element0.baseUri());
      assertNull(element1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("#root", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("2k\",");
      document0.previousElementSibling();
      assertEquals("2k\",", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.appendChild(document0);
      document0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">O");
      Element element0 = new Element(tag0, "canvas", (Attributes) null);
      Document document0 = new Document(">O");
      document0.appendChild(element0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
      assertEquals("canvas", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("c-s\"~w;&b)c2]");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("head", element1.nodeName());
      assertEquals("c-s\"~w;&b)c2]", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("9\"m|d.=9%*S\":o]");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      element0.addChildren(nodeArray0);
      element0.lastElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("9\"m|d.=9%*S\":o]");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals("9\"m|d.=9%*S\":o]", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.reparentChild(document0);
      Elements elements0 = document0.getElementsByIndexGreaterThan(841);
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("2_Q");
      Element element0 = document0.getElementById("2_Q");
      assertNull(element0);
      assertEquals("2_Q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = DataNode.createFromEncoded("#root", "#root");
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      document0.getElementsMatchingText("#root");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("wwoot");
      document0.title("wwoot");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsMatchingText("wwoot");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Comment comment0 = new Comment((String) null);
      document0.appendChild(comment0);
      document0.ownText();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DataNode dataNode0 = new DataNode("reversed");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("CUD]m(b1");
      Element element0 = document0.head();
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("CUD]m(b1", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("<s!!dh.mo#ZU0:_");
      document0.title("<s!!dh.mo#ZU0:_");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("<s!!dh.mo#ZU0:_", document0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("0i}{\"(XK9|V4$q[c ");
      document0.title("");
      boolean boolean0 = document0.hasText();
      assertEquals("0i}{\"(XK9|V4$q[c ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("T^3W[^Iv");
      DataNode dataNode0 = new DataNode("1XdW<VGI", "xmlns:");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals(1, dataNode0.siblingIndex());
      assertEquals("1XdW<VGI", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Comment comment0 = new Comment(".!\"Fx$");
      Document document0 = new Document("_&07{^+iq;]whL");
      document0.appendChild(comment0);
      String string0 = document0.data();
      assertEquals("_&07{^+iq;]whL", document0.baseUri());
      assertEquals(".!\"Fx$", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("2rcSo&");
      document0.title("2rcSo&");
      document0.data();
      assertEquals("2rcSo&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.toggleClass("#root");
      boolean boolean0 = document0.hasClass("Unexpected character '%s' in input state [%s]");
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.toggleClass("\fsB2s+UO-]2B[");
      document0.toggleClass("\fsB2s+UO-]2B[");
      boolean boolean0 = element0.hasClass("\fsB2s+UO-]2B[");
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("T^3W[^Iv");
      document0.toggleClass("0i}{\"(XK9|E4$q[c ");
      Element element0 = document0.toggleClass("0i}{\"(XK9|E4$q[c ");
      boolean boolean0 = element0.hasClass("+ezNx1`t0#cxp4eWJ");
      assertEquals("T^3W[^Iv", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Element element0 = new Element("blz2zP+{E_cLf");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Comment comment0 = new Comment("a* biVcBtkM(N>\"C", "a* biVcBtkM(N>\"C");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "\"z", attributes0);
      formElement0.val();
      assertEquals("\"z", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("-@x=Z^5_");
      Element element0 = document0.val("textarea");
      assertEquals("-@x=Z^5_", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "{t2h*", attributes0);
      formElement0.val("*");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("qm]HO\">`flSuyNM-25");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.prettyPrint(false);
      String string0 = document0.html();
      assertEquals("qm]HO\">`flSuyNM-25", document0.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("aroot");
      document0.title("aroot");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>aroot</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("aroot", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("CUD]m(b1");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      assertEquals("\n<html>\n <head></head>\n <body></body>\n</html>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("qm]HO\">`flSuyNM-25");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
      assertEquals("qm]HO\">`flSuyNM-25", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("qm]HO\">`flSuyNM-25");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\" />\n </head>\n <body></body>\n</html>", string0);
      assertEquals("qm]HO\">`flSuyNM-25", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("#|0?t");
      Element element0 = document0.toggleClass("#|0?t");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#|0?t", document1.baseUri());
      assertNotSame(document1, element0);
  }
}
