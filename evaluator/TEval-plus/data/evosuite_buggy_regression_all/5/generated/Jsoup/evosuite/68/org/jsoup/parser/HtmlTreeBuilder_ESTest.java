/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:17:16 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("zor", (Element) null, "zor", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("zor");
      htmlTreeBuilder0.maybeSetBaseUri(element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("8xJsw$:hU");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "8xJsw$:hU", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("8xJsw$:hU", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("8xJsw$:hU", formElement0, "[v", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("figure");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Element element0 = new Element(tag0, "tfoot");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("col", element0, "tfoot", (ParseErrorList) null, parseSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setPendingTableCharacters((List<String>) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<html>\n <head />\n <body />\n</html>", (Element) null, "!9>L,122v.O;}@xi.e", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("i");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1124647434));
      List<Node> list0 = htmlTreeBuilder0.parseFragment("/,rS'<!vYp", document0, "tfoot", parseErrorList0, parseSettings0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("video");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("table");
      Element element0 = new Element(tag0, "default");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", element0, "select", parseErrorList0, parseSettings0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment(".", (Element) null, ".", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("title");
      List<Node> list0 = htmlTreeBuilder0.parseFragment(".", element0, "s", parseErrorList0, parseSettings0);
      assertTrue(element0.isBlock());
      assertEquals(1, list0.size());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("noframes");
      Element element0 = new Element(tag0, "noframes");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noframes", element0, "noframes", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("script");
      Element element0 = new Element(tag0, "<F>@j'Op^A/@(/");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<F>@j'Op^A/@(/", element0, "textarea", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("noscript");
      Element element0 = new Element(tag0, "HExO>H ");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, "fieldset", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("plaintext");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("plaintext", element0, "plaintext", parseErrorList0, (ParseSettings) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Element element0 = new Element(tag0, "html");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("html", element0, "html", parseErrorList0, parseSettings0);
      assertEquals(2, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("html", attributes0);
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6Ij");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("<html>\n <head />\n <body />\n</html>", document0, "8JJ]18k", parseErrorList0, parseSettings0);
      CharacterReader characterReader0 = new CharacterReader("<html>\n <head />\n <body />\n</html>");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("&F", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      assertEquals(4, parseErrorList0.size());
      assertEquals("8JJ]18k", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator", (Element) null, "org.jsoup.select.Evaluator", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertNull(token_Character0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("table", (Element) null, "table", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment(".", (Element) null, ".", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.setFosterInserts(true);
      Element element0 = htmlTreeBuilder0.insertStartTag("title");
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("1ass");
      FormElement formElement0 = new FormElement(tag0, "2pJF>(f^", (Attributes) null);
      htmlTreeBuilder0.parseFragment("org.jsoup.safety.Cleaner$CleaningVisitor", formElement0, "org.jsoup.safety.Cleaner$CleaningVisitor", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("select");
      assertEquals("org.jsoup.safety.Cleaner$CleaningVisitor", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("zor", (Element) null, "zor", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("class");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "class", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("class");
      Element element0 = htmlTreeBuilder0.getFromStack("class");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", (Element) null, "noscript", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      htmlTreeBuilder0.parseFragment("zo", (Element) null, "zo", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("zo");
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(boolean0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      htmlTreeBuilder0.parseFragment("z;", (Element) null, "z;", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("z;");
      boolean boolean0 = htmlTreeBuilder0.processEndTag("z;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("8xJsw:U");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "8xJsw:U", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("8xJsw:U");
      htmlTreeBuilder0.popStackToClose("8xJsw:U");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("d=28SEjP?A", (Element) null, "d=28SEjP?A", parseErrorList0, parseSettings0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d=28SEjP?A";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("yx=vs*_tI*>iuNHrx__");
      htmlTreeBuilder0.initialiseParse(stringReader0, "d7 Y:H$/SpX-", (ParseErrorList) null, (ParseSettings) null);
      Tag tag0 = Tag.valueOf("yx=vs*_tI*>iuNHrx__");
      Comment comment0 = new Comment("d7 Y:H$/SpX-", "[]IY@~_3q!L}k");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "d7 Y:H$/SpX-", attributes0);
      htmlTreeBuilder0.insert(formElement0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "yx=vs*_tI*>iuNHrx__";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("ERy~", (Element) null, "W:zH6/b^&V8 l>Nyq!t<", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToBefore((String) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("Wn}A]ns7l_gX&w4D'", (Element) null, "org.jsoup.select.CombiningEvaluator$And", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("8xJsw:U");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "8xJsw:U", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("button");
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("dR=28SEjP?A", (Element) null, "dR=28SEjP?A", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parseFragment("form", (Element) null, "form", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("form");
      htmlTreeBuilder0.insertStartTag("form");
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("Wn}A]ns7l_gX&w4D'", (Element) null, "d=28SEjP?A", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("canvas", (Element) null, "canvas", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("canvas");
      htmlTreeBuilder0.insertOnStackAfter(element0, (Element) null);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("YI&O3f|", (Element) null, "YI&O3f|", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("zor", (Element) null, "zor", parseErrorList0, parseSettings0);
      Element element1 = htmlTreeBuilder0.insertStartTag("zor");
      htmlTreeBuilder0.replaceOnStack(element1, element0);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("8xJsw$:hU");
      htmlTreeBuilder0.initialiseParse(stringReader0, "8xJsw$:hU", (ParseErrorList) null, (ParseSettings) null);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      Element element0 = new Element(tag0, "(:vRH-6MFcX\u0001)E");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("[el}oX#", element0, "*]M%VY^n.rYS$,gJ", parseErrorList0, parseSettings0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("td");
      Element element0 = new Element(tag0, "td");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, (-1191));
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", element0, "G%T~6CXVRC^R", parseErrorList0, (ParseSettings) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tag tag0 = Tag.valueOf("th", (ParseSettings) null);
      Element element0 = new Element(tag0, "th");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, "th", parseErrorList0, (ParseSettings) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tr");
      Element element0 = new Element(tag0, "noscript");
      htmlTreeBuilder0.parseFragment("tr", element0, "noframes", parseErrorList0, parseSettings0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      Element element0 = new Element(tag0, "tbody");
      ParseErrorList parseErrorList0 = new ParseErrorList(67, 24);
      htmlTreeBuilder0.parseFragment(":#>-Vd#GxtAzJ5W'\"H/", element0, ":not(", parseErrorList0, parseSettings0);
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(2, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("thead");
      Element element0 = new Element(tag0, "{yA");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("thead", element0, "2e7!'", parseErrorList0, parseSettings0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("caption");
      Element element0 = new Element(tag0, "caption");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", element0, "caption", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("colgroup");
      Element element0 = new Element(tag0, "param");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("th", element0, "param", (ParseErrorList) null, (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parseFragment("2pJF>(f^", (Element) null, "2pJF>(f^", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      htmlTreeBuilder0.parseFragment("2pJF>(f^", element0, "2pJF>(f^", parseErrorList0, parseSettings0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("frameset");
      Element element0 = new Element(tag0, "frameset");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("0r8~CS+]8", element0, "caption", parseErrorList0, parseSettings0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("Could not parse nth-index '%s': unexpected format", (Element) null, "Could not parse nth-index '%s': unexpected format", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("tixle");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("8xJsw:U");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "8xJsw:U", (ParseErrorList) null, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("8xJsw:U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("mJJ", (Element) null, "mJJ", (ParseErrorList) null, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.inScope("HlX$5-.`s [\u0007LF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("8xJsw:U");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "8xJsw:U", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("button");
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("div");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("d=28SEjP?A", (Element) null, "d=28SEjP?A", parseErrorList0, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("d=28SEjP?A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("\"`875*sMvQh7C~EDo");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("J1-f7a<4p*'M,_N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6Ij");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("<html>\n <head />\n <body />\n</html>", document0, "8JJ]18k", parseErrorList0, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("6Ij");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("mJJ", (Element) null, "mJJ", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("rp");
      htmlTreeBuilder0.generateImpliedEndTags("mJJ");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6Ij");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("<html>\n <head />\n <body />\n</html>", document0, "8JJ]18k", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6Ij");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("<html>\n <head />\n <body />\n</html>", document0, "8JJ]18k", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6I");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parseFragment("6I", document0, "<html>\n <head />\n <body />\n</html>", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("canvas", (Element) null, "canvas", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("canvas");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("!9>L,122v.O;}@xi.e");
      document0.addClass("!9>L,122v.O;}@xi.e");
      htmlTreeBuilder0.parseFragment("!9>L,122v.O;}@xi.e", document0, "#document", (ParseErrorList) null, (ParseSettings) null);
      Document document1 = document0.clone();
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("canvas", (Element) null, "canvas", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("canvas");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("1;", parseSettings0);
      Element element0 = new Element(tag0, "frameset");
      htmlTreeBuilder0.parseFragment("frameset", element0, "}Z-`Tfq%Z@OWs*\"I", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6I");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parseFragment("6I", document0, "<html>\n <head />\n <body />\n</html>", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("ul");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("th", (Element) null, "th", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("th", (Element) null, "th", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.pop();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6Ij");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("<html>\n <head />\n <body />\n</html>", document0, "8JJ]18k", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals("6Ij", document0.location());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("6Ij");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("<html>\n <head />\n <body />\n</html>", document0, "8JJ]18k", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals("6Ij", document0.location());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("canvas", (Element) null, "canvas", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("canvas");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("canvas", (Element) null, "canvas", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("canvas");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("canvas");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("6I-B,>z8K*", (Element) null, "6I-B,>z8K*", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.currentElement();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("6I-B,>z8K*");
      assertNull(element1);
  }
}
