/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:12:19 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("{, *8k_[l1$7AN)>4~");
      document0.setBaseUri("{, *8k_[l1$7AN)>4~");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("x[sC\nj^T");
      Node node0 = document0.removeAttr("x[sC\nj^T");
      assertSame(document0, node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertEquals(0, (int)document0.siblingIndex());
      
      Element element0 = document0.prepend("org.jsoup.nodes.Node$OuterHtmlVisitor");
      String string0 = element0.toString();
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor\n<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("{, *8k_[l1$7AN)>4~");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertEquals(0, (int)document0.siblingIndex());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("FGtYV");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:h{!h}gh", "abs:h{!h}gh");
      // Undeclared exception!
      try { 
        dataNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("*CM4", "*CM4");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell(">r@-<wDg!4z\u0006^O");
      document0.attr(">r@-<wDg!4z\u0006^O", ">r@-<wDg!4z\u0006^O");
      String string0 = document0.absUrl(">r@-<wDg!4z\u0006^O");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("ast");
      String string0 = document0.attr("abs:e_(2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("x[sC\nj^T");
      Element element0 = document0.prependChild(document0);
      document0.setParentNode(element0);
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("x[sC\nj^T");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("`>gLtA>`");
      Element element0 = document0.prependChild(document0);
      document0.replaceWith(element0);
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("FGNkV");
      Document document1 = Document.createShell("FGNkV");
      Element element0 = document1.prependChild(document0);
      document0.replaceWith(element0);
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("^Pp");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("x[sC\nj^T");
      document0.prependChild(document0);
      Node node0 = document0.previousSibling();
      assertNull(node0);
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("Utilde");
      document0.appendChild(document0);
      document0.previousSibling();
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Elements elements0 = document0.getElementsByIndexLessThan(1127);
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = new TextNode("Xtp.", "Xtp.");
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell(">r@-<wDg!4z\u0006^O");
      TextNode textNode0 = new TextNode(">r@-<wDg!4z\u0006^O", ">r@-<wDg!4z\u0006^O");
      textNode0.parentNode = (Node) document0;
      textNode0.hashCode();
  }
}
