/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:15:35 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ot");
      tokenQueue0.chompTo("ot");
      assertEquals('\u0000', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      tokenQueue0.matchesCS("|tkm19z+(p\")j,@:s");
      assertEquals('P', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o cosaeb|^>`} {>wm|d");
      tokenQueue0.chompToIgnoreCase("{}Vk'5Hl");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      String string0 = tokenQueue0.toString();
      assertEquals("PmmP=EzP[q", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-(q\"9");
      tokenQueue0.addFirst("-(q\"9");
      tokenQueue0.chompBalanced('-', '-');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-(q\"9");
      tokenQueue0.chompBalanced('-', '-');
      // Undeclared exception!
      try { 
        tokenQueue0.consume("-(q\"9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-(q\"9");
      char char0 = tokenQueue0.peek();
      assertEquals('-', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("uR!`LwJE7^&O0b");
      assertTrue(tokenQueue0.matchesWord());
      
      tokenQueue0.remainder();
      assertTrue(tokenQueue0.isEmpty());
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("uR!`LwJE7^&O0b");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("jtB_");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Wk6GvJtu");
      tokenQueue0.consumeToIgnoreCase("+,YsxL.&#YjZlw8");
      char[] charArray0 = new char[0];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      tokenQueue0.consume("PmmP=EzP[q");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      Character character0 = Character.valueOf('<');
      tokenQueue0.addFirst(character0);
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      tokenQueue0.consumeElementSelector();
      Character character0 = Character.valueOf('<');
      tokenQueue0.addFirst(character0);
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("      ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("4eO#u+HjA{e/cy]U");
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.remainder();
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.consumeTo("PmmP");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("4eO#u+HjA{e/cy]U");
      tokenQueue0.chompToIgnoreCase("/");
      assertEquals("cy]U", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-eq\"1");
      tokenQueue0.consumeToIgnoreCase("Queue not long enough to consume sequence");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("{F5]c]68Qb<z");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{F5]c]68Qb<z";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals('{', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'QiUg@R");
      tokenQueue0.chompBalanced('d', 'd');
      assertEquals('Q', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-eq\"1");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('\"', 'y');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      tokenQueue0.chompBalanced('P', 'P');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-eq\"1");
      tokenQueue0.chompBalanced('', '-');
      assertEquals("eq\"1", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TokenQueue.unescape("\\");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = TokenQueue.unescape("]rdr[i{9)<c`,@:s");
      assertEquals("]rdr[i{9)<c`,@:s", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("r!`lwje7^&o");
      tokenQueue0.consumeWord();
      assertEquals("!`lwje7^&o", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consumeTagName();
      assertEquals(' ', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("eo#u+hjae/x");
      tokenQueue0.consumeCssIdentifier();
      assertEquals('#', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PmmP=EzP[q");
      tokenQueue0.consume("PmmP=EzP[q");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }
}
