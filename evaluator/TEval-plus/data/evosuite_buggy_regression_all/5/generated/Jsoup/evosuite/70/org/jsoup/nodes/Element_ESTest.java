/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:17:27 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("XVs)+>H%");
      document0.appendText("XVs)+>H%");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Element element0 = new Element("wbr");
      element0.prependElement("title");
      element0.outerHtml();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("InTableText");
      // Undeclared exception!
      try { 
        document0.child(115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("W*8?u\"ys3*yG_`_t");
      assertFalse(document0.hasParent());
      
      document0.title(" BKi8otQP2}l");
      String string0 = document0.html();
      assertEquals("W*8?u\"ys3*yG_`_t", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title> BKi8otQP2}l</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("w\"r");
      document0.prependText("w\"r");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell(";Sdef/");
      Element element0 = document0.tagName("nD'_d^=]$dqT4o");
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(";Sdef/", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("form");
      document0.dataset();
      assertEquals("form", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("1K@Ts)");
      document0.addClass("1K@Ts)");
      document0.cssSelector();
      assertFalse(document0.hasParent());
      assertEquals("1K@Ts)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.CombiningEvaluator$And");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("option");
      Element element0 = document0.attr("option", true);
      assertEquals("option", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.HtmlTreeBuilderState");
      assertFalse(document0.hasParent());
      
      document0.getElementsByAttributeValueStarting("org.jsoup.parser.HtmlTreeBuilderState", "org.jsoup.parser.HtmlTreeBuilderState");
      assertEquals("org.jsoup.parser.HtmlTreeBuilderState", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("|PF_Ds=6x;;F8tzU ");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("|PF_Ds=6x;;F8tzU ", element0.baseUri());
      assertEquals("html > head", string0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("i=i!");
      document0.prepend("i=i!");
      document0.getElementsContainingOwnText("i=i!");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.HtmlTreeBuilderState");
      Elements elements0 = document0.getElementsMatchingOwnText("org.jsoup.parser.HtmlTreeBuilderState");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilderState", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.after("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("n'L$leW");
      document0.getElementsByAttributeStarting("n'L$leW");
      assertEquals(1, document0.childNodeSize());
      assertEquals("n'L$leW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("option");
      // Undeclared exception!
      try { 
        document0.wrap("option");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("big");
      document0.getElementsByAttributeValueMatching("big", "big");
      assertEquals(1, document0.childNodeSize());
      assertEquals("big", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element element0 = new Element("wbr");
      boolean boolean0 = element0.is("wbr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("n'L$leW");
      document0.getElementsByAttributeValueEnding("n'L$leW", "n'L$leW");
      assertEquals("n'L$leW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("S");
      Elements elements0 = document0.getElementsByClass("S");
      assertEquals(1, document0.childNodeSize());
      assertEquals("S", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("l%");
      Elements elements0 = document0.getElementsContainingText("l%");
      assertEquals(1, document0.childNodeSize());
      assertEquals("l%", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("={{%`vg2!d");
      document0.getElementsByAttributeValueContaining("={{%`vg2!d", "={{%`vg2!d");
      assertEquals("={{%`vg2!d", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("#<Kp)t");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.doSetBaseUri("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", document1.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("Insert position out of bounds.");
      Element element1 = element0.shallowClone();
      assertEquals("Insert position out of bounds.", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("-t");
      document0.getElementsByAttributeValueNot("-t", "-t");
      assertEquals("-t", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("body");
      String string0 = document0.toString();
      assertEquals("body", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.node.BoleanAttribue");
      document0.getElementsByAttribute("org.jsoup.node.BoleanAttribue");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.node.BoleanAttribue", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("E3#CWpQyN?rE\"aw`&O\"");
      Element element0 = document0.removeClass("x0e ;U,6n8nXB`");
      assertEquals(1, element0.childNodeSize());
      assertEquals("E3#CWpQyN?rE\"aw`&O\"", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("W*8?u\"ys3*yG_`_t");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("W*8?u\"ys3*yG_`_t", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("i=i!");
      Elements elements0 = document0.getElementsMatchingText("i=i!");
      assertEquals("i=i!", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("1K@Tsw.G)");
      // Undeclared exception!
      try { 
        document0.selectFirst("1K@Tsw.G)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '1K@Tsw.G)': unexpected token at '@Tsw.G)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element element0 = new Element("s");
      Elements elements0 = element0.getElementsByIndexGreaterThan(0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("option");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before("option");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("|R");
      Element element0 = document0.head();
      element0.html("|R");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("D]}uMAtRQXDvS=v,a");
      document0.append("D]}uMAtRQXDvS=v,a");
      document0.getElementsByIndexLessThan((-1433506051));
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("X%/#p");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("X%/#p", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("X%/#p");
      Element element0 = document0.body();
      document0.text("X%/#p");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("X%/#p", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("TU),oty+?+XW");
      DataNode dataNode0 = new DataNode("TU),oty+?+XW", "TU),oty+?+XW");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals("TU),oty+?+XW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("S");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("S", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("-7)c");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(124, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell(">O%2o,Y9<{{ZIwgfD(");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2061584300), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("={{%`vg2!d");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-308), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("F<e}DpqP[BVd");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(17, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("id", "id");
      FormElement formElement0 = new FormElement(tag0, "id", attributes1);
      String string0 = formElement0.cssSelector();
      assertEquals("id", formElement0.baseUri());
      assertEquals("#id", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("-0h(F`ntNwI\u0005mv");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("-0h(F`ntNwI\u0005mv", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell(";Sdef/");
      document0.siblingElements();
      assertEquals(";Sdef/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("wbr");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertEquals("wbr", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Element element0 = new Element(".2pSKyK5ws155");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("E3#CWpQyN?rE\"aw`&O\"");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals("E3#CWpQyN?rE\"aw`&O\"", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("n'L$leW");
      document0.previousElementSibling();
      assertEquals("n'L$leW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("|PF_Ds=6x;;F8tzU ");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertEquals("|PF_Ds=6x;;F8tzU ", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("Y-_");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.empty();
      document0.appendTo(document0);
      element0.firstElementSibling();
      assertEquals("Y-_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals(" > ", element1.baseUri());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("mK_e");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fsc*M`oh^k/", parseSettings0);
      Comment comment0 = new Comment("textarea");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, ";~cai", attributes0);
      document0.setParentNode(formElement0);
      document0.lastElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("mK_e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("b'r");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals("b'r", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("<html>\n <head></head>\n <body></body>\n</html>");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      Elements elements0 = element0.getElementsByIndexEquals(8);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      Element element0 = document0.getElementById(")4MqkqFn}}Wg[4`CW;2");
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Comment comment0 = new Comment("java.lang.string@0000000014 xacz", "isindex");
      document0.prependChild(comment0);
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      document0.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("F");
      document0.appendElement("F");
      document0.title("LWw$4C-1sV");
      Pattern pattern0 = Pattern.compile("F");
      document0.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      document0.title(" ");
      Pattern pattern0 = Pattern.compile(" ");
      document0.getElementsMatchingText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("W*8?u\"ys3*yG_`_t");
      document0.title(" BKi8otQP2}l");
      Elements elements0 = document0.getElementsContainingOwnText("AfterDoctypePublicKeyword");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("W*8?u\"ys3*yG_`_t", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("W*8?u\"ys3*yG_`_t");
      Comment comment0 = new Comment("Could not parse attribute query '%s': unexpected token at '%s'", " BKi8otQP2}l");
      Element element0 = document0.appendChild(comment0);
      Elements elements0 = element0.getElementsContainingOwnText("AfterDoctypePublicKeyword");
      assertEquals(1, comment0.siblingIndex());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("html");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("E3#CWpQyN?rE\"aw`&O\"");
      Element element0 = document0.body();
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertEquals("E3#CWpQyN?rE\"aw`&O\"", element0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000031");
      Comment comment0 = new Comment("3nR,RHoBe)u;4rqQN");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.text("");
      boolean boolean0 = element0.hasText();
      assertEquals(1, element0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.title("br");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("TU),oty+?+XW");
      DataNode dataNode0 = new DataNode("TU),oty+?+XW", "TU),oty+?+XW");
      Element element0 = document0.prependChild(dataNode0);
      String string0 = element0.data();
      assertEquals("TU),oty+?+XW", string0);
      assertEquals("TU),oty+?+XW", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("d");
      Comment comment0 = new Comment("d", (String) null);
      document0.appendChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000010");
      Document document1 = document0.normalise();
      document1.title("java.lang.string@0000000010");
      document1.data();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("W*8?u\"ys3*yG_`_t");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      boolean boolean0 = element0.hasClass("java.lang.string@0000000036");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("I!");
      Element element0 = document0.toggleClass("I!");
      boolean boolean0 = element0.hasClass("org.jsoup.nodes.Entities$EscapeMode");
      assertEquals("I!", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("default");
      document0.toggleClass("default");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000023");
      assertEquals(1, document0.childNodeSize());
      assertEquals("default", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      Element element0 = formElement0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValueNot");
      Element element1 = element0.toggleClass("!W");
      element1.hasClass("id");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("W*8?u\"ys3*yG_`_t");
      Document document1 = document0.normalise();
      document1.title("java.lang.string@0000000036");
      document1.getElementsByAttributeValue("java.lang.string@0000000036", "abbr");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.normalise();
      Element element0 = document0.classNames(set0);
      boolean boolean0 = element0.hasClass("java.lang.string@0000000036");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000010");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      document0.toggleClass("");
      boolean boolean0 = element0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.toggleClass("body");
      Element element0 = document0.toggleClass("body");
      Element element1 = element0.toggleClass("body");
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("I!");
      document0.val();
      assertEquals(1, document0.childNodeSize());
      assertEquals("I!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("textarea", "i!");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, ":k6.`<F&X", attributes0);
      formElement0.val();
      assertEquals(":k6.`<F&X", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("textarea", "i!");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, ":k6.`<F&X", attributes0);
      formElement0.val("f`");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("optijon");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("optijon", document1.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Element element0 = new Element("wbr");
      String string0 = element0.outerHtml();
      assertEquals("<wbr>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Element element0 = new Element("wbr");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuffer0, 16, document_OutputSettings1);
      assertEquals(22, stringBuffer0.length());
      assertEquals("\n                <wbr>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      document0.title(" > ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals("<html>\n <head>\n  <title> &gt; </title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals(" > ", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("option");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("option");
      document0.html(mockPrintWriter0);
      assertEquals("option", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("[f+q5XuGlvp9,");
      Document document1 = (Document)document0.val("[f+q5XuGlvp9,");
      Document document2 = document1.clone();
      assertEquals("[f+q5XuGlvp9,", document2.baseUri());
      assertNotSame(document2, document0);
  }
}
