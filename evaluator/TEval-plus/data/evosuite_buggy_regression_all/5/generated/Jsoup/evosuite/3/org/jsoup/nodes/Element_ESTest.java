/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:10:57 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("owas2rn");
      Element element0 = document0.appendText("owas2rn");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("C!E;]]`6o{ 6-o`oXqL");
      Element element0 = document0.val("the start index was out of bounds:");
      assertEquals("C!E;]]`6o{ 6-o`oXqL", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("[O7?FjH");
      Element element0 = document0.prependText("[O7?FjH");
      Element element1 = element0.getElementById("[O7?FjH");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("K}o<7M");
      Elements elements0 = document0.getElementsByAttributeValueEnding("K}o<7M", "r'EaWt>");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("|prime");
      // Undeclared exception!
      try { 
        document0.child(3084);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3084, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("d**~cBzpq");
      Elements elements0 = document0.getElementsByAttributeValueContaining("d**~cBzpq", "CirOJoV|rPe`");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("!qm~$Y");
      Element element0 = document0.createElement("E^_=RLed1*wFVp./D");
      Element element1 = element0.text("!qm~$Y");
      assertEquals("!qm~$Y", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("K}o<7M");
      Elements elements0 = document0.getElementsByAttributeValueNot("K}o<7M", "K}o<7M");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      Elements elements0 = document0.getElementsByAttribute("x-u.xG5g@4p 3h");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("Nx30?zbE;6s~I;");
      // Undeclared exception!
      try { 
        document0.html("Nx30?zbE;6s~I;");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("K}o<7M");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "K}o<7M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated string is empty
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("[O7?FjH");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document(".=&X");
      Elements elements0 = document0.getElementsByAttributeValueStarting(".=&X", ".=&X");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">E o*w114WH");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ">E o*w114WH", attributes0);
      String string0 = element0.nodeName();
      assertEquals(">e o*w114wh", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("U~W<)");
      Element element0 = document0.removeClass("U~W<)");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("[O7?FjH");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("z({luq,z^vui0bl");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("|prime");
      Elements elements0 = document0.getElementsByIndexLessThan(85);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("8218");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("z({luq,z^vui0bl");
      Elements elements0 = document0.getElementsByIndexEquals((-1723841891));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("[O7?FjH");
      Element element0 = document0.getElementById("[O7?FjH");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("C!E;](`6o{ 6-o`oXqL");
      document0.prependChild(document0);
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("owas2rn");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("K}o<7M");
      Element element0 = document0.createElement("K}o<7M");
      Element element1 = document0.appendChild(element0);
      document0.appendChild(element1);
      Element element2 = document0.previousElementSibling();
      assertEquals("k}o<7m", element2.nodeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("C!E;]]`6o{ 6-o`oXqL");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("C!E;]]`6o{ 6-o`oXqL");
      Element element0 = document0.prependChild(document0);
      element0.prependElement("C!E;]]`6o{ 6-o`oXqL");
      Element element1 = element0.firstElementSibling();
      assertEquals("c!e;]]`6o{ 6-o`oxql", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("C!E;]]`6o{ 6-o`oXqL");
      Element element0 = document0.prependChild(document0);
      element0.getElementsByIndexGreaterThan((-1994091957));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("C!E;]]`6o{ 6-o`oXqL");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.appendElement("8659");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNotNull(element0);
      assertEquals("8659", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("C!E;]]`6o{ 6-o`oXqL");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("FBw&!g]#E)-?");
      document0.prependText("FBw&!g]#E)-?");
      String string0 = document0.text();
      assertEquals("FBw&!g]#E)-?", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("!*;0\tmnzn(i");
      Comment comment0 = new Comment("!*;0\tmnzn(i", "4~(y;*c7");
      document0.prependChild(comment0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      Element element0 = document0.createElement("oWasz2rN");
      element0.setParentNode(document0);
      boolean boolean0 = element0.preserveWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("8218");
      DataNode dataNode0 = DataNode.createFromEncoded("8218", "oWasMz2rN");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      document0.appendElement("oWasz2rN");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("oWasz2rN");
      Element element0 = document0.appendElement("oWasz2rN");
      element0.prependText("oWasz2rN");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("[O7?FjH");
      document0.prependText("[O7?FjH");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("K}o<7M");
      document0.addClass("K}o<7M");
      String string0 = document0.className();
      assertEquals(" K}o<7M", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("C!E;]]`6o{ 6-o`oXqL");
      Element element0 = document0.prependChild(document0);
      element0.getElementsByClass("C!E;]]`6o{ 6-o`oXqL");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("C!E;]]`:o{ 6to`oXqL");
      document0.toggleClass("C!E;]]`:o{ 6to`oXqL");
      Elements elements0 = document0.getElementsByClass("C!E;]]`:o{ 6to`oXqL");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n:r");
      Element element0 = new Element(tag0, "n:r");
      Element element1 = element0.toggleClass("");
      assertEquals("n:r", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("K}o<7M");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("[O7?FjH");
      Element element0 = document0.prependText("[O7?FjH");
      document0.appendElement("[O7?FjH");
      String string0 = ((Document) element0).outerHtml();
      assertEquals("[O7?FjH<[o7?fjh>\n</[o7?fjh>", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oWasz2rN");
      Element element0 = new Element(tag0, "oWasz2rN");
      Element element1 = new Element(tag0, "oWasz2rN");
      Element element2 = element1.appendChild(element0);
      String string0 = element2.toString();
      assertFalse(element2.equals((Object)element0));
      assertEquals("<owasz2rn>\n<owasz2rn>\n</owasz2rn>\n</owasz2rn>", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("U~W<)");
      boolean boolean0 = document0.equals("U~W<)");
      assertFalse(boolean0);
  }
}
