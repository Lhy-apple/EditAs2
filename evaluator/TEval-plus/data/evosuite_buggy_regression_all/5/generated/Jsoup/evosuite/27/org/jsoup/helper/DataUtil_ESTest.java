/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:13:32 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        DataUtil.load((InputStream) bufferedInputStream0, "http-equiv", "http-equiv");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        DataUtil.load((InputStream) pipedInputStream0, "Entities", "Entities", (Parser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtil.load((File) null, "(?i)\bcharset=s*\"?([^s;\"]*)", "(?i)\bcharset=s*\"?([^s;\"]*)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      // Undeclared exception!
      try { 
        DataUtil.load(file0, "UTF-8", "UTF-8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      Document document0 = DataUtil.parseByteData(byteBuffer0, "UTF-8", "UTF-8", parser0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?mz;TbDq$Y{4_", "?mz;TbDq$Y{4_");
      File file0 = MockFile.createTempFile("?mz;TbDq$Y{4_", "?mz;TbDq$Y{4_", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("?mz;TbDq$Y{4_/?mz;TbDq$Y{4_/?mz;TbDq$Y{4_0?mz;TbDq$Y{4_");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "?mz;TbDq$Y{4_");
      Document document0 = DataUtil.load(file0, (String) null, "?mz;TbDq$Y{4_");
      assertEquals("?mz;TbDq$Y{4_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType("UTF-8");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType((String) null);
      assertNull(string0);
  }
}
