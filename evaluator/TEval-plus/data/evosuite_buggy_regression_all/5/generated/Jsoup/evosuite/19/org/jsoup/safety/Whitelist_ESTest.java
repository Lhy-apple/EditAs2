/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:12:52 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addProtocols("erDot", "erDot", stringArray0);
      Whitelist whitelist2 = whitelist1.addProtocols("erDot", "erDot", stringArray0);
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      stringArray0[3] = ":all";
      stringArray0[4] = ":all";
      stringArray0[5] = ":all";
      Whitelist whitelist1 = whitelist0.addAttributes(":all", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded(":all", ":all");
      boolean boolean0 = whitelist1.isSafeAttribute("colspan", (Element) null, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      boolean boolean0 = whitelist0.isSafeTag("g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      Whitelist whitelist1 = whitelist0.addAttributes("g", stringArray0);
      whitelist0.addProtocols("g", "g", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded("g", "g");
      Document document0 = Document.createShell("g");
      boolean boolean0 = whitelist1.isSafeAttribute("g", document0, attribute0);
      assertEquals("", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "img";
      stringArray0[1] = "img";
      whitelist0.addAttributes("img", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded("img", "img");
      boolean boolean0 = whitelist0.isSafeAttribute("img", (Element) null, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("a", "a", "a");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        whitelist0.addProtocols("a", "a", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      boolean boolean0 = whitelist0.isSafeTag("img");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Attribute attribute0 = Attribute.createFromEncoded("ig", "ig");
      boolean boolean0 = whitelist0.isSafeAttribute("ig", (Element) null, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attribute attribute0 = Attribute.createFromEncoded("q", "q");
      boolean boolean0 = whitelist0.isSafeAttribute("q", (Element) null, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      Whitelist whitelist1 = whitelist0.addAttributes("g", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded("g", "g");
      Document document0 = Document.createShell("g");
      boolean boolean0 = whitelist1.isSafeAttribute("g", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      whitelist0.preserveRelativeLinks(true);
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      Whitelist whitelist1 = whitelist0.addAttributes("g", stringArray0);
      whitelist0.addProtocols("g", "g", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded("g", "g");
      Document document0 = Document.createShell("g");
      boolean boolean0 = whitelist1.isSafeAttribute("g", document0, attribute0);
      assertFalse(boolean0);
      assertEquals("g", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Attributes attributes0 = whitelist0.getEnforcedAttributes(":qr(OOH99='a\u0000Jc");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("CircleTimes", "CircleTimes", "CircleTimes");
      Attributes attributes0 = whitelist1.getEnforcedAttributes("CircleTimes");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("q&B1xz|;pGa1F6");
      boolean boolean0 = whitelist_TagName0.equals(whitelist_TagName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("q&B1xz|;pGa1F6");
      boolean boolean0 = whitelist_TagName0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("gdD3%}");
      boolean boolean0 = whitelist_Protocol0.equals("gdD3%}");
      assertFalse(boolean0);
  }
}
