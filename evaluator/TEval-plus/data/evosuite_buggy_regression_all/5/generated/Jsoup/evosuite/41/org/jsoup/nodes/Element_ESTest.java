/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:14:43 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("mnb");
      Element element0 = document0.appendText("mnb");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("S");
      document0.prependText("S");
      document0.appendElement("S");
      Elements elements0 = document0.getElementsMatchingText("S");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      // Undeclared exception!
      try { 
        document0.child((-372));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("\n * ");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      Element element0 = document0.addClass("s$4vv'SE");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000005");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByAttributeValue("textarea", "textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeValueStarting("Tag name must not be empty.", "Tag name must not be empty.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("S");
      Tag tag0 = Tag.valueOf("S");
      Element element0 = new Element(tag0, "S");
      element0.prependChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("s > #root", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("s$4Nvv'SE");
      Document document1 = (Document)document0.prepend("s$4Nvv'SE");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("//kQqb");
      Elements elements0 = document0.getElementsMatchingOwnText("//kQqb");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("AfterDoctypeSystemKeyword");
      // Undeclared exception!
      try { 
        document0.after("AfterDoctypeSystemKeyword");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("e%_/i/8ff/_@uf{");
      Elements elements0 = document0.getElementsByIndexLessThan(2511);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("n|.86tXU");
      Elements elements0 = document0.getElementsByAttributeStarting("n|.86tXU");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("yjw");
      Elements elements0 = document0.getElementsByIndexEquals(62);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("og!");
      // Undeclared exception!
      try { 
        document0.wrap("og!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("z'zprxlng");
      Elements elements0 = document0.getElementsByAttributeValueMatching("z'zprxlng", "z'zprxlng");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("+;Tv 3tj[_G]#0N");
      Elements elements0 = document0.getElementsByClass("+;Tv 3tj[_G]#0N");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.elemnt$1");
      Elements elements0 = document0.getElementsContainingText("org.jsoup.nodes.elemnt$1");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("x\"_b8>, /adc<k'l.!");
      Elements elements0 = document0.getElementsByAttributeValueContaining("x\"_b8>, /adc<k'l.!", "x\"_b8>, /adc<k'l.!");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Elements elements0 = document0.getElementsByAttributeValueNot("v/|m22JgyK7KL,}Yh", "v/|m22JgyK7KL,}Yh");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("z'zprxlng");
      // Undeclared exception!
      try { 
        document0.before("z'zprxlng");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("(,^(`)]grK5/;E");
      Element element0 = document0.removeClass("(,^(`)]grK5/;E");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(")|");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("v/|xm22jgyk7kl,}yh");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("yjw");
      Elements elements0 = document0.getElementsByIndexGreaterThan(5966);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("s$4Nvv'SE");
      document0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.html(":qek|7liu`j");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("ke)7/d]GKd|!B/aN9#9v");
      document0.tagName("ke)7/d]GKd|!B/aN9#9v");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.prepend("vd|L22Jgy,7KL,}Hh");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("KwLX5fITF^d*<znB");
      Document document1 = (Document)document0.prependText("KwLX5fITF^d*<znB");
      document1.reparentChild(document0);
      // Undeclared exception!
      try { 
        document1.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("KwLX5fITF^d*<znB");
      document0.prependText("KwLX5fITF^d*<znB");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("\"");
      document0.appendElement("\"");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("Lu5fIF^d*OzncB0");
      Node[] nodeArray0 = new Node[4];
      DataNode dataNode0 = DataNode.createFromEncoded("Uo^dZgO#+#f[@)47", "nobr");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren(0, linkedList0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-464), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("Lu5fITF^d*O<znB0");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>(646);
      // Undeclared exception!
      try { 
        document0.insertChildren(646, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      Element element0 = document0.toggleClass("s$4vv'SE");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("A");
      Element element0 = document0.appendElement("textarea");
      String string0 = element0.cssSelector();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document(".p[m50n8],lem");
      Element element0 = document0.appendElement(".p[m50n8],lem");
      element0.before((Node) document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("yjw");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("(,^(`)]grK5/;E");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("yjw");
      Element element0 = document0.appendElement("yjw");
      document0.prependChild(document0);
      Element element1 = document0.nextElementSibling();
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("A");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("*>L9xe[|-MF@iwR");
      Element element0 = document0.appendElement("*>L9xe[|-MF@iwR");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("*>L9xe[|-MF@iwR");
      Element element0 = document0.appendElement("*>L9xe[|-MF@iwR");
      element0.before((Node) document0);
      Element element1 = element0.previousElementSibling();
      assertEquals("#document", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Element element0 = document0.appendElement("v/|m22JgyK7KL,}Yh");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("s$4Nvv'SE");
      Element element0 = document0.prependChild(document0);
      element0.prependElement("s$4Nvv'SE");
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("lu5it^d*oznb0");
      Element element0 = document0.appendElement("lu5it^d*oznb0");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Element element0 = document0.appendElement("v/|m22JgyK7KL,}Yh");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Z'ZprXlng");
      Element element0 = document0.prependChild(document0);
      element0.prependElement("Z'ZprXlng");
      document0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document(")|");
      Element element0 = document0.getElementById(")|");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("KwLX5fITF^d*<znB");
      Comment comment0 = new Comment("b/d4-]JXbBQ<9`\"+o", "GCgd[){`D,Zt");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsMatchingText("KwLX5fITF^d*<znB");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("KwLX5fITF^d*<znB");
      Element element0 = document0.prependText("KwLX5fITF^d*<znB");
      document0.appendElement("R:H4:=n*dC.4i6");
      Elements elements0 = element0.getElementsMatchingText("KwLX5fITF^d*<znB");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("Lu5fIF^d*OznB0");
      document0.appendElement("br");
      document0.prependText("br");
      Elements elements0 = document0.getElementsMatchingText("zsbt>q'`>$_");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("E@rcFqh*,k1@+a)Kd#");
      Comment comment0 = new Comment("E@rcFqh*,k1@+a)Kd#", "\"1:d{GR.|'zM.");
      document0.prependChild(comment0);
      Elements elements0 = document0.getElementsContainingOwnText("ks");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("KwLX5fITF^d*<znB");
      Element element0 = document0.prependText("KwLX5fITF^d*<znB");
      Elements elements0 = element0.getElementsContainingOwnText("KwLX5fITF^d*<znB");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("KwLX5fITF^d*<znB");
      document0.appendElement("KwLX5fITF^d*<znB");
      Elements elements0 = document0.getElementsContainingOwnText("KwLX5fITF^d*<znB");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("Lu5fITF^d*O<znB0");
      Element element0 = document0.createElement("textarea");
      element0.prependText("br");
      Elements elements0 = element0.getElementsMatchingText("L4v");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("Lu5fITF^d*O<znB0");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("@jo*=e2Wo lq`c%Rl", "t$q/'l,@qsw1'#=U");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "a-/,{ui%", attributes0);
      Document document0 = new Document("textarea");
      formElement0.prependChild(document0);
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      document0.appendElement("v/|m22JgyK7KL,}Yh");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("yjw");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document(":contains(%s");
      Comment comment0 = new Comment(":contains(%s", "ScB3%");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      Element element0 = document0.appendElement("v/|m22JgyK7KL,}Yh");
      element0.prependText("v/|m22JgyK7KL,}Yh");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("]>");
      DataNode dataNode0 = new DataNode("]>", "]>");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("]>", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("v/|Xm22JgyK7KL,}Yh");
      document0.appendElement("v/|Xm22JgyK7KL,}Yh");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("v/|m22JgyK7KL,}Yh");
      document0.prependText("v/|m22JgyK7KL,}Yh");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      document0.addClass("s$4vv'SE");
      boolean boolean0 = document0.hasClass("s$4vv'SE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      document0.toggleClass("D3yZ-w?Wba6");
      Element element1 = document0.toggleClass("D3yZ-w?Wba6");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("x\"_bf8>, /adc<k'l.!");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("v/|Xm22JgyK7KL,}Yh");
      Element element0 = document0.val("v/|Xm22JgyK7KL,}Yh");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("A");
      Element element0 = document0.appendElement("textarea");
      // Undeclared exception!
      try { 
        element0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.appendElement("embed");
      Element element1 = element0.prependText("embed");
      List<Node> list0 = document0.childNodesCopy();
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("S");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "S");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 4631, document_OutputSettings1);
      assertEquals("S<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("s$4vv'SE");
      StringBuilder stringBuilder0 = new StringBuilder("s$4vv'SE");
      document0.outerHtml(stringBuilder0);
      assertEquals("s$4vv'SE\n<#root></#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("S");
      Element element0 = document0.prependText("S");
      document0.appendElement("S");
      String string0 = element0.toString();
      assertEquals("S\n<s></s>", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("legend");
      Element element0 = document0.appendElement("legend");
      Tag tag0 = Tag.valueOf("legend");
      Element element1 = new Element(tag0, "legend");
      Element element2 = element0.prependChild(element1);
      String string0 = element2.toString();
      assertEquals("<legend><legend></legend></legend>", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("embed");
      Element element0 = document0.appendElement("embed");
      String string0 = element0.toString();
      assertEquals("<embed>", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendElement("embed");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.toString();
      assertEquals("<embed />", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("Q4_YK4-:\"z+_6W,<%P");
      StringBuilder stringBuilder0 = new StringBuilder("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 3467, document_OutputSettings1);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("OKJn}M#v.%,6I");
      Element element0 = document0.appendElement("OKJn}M#v.%,6I");
      Element element1 = element0.prependText("OKJn}M#v.%,6I");
      String string0 = element1.toString();
      assertEquals("<okjn}m#v.%,6i>\n OKJn}M#v.%,6I\n</okjn}m#v.%,6i>", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document(":contains(%s");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("TkLtW$7^_i!");
      Document document1 = new Document("TkLtW$7^_i!");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("TkLtW$7^_i!");
      Document document1 = new Document("TkLtW$7^_i!");
      document1.prependChild(document0);
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.hashCode();
  }
}
