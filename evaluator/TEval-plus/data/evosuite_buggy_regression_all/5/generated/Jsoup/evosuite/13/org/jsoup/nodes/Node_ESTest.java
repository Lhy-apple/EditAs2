/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:12:54 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("p!<SR!\u0000");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("B!SR!\u0000", "B!SR!\u0000");
      textNode0.setBaseUri("B!SR!\u0000");
      assertEquals("B!SR!\u0000", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("B!SR!\u0000");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("t", "t", "t", "t");
      Node[] nodeArray0 = documentType0.childNodesAsArray();
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:\n");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("2v&2YIV6Mg>F[?PY/");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("t", "t", "t", "t");
      // Undeclared exception!
      try { 
        documentType0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("U", "U", "U", "U");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE html PUBLIC \"U\" U\">", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("abs:=sop8gpqdu");
      String string0 = document0.absUrl("abs:=sop8gpqdu");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:\n");
      // Undeclared exception!
      try { 
        document0.before("abs:abs:\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      // Undeclared exception!
      try { 
        textNode0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("B", "B");
      // Undeclared exception!
      try { 
        dataNode0.wrap("B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("^!SR!:");
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("abs:or1ob\"jn1r3y");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("B!SR!\u0000", "B!SR!\u0000");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("B!SR!\u0000");
      String string0 = document0.absUrl("B!SR!\u0000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("Z'B)T4[s3%)Zq");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      element0.after("Z'B)T4[s3%)Zq");
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("Z'B)T4[s3%)Zq");
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
      
      element0.wrap("Z'B)T4[s3%)Zq");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("8-0dVAsl");
      Element element0 = document0.appendElement("8-0dVAsl");
      element0.wrap("8-0dVAsl");
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("B!SR!\u0000", "B!SR!\u0000");
      Document document0 = Document.createShell("B!SR!\u0000");
      Element element0 = document0.appendElement("B!SR!\u0000");
      element0.setParentNode(textNode0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("2v&2YIV6Mg>F[?PY/");
      Element element0 = document0.appendElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
      DocumentType documentType0 = new DocumentType("", "2v&2YIV6Mg>F[?PY/", "org.jsoup.nodes.Node$OuterHtmlVisitor", "zWiQWh");
      document0.replaceChild(element0, documentType0);
      assertEquals(0, documentType0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("6XS,!r:");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("abs:=so8pgpqdu");
      TextNode textNode0 = TextNode.createFromEncoded("abs:=so8pgpqdu", "abs:=so8pgpqdu");
      textNode0.setParentNode(document0);
      Node node0 = textNode0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("Z'B)T4[s3%)Zq");
      Element element0 = document0.body();
      Node node0 = element0.previousSibling();
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("U", "U", "U", "U");
      boolean boolean0 = documentType0.equals("U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(")", ")", ")", ")");
      boolean boolean0 = documentType0.equals(documentType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("abs:=sop8gpqdu");
      TextNode textNode0 = TextNode.createFromEncoded("kCB%+N|$N>C/LA>a", "abs:=sop8gpqdu");
      textNode0.setParentNode(document0);
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = new TextNode("f", "f");
      Node node0 = textNode0.clone();
      assertNotSame(node0, textNode0);
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("B!SR!\u0000", "B!SR!\u0000");
      String string0 = textNode0.toString();
      assertEquals("B!SR!\u0000", string0);
  }
}
