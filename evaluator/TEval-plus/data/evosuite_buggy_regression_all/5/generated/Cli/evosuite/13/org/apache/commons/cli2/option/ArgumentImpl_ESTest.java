/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:26:47 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.ClassValidator;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.EnumValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("7wg\"", "", (-1844), Integer.MAX_VALUE, '<', '<', dateValidator0, "", linkedList0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("7wg\"", argumentImpl0.getPreferredName());
      assertEquals((-1844), argumentImpl0.getMinimum());
      assertEquals('<', argumentImpl0.getInitialSeparator());
      assertEquals(Integer.MAX_VALUE, argumentImpl0.getMaximum());
      assertEquals('<', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "}*M", 3100, 3100, 'v', 'v', numberValidator0, "", (List) null, 2915);
      assertEquals(3100, argumentImpl0.getMaximum());
      assertEquals(3100, argumentImpl0.getMinimum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '=', 'x', "}*M", (List) null);
      char char0 = sourceDestArgument0.getInitialSeparator();
      assertEquals('x', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("}*M", argumentImpl0.getDescription());
      assertEquals("}*M", sourceDestArgument0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('=', char0);
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("yPZqQdHg", "yPZqQdHg", 0, 0, 'm', 'm', urlValidator0, "yPZqQdHg", linkedList0, (-1));
      argumentImpl0.getDefaultValues();
      assertEquals('m', argumentImpl0.getSubsequentSeparator());
      assertEquals("yPZqQdHg", argumentImpl0.getConsumeRemaining());
      assertEquals("yPZqQdHg", argumentImpl0.getDescription());
      assertEquals('m', argumentImpl0.getInitialSeparator());
      assertEquals("yPZqQdHg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("7wg\"", "", (-1844), Integer.MAX_VALUE, '<', '<', dateValidator0, "", linkedList0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      boolean boolean0 = argumentImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "");
      assertEquals((-1844), argumentImpl0.getMinimum());
      assertEquals('<', argumentImpl0.getInitialSeparator());
      assertEquals("7wg\"", argumentImpl0.getPreferredName());
      assertEquals('<', argumentImpl0.getSubsequentSeparator());
      assertTrue(boolean0);
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals(Integer.MAX_VALUE, argumentImpl0.getMaximum());
      assertEquals("", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("^e<}X&\"PZ\"z=", "tsjm=rQn;ALV09%F!a", 0, 0, '$', '$', fileValidator0, "+8j)N0V#", linkedList0, 0);
      char char0 = argumentImpl0.getSubsequentSeparator();
      assertEquals("tsjm=rQn;ALV09%F!a", argumentImpl0.getDescription());
      assertEquals("^e<}X&\"PZ\"z=", argumentImpl0.getPreferredName());
      assertEquals("+8j)N0V#", argumentImpl0.getConsumeRemaining());
      assertEquals('$', argumentImpl0.getInitialSeparator());
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("7wg\"", "", (-1844), (-1844), '<', '<', dateValidator0, "", linkedList0, 0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      argumentImpl0.helpLines(1543, linkedHashSet0, (Comparator) null);
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('<', argumentImpl0.getInitialSeparator());
      assertEquals("7wg\"", argumentImpl0.getPreferredName());
      assertEquals('<', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&xQ<oI*2CP4", "&xQ<oI*2CP4", (-1834), 3057, 'f', 'f', enumValidator0, "&xQ<oI*2CP4", linkedList0, (-1834));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals(3057, argumentImpl0.getMaximum());
      assertEquals((-1834), argumentImpl0.getMinimum());
      
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getPreferredName());
      assertEquals('f', argumentImpl0.getSubsequentSeparator());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getDescription());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getConsumeRemaining());
      assertEquals('f', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "}*M", 3100, 3100, 'v', 'v', numberValidator0, "", (List) null, 2915);
      String string0 = argumentImpl0.getConsumeRemaining();
      assertEquals('v', argumentImpl0.getInitialSeparator());
      assertEquals('v', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("", string0);
      assertEquals("}*M", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "}*M", 3100, 3100, 'v', 'v', numberValidator0, "", (List) null, 2915);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '=', 'x', "}*M", (List) null);
      sourceDestArgument0.getValidator();
      assertEquals("}*M", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("}*M", sourceDestArgument0.getConsumeRemaining());
      assertEquals('x', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('=', sourceDestArgument0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "org.apache.commons.cli2.option.ArgumentImpl", 3291, 3291, 'V', 'V', urlValidator0, "org.apache.commons.cli2.option.ArgumentImpl", linkedList0, 9);
      assertEquals('V', argumentImpl0.getInitialSeparator());
      assertEquals("arg", argumentImpl0.getPreferredName());
      assertEquals("org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getConsumeRemaining());
      assertEquals("org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getDescription());
      assertEquals('V', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("", "J;k9BzE", 32, (-1), ' ', ' ', fileValidator0, "", linkedList0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1876));
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&xQ<oI*2CP4", "&xQ<oI*2CP4", (-1876), 3057, '_', '_', enumValidator0, "&xQ<oI*2CP4", linkedList0, (-1876));
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getConsumeRemaining());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getPreferredName());
      assertEquals('_', argumentImpl0.getInitialSeparator());
      assertEquals('_', argumentImpl0.getSubsequentSeparator());
      assertEquals("&xQ<oI*2CP4", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(60);
      linkedList0.add((Object) integer0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("Kt^Uf}{[x*/P", "DateValidator.date.OutOfRange", 60, 60, '', '', numberValidator0, "Kt^Uf}{[x*/P", linkedList0, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1830);
      linkedList0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("UX@8:`R7?kG<UCT0o", "UX@8:`R7?kG<UCT0o", (-1835), (-1835), 'k', 'k', enumValidator0, "\"", linkedList0, (-1835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("~bJHZ0N");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("BuT)%ro!74SR", "~bJHZ0N", (-711), 3, '+', '+', numberValidator0, "DSPLAY_OPTIONAL", list0, 1040);
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedHashSet0);
      ArgumentImpl argumentImpl1 = new ArgumentImpl("\"orH.apache.commons.cli2.option.ArgumetImpl", "ZK=bSC,gGhnfDy^", 3, 3, '7', 'I', numberValidator0, "TK", list0, (-1));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList1);
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl1);
      sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals('7', argumentImpl1.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      linkedHashSet0.add("Option.missing.required");
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      linkedHashSet0.add("BuT)%ro!74SR");
      ArgumentImpl argumentImpl0 = new ArgumentImpl("BuT)%ro!74SR", "~bJHZ0N", (-711), 3, '}', '}', numberValidator0, "Option.missing.required", list0, 1040);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedHashSet0);
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("~bJHZ0N", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("~bJHZ0N");
      linkedHashSet0.add("\"'");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      linkedHashSet0.add("Option.missing.required");
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      linkedHashSet0.add("BuT)%ro!74SR");
      linkedHashSet0.add("");
      ArgumentImpl argumentImpl0 = new ArgumentImpl("BuT)%ro!74SR", "~bJHZ0N", (-711), 3, '}', '}', numberValidator0, "Option.missing.required", list0, 1040);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedHashSet0);
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals(5, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("~bJHZ0N");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      linkedHashSet0.add("Option.missing.required");
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("BuT)%ro!74SR", "~bJHZ0N", (-711), 3, 'n', 'n', numberValidator0, "DSPLAY_OPTIONAL", list0, 1040);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedHashSet0);
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      try { 
        argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected value \"g.required\" found while processing  BuT)%ro!74SR [BuT)%ro!74SR [BuT)%ro!74SR]]
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.validation.UrlValidator", "org.apache.commons.cli2.validation.UrlValidator", 125, 125, 'K', 'K', (Validator) null, (String) null, linkedList0, 603);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) argumentImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator org.apache.commons.cli2.validation.UrlValidator
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&xQ<oI*2CP4", "&xQ<oI*2CP4", (-1834), (-1834), '_', '_', enumValidator0, "&xQ<oI*2CP4", linkedList0, (-1834));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1834
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("EM@C=9Szcn", "S", (-1669), 40, '-', 'W', (Validator) null, "n m(k>K", linkedList0, 40);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) null);
      assertEquals("S", argumentImpl0.getDescription());
      assertEquals('W', argumentImpl0.getSubsequentSeparator());
      assertEquals("n m(k>K", argumentImpl0.getConsumeRemaining());
      assertEquals("EM@C=9Szcn", argumentImpl0.getPreferredName());
      assertEquals('-', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("xQ<oI*2P4", "xQ<oI*2P4", (-1834), 4513, 'x', 'x', enumValidator0, "xQ<oI*2P4", linkedList0, (-1834));
      argumentImpl0.toString();
      assertEquals("xQ<oI*2P4", argumentImpl0.getPreferredName());
      assertEquals('x', argumentImpl0.getSubsequentSeparator());
      assertEquals('x', argumentImpl0.getInitialSeparator());
      assertEquals("xQ<oI*2P4", argumentImpl0.getDescription());
      assertEquals("xQ<oI*2P4", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("UX@8:`R7?kG<UCT0o", "UX@8:`R7?kG<UCT0o", (-1835), (-1835), 'k', 'k', enumValidator0, "\"", linkedList0, (-1835));
      argumentImpl0.appendUsage((StringBuffer) null, linkedHashSet0, (Comparator) null);
      assertEquals("\"", argumentImpl0.getConsumeRemaining());
      assertEquals('k', argumentImpl0.getInitialSeparator());
      assertEquals('k', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("E", "E", Integer.MAX_VALUE, Integer.MAX_VALUE, 'c', '}', dateValidator0, "E", linkedList0, Integer.MAX_VALUE);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, ')', 'Y', "yG59IUA!|5ojNs;yv^", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) sourceDestArgument0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) E E ...
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      EnumValidator enumValidator0 = new EnumValidator(linkedHashSet0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("UX@8:`R7?kG<UCT0o", "UX@8:`R7?kG<UCT0o", (-1835), (-1835), 'k', 'k', enumValidator0, "\"", linkedList0, (-1835));
      // Undeclared exception!
      try { 
        argumentImpl0.stripBoundaryQuotes("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("S-itch.no.disabledPrefix", "S-itch.no.disabledPrefix", (-277), 815, 'C', 'C', classValidator0, "S-itch.no.disabledPrefix", linkedList0, 3);
      boolean boolean0 = argumentImpl0.isRequired();
      assertFalse(boolean0);
      assertEquals("S-itch.no.disabledPrefix", argumentImpl0.getPreferredName());
      assertEquals("S-itch.no.disabledPrefix", argumentImpl0.getConsumeRemaining());
      assertEquals('C', argumentImpl0.getInitialSeparator());
      assertEquals('C', argumentImpl0.getSubsequentSeparator());
      assertEquals("S-itch.no.disabledPrefix", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-", " T", 791, 791, 'Q', 'Q', fileValidator0, "\"", linkedList0, 791);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'p', 'p', "--", linkedList0);
      boolean boolean0 = sourceDestArgument0.isRequired();
      assertEquals('p', sourceDestArgument0.getInitialSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertTrue(boolean0);
      assertEquals("\"", argumentImpl0.getConsumeRemaining());
      assertEquals('p', sourceDestArgument0.getSubsequentSeparator());
      assertEquals(" T", argumentImpl0.getDescription());
  }
}
