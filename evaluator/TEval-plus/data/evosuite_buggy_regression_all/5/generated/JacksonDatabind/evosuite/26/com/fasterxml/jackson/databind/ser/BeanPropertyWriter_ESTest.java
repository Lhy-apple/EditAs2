/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:01:41 GMT 2023
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getMember();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JsonSerializer<AnnotatedMethod> jsonSerializer0 = (JsonSerializer<AnnotatedMethod>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, false, (Object) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertFalse(objectNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getViews();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.assignTypeSerializer((TypeSerializer) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.isVirtual();
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.isUnwrapping();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getWrapperName();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getFullName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getSerializedName();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getMetadata();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter((NameTransformer) null);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.willSuppressNulls();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getTypeSerializer();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("property '", "property '");
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
      assertEquals("property ' property '", beanPropertyWriter2.getName());
      assertFalse(beanPropertyWriter2.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector1, false);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((AnnotatedClass) null, (Field) null, annotationMap0);
      JsonSerializer<SimpleModule> jsonSerializer0 = (JsonSerializer<SimpleModule>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, beanPropertyWriter0);
      Object object0 = new Object();
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asWrapperTypeSerializer0, (JavaType) null, true, object0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      beanPropertyWriter0.setInternalSetting(serializedString0, serializedString0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
      assertSame(beanPropertyWriter2, beanPropertyWriter1);
      assertFalse(beanPropertyWriter2.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JavaType javaType0 = TypeFactory.unknownType();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      beanPropertyWriter0.assignSerializer(beanSerializer0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Method> class0 = Method.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      beanPropertyWriter0.assignNullSerializer(beanSerializer0);
      beanPropertyWriter0.assignNullSerializer(beanSerializer0);
      assertTrue(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Method> class0 = Method.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      BeanSerializer beanSerializer1 = new BeanSerializer(beanSerializer0);
      beanPropertyWriter0.assignNullSerializer(beanSerializer0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignNullSerializer(beanSerializer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override null serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BeanPropertyWriter beanPropertyWriter1 = (BeanPropertyWriter)beanPropertyWriter0.readResolve();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter0.readResolve();
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonSerializer<BeanSerializer> jsonSerializer0 = (JsonSerializer<BeanSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, true, annotationIntrospector0);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = beanPropertyWriter0.findAnnotation(class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Annotation> class0 = Annotation.class;
      beanPropertyWriter0.getContextAnnotation(class0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
      assertNull(jsonFormat_Value0);
      
      JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(jsonFormat_Value1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Bk", "Bk");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
      Class<Module> class0 = Module.class;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, (AnnotationIntrospector) null, simpleMixInResolver0);
      Annotations annotations0 = annotatedClass0.getAnnotations();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class1 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotations0, collectionType0, (JsonSerializer<?>) null, (TypeSerializer) null, collectionType0, false, (Object) null);
      JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
      assertNull(jsonFormat_Value0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.setInternalSetting("", class0);
      Object object0 = beanPropertyWriter0.getInternalSetting((Object) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include)BeanPropertyWriter.MARKER_FOR_EMPTY;
      beanPropertyWriter0.getInternalSetting(jsonInclude_Include0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      beanPropertyWriter0.setInternalSetting((Object) null, serializerFactoryConfig0);
      Object object0 = beanPropertyWriter0.setInternalSetting(beanPropertyWriter0, class0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      ShortNode shortNode0 = new ShortNode((short)4096);
      Object object0 = beanPropertyWriter0.removeInternalSetting(shortNode0);
      assertNull(object0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.setInternalSetting((Object) null, serializerFactoryConfig0);
      Object object0 = beanPropertyWriter0.removeInternalSetting((Object) null);
      assertNotNull(object0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      beanPropertyWriter0.setInternalSetting(beanPropertyWriter0, class0);
      Object object0 = beanPropertyWriter0.removeInternalSetting((Object) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, simpleType0, true, annotationIntrospector0);
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      Class<Annotation> class0 = Annotation.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionType0);
      beanPropertyWriter0.assignNullSerializer(beanSerializer0);
      boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, simpleType0, true, annotationIntrospector0);
      boolean boolean0 = beanPropertyWriter0.wouldConflictWithName(propertyName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = new SerializedString("A");
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      PropertyName propertyName0 = PropertyName.construct("A", "A");
      boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
      assertFalse(boolean0);
      assertFalse(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Bk", "Bk");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
      Class<Module> class0 = Module.class;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, (AnnotationIntrospector) null, simpleMixInResolver0);
      Annotations annotations0 = annotatedClass0.getAnnotations();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class1 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotations0, collectionType0, (JsonSerializer<?>) null, (TypeSerializer) null, collectionType0, false, (Object) null);
      Class<?> class2 = beanPropertyWriter0.getRawSerializationType();
      assertFalse(class2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.getRawSerializationType();
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonSerializer<BeanSerializer> jsonSerializer0 = (JsonSerializer<BeanSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, true, annotationIntrospector0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getPropertyType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsField(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.serializeAsOmittedField("JSON", jsonGenerator0, defaultSerializerProvider_Impl0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      try { 
        beanPropertyWriter0.serializeAsElement(beanPropertyWriter0, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      try { 
        beanPropertyWriter0.serializeAsPlaceholder((Object) null, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0._nullSerializer = defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER;
      try { 
        beanPropertyWriter0.serializeAsPlaceholder((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, true, propertyName0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
      assertFalse(beanPropertyWriter0.isUnwrapping());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, simpleType0, false, defaultSerializerProvider_Impl0);
      beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertFalse(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForRootValues();
      Class<Method> class0 = Method.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForRootValues();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      beanPropertyWriter0.setNonTrivialBaseType(collectionLikeType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      try { 
        beanPropertyWriter0.get(beanPropertyWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      String string0 = beanPropertyWriter1.toString();
      assertFalse(beanPropertyWriter1.willSuppressNulls());
      assertEquals("property ' ' (virtual, no static serializer)", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      String string0 = beanPropertyWriter1.toString();
      assertTrue(beanPropertyWriter0.hasSerializer());
      assertEquals("property ' ' (virtual, static serializer of type com.fasterxml.jackson.databind.ser.impl.FailingSerializer)", string0);
  }
}
