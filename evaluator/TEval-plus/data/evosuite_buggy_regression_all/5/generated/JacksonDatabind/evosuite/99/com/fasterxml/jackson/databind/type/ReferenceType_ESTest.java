/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:07:57 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[1], class0, arrayType0, true);
      Class<Integer> class2 = Integer.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class2, typeBindings0, javaType0, javaTypeArray0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class java.lang.Class<java.lang.Class<java.lang.Class,java.lang.Class><[map type; class java.lang.Class, [simple type, class java.lang.Class] -> [simple type, class java.lang.Class]]>]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      CollectionType collectionType0 = new CollectionType(collectionLikeType0, simpleType0);
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      Class<MapLikeType> class0 = MapLikeType.class;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType0, typeBindings0, (Object) mapType0, (Object) collectionType0);
      ReferenceType referenceType0 = new ReferenceType(arrayType0, arrayType0);
      StringBuilder stringBuilder0 = new StringBuilder("com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer");
      StringBuilder stringBuilder1 = referenceType0.getErasedSignature(stringBuilder0);
      assertEquals("com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializerL[Ljava/lang/Object;;", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      CollectionType collectionType0 = new CollectionType(collectionLikeType0, simpleType0);
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      Class<MapLikeType> class0 = MapLikeType.class;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType0, typeBindings0, (Object) mapType0, (Object) collectionType0);
      ReferenceType referenceType0 = new ReferenceType(arrayType0, arrayType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0._narrow(class0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<String> class0 = String.class;
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      boolean boolean0 = referenceType0.hasContentType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-181));
      // Undeclared exception!
      try { 
        ReferenceType.construct((Class<?>) class0, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      StringBuilder stringBuilder0 = new StringBuilder("#\"");
      referenceType0.getGenericSignature(stringBuilder0);
      assertEquals("#\"Ljava/lang/Class<Ljava/lang/Class;>;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) referenceType0);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[1], class0, arrayType0, true);
      JavaType javaType1 = referenceType0.getAnchorType();
      assertNotNull(javaType1);
      assertTrue(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      JavaType javaType0 = referenceType0.getContentType();
      assertFalse(javaType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, mapType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[1], class0, arrayType0, true);
      // Undeclared exception!
      try { 
        referenceType0.withContentType(javaTypeArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<String> class0 = String.class;
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(javaType0);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = new MapLikeType(placeholderForType0, referenceType0, referenceType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withTypeHandler(mapLikeType0);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertTrue(boolean0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[1], class0, arrayType0, true);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(lRUMap0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(mapType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(mapType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[1], class0, arrayType0, true);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      ClassStack classStack0 = new ClassStack(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0._resolveSuperClass(classStack0, class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[1], class0, arrayType0, true);
      boolean boolean0 = referenceType0.isAnchorType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      boolean boolean0 = referenceType0.isAnchorType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      boolean boolean0 = referenceType0.equals(mapType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      SimpleType simpleType1 = TypeFactory.CORE_TYPE_OBJECT;
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(simpleType1, simpleType1);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(boolean0);
  }
}
