/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:06:40 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientConnectionException;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
      assertEquals(0, settableBeanPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      int int0 = beanPropertyMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), typeFactory0, (PropertyMetadata) null);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.assignIndexes();
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      linkedHashSet0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "D4A'Gm#?Yp$fOeUac11", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 411);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), annotatedParameter0, (PropertyMetadata) null);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.add((SettableBeanProperty) creatorProperty0);
      stack0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
      String string0 = beanPropertyMap0.toString();
      assertEquals("Properties=[([simple type, class java.lang.Object]), ([simple type, class java.lang.Object])]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-3003));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-3003), beanPropertyMap0, (PropertyMetadata) null);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.add((SettableBeanProperty) creatorProperty0);
      stack0.add((SettableBeanProperty) creatorProperty0);
      stack0.add((SettableBeanProperty) creatorProperty0);
      stack0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap1 = new BeanPropertyMap(true, stack0);
      assertFalse(beanPropertyMap1.equals((Object)beanPropertyMap0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.add((SettableBeanProperty) null);
      stack0.add((SettableBeanProperty) null);
      stack0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
      stack0.add((SettableBeanProperty) null);
      stack0.add((SettableBeanProperty) null);
      stack0.add((SettableBeanProperty) null);
      beanPropertyMap0.init(stack0);
      assertEquals(6, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.setSize(65279);
      // Undeclared exception!
      BeanPropertyMap.construct(stack0, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-1406));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-1406), linkedHashSet0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "bb");
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap1._rename(creatorProperty0, nameTransformer0);
      beanPropertyMap1.withProperty(settableBeanProperty0);
      assertEquals("bb", settableBeanProperty0.getName());
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.assignIndexes();
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), typeFactory0, (PropertyMetadata) null);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("PEM", "^Ek");
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.renameAll(nameTransformer0);
      assertEquals(1, beanPropertyMap2.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      linkedHashSet0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("expected closing END_ARRAY after type information and deserialized value", "");
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertEquals(1, beanPropertyMap1.size());
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(arrayList0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), typeFactory0, (PropertyMetadata) null);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withoutProperties(set0);
      assertEquals(1, beanPropertyMap2.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), beanPropertyMap0, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        beanPropertyMap0.replace(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't replace
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), typeFactory0, (PropertyMetadata) null);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.replace(creatorProperty0);
      assertFalse(creatorProperty0.isVirtual());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-3003));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-3003), beanPropertyMap0, (PropertyMetadata) null);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap1 = new BeanPropertyMap(true, stack0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find((-3003));
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, 224, (Object) null, (PropertyMetadata) null);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find((-1));
      assertFalse(settableBeanProperty0.isVirtual());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      // Undeclared exception!
      try { 
        beanPropertyMap0.find((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null property name
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1215), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      boolean boolean0 = beanPropertyMap0.findDeserializeAndSet(jsonParserDelegate0, deserializationContext0, beanPropertyMap0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-1406));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-1406), linkedHashSet0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1215), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        beanPropertyMap1.findDeserializeAndSet(jsonParserDelegate0, deserializationContext0, beanPropertyMap0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: need JSON Object to contain As.WRAPPER_OBJECT type information for class java.lang.Object
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("`&a%ra3cm2b");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), beanPropertyMap0, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        beanPropertyMap0.remove(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't remove
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2992));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2992), beanPropertyMap0, (PropertyMetadata) null);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.add((SettableBeanProperty) creatorProperty0);
      stack0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap1 = new BeanPropertyMap(false, stack0);
      beanPropertyMap1.remove(creatorProperty0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-1381));
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, 138, object0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("K+gXU!c^3JD[e!M&K\"");
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(settableBeanProperty0);
      beanPropertyMap1.remove(creatorProperty0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, (NameTransformer) null);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, (-2981));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-2981), typeFactory0, propertyMetadata0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<TypeIdResolver> jsonDeserializer1 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
      CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer((String) null, (String) null);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLRecoverableException0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, defaultDeserializationContext_Impl0, "@qCd,5;EmBgLhrq%rm", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLRecoverableException) (through reference chain: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"@qCd,5;EmBgLhrq%rm\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", mockError0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockError0, sQLTransientConnectionException0, "", (DeserializationContext) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      try { 
        beanPropertyMap0.wrapAndThrow(sQLTransientConnectionException0, (Object) null, "L:%;&PMwh$\"(j~%(`", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransientConnectionException) (through reference chain: UNKNOWN[\"L:%;&PMwh$\"(j~%(`\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      MockIOException mockIOException0 = new MockIOException("' found, cant pla");
      byte[] byteArray0 = new byte[7];
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, binaryNode0, "' found, cant pla", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("");
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(hashSet0, true);
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      try { 
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, linkedList0, "", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  (through reference chain: java.util.LinkedList[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLRecoverableException0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockRuntimeException0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, "Z>D%q7o/*-GiT_", "Z>D%q7o/*-GiT_", defaultDeserializationContext_Impl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, (String) null, true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 970);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, annotatedParameter0, (-1121), asWrapperTypeDeserializer0, propertyMetadata0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.add((SettableBeanProperty) null);
      stack0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      assertEquals(2, beanPropertyMap1.size());
  }
}
