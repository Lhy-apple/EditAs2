/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:09:11 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.annotation.Annotation;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExternalTypeHandler_ESTest extends ExternalTypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder((JavaType) null);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) arrayDeque0, false, (Map<String, List<PropertyName>>) hashMap0);
      PropertyName propertyName0 = new PropertyName("'", "'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "dXSK", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      Class<CreatorProperty> class1 = CreatorProperty.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class1, (Annotation) null, class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 18, propertyName0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "'", propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder((JavaType) null);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build((BeanPropertyMap) null);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler0.start();
      assertFalse(externalTypeHandler1.equals((Object)externalTypeHandler0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = ExternalTypeHandler.builder((JavaType) null);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build((BeanPropertyMap) null);
      PropertyName propertyName0 = new PropertyName("?og", "?og");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "?og", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      FloatNode floatNode0 = FloatNode.valueOf(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 7, floatNode0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handleTypePropertyValue((JsonParser) null, (DeserializationContext) null, "?og", "?og");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder((JavaType) null);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build((BeanPropertyMap) null);
      boolean boolean0 = externalTypeHandler0.handleTypePropertyValue((JsonParser) null, (DeserializationContext) null, "N", externalTypeHandler_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = ExternalTypeHandler.builder((JavaType) null);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build((BeanPropertyMap) null);
      boolean boolean0 = externalTypeHandler0.handlePropertyValue((JsonParser) null, (DeserializationContext) null, "d@p**'5&pg9Ev", externalTypeHandler_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder((JavaType) null);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) arrayDeque0, false, (Map<String, List<PropertyName>>) hashMap0);
      PropertyName propertyName0 = new PropertyName("'", "'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "dXSK", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      Class<CreatorProperty> class1 = CreatorProperty.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class1, (Annotation) null, class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 18, propertyName0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "'", propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = ExternalTypeHandler.builder((JavaType) null);
      PropertyName propertyName0 = new PropertyName("?og", "?og");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "?og", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      FloatNode floatNode0 = FloatNode.valueOf(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 7, floatNode0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) treeSet0, false, (Map<String, List<PropertyName>>) hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, (DeserializationContext) null, "?og", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = ExternalTypeHandler.builder((JavaType) null);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "?og", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      FloatNode floatNode0 = FloatNode.valueOf(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 7, floatNode0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) treeSet0, false, (Map<String, List<PropertyName>>) hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      // Undeclared exception!
      try { 
        externalTypeHandler0.handlePropertyValue((JsonParser) null, (DeserializationContext) null, "?og", annotationCollector_TwoAnnotations0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = ExternalTypeHandler.builder((JavaType) null);
      PropertyName propertyName0 = new PropertyName("?og", "?og");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "?og", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      FloatNode floatNode0 = FloatNode.valueOf(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 7, floatNode0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) treeSet0, false, (Map<String, List<PropertyName>>) hashMap0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
      Object object0 = externalTypeHandler1.complete((JsonParser) null, (DeserializationContext) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder((JavaType) null);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) arrayDeque0, true, (Map<String, List<PropertyName>>) hashMap0);
      PropertyName propertyName0 = PropertyName.construct("'", "'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "'", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      Class<CreatorProperty> class1 = CreatorProperty.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class1, (Annotation) null, class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 12, propertyName0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build(beanPropertyMap0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
      PropertyValueBuffer propertyValueBuffer0 = new PropertyValueBuffer((JsonParser) null, defaultDeserializationContext_Impl0, 12, (ObjectIdReader) null);
      // Undeclared exception!
      try { 
        externalTypeHandler1.complete((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0, propertyValueBuffer0, (PropertyBasedCreator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = ExternalTypeHandler.builder((JavaType) null);
      PropertyName propertyName0 = new PropertyName("?og", "?og");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "?og", false, (JavaType) null);
      Class<Module> class0 = Module.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      FloatNode floatNode0 = FloatNode.valueOf(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 7, floatNode0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asArrayTypeDeserializer0);
      assertNull(creatorProperty0.getManagedReferenceName());
  }
}
