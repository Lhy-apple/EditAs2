/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:03:56 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isArrayType());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleType0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Integer> class1 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class1, class1);
      assertFalse(simpleType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getKeyType();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      Class<JsonTypeInfo.As> class1 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      boolean boolean0 = referenceType0.useStaticType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      boolean boolean0 = referenceType0.isFinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getContentTypeHandler();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getContentValueHandler();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getGenericSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getErasedSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      mapType0.getParameterSource();
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      JavaType javaType0 = simpleType0.forcedNarrowBy(class1);
      assertFalse(simpleType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType javaType0 = mapType0.forcedNarrowBy(class0);
      assertSame(javaType0, mapType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      boolean boolean0 = referenceType0.hasRawClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.isTypeOrSubTypeOf(class0);
      assertFalse(simpleType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = simpleType0.isTypeOrSubTypeOf(class1);
      assertTrue(boolean0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      boolean boolean0 = simpleType0.isTypeOrSubTypeOf(class1);
      assertFalse(boolean0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.isJavaLangObject();
      assertFalse(boolean0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, javaTypeArray0[1], javaTypeArray0, (JavaType) simpleType0);
      boolean boolean0 = referenceType0.isJavaLangObject();
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.hasGenericTypes();
      assertFalse(simpleType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.hasGenericTypes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType javaType0 = mapType0.containedTypeOrUnknown(0);
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType javaType0 = simpleType0.containedTypeOrUnknown((-4560));
      assertNotNull(javaType0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.hasValueHandler();
      assertFalse(simpleType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      SimpleType simpleType0 = referenceType0.withValueHandler(classNameIdResolver0);
      boolean boolean0 = simpleType0.hasValueHandler();
      assertFalse(simpleType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = simpleType0.getBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) class1, (Object) simpleType0);
      boolean boolean0 = arrayType0.hasHandlers();
      assertFalse(arrayType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(boolean0);
      assertTrue(arrayType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Object object0 = new Object();
      CollectionType collectionType1 = collectionType0.withContentValueHandler(object0);
      boolean boolean0 = collectionType1.hasHandlers();
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType1.useStaticType());
      assertTrue(boolean0);
  }
}
