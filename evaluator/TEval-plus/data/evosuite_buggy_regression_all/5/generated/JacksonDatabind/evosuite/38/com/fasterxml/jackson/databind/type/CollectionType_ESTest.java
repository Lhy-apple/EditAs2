/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:01:30 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.ArrayDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionType_ESTest extends CollectionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayDeque> class0 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Class<Object> class1 = Object.class;
      CollectionType collectionType1 = CollectionType.construct((Class<?>) class1, (JavaType) collectionType0);
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayDeque> class0 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      String string0 = collectionType0.toString();
      assertEquals("[collection type; class java.util.ArrayDeque, contains [collection type; class java.util.ArrayDeque, contains [simple type, class java.lang.Object]]]", string0);
      assertFalse(collectionType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayDeque> class0 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Class<String> class1 = String.class;
      JavaType javaType0 = collectionType0._narrow(class1);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayDeque> class0 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      CollectionType collectionType0 = new CollectionType(referenceType0, referenceType0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(javaType0);
      assertTrue(collectionType1.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      CollectionType collectionType0 = new CollectionType(referenceType0, referenceType0);
      Object object0 = new Object();
      CollectionType collectionType1 = (CollectionType)collectionType0.withContentType(collectionType0);
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(object0);
      assertFalse(collectionType2.equals((Object)collectionType0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JavaType javaType0 = TypeBase._bogusSuperClass(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      CollectionType collectionType0 = CollectionType.construct(class1, typeBindings0, javaTypeArray0[0], javaTypeArray0, javaType0);
      JavaType javaType1 = collectionType0.withContentType(javaType0);
      assertFalse(javaType1.useStaticType());
      assertSame(javaType1, collectionType0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      CollectionType collectionType0 = new CollectionType(referenceType0, referenceType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertTrue(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      Integer integer0 = new Integer(93);
      ArrayType arrayType0 = new ArrayType(simpleType0, typeBindings0, integer0, class0, integer0, true);
      CollectionType collectionType0 = new CollectionType(arrayType0, arrayType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertSame(collectionType1, collectionType0);
  }
}
