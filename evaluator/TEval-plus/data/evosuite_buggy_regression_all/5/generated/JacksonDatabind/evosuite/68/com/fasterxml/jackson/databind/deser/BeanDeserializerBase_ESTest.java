/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:06:13 GMT 2023
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.node.BooleanNode;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayDeque;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanDeserializerBase_ESTest extends BeanDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ManagedReferenceProperty> class0 = ManagedReferenceProperty.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      try { 
        objectMapper0.convertValue((Object) arrayDeque0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.util.ArrayDeque not subtype of [simple type, class com.fasterxml.jackson.databind.ext.NioPathDeserializer]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      hashMap0.put("no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)", (SettableBeanProperty) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      try { 
        objectMapper0.convertValue((Object) hashMap0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized field \"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\" (class com.fasterxml.jackson.databind.ext.NioPathDeserializer), not marked as ignorable (one known property: \"knownPropertyNames\"])
         //  at [Source: java.lang.String@0000000453; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.databind.ext.NioPathDeserializer[\"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AsExternalTypeDeserializer> class0 = AsExternalTypeDeserializer.class;
      Class<NioPathDeserializer> class1 = NioPathDeserializer.class;
      try { 
        objectMapper0.convertValue((Object) class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.databind.ext.NioPathDeserializer: no String-argument constructor/factory method to deserialize from String value ('com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer')
         //  at [Source: java.lang.String@0000001345; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      try { 
        objectMapper0.convertValue((Object) booleanNode0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.databind.ext.NioPathDeserializer: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (true)
         //  at [Source: java.lang.String@0000000445; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      try { 
        objectMapper0.convertValue((Object) booleanNode0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.databind.ext.NioPathDeserializer: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (false)
         //  at [Source: java.lang.String@0000000445; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      try { 
        objectMapper0.convertValue((Object) arrayDeque0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not deserialize instance of com.fasterxml.jackson.databind.ext.NioPathDeserializer out of START_ARRAY token
         //  at [Source: java.lang.String@0000000447; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }
}
