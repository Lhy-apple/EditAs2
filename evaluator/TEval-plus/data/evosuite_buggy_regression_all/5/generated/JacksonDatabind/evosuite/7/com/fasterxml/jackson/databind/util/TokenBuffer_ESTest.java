/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:02:08 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Locale;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean0 = true;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0._mayHaveNativeIds = true;
      JsonParser jsonParser0 = tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 15, (Object) tokenBuffer0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.appendRaw((-1465), (-1137), (Object) objectMapper0, (Object) integer0, (Object) jsonToken0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1465
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      tokenBuffer_Segment0._next = tokenBuffer_Segment0;
      assertFalse(tokenBuffer_Segment0._next.hasIds());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.ROOT;
      objectMapper0.setLocale(locale0);
      TypeFactory.defaultInstance();
      Class<SerializedString> class0 = SerializedString.class;
      ObjectReader objectReader0 = objectMapper0.reader(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
      SerializedString serializedString0 = new SerializedString("JSON");
      // Undeclared exception!
      try { 
        tokenBuffer0.writeObject(serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      JsonParser jsonParser0 = tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      try { 
        jsonParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0._append(jsonToken0, visibilityChecker0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Integer.valueOf(16);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getVisibilityChecker();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0._appendRaw((-561), objectMapper0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "[typeId=");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Integer integer0 = new Integer(451);
      tokenBuffer_Segment0.appendRaw(451, 451, (Object) jsonToken0);
      tokenBuffer0.writeNull();
      int int0 = tokenBuffer_Segment0.rawType(451);
      assertEquals(0, int0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment1.hasIds());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Integer integer0 = new Integer(451);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      objectMapper0.reader((ContextAttributes) null);
      Boolean boolean0 = new Boolean("JSON");
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeTree((TreeNode) null);
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Integer integer0 = new Integer(442);
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger1);
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      JsonParser jsonParser0 = tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      tokenBuffer0.writeNumber((short) (-3040));
      tokenBuffer0.writeBooleanField("JSON", true);
      jsonParser0.overrideCurrentName("!4bV:gv(-q9w!");
      ObjectMapper.findModules();
      try { 
        jsonParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeStartArray();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonParser jsonParser0 = tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.getCodec();
      tokenBuffer0.writeNumberField("gJEay`x`+6$?7", (-77));
      jsonParser0.clearCurrentToken();
      tokenBuffer0.toString();
      tokenBuffer0.writeNull();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer0.disable(jsonGenerator_Feature0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Float float0 = new Float(1631.85);
      try { 
        tokenBuffer0.writeObject(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0._appendRaw(1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.setCodec(objectMapper1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNotNull(tokenBuffer2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      tokenBuffer2.writeStartObject();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertNull(tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertNotNull(tokenBuffer3);
      
      tokenBuffer3.writeNumber((int) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0._next.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      Short short0 = new Short((short) (-1066));
      assertEquals((short) (-1066), (short)short0);
      assertNotNull(short0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._currentObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer0.writeNumber((double) 1049);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("JSON", 16, (-688));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = true;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      String string0 = "";
      int int0 = 10;
      int int1 = 256;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("", 10, 256);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Integer integer0 = Integer.valueOf(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(object0);
      
      Object object1 = tokenBuffer_Segment1.findObjectId(5);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(object1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Integer integer0 = Integer.valueOf((-1137));
      assertEquals((-1137), (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-1137), jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MapType.construct(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Float float0 = new Float((double) (-1787));
      assertEquals((-1787.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((-1787), jsonToken0, (Object) float0, (Object) objectMapper0, (Object) tokenBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1787
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer0.firstToken();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      Object object0 = tokenBuffer_Parser0.getObjectId();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      tokenBuffer0.writeNumberField("JSON", (-65));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeNumber((long) 16);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: FIELD_NAME(JSON), VALUE_NUMBER_INT, VALUE_NUMBER_INT]", string0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(string0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNull();
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(77, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(77, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(77, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Integer integer0 = Integer.valueOf(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNotNull(tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      
      StringReader stringReader0 = new StringReader("'E^F#4");
      assertNotNull(stringReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) stringReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNotNull(readerBasedJsonParser0);
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(readerBasedJsonParser0);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(tokenBuffer3.isClosed());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertNotNull(tokenBuffer3);
      
      tokenBuffer1.firstToken();
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      
      System.setCurrentTimeMillis(16);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer0.writeNumber(0.0F);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals(8, jsonToken0.id());
      assertTrue(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isStructStart());
      assertNull(jsonToken0.asString());
      assertTrue(jsonToken0.isScalarValue());
      assertNotSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeTypeId(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(1480, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNotNull(tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(15, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(15, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      Float float0 = new Float(2049.96969235777);
      assertEquals(2049.9697F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer1.writeObject(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(15, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(15, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      
      tokenBuffer1.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(15, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory((SerializerFactory) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      ObjectMapper objectMapper4 = (ObjectMapper)tokenBuffer0.getCodec();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, objectMapper4.mixInCount());
      assertNotNull(objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(charArray0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      tokenBuffer_Parser0.overrideCurrentName("' (remaining: '");
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals("' (remaining: '", tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(97);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNotNull(tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)97);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer0._appendRaw(1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      String string0 = tokenBuffer_Parser0.getText();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(string0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeNumber(4237.8550723008);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      boolean boolean0 = tokenBuffer1.isClosed();
      assertFalse(boolean0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<Float> class0 = Float.class;
      ObjectReader objectReader0 = objectMapper0.reader(class0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((Locale) null);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader2, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      String string0 = tokenBuffer_Parser0.getValueAsString();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(string0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(charArray0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      tokenBuffer_Parser0.setCodec(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer_Parser0.overrideCurrentName("i (remainin>: '");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals("i (remainin>: '", tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertEquals(0, moduleArray0.length);
      
      try { 
        tokenBuffer_Parser1.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer0.writeNumber((short) (byte)67);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertSame(tokenBuffer0, tokenBuffer1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken0);
      assertFalse(jsonToken0.isBoolean());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isScalarValue());
      assertEquals(8, jsonToken0.id());
      assertFalse(jsonToken0.isStructEnd());
      assertTrue(jsonToken0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Integer integer0 = new Integer(442);
      assertEquals(442, (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloat());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.booleanValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNotNull(booleanNode0);
      
      tokenBuffer0.writeTree(booleanNode0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloat());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.booleanValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotNull(tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser2);
      
      tokenBuffer_Parser2.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Float float0 = new Float((double) 16);
      assertEquals(16.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      assertEquals(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES, jsonFactory_Feature0);
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(451, jsonToken0, (Object) tokenBuffer0, (Object) jsonFactory0, (Object) jsonFactory_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      Integer integer0 = new Integer(1049);
      assertEquals(1049, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer0.writeNumber((double) 16);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("JSON", 1049, (-4168));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(380, (-2930), (Object) fileSystemHandling0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Short short0 = new Short((short) (-542));
      assertEquals((short) (-542), (short)short0);
      assertNotNull(short0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      assertEquals(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES, jsonFactory_Feature0);
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) short0, (Object) null, (Object) jsonFactory_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.appendRaw(380, 16, (Object) fileSystemHandling0, (Object) null, (Object) tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertTrue(tokenBuffer_Segment3.hasIds());
      assertNotNull(tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment3, (ObjectCodec) null, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertTrue(tokenBuffer_Segment3.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      String string0 = tokenBuffer_Parser0.getText();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertTrue(tokenBuffer_Segment3.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(string0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      tokenBuffer0.firstToken();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.setLocale((Locale) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
      ObjectMapper objectMapper3 = objectMapper2.configure(mapperFeature0, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      ObjectWriter objectWriter0 = objectMapper3.writer((PrettyPrinter) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser1);
      
      boolean boolean0 = tokenBuffer_Parser0.hasTextCharacters();
      assertFalse(boolean0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotNull(tokenBuffer1);
      
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Short short0 = new Short((short)4985);
      assertEquals((short)4985, (short)short0);
      assertNotNull(short0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.util.TokenBuffer$Parser");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '(';
      charArray0[4] = '9';
      charArray0[5] = '3';
      charArray0[6] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 5, 3588, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'(', '&', '&', '(', '9', '3', '5'}, charArray0);
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(7, charArray0.length);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'(', '&', '&', '(', '9', '3', '5'}, charArray0);
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertNotNull(tokenBuffer0);
      assertEquals(7, charArray0.length);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setFeatureMask(33);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'(', '&', '&', '(', '9', '3', '5'}, charArray0);
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(33, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(33, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(charArray0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      tokenBuffer_Parser0.overrideCurrentName("fOQMxyRCAN");
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertEquals("fOQMxyRCAN", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      tokenBuffer_Parser1.nextToken();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      Object object0 = tokenBuffer_Parser1.getEmbeddedObject();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(object0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Float float0 = new Float((double) 16);
      assertEquals(16.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      assertEquals(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES, jsonFactory_Feature0);
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(451, jsonToken0, (Object) tokenBuffer0, (Object) jsonFactory0, (Object) jsonFactory_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      Integer integer0 = new Integer(1049);
      assertEquals(1049, (int)integer0);
      assertNotNull(integer0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNotNull(arrayNode0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-2575));
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.booleanValue());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals((-2575), numericNode0.intValue());
      assertFalse(numericNode0.isDouble());
      assertTrue(numericNode0.isInt());
      assertEquals((short) (-2575), numericNode0.shortValue());
      assertEquals((-2575.0F), numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals(0, numericNode0.size());
      assertEquals((-2575.0), numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertFalse(numericNode0.isShort());
      assertEquals((-2575L), numericNode0.longValue());
      assertFalse(numericNode0.isBigInteger());
      assertNull(numericNode0.textValue());
      assertNotNull(numericNode0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(64, 16, (Object) float0, (Object) integer0, (Object) arrayNode0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      int int0 = tokenBuffer0.getFeatureMask();
      assertEquals(79, int0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      Class<Object> class0 = Object.class;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isInterface());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertNotNull(mapType0);
      
      int int0 = tokenBuffer_Segment0.rawType((-3035));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser1);
      
      try { 
        tokenBuffer_Parser1.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0._next.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNotNull(tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.append((TokenBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Integer integer0 = Integer.valueOf(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(1480, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      objectMapper0.registerSubtypes(classArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, classArray0.length);
      
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(tokenBuffer0);
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertFalse(boolean0);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      
      boolean boolean1 = tokenBuffer0.canWriteBinaryNatively();
      assertTrue(boolean1);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      ObjectReader objectReader0 = objectMapper0.reader(class1);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      
      Class<ArrayList> class3 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class3, class2);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionType0.hasGenericTypes());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertNotNull(collectionType0);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertSame(class2, class0);
      assertSame(class2, class1);
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(collectionType0.hasGenericTypes());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasGenericTypes());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertNotNull(collectionType1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      
      boolean boolean2 = collectionType0.isThrowable();
      assertFalse(boolean2);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionType0.hasGenericTypes());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertNotSame(collectionType0, collectionType1);
      assertSame(class2, class0);
      assertSame(class2, class1);
      
      CollectionLikeType collectionLikeType0 = collectionType1.withTypeHandler(defaultDeserializationContext_Impl0);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionLikeType0.equals((Object)collectionType1));
      assertTrue(collectionLikeType0.equals((Object)collectionType0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(collectionType0.hasGenericTypes());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasGenericTypes());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.hasGenericTypes());
      assertNotNull(collectionLikeType0);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionLikeType0);
      assertNotSame(collectionType1, collectionLikeType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionLikeType0, collectionType0);
      assertNotSame(collectionLikeType0, collectionType1);
      
      ObjectWriter objectWriter0 = objectMapper1.writerWithType((JavaType) collectionLikeType0);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionLikeType0));
      assertTrue(collectionType1.equals((Object)collectionLikeType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionLikeType0.equals((Object)collectionType1));
      assertTrue(collectionLikeType0.equals((Object)collectionType0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(collectionType0.hasGenericTypes());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasGenericTypes());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.hasGenericTypes());
      assertTrue(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionLikeType0);
      assertNotSame(collectionType1, collectionLikeType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionLikeType0, collectionType0);
      assertNotSame(collectionLikeType0, collectionType1);
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      PropertyNamingStrategy.PascalCaseStrategy propertyNamingStrategy_PascalCaseStrategy0 = (PropertyNamingStrategy.PascalCaseStrategy)PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE;
      assertNotNull(propertyNamingStrategy_PascalCaseStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper0.findAndRegisterModules();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper objectMapper3 = objectMapper1.addHandler(deserializationProblemHandler0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
      Class<Module> class0 = Module.class;
      ObjectReader objectReader0 = objectMapper3.reader(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(simpleType0);
      
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.useStaticType());
      assertNotNull(mapType0);
      
      PropertyName propertyName0 = PropertyName.construct(", can not serialize", ", can not serialize");
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(propertyName0);
      
      ObjectIdGenerator<BigInteger> objectIdGenerator0 = (ObjectIdGenerator<BigInteger>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) mapType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, true);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.useStaticType());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(objectIdWriter0);
      
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer(jsonSerializer0);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.useStaticType());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(objectIdWriter1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      
      SerializedString serializedString0 = (SerializedString)objectIdWriter1.propertyName;
      assertEquals(", can not serialize", serializedString0.getValue());
      assertEquals(19, serializedString0.charLength());
      assertEquals(", can not serialize", serializedString0.toString());
      assertNotNull(serializedString0);
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter1));
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertEquals(", can not serialize", serializedString0.getValue());
      assertEquals(19, serializedString0.charLength());
      assertEquals(", can not serialize", serializedString0.toString());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.useStaticType());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Object object0 = tokenBuffer_Segment0.findTypeId(51);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(object0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      Byte byte0 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte0);
      assertNotNull(byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(2207, jsonToken0, (Object) byte0, (Object) jsonToken0, (Object) tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper3, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) objectMapper2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(tokenBuffer_Segment3.hasIds());
      assertNotNull(tokenBuffer_Segment3);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(dupDetector0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(51, 16, dupDetector0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, jsonReadContext0.getCurrentIndex());
      assertNull(jsonReadContext0.getCurrentName());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertTrue(jsonReadContext0.inRoot());
      assertFalse(jsonReadContext0.inObject());
      assertFalse(jsonReadContext0.inArray());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertNotNull(jsonReadContext0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, dupDetector0, 16, 5, 10);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonReadContext1.equals((Object)jsonReadContext0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, jsonReadContext0.getCurrentIndex());
      assertNull(jsonReadContext0.getCurrentName());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertTrue(jsonReadContext0.inRoot());
      assertFalse(jsonReadContext0.inObject());
      assertFalse(jsonReadContext0.inArray());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonReadContext1.getEntryCount());
      assertFalse(jsonReadContext1.inObject());
      assertFalse(jsonReadContext1.inArray());
      assertNull(jsonReadContext1.getCurrentName());
      assertFalse(jsonReadContext1.inRoot());
      assertEquals(0, jsonReadContext1.getCurrentIndex());
      assertEquals("?", jsonReadContext1.getTypeDesc());
      assertNotNull(jsonReadContext1);
      
      tokenBuffer_Parser0._parsingContext = jsonReadContext1;
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, jsonReadContext0.getCurrentIndex());
      assertNull(jsonReadContext0.getCurrentName());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertTrue(jsonReadContext0.inRoot());
      assertFalse(jsonReadContext0.inObject());
      assertFalse(jsonReadContext0.inArray());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonReadContext1.getEntryCount());
      assertFalse(jsonReadContext1.inObject());
      assertFalse(jsonReadContext1.inArray());
      assertNull(jsonReadContext1.getCurrentName());
      assertFalse(jsonReadContext1.inRoot());
      assertEquals(0, jsonReadContext1.getCurrentIndex());
      assertEquals("?", jsonReadContext1.getTypeDesc());
      assertEquals("?", tokenBuffer_Parser0._parsingContext.getTypeDesc());
      assertFalse(tokenBuffer_Parser0._parsingContext.inArray());
      assertFalse(tokenBuffer_Parser0._parsingContext.inObject());
      assertFalse(tokenBuffer_Parser0._parsingContext.inRoot());
      assertEquals(0, tokenBuffer_Parser0._parsingContext.getEntryCount());
      assertEquals(0, tokenBuffer_Parser0._parsingContext.getCurrentIndex());
      assertNull(tokenBuffer_Parser0._parsingContext.getCurrentName());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser0.getParsingContext();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonStreamContext0.equals((Object)jsonReadContext0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(jsonStreamContext0.getCurrentName());
      assertFalse(jsonStreamContext0.inArray());
      assertFalse(jsonStreamContext0.inRoot());
      assertEquals("?", jsonStreamContext0.getTypeDesc());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertFalse(jsonStreamContext0.inObject());
      assertNotNull(jsonStreamContext0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(jsonStreamContext0, jsonReadContext0);
      assertSame(jsonStreamContext0, jsonReadContext1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0._next.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      short short0 = (short) (-1066);
      Class<String> class0 = String.class;
      try { 
        tokenBuffer_Parser1.readValueAs(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer0.writeNumber((short) (byte)67);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer_Parser0.overrideCurrentName("RQ/hs4.&-y!");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals("RQ/hs4.&-y!", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer1._appendRaw(390, (Object) null);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNotNull(tokenBuffer2);
      
      TokenBuffer tokenBuffer3 = (TokenBuffer)tokenBuffer1.setHighestNonEscapedChar(390);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertNotNull(tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      
      tokenBuffer2.writeNumber((int) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNotNull(tokenBuffer_Parser2);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = (TokenBuffer.Parser)tokenBuffer_Parser2.setFeatureMask(1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(1, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertFalse(tokenBuffer_Parser3.canReadTypeId());
      assertEquals(1, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertNotNull(tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser3);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(1, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertFalse(tokenBuffer_Parser3.canReadTypeId());
      assertEquals(1, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser4 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer_Parser4.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser4.getFeatureMask());
      assertFalse(tokenBuffer_Parser4.requiresCustomCodec());
      assertNull(tokenBuffer_Parser4.getCurrentName());
      assertFalse(tokenBuffer_Parser4.hasTextCharacters());
      assertFalse(tokenBuffer_Parser4.hasCurrentToken());
      assertTrue(tokenBuffer_Parser4.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser4.getCurrentTokenId());
      assertNull(tokenBuffer_Parser4.peekNextToken());
      assertFalse(tokenBuffer_Parser4.isClosed());
      assertEquals(0, tokenBuffer_Parser4.getTextOffset());
      assertNull(tokenBuffer_Parser4.getCurrentToken());
      assertTrue(tokenBuffer_Parser4.canReadObjectId());
      assertNotNull(tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser4);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser2);
      
      TokenBuffer.Parser tokenBuffer_Parser5 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser4));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser4));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser5.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser5.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser5.equals((Object)tokenBuffer_Parser4));
      assertFalse(tokenBuffer_Parser5.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser5.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Parser5.isClosed());
      assertTrue(tokenBuffer_Parser5.canReadObjectId());
      assertFalse(tokenBuffer_Parser5.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser5.getCurrentTokenId());
      assertNull(tokenBuffer_Parser5.getCurrentToken());
      assertFalse(tokenBuffer_Parser5.requiresCustomCodec());
      assertNull(tokenBuffer_Parser5.peekNextToken());
      assertEquals(0, tokenBuffer_Parser5.getFeatureMask());
      assertTrue(tokenBuffer_Parser5.canReadTypeId());
      assertNull(tokenBuffer_Parser5.getLastClearedToken());
      assertFalse(tokenBuffer_Parser5.hasTextCharacters());
      assertNull(tokenBuffer_Parser5.getCurrentName());
      assertEquals(0, tokenBuffer_Parser5.getTextOffset());
      assertNotNull(tokenBuffer_Parser5);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser4);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser5);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser5);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser5, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser5, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser5, tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser5, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser5, tokenBuffer_Parser3);
      
      Version version0 = tokenBuffer_Parser2.version();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser4));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser5));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(1, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(4, version0.getMinorVersion());
      assertEquals(4, version0.getPatchLevel());
      assertTrue(version0.isSnapshot());
      assertNotNull(version0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser5);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)17152, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer0._appendRaw(1, objectMapper_DefaultTyping0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRaw("JSON");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(97);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer0.writeString((SerializableString) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotNull(simpleType0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(3, deserializationFeatureArray0.length);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Integer integer0 = new Integer(442);
      assertEquals(442, (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      PropertyNamingStrategy.PascalCaseStrategy propertyNamingStrategy_PascalCaseStrategy0 = (PropertyNamingStrategy.PascalCaseStrategy)PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE;
      assertNotNull(propertyNamingStrategy_PascalCaseStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper0.findAndRegisterModules();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ObjectMapper objectMapper3 = objectMapper1.addHandler(deserializationProblemHandler0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      Class<Module> class0 = Module.class;
      ObjectReader objectReader0 = objectMapper3.reader(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(simpleType0);
      
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasGenericTypes());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertNotNull(mapType0);
      
      PropertyName propertyName0 = PropertyName.construct(", can not serialize", ", can not serialize");
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(propertyName0);
      
      ObjectIdGenerator<BigInteger> objectIdGenerator0 = (ObjectIdGenerator<BigInteger>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) mapType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, true);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasGenericTypes());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(objectIdWriter0);
      
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer(jsonSerializer0);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasGenericTypes());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(objectIdWriter1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      
      PropertyName propertyName1 = propertyName0.withSimpleName(", can not serialize");
      assertEquals(", can not serialize", propertyName1.getSimpleName());
      assertTrue(propertyName1.hasSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertTrue(propertyName1.hasNamespace());
      assertEquals(", can not serialize", propertyName1.getNamespace());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(propertyName1);
      assertSame(propertyName1, propertyName0);
      assertSame(propertyName0, propertyName1);
      
      MapType mapType1 = mapType0.withTypeHandler(objectIdWriter0);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter1));
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasGenericTypes());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasGenericTypes());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertNotNull(mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType0, mapType1);
      assertSame(propertyName0, propertyName1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      
      SerializedString serializedString0 = (SerializedString)objectIdWriter0.propertyName;
      assertEquals(", can not serialize", serializedString0.getValue());
      assertEquals(", can not serialize", serializedString0.toString());
      assertEquals(19, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      tokenBuffer0.writeString(objectIdWriter1.propertyName);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter1));
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasGenericTypes());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertEquals(", can not serialize", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(", can not serialize", propertyName0.getNamespace());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(mapType0, mapType1);
      assertSame(propertyName0, propertyName1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.VALUE_STRING, jsonToken0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isScalarValue());
      assertEquals(6, jsonToken0.id());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructStart());
      assertNull(jsonToken0.asString());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(77, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(77, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      BigDecimal bigDecimal0 = new BigDecimal(16);
      assertEquals((short)16, bigDecimal0.shortValue());
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(77, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals((short)16, bigDecimal0.shortValue());
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeString("com.fasterxml.jackson.databind.util.LRUMap");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer0.firstToken();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeEndArray();
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer0._appendRaw(1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      tokenBuffer0.writeNumber((int) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer0._appendRaw(1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.setCodec(objectMapper0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      tokenBuffer0.writeNumber((int) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      boolean boolean1 = jsonFactory0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer0.firstToken();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(object0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(string0);
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'U';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 16, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", can not serialize");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask((-1861));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals((-1861), tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals((-1861), tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0._next.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      short short0 = (short) (-1042);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "[typeId=");
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertNotNull(arrayNode0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer_Parser1.setFeatureMask(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNotNull(tokenBuffer_Parser2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      
      tokenBuffer0.writeFieldName("[typeId=");
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = (TokenBuffer.Parser)tokenBuffer1.asParser((ObjectCodec) objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.canReadTypeId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser4 = (TokenBuffer.Parser)tokenBuffer1.asParser((ObjectCodec) objectMapper1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser4.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser4.isClosed());
      assertFalse(tokenBuffer_Parser4.hasCurrentToken());
      assertNull(tokenBuffer_Parser4.getCurrentToken());
      assertNull(tokenBuffer_Parser4.peekNextToken());
      assertFalse(tokenBuffer_Parser4.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser4.getCurrentTokenId());
      assertNull(tokenBuffer_Parser4.getCurrentName());
      assertFalse(tokenBuffer_Parser4.canReadTypeId());
      assertNull(tokenBuffer_Parser4.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser4.getTextOffset());
      assertFalse(tokenBuffer_Parser4.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser4.getFeatureMask());
      assertTrue(tokenBuffer_Parser4.canReadObjectId());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser4, tokenBuffer_Parser2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper1);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(tokenBuffer2);
      
      TokenBuffer tokenBuffer3 = (TokenBuffer)tokenBuffer1.useDefaultPrettyPrinter();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser4));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer3);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      Object object0 = tokenBuffer_Parser1.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser4));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(object0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser4);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0._next.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNotNull(tokenBuffer_Parser1);
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      TreeMap<String, JsonNode> treeMap0 = new TreeMap<String, JsonNode>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, treeMap0);
      assertEquals(0, treeMap0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("dG~9sVV|0`d7fb{", 84);
      assertEquals(1, treeMap0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode1.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      tokenBuffer0.writeTree(objectNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(1, treeMap0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode1.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 16, 1788);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeString("JSON");
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isDouble());
      assertNotNull(objectNode0);
      
      tokenBuffer0.writeTree(objectNode0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isDouble());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (-495));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray0);
      assertEquals((short)17152, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray0);
      assertEquals((short)17152, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)17152, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      assertEquals(2, byteArray0.length);
      
      tokenBuffer0._appendRaw(1, objectMapper_DefaultTyping0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.setCodec(objectMapper0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      tokenBuffer1.writeNumber((int) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(charArray0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer1.writeNumberField("Direct self-reference leading to cycle", (-77));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      String string0 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT, FIELD_NAME(Direct self-reference leading to cycle), VALUE_NUMBER_INT]", string0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer1.writeNull();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNotNull(tokenBuffer2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      tokenBuffer2.writeBinaryField("1MpGk`p<", byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)67, (byte)67}, byteArray0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertEquals(4, byteArray0.length);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      tokenBuffer1.serialize(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte)67);
      assertEquals((byte)67, bigDecimal0.byteValue());
      assertEquals((short)67, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer2.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((byte)67, bigDecimal0.byteValue());
      assertEquals((short)67, bigDecimal0.shortValue());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      String string1 = tokenBuffer_Parser0.getText();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(string1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      JsonToken jsonToken0 = tokenBuffer2.firstToken();
      assertEquals(JsonToken.FIELD_NAME, jsonToken0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(5, jsonToken0.id());
      assertFalse(jsonToken0.isScalarValue());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isBoolean());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Integer integer0 = new Integer(442);
      assertEquals(442, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Boolean boolean0 = Boolean.valueOf("JSON");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken0);
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isBoolean());
      assertEquals(8, jsonToken0.id());
      assertTrue(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isScalarValue());
      assertNull(jsonToken0.asString());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('w');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(12);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(12, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(12, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      assertEquals(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW, jsonFactory_Feature0);
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      
      Short short0 = new Short((short) (-1924));
      assertEquals((short) (-1924), (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0.writeObject(short0);
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser2);
      
      tokenBuffer_Parser1.overrideCurrentName("");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(12, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals("", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(12, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals("", tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser2.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotNull(tokenBuffer_Parser1);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser1.getCodec();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(objectMapper1, objectMapper0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer1.asParser((ObjectCodec) objectMapper1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser1.peekNextToken());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer1.asParser((ObjectCodec) objectMapper1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNotNull(tokenBuffer_Parser2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotNull(tokenBuffer2);
      
      TokenBuffer tokenBuffer3 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertNotNull(tokenBuffer3);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer0);
      
      tokenBuffer0.writeNumber((-3339L));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      
      TokenBuffer tokenBuffer4 = tokenBuffer2.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer4.isClosed());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer4.firstToken());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertTrue(tokenBuffer4.canWriteObjectId());
      assertTrue(tokenBuffer4.canWriteTypeId());
      assertTrue(tokenBuffer4.canOmitFields());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertNotNull(tokenBuffer4);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer4);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      assertNotSame(tokenBuffer4, tokenBuffer1);
      assertSame(tokenBuffer4, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      
      JsonToken jsonToken0 = tokenBuffer3.firstToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer4));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(7, jsonToken0.id());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isNumeric());
      assertTrue(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructStart());
      assertNull(jsonToken0.asString());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer4);
      assertSame(tokenBuffer3, tokenBuffer0);
      
      Object object0 = tokenBuffer_Parser2.getEmbeddedObject();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNull(object0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(97);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeBoolean(true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNotNull(tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser3.peekNextToken());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      TokenBuffer tokenBuffer3 = tokenBuffer0.append(tokenBuffer1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertNotNull(tokenBuffer3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      
      TokenBuffer tokenBuffer4 = (TokenBuffer)tokenBuffer2.useDefaultPrettyPrinter();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer4.firstToken());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteObjectId());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertTrue(tokenBuffer4.canWriteTypeId());
      assertFalse(tokenBuffer4.isClosed());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotNull(tokenBuffer4);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      assertSame(tokenBuffer4, tokenBuffer2);
      assertSame(tokenBuffer4, tokenBuffer1);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer4);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      
      tokenBuffer2.writeEndArray();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer4);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(boolean1 == boolean0);
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "[typeId=");
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Integer integer0 = new Integer((-2073));
      assertEquals((-2073), (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1152, 6, (Object) objectMapper1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      tokenBuffer0.writeNull();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeFieldName("JSON");
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment1.rawType(451);
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((float) 16);
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isBigDecimal());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isLong());
      assertEquals(16, numericNode0.intValue());
      assertFalse(numericNode0.isDouble());
      assertEquals(0, numericNode0.size());
      assertTrue(numericNode0.canConvertToInt());
      assertNull(numericNode0.textValue());
      assertEquals(16.0F, numericNode0.floatValue(), 0.01F);
      assertEquals((short)16, numericNode0.shortValue());
      assertEquals(JsonParser.NumberType.FLOAT, numericNode0.numberType());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(16.0, numericNode0.doubleValue(), 0.01);
      assertTrue(numericNode0.isFloat());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertEquals(16L, numericNode0.longValue());
      assertNotNull(numericNode0);
      
      TextNode textNode0 = TextNode.valueOf("JSON");
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("JSON", textNode0.asText());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isFloat());
      assertNull(textNode0.numberType());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isLong());
      assertEquals("JSON", textNode0.textValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertNotNull(textNode0);
      
      tokenBuffer0.writeTree(textNode0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("JSON", textNode0.asText());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isFloat());
      assertNull(textNode0.numberType());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isLong());
      assertEquals("JSON", textNode0.textValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(tokenBuffer1);
      
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasGenericTypes());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withValueHandler((Object) null);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasGenericTypes());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasGenericTypes());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      
      MapType mapType0 = MapType.construct(class0, collectionType1, collectionType1);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasGenericTypes());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasGenericTypes());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertNotNull(mapType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      
      Object object0 = tokenBuffer1._objectId;
      assertNull(object0);
      
      MapType mapType1 = mapType0.withContentValueHandler((Object) null);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasGenericTypes());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasGenericTypes());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasGenericTypes());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertNotNull(mapType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      JavaType javaType0 = objectMapper0.constructType(mapType1);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(javaType0.equals((Object)mapType0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasGenericTypes());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasGenericTypes());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasGenericTypes());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasGenericTypes());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(javaType0.isMapLikeType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertEquals(2, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.hasGenericTypes());
      assertNotNull(javaType0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, javaType0);
      assertNotSame(mapType1, mapType0);
      assertSame(mapType1, javaType0);
      assertNotSame(javaType0, mapType0);
      assertSame(javaType0, mapType1);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer2);
      
      int int1 = tokenBuffer0.getFeatureMask();
      assertEquals(79, int1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(int1 == int0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      
      // Undeclared exception!
      try { 
        tokenBuffer1.writeUTF8String((byte[]) null, 16, (-2017));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (-495));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray0);
      assertEquals((short)17152, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer0._appendRaw(1, objectMapper_DefaultTyping0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotNull(tokenBuffer2);
      
      tokenBuffer2.writeObject((Object) null);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      try { 
        tokenBuffer_Parser0._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Integer integer0 = new Integer(451);
      assertEquals(451, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      SerializedString serializedString0 = new SerializedString("K`7|QMy");
      assertEquals("K`7|QMy", serializedString0.getValue());
      assertEquals(7, serializedString0.charLength());
      assertEquals("K`7|QMy", serializedString0.toString());
      assertNotNull(serializedString0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      assertEquals(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW, jsonFactory_Feature0);
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      
      Short short0 = new Short((short) (-3976));
      assertEquals((short) (-3976), (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeObject(jsonFactory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      ObjectMapper objectMapper3 = objectMapper2.configure(mapperFeature0, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper3.reader(deserializationFeature0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(97);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeBoolean(true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer0._first = tokenBuffer_Segment0;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0._first.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNotNull(tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertNotNull(tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNotNull(tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNotNull(tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      TokenBuffer tokenBuffer3 = tokenBuffer0.append(tokenBuffer1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer3);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer1, tokenBuffer2);
      
      TokenBuffer tokenBuffer4 = (TokenBuffer)tokenBuffer2.useDefaultPrettyPrinter();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertTrue(tokenBuffer4.canWriteTypeId());
      assertFalse(tokenBuffer4.isClosed());
      assertTrue(tokenBuffer4.canWriteObjectId());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertNull(tokenBuffer4.firstToken());
      assertTrue(tokenBuffer4.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNotNull(tokenBuffer4);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      assertSame(tokenBuffer4, tokenBuffer1);
      assertSame(tokenBuffer4, tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer4);
      
      tokenBuffer2.writeEndArray();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer4);
      
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(boolean1 == boolean0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      int int0 = tokenBuffer_Parser1.getTextOffset();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(97, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(97, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Base64Variant base64Variant0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser0.getShortValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      
      Object object0 = tokenBuffer_Parser0.getInputSource();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(object0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      Object object1 = tokenBuffer_Parser0.getTypeId();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(object1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      assertEquals("JSON", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1, 93, (Object) null, (Object) null, (Object) simpleModule0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", simpleModule0.getModuleName());
      assertNull(tokenBuffer_Segment1);
      
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      assertEquals(JsonFactory.Feature.INTERN_FIELD_NAMES, jsonFactory_Feature0);
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(12, jsonToken0, (Object) jsonFactory_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertNull(tokenBuffer_Segment2);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Parser1);
      
      tokenBuffer_Parser1.overrideCurrentName("' can not be resolved (with context of class ");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals("' can not be resolved (with context of class ", tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotNull(tokenBuffer1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)17152, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(">");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.close();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (-495));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeNumber(945.172416);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("", 0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      
      tokenBuffer_Parser1.nextToken();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser1.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      tokenBuffer0.writeNull();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper1, true);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNotNull(tokenBuffer2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer3 = (TokenBuffer)tokenBuffer2.configure(jsonGenerator_Feature0, true);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(111, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(111, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNotNull(tokenBuffer3);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      String string1 = tokenBuffer_Parser0.getText();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(string1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Integer integer0 = new Integer(180);
      assertEquals(180, (int)integer0);
      assertNotNull(integer0);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Integer integer1 = new Integer(3694);
      assertEquals(3694, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3966, jsonToken0, (Object) integer1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(3694, 180, (Object) tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotNull(tokenBuffer1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken1);
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(jsonToken1.isStructStart());
      assertTrue(jsonToken1.isNumeric());
      assertEquals(8, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertFalse(jsonToken1.isBoolean());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertNotSame(jsonToken1, jsonToken0);
      
      IntNode intNode0 = IntNode.valueOf(1285);
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isLong());
      assertEquals(0, intNode0.size());
      assertEquals(1285.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(1285, intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(1285L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertEquals(1285.0, intNode0.doubleValue(), 0.01);
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short)1285, intNode0.shortValue());
      assertNotNull(intNode0);
      
      tokenBuffer0.writeTree(intNode0);
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isLong());
      assertEquals(0, intNode0.size());
      assertEquals(1285.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(1285, intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(1285L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertEquals(1285.0, intNode0.doubleValue(), 0.01);
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short)1285, intNode0.shortValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Float float0 = new Float((float) 3);
      assertEquals(3.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(3, 2130, (Object) float0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '@';
      charArray0[2] = 'q';
      charArray0[3] = 'c';
      charArray0[4] = 'o';
      charArray0[5] = 'E';
      charArray0[6] = 'O';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertArrayEquals(new char[] {'{', '@', 'q', 'c', 'o', 'E', 'O'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(7, charArray0.length);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, readerBasedJsonParser0);
      assertArrayEquals(new char[] {'{', '@', 'q', 'c', 'o', 'E', 'O'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(jsonParserSequence0);
      assertEquals(7, charArray0.length);
      
      JsonLocation jsonLocation0 = jsonParserSequence0.getCurrentLocation();
      assertArrayEquals(new char[] {'{', '@', 'q', 'c', 'o', 'E', 'O'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(jsonLocation0);
      assertEquals(7, charArray0.length);
      
      tokenBuffer_Parser0._location = jsonLocation0;
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1L), tokenBuffer_Parser0._location.getCharOffset());
      assertEquals((-1), tokenBuffer_Parser0._location.getColumnNr());
      assertEquals((-1L), tokenBuffer_Parser0._location.getByteOffset());
      assertEquals((-1), tokenBuffer_Parser0._location.getLineNr());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(4000, jsonToken0, (Object) null, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      tokenBuffer_Segment1._tokenTypes = (-416L);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(treeMap0);
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertEquals(0, treeMap0.size());
      assertNotNull(contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper2.reader(contextAttributes1);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, treeMap0.size());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectReader0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, treeMap0.size());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser0);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, treeMap0.size());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, treeMap0.size());
      assertNotNull(tokenBuffer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String((byte[]) null, 16, (-4851));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      
      boolean boolean1 = true;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.configure(jsonGenerator_Feature0, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(95, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(95, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNotNull(tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      TokenBuffer tokenBuffer3 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(95, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertNotNull(tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      
      TokenBuffer tokenBuffer4 = tokenBuffer1.append(tokenBuffer3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(95, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertNull(tokenBuffer4.firstToken());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertTrue(tokenBuffer4.canWriteObjectId());
      assertEquals(95, tokenBuffer4.getFeatureMask());
      assertTrue(tokenBuffer4.canWriteTypeId());
      assertFalse(tokenBuffer4.isClosed());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertNotNull(tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer4);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertSame(tokenBuffer4, tokenBuffer1);
      assertSame(tokenBuffer4, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      
      TokenBuffer tokenBuffer5 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer5.canWriteBinaryNatively());
      assertNull(tokenBuffer5.firstToken());
      assertTrue(tokenBuffer5.canOmitFields());
      assertEquals(79, tokenBuffer5.getFeatureMask());
      assertTrue(tokenBuffer5.canWriteObjectId());
      assertFalse(tokenBuffer5.isClosed());
      assertTrue(tokenBuffer5.canWriteTypeId());
      assertEquals(0, tokenBuffer5.getHighestEscapedChar());
      assertNotNull(tokenBuffer5);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer5);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer5, tokenBuffer0);
      assertNotSame(tokenBuffer5, tokenBuffer2);
      assertNotSame(tokenBuffer5, tokenBuffer4);
      assertSame(tokenBuffer5, tokenBuffer3);
      assertNotSame(tokenBuffer5, tokenBuffer1);
      
      TokenBuffer tokenBuffer6 = tokenBuffer5.append(tokenBuffer3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer5));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(95, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertTrue(tokenBuffer5.canWriteBinaryNatively());
      assertNull(tokenBuffer5.firstToken());
      assertTrue(tokenBuffer5.canOmitFields());
      assertEquals(79, tokenBuffer5.getFeatureMask());
      assertTrue(tokenBuffer5.canWriteObjectId());
      assertFalse(tokenBuffer5.isClosed());
      assertTrue(tokenBuffer5.canWriteTypeId());
      assertEquals(0, tokenBuffer5.getHighestEscapedChar());
      assertTrue(tokenBuffer6.canOmitFields());
      assertTrue(tokenBuffer6.canWriteObjectId());
      assertTrue(tokenBuffer6.canWriteBinaryNatively());
      assertNull(tokenBuffer6.firstToken());
      assertEquals(0, tokenBuffer6.getHighestEscapedChar());
      assertTrue(tokenBuffer6.canWriteTypeId());
      assertFalse(tokenBuffer6.isClosed());
      assertEquals(79, tokenBuffer6.getFeatureMask());
      assertNotNull(tokenBuffer6);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer6);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer5);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer5);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer6);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer5);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer6);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer4);
      assertSame(tokenBuffer5, tokenBuffer0);
      assertNotSame(tokenBuffer5, tokenBuffer2);
      assertNotSame(tokenBuffer5, tokenBuffer4);
      assertSame(tokenBuffer5, tokenBuffer6);
      assertSame(tokenBuffer5, tokenBuffer3);
      assertNotSame(tokenBuffer5, tokenBuffer1);
      assertNotSame(tokenBuffer6, tokenBuffer2);
      assertSame(tokenBuffer6, tokenBuffer3);
      assertNotSame(tokenBuffer6, tokenBuffer4);
      assertNotSame(tokenBuffer6, tokenBuffer1);
      assertSame(tokenBuffer6, tokenBuffer0);
      assertSame(tokenBuffer6, tokenBuffer5);
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer6);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer5);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      
      TokenBuffer tokenBuffer7 = new TokenBuffer(objectMapper0, true);
      assertFalse(tokenBuffer7.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer7.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer7.equals((Object)tokenBuffer5));
      assertFalse(tokenBuffer7.equals((Object)tokenBuffer6));
      assertFalse(tokenBuffer7.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer7.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer7.equals((Object)tokenBuffer3));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer7.getHighestEscapedChar());
      assertTrue(tokenBuffer7.canWriteObjectId());
      assertEquals(79, tokenBuffer7.getFeatureMask());
      assertFalse(tokenBuffer7.isClosed());
      assertTrue(tokenBuffer7.canWriteTypeId());
      assertTrue(tokenBuffer7.canOmitFields());
      assertTrue(tokenBuffer7.canWriteBinaryNatively());
      assertNull(tokenBuffer7.firstToken());
      assertNotNull(tokenBuffer7);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer7._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonWriteContext jsonWriteContext0 = tokenBuffer5.getOutputContext();
      assertEquals(0, JsonWriteContext.STATUS_OK_AS_IS);
      assertEquals(4, JsonWriteContext.STATUS_EXPECT_VALUE);
      assertEquals(2, JsonWriteContext.STATUS_OK_AFTER_COLON);
      assertEquals(5, JsonWriteContext.STATUS_EXPECT_NAME);
      assertEquals(3, JsonWriteContext.STATUS_OK_AFTER_SPACE);
      assertEquals(1, JsonWriteContext.STATUS_OK_AFTER_COMMA);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer7));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer7));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer1));
      assertFalse(jsonWriteContext0.inArray());
      assertFalse(jsonWriteContext0.inObject());
      assertNull(jsonWriteContext0.getCurrentName());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(0, jsonWriteContext0.getCurrentIndex());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer5.canWriteBinaryNatively());
      assertTrue(tokenBuffer5.canOmitFields());
      assertEquals(79, tokenBuffer5.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer5.firstToken());
      assertTrue(tokenBuffer5.canWriteObjectId());
      assertFalse(tokenBuffer5.isClosed());
      assertTrue(tokenBuffer5.canWriteTypeId());
      assertEquals(0, tokenBuffer5.getHighestEscapedChar());
      assertNotNull(jsonWriteContext0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer6);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer7);
      assertSame(tokenBuffer0, tokenBuffer5);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer5, tokenBuffer0);
      assertNotSame(tokenBuffer5, tokenBuffer2);
      assertNotSame(tokenBuffer5, tokenBuffer7);
      assertNotSame(tokenBuffer5, tokenBuffer4);
      assertSame(tokenBuffer5, tokenBuffer6);
      assertSame(tokenBuffer5, tokenBuffer3);
      assertNotSame(tokenBuffer5, tokenBuffer1);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-2203), (-2203), (Object) jsonGenerator_Feature0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2203
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Integer integer0 = new Integer(3966);
      assertEquals(3966, (int)integer0);
      assertNotNull(integer0);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(0, jsonToken0, (Object) "JSON");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(64, 11, (Object) jsonFactory0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: START_ARRAY]", string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertSame(objectMapper0, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(75, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNotNull(tokenBuffer1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken1);
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertFalse(jsonToken1.isStructStart());
      assertEquals(8, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertTrue(jsonToken1.isNumeric());
      assertFalse(jsonToken1.isBoolean());
      assertNotSame(jsonToken1, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer1.writeNumberField("Direct self-reference leading to cycle", (-77));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      String string0 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT, FIELD_NAME(Direct self-reference leading to cycle), VALUE_NUMBER_INT]", string0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer1.writeNull();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) (-77));
      assertEquals((short) (-77), bigDecimal0.shortValue());
      assertEquals((byte) (-77), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      String string1 = tokenBuffer_Parser0.getText();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(string1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Float float0 = new Float((double) 16);
      assertEquals(16.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      assertEquals(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES, jsonFactory_Feature0);
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(451, jsonToken0, (Object) tokenBuffer0, (Object) jsonFactory0, (Object) jsonFactory_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory_Feature0.enabledByDefault());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      Integer integer0 = new Integer(1049);
      assertEquals(1049, (int)integer0);
      assertNotNull(integer0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertNotNull(arrayNode0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-2575));
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertFalse(numericNode0.booleanValue());
      assertTrue(numericNode0.canConvertToInt());
      assertEquals((short) (-2575), numericNode0.shortValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals((-2575L), numericNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals((-2575), numericNode0.intValue());
      assertEquals((-2575.0), numericNode0.doubleValue(), 0.01);
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isFloat());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isLong());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isShort());
      assertEquals((-2575.0F), numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.canConvertToLong());
      assertNotNull(numericNode0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(64, 16, (Object) float0, (Object) integer0, (Object) arrayNode0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      Version version0 = tokenBuffer0.version();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(version0.isUknownVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertTrue(version0.isSnapshot());
      assertEquals(4, version0.getMinorVersion());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(4, version0.getPatchLevel());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertNotNull(version0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(506, jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(8000, 856, (Object) pipedInputStream0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(string0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      tokenBuffer0.writeNull();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertNotNull(tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      tokenBuffer0.writeEndObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken1);
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertTrue(jsonToken1.isNumeric());
      assertFalse(jsonToken1.isStructStart());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertFalse(jsonToken1.isBoolean());
      assertEquals(8, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertNotSame(jsonToken1, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Integer integer0 = new Integer(451);
      assertEquals(451, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Boolean boolean0 = new Boolean("JSON");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken0);
      assertTrue(jsonToken0.isScalarValue());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals(8, jsonToken0.id());
      assertFalse(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isNumeric());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((InputStream) byteArrayInputStream0, (-11));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      byte byte0 = (byte)67;
      tokenBuffer0.writeNumber((short) (byte)67);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(75, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      tokenBuffer1.writeObjectId("YAviu-@W");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(75, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      Object object0 = tokenBuffer0.getOutputTarget();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(object0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(32, jsonToken0, (Object) tokenBuffer0, (Object) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(77, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(77, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      BigDecimal bigDecimal0 = new BigDecimal(16);
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertEquals((short)16, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(77, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(tokenBuffer0, tokenBuffer1);
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(77, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Integer integer0 = new Integer(64);
      assertEquals(64, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = (-2142);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonToken jsonToken1 = JsonToken.START_OBJECT;
      Float float0 = new Float((float) (-2142));
      assertEquals((-2142.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(451, jsonToken1, (Object) jsonToken1, (Object) float0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      try { 
        tokenBuffer_Parser0.readValueAs(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of com.fasterxml.jackson.core.JsonFactory$Feature out of START_OBJECT token
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(451);
      assertEquals(451, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken0);
      assertEquals(8, jsonToken0.id());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isScalarValue());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isNumeric());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      mapperFeatureArray0[2] = mapperFeature2;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(3, mapperFeatureArray0.length);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(3, mapperFeatureArray0.length);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(3, mapperFeatureArray0.length);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, true, false);
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(3, mapperFeatureArray0.length);
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(3, mapperFeatureArray0.length);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(tokenBuffer0);
      assertEquals(3, mapperFeatureArray0.length);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeObject(objectMapper3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumber("LSJ>~&Ie|U8>09");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Integer integer0 = Integer.valueOf(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(visibilityChecker0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      Short short0 = new Short((short)537);
      assertEquals((short)537, (short)short0);
      assertNotNull(short0);
      
      FloatNode floatNode0 = new FloatNode(16);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertEquals(16.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertEquals(16L, floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(16, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((short)16, floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertEquals(16.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNotNull(floatNode0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      floatNode0.serialize(tokenBuffer0, defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertEquals(16.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertEquals(16L, floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(16, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((short)16, floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertEquals(16.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3, jsonToken0, (Object) jsonToken0, (Object) objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Segment1);
      
      BigDecimal bigDecimal0 = floatNode0.decimalValue();
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertEquals(16.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertEquals(16L, floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(16, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((short)16, floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertEquals(16.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((short)16, bigDecimal0.shortValue());
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertEquals(16.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertEquals(16L, floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(16, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((short)16, floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertEquals(16.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((short)16, bigDecimal0.shortValue());
      assertEquals((byte)16, bigDecimal0.byteValue());
      
      JsonToken jsonToken1 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken1);
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(jsonToken1.isNumeric());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertFalse(jsonToken1.isStructStart());
      assertFalse(jsonToken1.isBoolean());
      assertEquals(8, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertNotSame(jsonToken1, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Integer integer0 = new Integer(442);
      assertEquals(442, (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(bigInteger0, bigInteger1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Integer integer0 = Integer.valueOf(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(visibilityChecker0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      Short short0 = new Short((short)537);
      assertEquals((short)537, (short)short0);
      assertNotNull(short0);
      
      FloatNode floatNode0 = new FloatNode(16);
      assertEquals(16, floatNode0.intValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(16.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(16L, floatNode0.longValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals(16.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((short)16, floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertNotNull(floatNode0);
      
      BigDecimal bigDecimal0 = floatNode0.decimalValue();
      assertEquals(16, floatNode0.intValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(16.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(16L, floatNode0.longValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals(16.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((short)16, floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertEquals((short)16, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(16, floatNode0.intValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(16.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(16L, floatNode0.longValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals(16.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((short)16, floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertEquals((short)16, bigDecimal0.shortValue());
      
      Class<String> class0 = String.class;
      Class<Double> class1 = Double.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      assertEquals(1, objectMapper0.mixInCount());
      assertEquals(1, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertEquals(1, objectMapper0.mixInCount());
      assertEquals(1, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertEquals(1, objectMapper0.mixInCount());
      assertEquals(1, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNotNull(jsonParser0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertEquals(1, objectMapper0.mixInCount());
      assertEquals(1, objectMapper1.mixInCount());
      assertNotNull(deserializationContext0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      tokenBuffer0.writeNull();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      Float float0 = new Float((-1764.2343662738));
      assertEquals((-1764.2344F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      tokenBuffer0.writeObject(long0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertSame(tokenBuffer0, tokenBuffer1);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotNull(tokenBuffer_Parser1);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser1.getCodec();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeNumberField("gJEay`x`+6$?7", (-77));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertSame(objectMapper0, objectMapper1);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: FIELD_NAME(gJEay`x`+6$?7), VALUE_NUMBER_INT]", string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertSame(objectMapper0, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNotNull(tokenBuffer1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(string0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      tokenBuffer0.writeNull();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      Float float0 = new Float((double) (-77));
      assertEquals((-77.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, true);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertNull(tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertNotNull(tokenBuffer3);
      
      tokenBuffer3.writeObject(serializedString0);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.isClosed());
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      
      tokenBuffer3.serialize(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      
      tokenBuffer3.writeEndArray();
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.isClosed());
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 6, 6);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(1, charArray0.length);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeBooleanField("JSON", true);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)17152, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer1.serialize(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer0._appendRaw(1, objectMapper_DefaultTyping0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.setCodec(objectMapper0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer1.writeNumber((int) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000652; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNotNull(tokenBuffer1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer0.writeObject(float0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      tokenBuffer0.writeNumberField("gJEay`x`+6$?7", 67);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: FIELD_NAME(gJEay`x`+6$?7), VALUE_NUMBER_INT]", string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNotNull(string0);
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(78, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(78, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNotNull(tokenBuffer2);
      
      TokenBuffer tokenBuffer3 = tokenBuffer0.append(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(78, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(78, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNotNull(tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer1);
      
      tokenBuffer3.writeNumber((long) 16);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(78, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(78, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer1);
      
      TokenBuffer tokenBuffer4 = tokenBuffer2.append(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(78, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertFalse(tokenBuffer4.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer4.firstToken());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertFalse(tokenBuffer4.canWriteObjectId());
      assertTrue(tokenBuffer4.canOmitFields());
      assertNotNull(tokenBuffer4);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer2, tokenBuffer4);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer4, tokenBuffer1);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      assertSame(tokenBuffer4, tokenBuffer2);
      
      JsonToken jsonToken0 = tokenBuffer3.firstToken();
      assertEquals(JsonToken.FIELD_NAME, jsonToken0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer4));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(78, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(78, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals(5, jsonToken0.id());
      assertFalse(jsonToken0.isScalarValue());
      assertNull(jsonToken0.asString());
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer2, tokenBuffer4);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer4);
      assertSame(tokenBuffer3, tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(78, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(78, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(object0);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertNotNull(tokenBuffer2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer0.writeObject(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotNull(tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloat());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.asBoolean());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.booleanValue());
      assertNotNull(booleanNode0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeTree(booleanNode0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloat());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.asBoolean());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.booleanValue());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      Object object0 = tokenBuffer_Segment0.findTypeId(450);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask((byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNotNull(tokenBuffer2);
      
      tokenBuffer2.writeBoolean(false);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      boolean boolean0 = tokenBuffer2.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(67, jsonParserSequence0.getFeatureMask());
      assertTrue(jsonParserSequence0.canReadObjectId());
      assertTrue(jsonParserSequence0.canReadTypeId());
      assertNotNull(jsonParserSequence0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      FormatSchema formatSchema0 = jsonParserSequence0.getSchema();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(67, jsonParserSequence0.getFeatureMask());
      assertTrue(jsonParserSequence0.canReadObjectId());
      assertTrue(jsonParserSequence0.canReadTypeId());
      assertNull(formatSchema0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer2.asParser((ObjectCodec) objectReader0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNotNull(tokenBuffer_Parser2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper2 = objectMapper0.disable(serializationFeature0);
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = (TokenBuffer.Parser)tokenBuffer1.asParser((ObjectCodec) objectMapper2);
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser3.peekNextToken());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer_Parser3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(tokenBuffer3);
      
      TokenBuffer tokenBuffer4 = tokenBuffer3.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertTrue(tokenBuffer4.canWriteTypeId());
      assertTrue(tokenBuffer4.canWriteObjectId());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertFalse(tokenBuffer4.isClosed());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer4.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(tokenBuffer4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer4);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer4, tokenBuffer3);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      TokenBuffer tokenBuffer5 = tokenBuffer3.append(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(67, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer5.firstToken());
      assertTrue(tokenBuffer5.canOmitFields());
      assertTrue(tokenBuffer5.canWriteObjectId());
      assertTrue(tokenBuffer5.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer5.getFeatureMask());
      assertEquals(0, tokenBuffer5.getHighestEscapedChar());
      assertFalse(tokenBuffer5.isClosed());
      assertTrue(tokenBuffer5.canWriteTypeId());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(67, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNotNull(tokenBuffer5);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer5);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer5);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer4);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer5, tokenBuffer1);
      assertNotSame(tokenBuffer5, tokenBuffer2);
      assertNotSame(tokenBuffer5, tokenBuffer0);
      assertSame(tokenBuffer5, tokenBuffer3);
      assertSame(tokenBuffer5, tokenBuffer4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer4);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer5);
      
      TokenBuffer tokenBuffer6 = new TokenBuffer(objectReader0, true);
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer5));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer4));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer6.getHighestEscapedChar());
      assertTrue(tokenBuffer6.canWriteTypeId());
      assertNull(tokenBuffer6.firstToken());
      assertEquals(79, tokenBuffer6.getFeatureMask());
      assertTrue(tokenBuffer6.canOmitFields());
      assertTrue(tokenBuffer6.canWriteBinaryNatively());
      assertFalse(tokenBuffer6.isClosed());
      assertTrue(tokenBuffer6.canWriteObjectId());
      assertNotNull(tokenBuffer6);
      
      tokenBuffer6.writeEndArray();
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer5));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer6.equals((Object)tokenBuffer4));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer6.getHighestEscapedChar());
      assertTrue(tokenBuffer6.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer6.firstToken());
      assertEquals(79, tokenBuffer6.getFeatureMask());
      assertTrue(tokenBuffer6.canOmitFields());
      assertTrue(tokenBuffer6.canWriteBinaryNatively());
      assertFalse(tokenBuffer6.isClosed());
      assertTrue(tokenBuffer6.canWriteObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer6, tokenBuffer5);
      assertNotSame(tokenBuffer6, tokenBuffer2);
      assertNotSame(tokenBuffer6, tokenBuffer3);
      assertNotSame(tokenBuffer6, tokenBuffer1);
      assertNotSame(tokenBuffer6, tokenBuffer0);
      assertNotSame(tokenBuffer6, tokenBuffer4);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeString((String) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      int int0 = 8;
      int int1 = 13;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      assertNotNull(objectIdGenerators_IntSequenceGenerator0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(bigInteger0);
      assertEquals((-1), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(integer0);
      
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer0.writeNumberField((String) null, 1498);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      
      tokenBuffer0.writeNumber(3486L);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(charArray0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      tokenBuffer_Parser0.overrideCurrentName("fOQMxyRCAN");
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals("fOQMxyRCAN", tokenBuffer_Parser0.getCurrentName());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals("fOQMxyRCAN", tokenBuffer_Parser0.getCurrentName());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      Object object0 = tokenBuffer_Parser1.getEmbeddedObject();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(object0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumberField("", 16);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      String string0 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: FIELD_NAME(), VALUE_NUMBER_INT]", string0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(string0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer1.writeNull();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(71, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertEquals(71, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNotNull(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      TokenBuffer tokenBuffer3 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(71, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertNotNull(tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      
      tokenBuffer0.writeNumber(2147483647L);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      
      TokenBuffer tokenBuffer4 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(71, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertFalse(tokenBuffer4.isClosed());
      assertFalse(tokenBuffer4.canWriteObjectId());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer4.firstToken());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertNotNull(tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer1);
      assertSame(tokenBuffer4, tokenBuffer3);
      assertSame(tokenBuffer4, tokenBuffer0);
      
      JsonToken jsonToken0 = tokenBuffer4.firstToken();
      assertEquals(JsonToken.FIELD_NAME, jsonToken0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(71, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertFalse(tokenBuffer4.isClosed());
      assertFalse(tokenBuffer4.canWriteObjectId());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer4.firstToken());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertEquals(5, jsonToken0.id());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructEnd());
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer1);
      assertSame(tokenBuffer4, tokenBuffer3);
      assertSame(tokenBuffer4, tokenBuffer0);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(object0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer4);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer1.writeNumber((short) (byte)67);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)tokenBuffer_Parser0.getCodec();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer1.writeNumberField("Direct self-reference leading to cycle", (-77));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      String string0 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT, FIELD_NAME(Direct self-reference leading to cycle), VALUE_NUMBER_INT]", string0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(string0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      tokenBuffer1.writeNull();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertNotNull(tokenBuffer2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      TokenBuffer tokenBuffer3 = tokenBuffer2.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(75, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNotNull(tokenBuffer3);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer2);
      
      TokenBuffer tokenBuffer4 = tokenBuffer1.append(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(75, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertTrue(tokenBuffer4.canWriteObjectId());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertTrue(tokenBuffer4.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer4.firstToken());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertFalse(tokenBuffer4.isClosed());
      assertNotNull(tokenBuffer4);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer4);
      assertSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      assertSame(tokenBuffer4, tokenBuffer1);
      assertNotSame(tokenBuffer4, tokenBuffer2);
      
      TokenBuffer tokenBuffer5 = new TokenBuffer(objectMapper0, true);
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer3));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer5.canWriteObjectId());
      assertTrue(tokenBuffer5.canOmitFields());
      assertTrue(tokenBuffer5.canWriteBinaryNatively());
      assertNull(tokenBuffer5.firstToken());
      assertEquals(79, tokenBuffer5.getFeatureMask());
      assertTrue(tokenBuffer5.canWriteTypeId());
      assertEquals(0, tokenBuffer5.getHighestEscapedChar());
      assertFalse(tokenBuffer5.isClosed());
      assertNotNull(tokenBuffer5);
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer5));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer5);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer5));
      assertFalse(jsonToken0.isBoolean());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isScalarValue());
      assertEquals(7, jsonToken0.id());
      assertFalse(jsonToken0.isStructEnd());
      assertTrue(jsonToken0.isNumeric());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer5);
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      byte byte0 = (byte)67;
      tokenBuffer0.writeNumber((short) (byte)67);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeNumberField("Direct self-reference leading to cycle", (-77));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeNull();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(75, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(75, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }
}
