/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:00:24 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.type.SimpleType;
import java.io.IOException;
import java.sql.SQLNonTransientConnectionException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MappingIterator_ESTest extends MappingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MappingIterator<Object> mappingIterator0 = MappingIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        mappingIterator0._handleIOException((IOException) jsonMappingException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MappingIterator<JsonFactory.Feature> mappingIterator0 = MappingIterator.emptyIterator();
      boolean boolean0 = mappingIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MappingIterator<Object> mappingIterator0 = MappingIterator.emptyIterator();
      JsonParser jsonParser0 = mappingIterator0.getParser();
      assertNull(jsonParser0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MappingIterator<List<JsonFactory.Feature>> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.getCurrentLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MappingIterator<List<JsonFactory.Feature>> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MappingIterator<Object> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.getParserSchema();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MappingIterator<Object> mappingIterator0 = MappingIterator.emptyIterator();
      Class<String> class0 = String.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.endOfInputException(class0);
      // Undeclared exception!
      try { 
        mappingIterator0._handleMappingException(jsonMappingException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end-of-input when trying to deserialize a java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Boolean> jsonDeserializer0 = (JsonDeserializer<Boolean>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<LinkedList<Object>> mappingIterator0 = new MappingIterator<LinkedList<Object>>(simpleType0, (JsonParser) null, defaultDeserializationContext_Impl0, jsonDeserializer0, true, beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MappingIterator<Object> mappingIterator0 = MappingIterator.emptyIterator();
      mappingIterator0.close();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      MappingIterator<Boolean> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) injectableValues_Std0);
      mappingIterator0.close();
      assertTrue(jsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      objectReader0._bindAndReadValues(jsonParser0, (Object) jsonParser0);
      MappingIterator<Boolean> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) objectMapper0);
      mappingIterator0.hasNextValue();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      try { 
        mappingIterator0.readAll((List<Boolean>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of java.lang.Object out of END_ARRAY token
         //  at [Source: java.lang.String@0000000223; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      MappingIterator<Object> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) class0);
      mappingIterator0.readAll();
      MappingIterator<Boolean> mappingIterator1 = objectReader0._bindAndReadValues(jsonParser0, (Object) injectableValues_Std0);
      Stack<Boolean> stack0 = new Stack<Boolean>();
      mappingIterator1.readAll((List<Boolean>) stack0);
      assertTrue(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Vector<FloatNode> vector0 = new Vector<FloatNode>();
      Class<FloatNode> class0 = FloatNode.class;
      MappingIterator<FloatNode> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
      mappingIterator0.readAll((List<FloatNode>) vector0);
      assertFalse(vector0.isEmpty());
      assertEquals("[[]]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.nextBooleanValue();
      MappingIterator<Integer> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) null);
      // Undeclared exception!
      try { 
        mappingIterator0.next();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not deserialize instance of java.lang.String out of END_ARRAY token
         //  at [Source: java.lang.String@0000000035; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MappingIterator<Boolean> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(stack0);
      objectReader1._bindAndReadValues(jsonParser0, (Object) objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      MappingIterator<Boolean> mappingIterator0 = objectReader1._bindAndReadValues(jsonParser0, (Object) jsonFactory_Feature0);
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      try { 
        mappingIterator0.readAll((List<Boolean>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of java.util.Stack out of END_ARRAY token
         //  at [Source: java.lang.String@0000000223; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
