/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:49:34 GMT 2023
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning(">,\"1X2{)D'~Tvm^t", ">,\"1X2{)D'~Tvm^t");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableListIterator1, (Object) resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, (-1765));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLException sQLException0 = new SQLException("#zrg>]s{hh!l+i");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<String> predicate0 = IdentityPredicate.identityPredicate("EwmS[eA]");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("ab", "", true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<ComparatorPredicate.Criterion>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Properties, SQLClientInfoException> hashMap0 = new HashMap<Properties, SQLClientInfoException>();
      EntrySetMapIterator<Properties, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLClientInfoException>(hashMap0);
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Stack<LinkedList>, Hashtable<Properties, SQLSyntaxErrorException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Stack<LinkedList>, Hashtable<Properties, SQLSyntaxErrorException>>) mapIterator0);
      assertNotNull(mapIterator1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 4090);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 1575, (-1858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transformer<StringTokenizer, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) loopingListIterator0, (-1556L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iterator", "?6$;7{dN:O", (-1904));
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, TreeSet<SQLNonTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Properties, SQLClientInfoException> hashMap0 = new HashMap<Properties, SQLClientInfoException>();
      EntrySetMapIterator<Properties, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLClientInfoException>(hashMap0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) entrySetMapIterator0, (Equator<Object>) null);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) entrySetMapIterator0, (Predicate<? super Properties>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("GNL:%<$(K");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) stringTokenizer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLNonTransientException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLNonTransientException) null, comparator0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedHashSet0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]839", "]839");
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 15, sQLTransientConnectionException0);
      ConstantTransformer<SQLException, DataTruncation> constantTransformer0 = new ConstantTransformer<SQLException, DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) constantTransformer0);
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) iterator0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) arrayDeque0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null, (Collection<? super SQLWarning>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLTimeoutException>(mapIterator0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractMapIteratorDecorator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) listIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(linkedList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate[] instanceofPredicateArray1 = IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) objectArrayListIterator0, class0);
      assertNotSame(instanceofPredicateArray0, instanceofPredicateArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0, (-946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("kIeOz^^Va\"87D@j<s");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Cannot put new key/value pair - Map is fixed size singleton", "2S=");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("c", intArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Predicate<BatchUpdateException> predicate0 = EqualPredicate.equalPredicate(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertNull(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Predicate<BatchUpdateException> predicate0 = EqualPredicate.equalPredicate(batchUpdateExceptionArray0[0]);
      BatchUpdateException batchUpdateException0 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTimeoutException>) null, (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<DataTruncation> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) objectArrayListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) hashSet0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Cannot put new key/value pair - Map is fixed size singleton");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, 139L);
      int int0 = IteratorUtils.size(boundedIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals(1, int0);
  }
}
