/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:31:06 GMT 2023
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      vector3D0.getDelta();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2577.0, 2577.0);
      assertEquals(0.3922265863695914, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.7795982386014021, vector3D0.getZ(), 0.01);
      assertEquals(0.4882467524873554, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.add(8.3, vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(86.49000000000001, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-9.3), vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = new Vector3D(1093.06, vector3D0, 1093.06, vector3D0, 1093.06, vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.PLUS_K.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      String string0 = vector3D0.toString();
      assertEquals("{0; 0; 1}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector3D0.PLUS_J.add((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.getNorm1();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.getNormSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.PLUS_J.subtract(vector3D0);
      assertEquals(2.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.MINUS_I.getNormInf();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-0.6082762530298995), vector3D0, (-0.6082762530298995), vector3D0);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(1.4800000000003775, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2951.26227, 2259.53024, Double.NEGATIVE_INFINITY);
      Vector3D vector3D1 = new Vector3D(2951.26227, vector3D0, 2259.53024, vector3D0, Double.NEGATIVE_INFINITY, vector3D0, Double.NEGATIVE_INFINITY, vector3D0);
      boolean boolean0 = vector3D1.isNaN();
      assertEquals(2259.53024, vector3D0.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
      assertTrue(vector3D0.isInfinite());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.MINUS_I.normalize();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.orthogonal();
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.375, 1.375, 1.0);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(0.7071067811865476, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D0.getZ(), 0.01);
      assertEquals((-0.7071067811865476), vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.orthogonal();
      double double0 = Vector3D.angle(vector3D1, vector3D0);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
      assertEquals(1.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, vector3D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      boolean boolean0 = vector3D0.equals(vector3D2);
      assertEquals(Double.NaN, vector3D2.getZ(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(Double.POSITIVE_INFINITY, vector3D0);
      boolean boolean0 = vector3D1.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertFalse(boolean0);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(vector3D0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3490.44), Double.POSITIVE_INFINITY, 0.0);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertTrue(boolean0);
      assertEquals((-3490.44), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1112.3162571), 1.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertEquals((-1112.3162571), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      boolean boolean0 = vector3D0.equals(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      boolean boolean0 = vector3D0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.subtract((-2699.9), vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(boolean0);
      assertEquals((-2700.9), vector3D1.getZ(), 0.01);
      assertEquals(7294860.8100000005, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D2 = vector3D1.subtract((-2699.9), vector3D0);
      boolean boolean0 = vector3D2.equals(vector3D1);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      vector3D0.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      vector3D0.NaN.hashCode();
      assertFalse(vector3D0.isNaN());
  }
}
