/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:32:21 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Asinh asinh0 = new Asinh();
      regulaFalsiSolver0.solve(228, (UnivariateRealFunction) asinh0, (-15.621409330616302), 0.5, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1009.7), (-1009.7), 233.802189786264);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Signum signum0 = new Signum();
      double double0 = regulaFalsiSolver0.solve(5522, (UnivariateRealFunction) signum0, (-1009.7), 0.5, allowedSolution0);
      assertEquals(0.5, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.006738281249999978, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5, 0.5);
      assertEquals(0.5, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Log10 log10_0 = new Log10();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(1073800599, (UnivariateRealFunction) log10_0, 1.3500584531745999E-15, 1746.0073584, 1.3500584531745999E-15);
      assertEquals(1.3500584531745999E-15, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073741294, (UnivariateRealFunction) log10_0, 0.11111095942313305, 1.0000000000006712, allowedSolution0);
      assertEquals(0.11111095942313305, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0000000000000022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(1056836250, (UnivariateRealFunction) log10_0, 1.0, 1.0, allowedSolution0);
      assertEquals(1.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1664.3452475162842));
      Floor floor0 = new Floor();
      double double0 = pegasusSolver0.solve(27, (UnivariateRealFunction) floor0, (-1664.3452475162842), 0.0, 0.0);
      assertEquals((-1664.3452475162842), pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800600, (UnivariateRealFunction) log10_0, 2.314385919727883E-15, (double) 1073800600, 2.314385919727883E-15, allowedSolution0);
      assertEquals(2.314385919727883E-15, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) log10_0, 1.3500584531745999E-15, (double) 1073800599, (double) 1073800599, allowedSolution0);
      assertEquals(1.3500584531745999E-15, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(18.310155551702444, 18.310155551702444, 18.310155551702444);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) tanh0, (-39.08686901), 2.8372086888473323E-28, 18.310155551702444, allowedSolution0);
      assertEquals(18.310155551702444, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.080603956861622E-26), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073741294, (UnivariateRealFunction) log10_0, 0.9999999415169475, 3174.3, 0.9999999415169475, allowedSolution0);
      assertEquals(0.9999999415169475, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000006712, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.3500584531745999E-15, (double) 3130, (double) 3130, allowedSolution0);
      assertEquals(3130.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2534.250501902452, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1073741294, (UnivariateRealFunction) asinh0, (-321.0), 1.0000000000006712, 0.9999999415169475, allowedSolution0);
      assertEquals(0.9999999415169475, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4.5364997433409394E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Asinh asinh0 = new Asinh();
      double double0 = regulaFalsiSolver0.solve(1056836250, (UnivariateRealFunction) asinh0, (-0.9542431023349962), (double) 1056836250, allowedSolution0);
      assertEquals(5.284181245228784E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.349500947642973E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3068);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(3068, (UnivariateRealFunction) log10_0, 2.0E-13, (double) 3068, allowedSolution0);
      assertEquals(1534.0000000000002, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2407.0715646368826, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.8807178037150152E-13, (double) 3130, allowedSolution0);
      assertEquals(1.8807178037150152E-13, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.8807178037150152E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 3079;
      doubleArray0[3] = (double) 3079;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(3079, (UnivariateRealFunction) polynomialFunction0, (-1.0), 3079.0, allowedSolution0);
      assertEquals(1539.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(7.227481029301736E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3130);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(3130, (UnivariateRealFunction) log10_0, 1.8807178037150152E-13, (double) 3130, allowedSolution0);
      assertEquals(1.8807178037150152E-13, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.8807178037150152E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Expm1 expm1_0 = new Expm1();
      double double0 = regulaFalsiSolver0.solve(1073800599, (UnivariateRealFunction) expm1_0, (-3773.0), 1.5830993332061267E-10, (-969.8), allowedSolution0);
      assertEquals((-969.8), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.5830993332061267E-10, double0, 0.01);
  }
}
