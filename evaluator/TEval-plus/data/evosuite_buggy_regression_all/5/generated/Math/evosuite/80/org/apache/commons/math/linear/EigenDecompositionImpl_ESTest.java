/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:37:06 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.03404476419026017);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(23, 23);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-319.0));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-319.0));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(2066);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2066
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-35.58090922783505);
      doubleArray0[2] = (-35.58090922783505);
      doubleArray0[4] = (-4278.559249002062);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-35.58090922783505));
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = 44.577402838950874;
      doubleArray0[2] = 0.03404476419026017;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeMultiply(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.03404476419026017);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(15, 15);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 15);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(15, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertTrue(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(15, 15);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 15);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertTrue(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1931.9988798258696);
      eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(1581);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(23, 23);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 23);
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(23);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1);
      eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = 44.577402838950874;
      doubleArray0[2] = 0.03404476419026017;
      doubleArray0[4] = 0.03404476419026017;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.03404476419026017);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      arrayRealVector0.set(44.577402838950874);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.03404476419026017);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3607.8431484234375;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.646811693067312E-20);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 44.15200959181024;
      doubleArray0[5] = 44.15200959181024;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = 44.577402838950874;
      doubleArray0[2] = 0.03404476419026017;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      arrayRealVector0.unitize();
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3608.173235069423;
      doubleArray0[1] = (-0.5672888415585913);
      doubleArray0[3] = (-0.5672888415585913);
      doubleArray0[4] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(2.9558155141688712E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7551.24688530508, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5108.145578711249, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(14, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {3608.173235069423, (-0.5672888415585913), 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
      
      arrayRealVector0.unitize();
      assertEquals(7, doubleArray0.length);
      assertEquals(1.4782755833693781, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5786.474697368753, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(0.9999999999999998, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {3608.173235069423, (-0.5672888415585913), 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(1.4782755833693781, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5786.474697368753, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(0.9999999999999998, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {3608.173235069423, (-0.5672888415585913), 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-0.5672888415585913));
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1.4782755833693781, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5786.474697368753, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(0.9999999999999998, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3608.173235069423, (-0.5672888415585913), 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-0.5672888415585913);
      doubleArray0[1] = 0.03404476419026017;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(1.2026672114977028, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.8037109875143662, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4.53831073246873, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-0.5672888415585913), 0.03404476419026017}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(1.2026672114977028, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.8037109875143662, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4.53831073246873, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {(-0.5672888415585913), 0.03404476419026017}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-0.5672888415585913));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-61.62552134599503);
      doubleArray0[1] = (-61.62552134599503);
      doubleArray0[4] = (-61.62552134599503);
      doubleArray0[3] = (-61.62552134599503);
      doubleArray0[6] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(292.7514586597188, arrayRealVector0.getNorm(), 0.01);
      assertEquals(504836.2708663913, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(825.6354305679603, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-61.62552134599503), (-61.62552134599503), 0.0, (-61.62552134599503), (-61.62552134599503), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(292.7514586597188, arrayRealVector0.getNorm(), 0.01);
      assertEquals(504836.2708663913, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(825.6354305679603, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(292.7514586597188, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(504836.2708663913, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(825.6354305679603, arrayRealVector1.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {(-61.62552134599503), (-61.62552134599503), 0.0, (-61.62552134599503), (-61.62552134599503), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector1.unitize();
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(292.7514586597188, arrayRealVector0.getNorm(), 0.01);
      assertEquals(504836.2708663913, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(825.6354305679603, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(1724.4534772863092, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2.820260689213651, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertArrayEquals(new double[] {(-61.62552134599503), (-61.62552134599503), 0.0, (-61.62552134599503), (-61.62552134599503), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(292.7514586597188, arrayRealVector0.getNorm(), 0.01);
      assertEquals(504836.2708663913, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(825.6354305679603, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(1724.4534772863092, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2.820260689213651, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {(-61.62552134599503), (-61.62552134599503), 0.0, (-61.62552134599503), (-61.62552134599503), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-61.62552134599503));
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(292.7514586597188, arrayRealVector0.getNorm(), 0.01);
      assertEquals(504836.2708663913, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(825.6354305679603, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(1724.4534772863092, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2.820260689213651, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-61.62552134599503), (-61.62552134599503), 0.0, (-61.62552134599503), (-61.62552134599503), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-24.520584963806897);
      doubleArray0[4] = (-24.520584963806897);
      doubleArray0[3] = (-24.520584963806897);
      doubleArray0[6] = (-24.520584963806897);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(69.35468762627501, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(196.16467971045518, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(200872.6320235061, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-24.520584963806897), 0.0, 0.0, (-24.520584963806897), (-24.520584963806897), 0.0, (-24.520584963806897)}, doubleArray0, 0.01);
      
      arrayRealVector0.unitize();
      assertEquals(7, doubleArray0.length);
      assertEquals(0.9999999999999999, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(2896.3093757400984, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.82842712474619, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {(-24.520584963806897), 0.0, 0.0, (-24.520584963806897), (-24.520584963806897), 0.0, (-24.520584963806897)}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(0.9999999999999999, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(2896.3093757400984, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.82842712474619, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {(-24.520584963806897), 0.0, 0.0, (-24.520584963806897), (-24.520584963806897), 0.0, (-24.520584963806897)}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-24.520584963806897));
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.9999999999999999, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(2896.3093757400984, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.82842712474619, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-24.520584963806897), 0.0, 0.0, (-24.520584963806897), (-24.520584963806897), 0.0, (-24.520584963806897)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3608.173235069423;
      doubleArray0[1] = 6202.07;
      doubleArray0[5] = (-166.3156299);
      doubleArray0[6] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(10152.82307111371, arrayRealVector0.getNorm(), 0.01);
      assertEquals(20285.748989738844, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.018275629084435E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {3608.173235069423, 6202.07, 0.0, 0.0, 0.0, (-166.3156299), (-166.3156299)}, doubleArray0, 0.01);
      
      arrayRealVector0.unitize();
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.9980402344895398, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3957.791444743115, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {3608.173235069423, 6202.07, 0.0, 0.0, 0.0, (-166.3156299), (-166.3156299)}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.9980402344895398, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3957.791444743115, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {3608.173235069423, 6202.07, 0.0, 0.0, 0.0, (-166.3156299), (-166.3156299)}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.9999999999999998);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.9980402344895398, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3957.791444743115, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3608.173235069423, 6202.07, 0.0, 0.0, 0.0, (-166.3156299), (-166.3156299)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(23, 23);
      assertNotNull(openMapRealMatrix0);
      assertEquals(23, openMapRealMatrix0.getColumnDimension());
      assertEquals(23, openMapRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-4277.93);
      doubleArray0[2] = (-0.5672888415585913);
      doubleArray0[3] = 0.9999999999999998;
      doubleArray0[4] = (-4277.93);
      doubleArray0[5] = 0.9999999999999998;
      doubleArray0[6] = (-4277.93);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(10478.745876918349, arrayRealVector0.getNorm(), 0.01);
      assertEquals(25672.714577683117, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.504480256E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {(-4277.93), 0.0, (-0.5672888415585913), 0.9999999999999998, (-4277.93), 0.9999999999999998, (-4277.93)}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(10478.745876918349, arrayRealVector0.getNorm(), 0.01);
      assertEquals(25672.714577683117, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.504480256E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(25672.714577683117, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(10478.745876918349, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3.504480256E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {(-4277.93), 0.0, (-0.5672888415585913), 0.9999999999999998, (-4277.93), 0.9999999999999998, (-4277.93)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector1.unitize();
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(10478.745876918349, arrayRealVector0.getNorm(), 0.01);
      assertEquals(25672.714577683117, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.504480256E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.4499796902444877, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(3344.369924762999, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.9999999999999999, arrayRealVector1.getNorm(), 0.01);
      assertArrayEquals(new double[] {(-4277.93), 0.0, (-0.5672888415585913), 0.9999999999999998, (-4277.93), 0.9999999999999998, (-4277.93)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(10478.745876918349, arrayRealVector0.getNorm(), 0.01);
      assertEquals(25672.714577683117, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.504480256E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.4499796902444877, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(3344.369924762999, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.9999999999999999, arrayRealVector1.getNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {(-4277.93), 0.0, (-0.5672888415585913), 0.9999999999999998, (-4277.93), 0.9999999999999998, (-4277.93)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-4277.93));
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(10478.745876918349, arrayRealVector0.getNorm(), 0.01);
      assertEquals(25672.714577683117, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.504480256E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.4499796902444877, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(3344.369924762999, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.9999999999999999, arrayRealVector1.getNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-4277.93), 0.0, (-0.5672888415585913), 0.9999999999999998, (-4277.93), 0.9999999999999998, (-4277.93)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(26, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      
      arrayRealVector0.set(44.577402838950874);
      assertEquals(13, doubleArray0.length);
      assertEquals(1.495769432296184E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(26, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1159.0124738127226, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(227.30104694109687, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(13, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(1.495769432296184E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(26, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1159.0124738127226, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(227.30104694109687, arrayRealVector0.getNorm(), 0.01);
      assertEquals(26, realMatrix0.getRowDimension());
      assertEquals(26, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.03404476419026017);
      assertEquals(13, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1.495769432296184E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(26, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1159.0124738127226, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(227.30104694109687, arrayRealVector0.getNorm(), 0.01);
      assertEquals(26, realMatrix0.getRowDimension());
      assertEquals(26, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (-166.3156299);
      doubleArray0[3] = (double) 23;
      doubleArray0[6] = (double) 23;
      doubleArray0[7] = (double) 23;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(516.6312598, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(244.03642658027007, arrayRealVector0.getNorm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3101747.2802816, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {23.0, (-166.3156299), 0.0, 23.0, 0.0, 0.0, 23.0, 23.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertEquals(516.6312598, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(244.03642658027007, arrayRealVector0.getNorm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3101747.2802816, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(516.6312598, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(16, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3101747.2802816, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(244.03642658027007, arrayRealVector1.getNorm(), 0.01);
      assertArrayEquals(new double[] {23.0, (-166.3156299), 0.0, 23.0, 0.0, 0.0, 23.0, 23.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector1.unitize();
      assertEquals(8, doubleArray0.length);
      assertEquals(516.6312598, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(244.03642658027007, arrayRealVector0.getNorm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3101747.2802816, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(2.1170251795588646, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(12710.181523910132, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {23.0, (-166.3156299), 0.0, 23.0, 0.0, 0.0, 23.0, 23.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      assertEquals(8, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(516.6312598, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(244.03642658027007, arrayRealVector0.getNorm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3101747.2802816, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(2.1170251795588646, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(12710.181523910132, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(16, realMatrix0.getColumnDimension());
      assertEquals(16, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {23.0, (-166.3156299), 0.0, 23.0, 0.0, 0.0, 23.0, 23.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-166.3156299));
      assertEquals(8, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(516.6312598, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(244.03642658027007, arrayRealVector0.getNorm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3101747.2802816, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(2.1170251795588646, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(12710.181523910132, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(16, realMatrix0.getColumnDimension());
      assertEquals(16, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {23.0, (-166.3156299), 0.0, 23.0, 0.0, 0.0, 23.0, 23.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-24.520584963806897);
      doubleArray0[4] = (-24.520584963806897);
      doubleArray0[3] = (-24.520584963806897);
      doubleArray0[6] = (-166.3156299);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-24.520584963806897);
      doubleArray1[1] = (-24.520584963806897);
      doubleArray1[2] = (-166.3156299);
      doubleArray1[3] = (-24.520584963806897);
      doubleArray1[4] = (-24.520584963806897);
      doubleArray1[5] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(arrayRealVector0);
      assertEquals(1.285584844950439E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(295.28203442788765, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(670.5909844466481, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), (-166.3156299), (-24.520584963806897), (-24.520584963806897), (-166.3156299)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(14, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(arrayRealVector1);
      assertEquals(1.285584844950439E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(295.28203442788765, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(670.5909844466481, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(20, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.285584844950439E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(670.5909844466481, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(295.28203442788765, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), (-166.3156299), (-24.520584963806897), (-24.520584963806897), (-166.3156299)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector0.unitize();
      assertEquals(14, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(43537.52328485797, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.271018572958311, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), (-166.3156299), (-24.520584963806897), (-24.520584963806897), (-166.3156299)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      assertEquals(14, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(43537.52328485797, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.271018572958311, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(20, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.285584844950439E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(670.5909844466481, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(295.28203442788765, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(20, realMatrix0.getColumnDimension());
      assertEquals(20, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), (-166.3156299), (-24.520584963806897), (-24.520584963806897), (-166.3156299)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-4103.968029));
      assertEquals(14, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(43537.52328485797, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.271018572958311, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(20, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.285584844950439E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(670.5909844466481, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(295.28203442788765, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(20, realMatrix0.getColumnDimension());
      assertEquals(20, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), (-166.3156299), (-24.520584963806897), (-24.520584963806897), (-166.3156299)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-35.58090922783505);
      doubleArray0[2] = (-35.58090922783505);
      doubleArray0[4] = (-4278.559249002062);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6051.214960555284, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8699.442134915464, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(584090.434921567, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(12, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-35.58090922783505), 0.0, (-35.58090922783505), 0.0, (-4278.559249002062), 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      assertEquals(6, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6051.214960555284, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8699.442134915464, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(584090.434921567, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(12, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(8699.442134915464, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(584090.434921567, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(6051.214960555284, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(12, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-35.58090922783505), 0.0, (-35.58090922783505), 0.0, (-4278.559249002062), 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector1.unitize();
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6051.214960555284, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8699.442134915464, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(584090.434921567, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(1.4376356139424218, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(96.52448949986871, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(12, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-35.58090922783505), 0.0, (-35.58090922783505), 0.0, (-4278.559249002062), 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6051.214960555284, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8699.442134915464, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(584090.434921567, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(1.4376356139424218, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(96.52448949986871, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(12, arrayRealVector1.getDimension());
      assertEquals(12, realMatrix0.getRowDimension());
      assertEquals(12, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {(-35.58090922783505), 0.0, (-35.58090922783505), 0.0, (-4278.559249002062), 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-35.58090922783505));
      assertEquals(6, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6051.214960555284, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8699.442134915464, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(584090.434921567, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(1.4376356139424218, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(96.52448949986871, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(12, arrayRealVector1.getDimension());
      assertEquals(12, realMatrix0.getRowDimension());
      assertEquals(12, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-35.58090922783505), 0.0, (-35.58090922783505), 0.0, (-4278.559249002062), 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(26, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      
      arrayRealVector0.set(44.577402838950874);
      assertEquals(13, doubleArray0.length);
      assertEquals(1159.0124738127226, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(227.30104694109687, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(26, arrayRealVector0.getDimension());
      assertEquals(1.495769432296184E9, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(13, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(1159.0124738127226, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(227.30104694109687, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(26, arrayRealVector0.getDimension());
      assertEquals(1.495769432296184E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(26, realMatrix0.getRowDimension());
      assertEquals(26, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-0.7703253223079534));
      assertEquals(13, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1159.0124738127226, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(227.30104694109687, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(26, arrayRealVector0.getDimension());
      assertEquals(1.495769432296184E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(26, realMatrix0.getRowDimension());
      assertEquals(26, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (-24.520584963806897);
      doubleArray0[6] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(237.748387317353, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(27565.670377934566, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(381.6724297276138, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertEquals(237.748387317353, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(27565.670377934566, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(381.6724297276138, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(237.748387317353, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(381.6724297276138, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(27565.670377934566, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector1.unitize();
      assertEquals(7, doubleArray0.length);
      assertEquals(237.748387317353, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(27565.670377934566, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(381.6724297276138, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(1.6053628545465046, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(115.94472075698735, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(237.748387317353, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(27565.670377934566, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(381.6724297276138, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(1.6053628545465046, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(115.94472075698735, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(237.748387317353, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(27565.670377934566, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(381.6724297276138, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(1.6053628545465046, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(115.94472075698735, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-24.520584963806897);
      doubleArray0[1] = (-24.520584963806897);
      doubleArray0[4] = (-24.520584963806897);
      doubleArray0[7] = (-24.520584963806897);
      doubleArray0[6] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(20, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.285584844950439E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(528.795939510455, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(245.21796466369614, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299), (-24.520584963806897), 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertEquals(20, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.285584844950439E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(528.795939510455, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(245.21796466369614, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1.285584844950439E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(528.795939510455, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(245.21796466369614, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299), (-24.520584963806897), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector0.unitize();
      assertEquals(10, doubleArray0.length);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(52426.20974827651, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.156432299875222, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299), (-24.520584963806897), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector1);
      assertEquals(10, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(52426.20974827651, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.156432299875222, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1.285584844950439E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(528.795939510455, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(245.21796466369614, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(20, realMatrix0.getRowDimension());
      assertEquals(20, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299), (-24.520584963806897), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-24.520584963806897));
      assertEquals(10, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(52426.20974827651, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.156432299875222, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(20, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1.285584844950439E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(528.795939510455, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(245.21796466369614, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(20, realMatrix0.getRowDimension());
      assertEquals(20, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-24.520584963806897), (-24.520584963806897), 0.0, 0.0, (-24.520584963806897), 0.0, (-166.3156299), (-24.520584963806897), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3608.173235069423;
      doubleArray0[3] = (-0.5672888415585913);
      doubleArray0[4] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(2.9558155141688712E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5108.145515710571, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7550.112307621963, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {3608.173235069423, 0.0, 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
      
      arrayRealVector0.unitize();
      assertEquals(7, doubleArray0.length);
      assertEquals(5786.47476873552, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4780534901366646, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {3608.173235069423, 0.0, 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(5786.47476873552, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4780534901366646, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {3608.173235069423, 0.0, 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(5786.47476873552, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4780534901366646, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3608.173235069423, 0.0, 0.0, (-0.5672888415585913), (-166.3156299), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-5175.759852891);
      doubleArray0[1] = (-5175.759852891);
      doubleArray0[3] = (-5175.759852891);
      doubleArray0[6] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(4.2399824714883074E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(31387.190377146002, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(12680.152290342876, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-5175.759852891), (-5175.759852891), 0.0, (-5175.759852891), 0.0, 0.0, (-166.3156299)}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertEquals(4.2399824714883074E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(31387.190377146002, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(12680.152290342876, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(31387.190377146002, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(12680.152290342876, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(4.2399824714883074E7, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {(-5175.759852891), (-5175.759852891), 0.0, (-5175.759852891), 0.0, 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector1.unitize();
      assertEquals(7, doubleArray0.length);
      assertEquals(4.2399824714883074E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(31387.190377146002, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(12680.152290342876, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3343.794596786863, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2.475300742330223, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-5175.759852891), (-5175.759852891), 0.0, (-5175.759852891), 0.0, 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(4.2399824714883074E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(31387.190377146002, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(12680.152290342876, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3343.794596786863, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2.475300742330223, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {(-5175.759852891), (-5175.759852891), 0.0, (-5175.759852891), 0.0, 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-166.3156299));
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(4.2399824714883074E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(31387.190377146002, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(12680.152290342876, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(14, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3343.794596786863, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2.475300742330223, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-5175.759852891), (-5175.759852891), 0.0, (-5175.759852891), 0.0, 0.0, (-166.3156299)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.9999999999999998;
      doubleArray0[3] = 3602.4786617368;
      doubleArray0[4] = (-4277.93);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(15762.8173234736, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1008948.3087023104, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7909.303204855529, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.9999999999999998, 0.0, 3602.4786617368, (-4277.93), 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(15762.8173234736, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1008948.3087023104, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7909.303204855529, arrayRealVector0.getNorm(), 0.01);
      assertEquals(12, realMatrix0.getColumnDimension());
      assertEquals(12, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.9999999999999998, 0.0, 3602.4786617368, (-4277.93), 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(15762.8173234736, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1008948.3087023104, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7909.303204855529, arrayRealVector0.getNorm(), 0.01);
      assertEquals(12, realMatrix0.getColumnDimension());
      assertEquals(12, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.9999999999999998, 0.0, 3602.4786617368, (-4277.93), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-24.520584963806897);
      doubleArray0[4] = (-24.520584963806897);
      doubleArray0[3] = (-24.520584963806897);
      doubleArray0[6] = (-166.3156299);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(479.7547695828413, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(200872.6320235061, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(242.75364470975754, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {(-24.520584963806897), 0.0, 0.0, (-24.520584963806897), (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(479.7547695828413, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(200872.6320235061, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(242.75364470975754, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {(-24.520584963806897), 0.0, 0.0, (-24.520584963806897), (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-24.520584963806897));
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(479.7547695828413, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(200872.6320235061, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(242.75364470975754, arrayRealVector0.getNorm(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-24.520584963806897), 0.0, 0.0, (-24.520584963806897), (-24.520584963806897), 0.0, (-166.3156299)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.277410840879828E-25;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {6.277410840879828E-25}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6.277410840879828E-25, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {6.277410840879828E-25}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6.277410840879828E-25, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {6.277410840879828E-25}, doubleArray0, 0.01);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-166.3156299);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2603.5148452684075);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-166.3156299), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(realMatrix0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-166.3156299), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }
}
