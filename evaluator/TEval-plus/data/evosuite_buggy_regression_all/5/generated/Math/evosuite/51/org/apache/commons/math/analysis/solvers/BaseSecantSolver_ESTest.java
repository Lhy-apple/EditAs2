/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:32:11 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1528.0107902803295));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(486, (UnivariateRealFunction) cbrt0, (-1528.0107902803295), (double) 486, (-1528.0107902803295), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1555.3549114160164), (-1555.3549114160164), (-1555.3549114160164));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(485, (UnivariateRealFunction) cbrt0, (-1555.3549114160164), (double) 485, (-1555.3549114160164), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (485) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1555.3549114160164), (-1555.3549114160164));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(485, (UnivariateRealFunction) cbrt0, (-1555.3549114160164), (double) 485, (-1555.3549114160164), allowedSolution0);
      assertEquals((-1555.3549114160164), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(5.238170345701575E-46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateRealFunction) signum0, (-1.0), (double) 0, (double) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(1834204, (UnivariateRealFunction) cbrt0, (-1570.68166438), 0.5, allowedSolution0);
      assertEquals(0.5, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2.706961389230499E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(119, (UnivariateRealFunction) cbrt0, 0.0, (double) 119, (double) 119, allowedSolution0);
      assertEquals(119.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1772);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1772, (UnivariateRealFunction) cbrt0, (-1570.1340951934026), 0.0, (-1570.1340951934026), allowedSolution0);
      assertEquals((-1570.1340951934026), illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1570.1340951934026), (-1570.1340951934026));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(46, (UnivariateRealFunction) cbrt0, (-8.0E298), (double) 46, (-1570.1340951934026), allowedSolution0);
      assertEquals((-1570.1340951934026), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-725.434), (-725.434));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(434, (UnivariateRealFunction) cbrt0, (-725.434), (double) 434, (-725.434), allowedSolution0);
      assertEquals((-725.434), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3.05224545896506E-46), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1555.3549114160164));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(459, (UnivariateRealFunction) cbrt0, (-1555.3549114160164), (double) 459, (-1555.3549114160164), allowedSolution0);
      assertEquals(459.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-2.951465011439507E-46), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1555.3549114160164));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(485, (UnivariateRealFunction) cbrt0, (-1555.3549114160164), (double) 485, (-1555.3549114160164), allowedSolution0);
      assertEquals(5.238170345701575E-46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      Cbrt cbrt0 = new Cbrt();
      double double0 = illinoisSolver0.solve(1772, (UnivariateRealFunction) cbrt0, (-1637.969616009755), (double) 1772, (-1637.969616009755), allowedSolution0);
      assertEquals((-1637.969616009755), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(6.740908798058362E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Cbrt cbrt0 = new Cbrt();
      double double0 = illinoisSolver0.solve(1772, (UnivariateRealFunction) cbrt0, (-1636.936306), (double) 1772, (-1636.936306), allowedSolution0);
      assertEquals((-1636.936306), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.5232728675001092E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Cbrt cbrt0 = new Cbrt();
      double double0 = illinoisSolver0.solve(1773, (UnivariateRealFunction) cbrt0, (-1638.0), (double) 1773, (-1638.0), allowedSolution0);
      assertEquals((-1638.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(6.259028801401891E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Cbrt cbrt0 = new Cbrt();
      double double0 = illinoisSolver0.solve(1773, (UnivariateRealFunction) cbrt0, (-1638.0), (double) 1773, (-1638.0), allowedSolution0);
      assertEquals(1773.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-5.9664845844104E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Cbrt cbrt0 = new Cbrt();
      double double0 = illinoisSolver0.solve(1772, (UnivariateRealFunction) cbrt0, (-1637.969616009755), (double) 1772, (-1637.969616009755), allowedSolution0);
      assertEquals((-1637.969616009755), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.6526005193840066E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(485, (UnivariateRealFunction) cbrt0, (-1555.3549114160164), (double) 485, (-1555.3549114160164), allowedSolution0);
      assertEquals(485.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(2.1960151561631935E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Cbrt cbrt0 = new Cbrt();
      double double0 = illinoisSolver0.solve(1791, (UnivariateRealFunction) cbrt0, (-1638.0), (double) 1791, (-1638.0), allowedSolution0);
      assertEquals(1791.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-8.257128470199155E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Cbrt cbrt0 = new Cbrt();
      double double0 = illinoisSolver0.solve(1752, (UnivariateRealFunction) cbrt0, (-1656.3617707512851), (double) 1752, (-1656.3617707512851), allowedSolution0);
      assertEquals((-1656.3617707512851), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.847550972528734E-7, double0, 0.01);
  }
}
