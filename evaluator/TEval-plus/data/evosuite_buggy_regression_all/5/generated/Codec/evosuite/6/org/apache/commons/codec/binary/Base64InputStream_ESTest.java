/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:47:36 GMT 2023
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.apache.commons.codec.binary.Base64InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64InputStream_ESTest extends Base64InputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 8);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true, (byte)1, byteArray0);
      Base64InputStream base64InputStream1 = new Base64InputStream(base64InputStream0);
      Base64InputStream base64InputStream2 = new Base64InputStream(base64InputStream1);
      int int0 = base64InputStream2.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0, false);
      boolean boolean0 = base64InputStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 8);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true, (byte)1, byteArray0);
      base64InputStream0.read();
      int int0 = base64InputStream0.read();
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 1, 8);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true, (byte)1, byteArray0);
      Base64InputStream base64InputStream1 = new Base64InputStream(base64InputStream0);
      int int0 = base64InputStream1.read();
      assertEquals(251, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 20);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true, 1211, byteArray0);
      // Undeclared exception!
      try { 
        base64InputStream0.read((byte[]) null, (int) (byte)1, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, (int) (byte) (-62), 76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 101);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, 12, (-2213));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true, (byte)1, byteArray0);
      // Undeclared exception!
      try { 
        base64InputStream0.read(byteArray0, (int) (byte)1, 1577);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true, (byte)1, byteArray0);
      int int0 = base64InputStream0.read(byteArray0, (int) (byte)1, 0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 20);
      Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true, 1211, byteArray0);
      int int0 = base64InputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, int0);
  }
}
