/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:46:24 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSet;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.ReplaceStrings;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, objectType0, "Unknown class name");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!gd$~M!@Zj", "7Nyw =NoS!gd$~M!@Zj");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.setShouldReport(true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!gd$~M!@Zj", "7Nyw =NoS!gd$~M!@Zj");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, typedScopeCreator0);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) vector0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType1 = enumElementType0.getPropertyType("Snt@UKWrpv],bUJLz");
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType1, "a~=$XQLX5t-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("{T'2f$c", "{T'2f$c");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType jSType0 = jSTypeRegistry0.getForgivingType((StaticScope<JSType>) null, "", "TightenTypes pass appears to be stuck in an infinite loop.", (-1191), 4);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "Named type with empty name component");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("{T'2f$c", "{T'2f$c");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType jSType0 = jSTypeRegistry0.getForgivingType((StaticScope<JSType>) null, "", "TightenTypes pass appears to be stuck in an infinite loop.", (-1191), 4);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType1, "");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, objectType0, "TightenTypes pass appears to be stuck in an infinite loop.");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, objectType0, "0hY<@Ui");
      assertTrue(objectType0.hasCachedValues());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("TightenTypes pass appears to be stuck in an infinite loop.", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, enumElementType0, (String) null);
      assertTrue(enumElementType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectIndexMatch(nodeTraversal0, node0, objectType0, objectType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectIndexMatch(nodeTraversal0, node0, objectType0, objectType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!gd$~M!@Zj", "7Nyw =NoS!gd$~M!@Zj");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType jSType0 = jSTypeRegistry0.getForgivingType((StaticScope<JSType>) null, "MQ6|/$XcC,MsNl", "", 29, 26);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "TightenTypes pass appears to be stuck in an infinite loop.");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      typeValidator0.expectNumber(nodeTraversal0, (Node) null, objectType0, "");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, objectType0, "7Nyw =NoS!+gd$~M!@Zj");
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSModule jSModule0 = new JSModule("JSC_TYPE_MISMATCH");
      List<String> list0 = jSModule0.getSortedDependencyNames();
      String[] stringArray0 = new String[0];
      ImmutableSet<String> immutableSet0 = ImmutableSet.of("JSC_TYPE_MISMATCH", "p,D[iWvX-v", "R^}ZYZ5.6zJ0#*+JkZ'", (String) null, "R^}ZYZ5.6zJ0#*+JkZ'", (String) null, stringArray0);
      ReplaceStrings replaceStrings0 = new ReplaceStrings(compiler0, "JSC_TYPE_MISMATCH", list0, immutableSet0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, replaceStrings0, (ScopeCreator) null);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, objectType0, "");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (Node) null);
      typeValidator0.expectBitwiseable(nodeTraversal0, (Node) null, functionType0, "Named type with empty name component");
      assertTrue(functionType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType jSType0 = jSTypeRegistry0.getForgivingType((StaticScope<JSType>) null, "7Nyw =NoS!+gd$~M!@Zj", "L>", 16, 6);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      typeValidator0.expectIndexMatch(nodeTraversal0, node0, jSType0, jSType0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!gd$~M!@Zj", "7Nyw =NoS!gd$~M!@Zj");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, typedScopeCreator0);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) vector0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", jSType0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, enumType0, "Not declared as a type name");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, objectType0, "Not declared as a type name", objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, objectType0, "Not declared as a type name", objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      Denormalize.StripConstantAnnotations denormalize_StripConstantAnnotations0 = new Denormalize.StripConstantAnnotations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize_StripConstantAnnotations0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("ZVprKKe\"2SPajr", "Named type with empty name component", 10, (-1987));
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "|3476:", jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, objectType0, objectType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", objectType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumType0, (List<JSType>) linkedList0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      typeValidator0.expectIndexMatch(nodeTraversal0, node0, jSType0, objectType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, objectType0, node0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (Node) null);
      // Undeclared exception!
      try { 
        typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, functionType0, (Node) null, "Unknown class name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, objectType0, node0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) objectType0, true, jSTypeArray0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, objectType0, node0, "Unknown class name");
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, objectType0, objectType0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) objectType0, true, jSTypeArray0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, objectType0, functionType0, "Not declared as a constructor");
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (Node) null);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, objectType0, functionType0, "^9C=`J;81r@g");
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", objectType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("=&WG;9p", enumType0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType1, enumType0, "[J");
      assertFalse(boolean0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("TightenTypes pass appears to be stuck in an infinite loop.", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumElementType0, enumType0, "Wrong object type used with protocol message reflection.");
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, objectType0, objectType0, node0, (-757));
      assertEquals(46, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSTypeNative jSTypeNative1 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative1);
      // Undeclared exception!
      try { 
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, objectType0, node0, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", objectType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, objectType0, objectType0, "Named type with empty name component", enumType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0, "Named type with empty name component");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(objectType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, enumElementType0, "JSC_THIS_TYPE_NON_OBJECT", objectType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, jSTypeArray0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, functionType0);
      assertFalse(objectType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("D h2*'Lpgk54&%j+z", "D h2*'Lpgk54&%j+z");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, objectType0, objectType0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", objectType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, enumType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", objectType0);
      ObjectType objectType1 = enumType0.getImplicitPrototype();
      typeValidator0.expectCanCast(nodeTraversal0, node0, objectType1, objectType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("TightenTypes pass appears to be stuck in an infinite loop.", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope scope0 = new Scope(node0, compiler0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, enumType0, compilerInput0, false);
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable("", node0, node0, scope_Var0, "Not declared as a constructor", enumElementType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("TightenTypes pass appears to be stuck in an infinite loop.", node0, objectType0, (CompilerInput) null, false);
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable("1( U& sf", node0, node0, scope_Var0, "Nyw=NoS!+gd$~M@Zj", objectType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertFalse(functionType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      String string0 = typeValidator0.getReadableJSTypeName(node0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Nyw=NoS!+gd$~M@Zj", "Nyw=NoS!+gd$~M@Zj");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      String string0 = typeValidator0.getReadableJSTypeName(node0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!gd$~M!@Zj", "7Nyw =NoS!gd$~M!@Zj");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Vector<JSType> vector0 = new Vector<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) vector0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType1 = enumElementType0.getPropertyType("Snt@UKWrpv],bUJLz");
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType1, jSType1);
      Locale locale0 = new Locale("Not declared as a type name", "Q{");
      boolean boolean0 = typeValidator_TypeMismatch0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
      NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.new Name("u/XOw", true);
      JSType jSType0 = nameReferenceGraph_Name0.getType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, enumElementType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
      NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.new Name("u/XOw", true);
      JSType jSType0 = nameReferenceGraph_Name0.getType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, enumElementType0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, jSType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
      NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.new Name("u/XOw", true);
      JSType jSType0 = nameReferenceGraph_Name0.getType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, enumElementType0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(jSType0, enumType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("7Nyw =NoS!+gd$~M!@Zj", "7Nyw =NoS!+gd$~M!@Zj");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
      NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.new Name("u/XOw", true);
      JSType jSType0 = nameReferenceGraph_Name0.getType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, enumType0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, jSType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertFalse(typeValidator_TypeMismatch1.equals((Object)typeValidator_TypeMismatch0));
      assertFalse(boolean0);
  }
}
