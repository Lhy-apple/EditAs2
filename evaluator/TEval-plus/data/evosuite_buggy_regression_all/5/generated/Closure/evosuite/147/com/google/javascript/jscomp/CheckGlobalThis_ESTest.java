/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:43:32 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckGlobalThis;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CheckGlobalThis_ESTest extends CheckGlobalThis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("vxZPu+");
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      Node node1 = new Node(105, node0, 29, 18);
      Node node2 = new Node(41, node1, 47, 1);
      boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("vxZPu+");
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      Node node1 = new Node(105, node0, 29, 18);
      Node node2 = new Node(41, node1, 47, 1);
      boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node1, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("vxZPu+");
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      Node node1 = new Node(105, node0, 29, 18);
      Node node2 = new Node(41, node1, 47, 1);
      SyntheticAst syntheticAst0 = new SyntheticAst("vxZPu+");
      Node node3 = syntheticAst0.getAstRoot(compiler0);
      boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node1, node3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("-}ybR%uGT+~cTa");
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      nodeTraversal0.traverse(node0);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis((AbstractCompiler) null, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkGlobalThis0);
      SyntheticAst syntheticAst0 = new SyntheticAst("5{");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node1 = new Node(86, node0, 43, 32);
      boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis((AbstractCompiler) null, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkGlobalThis0);
      SyntheticAst syntheticAst0 = new SyntheticAst("5{");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node1 = new Node(86, node0, 43, 32);
      checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
      checkGlobalThis0.visit(nodeTraversal0, node0, node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis((AbstractCompiler) null, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkGlobalThis0);
      SyntheticAst syntheticAst0 = new SyntheticAst(";");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node1 = new Node(86, node0, 43, 32);
      boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
      boolean boolean1 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bvxZPu+");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseTestCode("bvxZPu+");
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      Node node1 = new Node(42, node0, 42, 105);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      checkGlobalThis0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bvxZPu+");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseTestCode("bvxZPu+");
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      Node node1 = new Node(42, node0, 42, 105);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      checkGlobalThis0.visit(nodeTraversal0, node1, (Node) null);
      assertEquals(31, Node.INCRDECR_PROP);
  }
}
