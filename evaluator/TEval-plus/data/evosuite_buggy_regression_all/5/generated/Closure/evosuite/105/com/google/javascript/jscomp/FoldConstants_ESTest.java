/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:40:19 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DeadAssignmentsElimination;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("legth", (int) (byte)123, (int) (byte)123);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      Node node1 = Node.newNumber(4.294967296E9);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node1, node1, node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newString("msg.anon.no.return.valu", 38, 38);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      boolean boolean0 = foldConstants0.hasBreakOrContinue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber((-216.0));
      Node node1 = new Node(32, node0, node0, node0, 734, (-1530));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.visit((NodeTraversal) null, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber((-216.0));
      SyntheticAst syntheticAst0 = new SyntheticAst("'k~uC0o@/8f>_f");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(32, node1, node0, node0, 734, (-1530));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit((NodeTraversal) null, node2, node1);
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newString("49aQKvHM:YaR|");
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(32, node0, node0);
      // Undeclared exception!
      try { 
        foldConstants0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
      Node node0 = compiler0.parseSyntheticCode("f_T%-).FjFYy44IE1", "length");
      Node node1 = new Node(29, node0, node0, node0, 83, 7);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(27, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      Node node0 = Node.newString("(6j-0#5", 5561, 1151);
      Node node1 = new Node(26, node0, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(29, node0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(4, node0, node0);
      foldConstants0.process(node0, node1);
      assertEquals(3, Node.CONTINUE_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(314.7622442);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst("AxkqNJ82S");
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node(108, node0, node1);
      // Undeclared exception!
      try { 
        foldConstants0.process(node0, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      SyntheticAst syntheticAst0 = new SyntheticAst("'k~uC0o@/8f>_f");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(114, node0, node1);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.process(node1, node2);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = compiler0.parseTestCode("Mf@$<XQJPQ");
      Node node2 = new Node(115, node1, node0);
      // Undeclared exception!
      try { 
        foldConstants0.process((Node) null, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(314.7622442);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst("AxkqNJ82S");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(11, node1, node0);
      foldConstants0.process(node0, node2);
      assertFalse(node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber((double) (-46));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newNumber((double) 25, 2, 1);
      Node node2 = new Node(18, node0, node1);
      // Undeclared exception!
      try { 
        foldConstants0.process((Node) null, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst("eGR\"|OPi/@ClJ");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(19, node1, node0);
      foldConstants0.process(node2, node2);
      assertFalse(node2.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst("O5~o}d0^kYxnn");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(20, node0, node1);
      foldConstants0.process(node2, node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(2.147483647E9);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = compiler0.parseTestCode("msg.no.paren");
      foldConstants0.process(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = compiler0.parseSyntheticCode("9I#", "Array");
      Node node2 = new Node(37, node0, node1, node1);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = Node.newString("length", (int) (byte)123, (int) (byte)123);
      Node node1 = Node.newString("BK]", 30, 35);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node2 = new Node(510, node1, node0, node0, (-1630), 1);
      foldConstants0.visit((NodeTraversal) null, node2, node2);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber((-21.7));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      SyntheticAst syntheticAst0 = new SyntheticAst("4MPVp0R%&g>c@R%#");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(0, node0, node1);
      foldConstants0.process(node2, node2);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode("h");
      Node node0 = Node.newNumber((-606.9735994806), 4, 43);
      Node node1 = new Node(21, scriptOrFnNode0, node0);
      foldConstants0.process(scriptOrFnNode0, node1);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = Node.newString("length", (int) (byte)123, (int) (byte)123);
      Node node1 = new Node(2);
      Compiler compiler0 = new Compiler();
      Node node2 = new Node(14, node1, node1, node0, 45, (-1919));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit((NodeTraversal) null, node2, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("length", (int) (byte)123, (-46));
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.VariableRenamingPolicy");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(16, node1, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.process(node0, node2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newString("length", (int) (byte)123, (-46));
      Node node1 = Node.newString("}", (-3097), 2772);
      Node node2 = new Node(17, node1, node0, node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("f_T%-).FjFYy44IE1", "SN%//Okgv.ho,jL:");
      Node node1 = new Node(108, node0, node0, node0, 35, 3);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = new Node(80, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = compiler0.parseSyntheticCode("4M>PVp0R%&e>c@R%#", "4M>PVp0R%&e>c@R%#");
      foldConstants0.process(node0, node1);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = compiler0.parseTestCode("<gR.oSNGT4-o3*Aq");
      Node node2 = new Node(132, node0, node0, node1, 27, 26);
      // Undeclared exception!
      try { 
        foldConstants0.visit((NodeTraversal) null, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((double) (byte)123);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.DefaultPassConfig$62");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(42, node0, node1);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldHookIf(nodeTraversal0, node2, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = Node.newString("NOT");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node3 = new Node(61, node2, node1, node0, 7, 1187);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, syntacticScopeCreator0);
      Node node4 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DefaultPassConfig$47", "com.google.javascript.jscomp.DefaultPassConfig$47");
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeIf(nodeTraversal0, node3, node4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      SyntheticAst syntheticAst0 = new SyntheticAst("'k~uC0o@/8f>_f");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(10, node1, node0);
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode("4");
      foldConstants0.tryFoldAndOr(nodeTraversal0, scriptOrFnNode0, scriptOrFnNode0, scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("legth", (int) (byte)123, (int) (byte)123);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr((NodeTraversal) null, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("msg.anon.no.return.valu", (-46), 83);
      Node node1 = new Node((-4859), node0, node0, node0);
      foldConstants0.tryFoldAndOr((NodeTraversal) null, node0, node1, node0, node0);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("length", (int) (byte)123, (-46));
      Node node1 = new Node((byte)123, node0, node0, node0);
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node1, node1, node1);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown arithmetic operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(91.0);
      Node node1 = Node.newString("?W;)e; =~+[cS9B");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAdd(nodeTraversal0, node1, node0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString("msg.anon.no.return.valu", (-46), (-46));
      Node node1 = new Node(2, node0, node0, node0);
      foldConstants0.tryFoldAdd(nodeTraversal0, node1, node1, node0, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      Node node0 = Node.newString("}", 12, 12);
      Node node1 = new Node(31, node0, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldAdd(nodeTraversal0, node1, node0, node1, node1);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkAccidentalSemicolon0);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = new Node(2641);
      foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, node0, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(27, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node1, node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      Node node0 = Node.newNumber(2.147483647E9);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = compiler0.parseTestCode("MH_^Q7");
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node1, node1);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(4.294967296E9);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown bitwise operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = Node.newNumber((-3407.133));
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      foldConstants0.tryFoldBitAndOr((NodeTraversal) null, node0, node0, node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((-756.2502321030264));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node1, node0, node1, node0);
      assertFalse(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = Node.newNumber((-21.7));
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift((NodeTraversal) null, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1936.80828897);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(0.0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown shift operator: number
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("f_T%-).FjFYy44IE1", "SN%//Okgv.ho,jL:");
      Node node1 = new Node(41, node0, node0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = Node.newString(12, "dGw4lR DzNU%'");
      Node node1 = new Node(43, node0, node0);
      foldConstants0.tryFoldComparison((NodeTraversal) null, node1, node1, node1, node1);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-3407.133));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node1);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      Node node1 = Node.newString(1, "dGw4lR DzNU'");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node0, node1, node1);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString("msg.anon.no.return.valu", (-46), (-46));
      foldConstants0.tryFoldGetElem(nodeTraversal0, node0, node0, node0, node0);
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("4");
      Node node1 = new Node(63, node0, node0);
      foldConstants0.tryFoldGetElem(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = Node.newString(12, "dGw4lR DzNU%'");
      foldConstants0.tryFoldGetProp((NodeTraversal) null, node0, node0, node0, node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((double) (byte)123);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newString("length");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldGetProp(nodeTraversal0, node1, node0, node1, node1);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("length");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      Node node0 = Node.newNumber((-3407.133));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(2360, node0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node1, node1);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newNumber((double) 1, (-1), 2);
      Node node2 = new Node(8, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node1);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("length", (int) (byte)123, (-46));
      Node node1 = Node.newString("BK]", 30, 35);
      Node node2 = new Node(1, node1, node0, node0);
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newString("length", (int) (byte)123, (-46));
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = Node.newNumber((double) 1265, 1265, 1265);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldFor((NodeTraversal) null, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((double) (byte)123);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("NOT");
      Node node1 = new Node(100, node0, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(91.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(101, node0, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node0);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newNumber(0.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(17, Node.TYPE_PROP);
  }
}
