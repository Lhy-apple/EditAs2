/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:43:31 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.LinkedHashMultimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.PriorityQueue;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseTestCode("// Input %num%");
      RenameVars renameVars0 = new RenameVars(compiler0, "", false, false, false, variableMap0, (char[]) null, compilerOptions0.stripNameSuffixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("// Input %num%", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, true, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped((AbstractCompiler) null);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      RenameVars renameVars0 = new RenameVars((AbstractCompiler) null, (String) null, false, false, true, variableMap0, (char[]) null, set0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("`~WTw|V)/t=Rz`<o", sourceFile_Generator0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment("`~WTw|V)/t=Rz`<o", compilerInput0);
      renameVars_Assignment0.setNewName("com.google.javascript.jscomp.RenameVars");
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, "zg|W@C,.36S,0r", false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[1];
      EmptyScope emptyScope0 = new EmptyScope();
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) emptyScope0, "", "L {\n", (-49), (-49));
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        renameVars0.process(node0, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node0 = compiler0.parseTestCode("L ");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      renameVars0.process(node0, node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node0 = compiler0.parseTestCode("L ");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, true, (VariableMap) null, (char[]) null, compilerOptions0.stripTypes);
      renameVars0.process(node0, node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      LinkedHashMultimap<Object, String> linkedHashMultimap0 = LinkedHashMultimap.create();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Set<String> set0 = linkedHashMultimap0.replaceValues((Object) null, priorityQueue0);
      RenameVars renameVars0 = new RenameVars(compiler0, "jgda", false, false, false, (VariableMap) null, charArray0, set0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("L ", sourceFile_Generator0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      renameVars_ProcessVars0.incCount("L ", compilerInput0);
      renameVars_ProcessVars0.incCount("L ", compilerInput0);
      assertEquals("L ", compilerInput0.getName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JAVA_DISPATCH");
      RenameVars renameVars0 = new RenameVars(compiler0, "JAVA_DISPATCH", false, false, false, (VariableMap) null, (char[]) null, (Set<String>) null);
      renameVars0.process(node0, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node0 = compiler0.parseTestCode("L ");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
      renameVars0.process(node0, node0);
      renameVars0.process(node0, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, true, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode("");
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("L ", (CompilerInput) null);
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
  }
}
