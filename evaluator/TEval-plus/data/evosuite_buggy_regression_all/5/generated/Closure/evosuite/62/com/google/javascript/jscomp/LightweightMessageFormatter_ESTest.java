/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:35:37 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.ReplaceCssNames;
import com.google.javascript.jscomp.SimpleRegion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LightweightMessageFormatter_ESTest extends LightweightMessageFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertEquals("WARNING - goog.getCssName called with \"null\" arguments, expected 1 or 2.\n", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiagnosticType diagnosticType0 = Compiler.OPTIMIZE_LOOP_ERROR;
      JSError jSError0 = JSError.make(diagnosticType0, (String[]) null);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("ERROR - Exceeded max number of optimization iterations: {0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DiagnosticType diagnosticType0 = Compiler.OPTIMIZE_LOOP_ERROR;
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("JSC_OPTIMIZE_LOOP_ERROR", 0, 0, diagnosticType0, stringArray0);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("JSC_OPTIMIZE_LOOP_ERROR: ERROR - Exceeded max number of optimization iterations: null\n", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DiagnosticType diagnosticType0 = Compiler.OPTIMIZE_LOOP_ERROR;
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("JSC_OPTIMIZE_LOOP_ERROR", 1406, 1406, diagnosticType0, stringArray0);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("JSC_OPTIMIZE_LOOP_ERROR:1406: ERROR - Exceeded max number of optimization iterations: null\n", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleRegion simpleRegion0 = new SimpleRegion(16, 41, "PlSG+J\"d%D.{zX?: WARNING - null\n");
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
      assertEquals("  16| PlSG+J\"d%D.{zX?: WARNING - null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      SimpleRegion simpleRegion0 = new SimpleRegion(80, 80, "");
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      SimpleRegion simpleRegion0 = new SimpleRegion(80, 80, "T");
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
      assertEquals("  80| T", string0);
      assertNotNull(string0);
  }
}
