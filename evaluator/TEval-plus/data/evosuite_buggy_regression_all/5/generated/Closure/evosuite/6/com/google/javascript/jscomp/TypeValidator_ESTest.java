/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:29:58 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckMissingReturn;
import com.google.javascript.jscomp.CheckRegExp;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ExpandJqueryAliases;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReplaceCssNames;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0, (ScopeCreator) null);
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, enumType0, "Named type with empty name component");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.defaultLevel, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0, (ScopeCreator) null);
      typeValidator0.expectValidTypeofName(nodeTraversal0, (Node) null, "Not declared as a type name");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, functionType0, "Unknown class name");
      assertEquals(1, compiler0.getWarningCount());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiagnosticType diagnosticType0 = Compiler.OPTIMIZE_LOOP_ERROR;
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, functionType0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.defaultLevel, true);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      typeValidator0.expectActualObject(nodeTraversal0, (Node) null, functionType0, "X");
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(functionType0);
      typeValidator0.expectActualObject(nodeTraversal0, (Node) null, jSType0, (String) null);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectAnyObject((NodeTraversal) null, node0, enumType0, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH");
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      typeValidator0.expectString(nodeTraversal0, (Node) null, enumType0, "Named type with empty name component");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectString(nodeTraversal0, node0, functionType0, "c^~[w{*!(;*S.R'uo5{");
      assertEquals(1, compiler0.getWarningCount());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiagnosticType diagnosticType0 = TypeCheck.NOT_CALLABLE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_NOT_FUNCTION_TYPE", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectNumber(nodeTraversal0, (Node) null, functionType0, "com.google.javascript.jscomp.CollapseAnonymousFunctions");
      assertEquals(1, compiler0.getWarningCount());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      typeValidator0.expectBitwiseable((NodeTraversal) null, (Node) null, jSType0, "D@OhtUih");
      assertFalse(jSType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Access to private variable {0} not allowed outside file {1}.");
      typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, jSType0, "");
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, enumType0, "");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, functionType0, "Not declared as a type name", functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, (Node) null, enumType0, enumType0);
      assertFalse(enumType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, enumType0);
      assertEquals(1, compiler0.getWarningCount());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, (Node) null, functionType0, enumType0, node0, "JSC_GETCSSNAME_NUM_ARGS");
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_DETERMINISTIC_TEST", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, enumType0, (Node) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, functionType0, node0, "Not declared as a type name");
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_BAD_PRIVATE_GLOBAL_ACCESS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, enumType0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(functionType0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, (Node) null, jSType0, functionType0, "Named type with empty name component");
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiagnosticType diagnosticType0 = VarCheck.UNDEFINED_EXTERN_VAR_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("c*8;)1,^tR#\"g", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "Unknown class name");
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, jSType0, "JSC_UNDEFINED_EXTERN_VAR_ERROR: name {0} is not undefined in the externs.");
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, (Node) null, functionType0, enumType0, "Not declared as a type name");
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, (Node) null, functionType0, functionType0, (Node) null, 2);
      assertTrue(functionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Access to private variable {0} not allowed outside file {1}.", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, enumType0, node0, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, functionType0, (String) null, functionType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      ExpandJqueryAliases expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, expandJqueryAliases0, typedScopeCreator0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, enumType0, "Unknown class name", enumType0);
      assertTrue(functionType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, enumElementType0);
      assertFalse(node0.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_DETERMINISTIC_TEST", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) enumType0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_BAD_PRIVATE_GLOBAL_ACCESS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      compiler0.parse(sourceFile0);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, diagnosticType0.level, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectCanCast(nodeTraversal0, (Node) null, functionType0, functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, enumType0);
      assertEquals(1, compiler0.getWarningCount());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Access to private variable {0} not allowed outside file {1}.", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      CheckRegExp checkRegExp0 = new CheckRegExp((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkRegExp0, (ScopeCreator) null);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "(new Number(");
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, noType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
      doReturn((Scope) null).when(scope_Var0).getScope();
      doReturn(functionType0).when(scope_Var0).getType();
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable("", compilerInput0, node0, (Node) null, scope_Var0, "", functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
      doReturn((JSType) null).when(scope_Var0).getType();
      doReturn((String) null).when(scope_Var0).toString();
      Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(", currentToken=", compilerInput0, node0, node0, scope_Var0, "Not declared as a type name", functionType0);
      assertFalse(scope_Var1.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.GatherCandidates inlineProperties_GatherCandidates0 = inlineProperties0.new GatherCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_GatherCandidates0);
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      String string0 = typeValidator0.getReadableJSTypeName(node0, false);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DiagnosticType diagnosticType0 = ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_GETCSSNAME_NUM_ARGS", (Node) null);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "X");
      Node node0 = compiler0.parse(sourceFile0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.setShouldReport(false);
      CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, diagnosticType0.defaultLevel);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, memoizedScopeCreator0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      String[] stringArray0 = new String[0];
      JSError jSError0 = JSError.make((String) null, (Node) null, diagnosticType0, stringArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`cb", (Node) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(functionType0, functionType0, jSError0);
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Not declared as a constructor", (String) null, "");
      Node node0 = compiler0.parse(sourceFile0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(enumType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS;
      String[] stringArray0 = new String[0];
      JSError jSError0 = JSError.make((String) null, (Node) null, diagnosticType0, stringArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("JSC_BAD_PRIVATE_GLOBAL_ACCESS", (Node) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(functionType0, functionType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }
}
