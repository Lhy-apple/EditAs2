/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:31:52 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("require");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "require");
      processCommonJSModules0.process(node0, node0);
      processCommonJSModules0.process(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCllback");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCllback");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("module.exports");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module.exports");
      processCommonJSModules0.process(node0, node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./?xa_", "./?xa_");
      assertEquals("module$?xa_", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../?P", "2M");
      assertEquals("module$..$?P", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("UNSUPPORTED_DEFINE_SIGNATURE", "UNSUPPORTED_DEFINE_SIGNATURE");
      assertEquals("module$UNSUPPORTED_DEFINE_SIGNATURE", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "./", false);
      String string0 = processCommonJSModules0.guessCJSModuleName("./");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("^./");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "^./");
      Node node1 = Node.newString(37, "ERVA");
      processCommonJSModules0.process(node0, node1);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("requiDe");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "requiDe");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "./", "./");
      node1.addChildToBack(node0);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT): [testcode]:-1:-1
         // [source unknown]
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("ERVA");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "ERVA", false);
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("exports");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "exports");
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isCase());
  }
}
