/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:33:26 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6`mg", "6`mg");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("6`mg", compiler0, node0, "6`mg", scope0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);
      // Undeclared exception!
      try { 
        functionTypeBuilder1.buildAndRegister();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node(1, 1, 64);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
      
      functionTypeBuilder_AstFunctionContents0.recordNonEmptyReturn();
      assertTrue(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      Iterable<String> iterable0 = functionTypeBuilder_UnknownFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      boolean boolean0 = functionTypeBuilder_UnknownFunctionContents0.mayBeFromExterns();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.Maps$KeySet", "com.google.common.collect.Maps$KeySet");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.common.collect.Maps$KeySet", compiler0, node0, "com.google.common.collect.Maps$KeySet", scope0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      functionTypeBuilder1.inferFromOverriddenFunction(functionType0, node0);
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(functionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.Maps$KeySet", "com.google.common.collect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, (String) null, (Scope) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collect.Maps$KeySet", "com.google.common.collect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.common.collect.Maps$KeySet", compiler0, node0, "com.google.common.collect.Maps$KeySet", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents((FunctionTypeBuilder.FunctionContents) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collect.Maps$KeySet", "com.google.common.collect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.common.collect.Maps$KeySet", compiler0, node0, "com.google.common.collect.Maps$KeySet", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6`mg", "6`mg");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("6`mg", compiler0, node0, "6`mg", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("tQ<p4M!=;u5R\"V\"lD.0", "tQ<p4M!=;u5R\"V\"lD.0");
      Node node1 = Node.newString("tQ<p4M!=;u5R\"V\"lD.0");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("tQ<p4M!=;u5R\"V\"lD.0", compiler0, node0, "tQ<p4M!=;u5R\"V\"lD.0", (Scope) null);
      Node node2 = new Node(41, node1, node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node2);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("tQ<p4M!=;u5R\"V\"lD0", "tQ<p4M!=;u5R\"V\"lD0");
      Node node1 = Node.newString("tQ<p4M!=;u5R\"V\"lD0");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("tQ<p4M!=;u5R\"V\"lD0", compiler0, node0, "tQ<p4M!=;u5R\"V\"lD0", (Scope) null);
      Node node2 = new Node(41, node1, node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node2);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collect.Maps$KeySet", "com.google.common.collect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.common.collect.Maps$KeySet", compiler0, node0, "com.google.common.collect.Maps$KeySet", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("co{.google.common.collect.Maps$KeySet", "co{.google.common.collect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("co{.google.common.collect.Maps$KeySet", compiler0, node0, "co{.google.common.collect.Maps$KeySet", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("co{.go'gle.common.ollect.Maps$KeySet", "co{.go'gle.common.ollect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("co{.go'gle.common.ollect.Maps$KeySet", compiler0, node0, "co{.go'gle.common.ollect.Maps$KeySet", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "g_", "No warning class for name: %s");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.Maps$KeySet", "com.google.common.collect.Maps$KeySet");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.common.collect.Maps$KeySet", compiler0, node0, "com.google.common.collect.Maps$KeySet", scope0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
      functionTypeBuilder2.inferThisType(jSDocInfo0, functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("co{.go'gle.common.ollect.Maps$KeySet", "co{.go'gle.common.ollect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("co{.go'gle.common.ollect.Maps$KeySet", compiler0, node0, "co{.go'gle.common.ollect.Maps$KeySet", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6`mg", "6`mg");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("6`mg", compiler0, node0, "6`mg", scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSType jSType0 = linkedFlowScope0.getTypeOfThis();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, jSType0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("tQ<p4M;u5R\"V\"lD.0");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("tQ<p4M;u5R\"V\"lD.0", compiler0, node0, "tQ<p4M;u5R\"V\"lD.0", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6`mg", "6`mg");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("6`mg", compiler0, node0, "6`mg", scope0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "[W?o'0}Yn", "[W?o'0}Yn");
      Node node1 = Node.newString(44, "[W?o'0}Yn", 40, 46);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("[W?o'0}Yn", compiler0, node0, "[W?o'0}Yn", (Scope) null);
      Node node2 = new Node(39, node1, 8, 40);
      functionTypeBuilder0.inferParameterTypes(node2, (JSDocInfo) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "g_", "No warning class for name: %s");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      Node node1 = Node.newString(1, "g_");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.addChildToBack(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node1);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "[W?o'0}Yn", "[W?o'0}Yn");
      Node node1 = Node.newString(44, "[W?o'0}Yn", 40, 46);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("[W?o'0}Yn", compiler0, node0, "[W?o'0}Yn", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = new Node(39, node1, 8, 40);
      functionTypeBuilder0.inferParameterTypes(node2, jSDocInfo0);
      functionTypeBuilder0.inferParameterTypes(node2, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("pVFeJ$n=SNwu", "pVFeJ$n=SNwu");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("pVFeJ$n=SNwu", compiler0, node0, "pVFeJ$n=SNwu", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("co{.go'gle.common.ollect.Maps$KeySet", "co{.go'gle.common.ollect.Maps$KeySet");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("co{.go'gle.common.ollect.Maps$KeySet", compiler0, node0, "co{.go'gle.common.ollect.Maps$KeySet", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.aps$KeySet", "com.google.common.collect.aps$KeySet");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.common.collect.aps$KeySet", compiler0, node0, "com.google.common.collect.aps$KeySet", scope0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      functionTypeBuilder1.buildAndRegister();
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = new Node(1, 1, 64);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName("");
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertTrue(iterable0.contains(""));
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents((Node) null);
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = new Node(1, 1, 64);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName("");
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName("&sQ_n>");
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }
}
