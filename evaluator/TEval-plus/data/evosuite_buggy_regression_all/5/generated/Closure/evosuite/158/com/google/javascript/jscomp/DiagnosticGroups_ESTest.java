/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:45:51 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.LinkedListMultimap;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import java.util.List;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiagnosticGroups_ESTest extends DiagnosticGroups_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.registerGroup((String) null, diagnosticTypeArray0);
      assertNotNull(diagnosticGroup0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
      // Undeclared exception!
      try { 
        diagnosticGroups0.getRegisteredGroups();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      // Undeclared exception!
      try { 
        diagnosticGroups0.setWarningLevels(compilerOptions0, list0, compilerOptions0.checkShadowVars);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No warning class for name: java.class
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.DEPRECATED;
      DiagnosticGroup diagnosticGroup1 = DiagnosticGroups.registerGroup("tFC", diagnosticGroup0);
      assertSame(diagnosticGroup1, diagnosticGroup0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[6];
      // Undeclared exception!
      try { 
        DiagnosticGroups.registerGroup("vxy[<rcAC-;", diagnosticGroupArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DiagnosticGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LinkedListMultimap<String, String> linkedListMultimap0 = LinkedListMultimap.create(0);
      List<String> list0 = linkedListMultimap0.get((String) null);
      diagnosticGroups0.setWarningLevels(compilerOptions0, list0, compilerOptions0.aggressiveVarCheck);
      assertFalse(compilerOptions0.generateExports);
  }
}
