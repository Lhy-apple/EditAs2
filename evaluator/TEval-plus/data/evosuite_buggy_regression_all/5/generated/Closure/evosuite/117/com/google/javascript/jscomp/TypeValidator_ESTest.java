/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:41:39 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.CheckSuspiciousCode;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, enumType0, functionType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHk[|-W##p ");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, "$1K,XHk[|-W##p ");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      typeValidator0.expectNumber(nodeTraversal0, node0, enumType0, "Named type with empty name component");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("$1K,XHks|-W##p ");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(functionType0, functionType0, (JSError) null);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(function (...[?]): ?, function (...[?]): ?)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, functionType0, "Object#Key");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$sKXHks-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      typeValidator0.expectActualObject(nodeTraversal0, node0, functionType0, "Unknown class name");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-GuT!$6QxKw\"H.oNoU}H");
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.BOOLEAN_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative1;
      jSTypeNativeArray0[3] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, (String) null);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, "Named type with empty name component");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHk[|-W##p ");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType0, "");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, noType0, "Not declared as a type name");
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHk[|-W##p ");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "$1K,XHk[|-W##p ");
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "com.google.javascript.jscomp.AnalyzePrototypeProperties$LiteralProperty");
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0, memoizedScopeCreator0);
      typeValidator0.expectString(nodeTraversal0, node0, jSType0, "|OeSVh$");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0, (ScopeCreator) null);
      typeValidator0.expectString(nodeTraversal0, node0, functionType0, "Named type with empty name component");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, typedScopeCreator0);
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "4,>Ko7N9r#iY5");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, noObjectType0, "$1K,XHks|-W##p ");
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W## ");
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, "Not declared as a constructor");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-GuT!$6QxKw\"H.oU}H");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, functionType0, "-GuT!$6QxKw\"H.oU}H");
      assertFalse(functionType0.isTemplatizedType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "Named type with empty name component");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0, typedScopeCreator0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, functionType0, "$1K,XHks|-W##p ");
      assertTrue(functionType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, enumType0, "Expected line number between 1 and ");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "", jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHk[|-W##p ");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "", jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-GuT!$6QxKw\"H.oNoU}H");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("$'5T9ml8+");
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined((NodeTraversal) null, node0, templateType0, "", templateType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0, (ScopeCreator) null);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, enumElementType0, functionType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, functionType0);
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, functionType0, node0, "O|(eF7yEdk@");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, functionType0, node0, "Not declared as a type name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W## ");
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, functionType0, "Unknown class name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, functionType0, node0, 1);
      assertFalse(functionType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      CheckSuspiciousCode checkSuspiciousCode0 = new CheckSuspiciousCode();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSuspiciousCode0);
      // Undeclared exception!
      try { 
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, enumType0, node0, (-1688));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHk[|-W##p ");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, "ia3rZwpY", jSType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, true, jSTypeArray0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, jSType0, "Not declared as a type name", functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, syntacticScopeCreator0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHk[|-W##p ");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0, (ScopeCreator) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("c)|;^P&0u[Q4x");
      typeValidator0.expectSuperType(nodeTraversal0, node0, templateType0, templateType0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, node0, enumType0, enumType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, syntacticScopeCreator0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, enumElementType0, enumType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable("Not declared as a type name", (CompilerInput) null, node0, node0, (Scope.Var) null, "Named type with empty name component", functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertFalse(functionType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeArray0[2] = (JSType) functionType0;
      jSTypeArray0[3] = jSTypeArray0[1];
      jSTypeArray0[4] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) functionType0, false, jSTypeArray0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType1, jSTypeArray0[4], "Not declared as a type name");
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeArray0[2] = (JSType) functionType0;
      jSTypeArray0[3] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) functionType0, false, jSTypeArray0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType1, jSTypeArray0[2], "duplicate");
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-GuT!$6QxKw\"H.oNoU}H");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      String string0 = typeValidator0.getReadableJSTypeName(node0, false);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$1K,XHks|-W##p ");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      typeValidator0.setShouldReport(false);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, enumElementType0, node0, "Not declared as a type name");
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$sKXHks-W##p ");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(functionType0, functionType0, (JSError) null);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("$1K,XHks|-W##p ");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(functionType0, functionType0, (JSError) null);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }
}
