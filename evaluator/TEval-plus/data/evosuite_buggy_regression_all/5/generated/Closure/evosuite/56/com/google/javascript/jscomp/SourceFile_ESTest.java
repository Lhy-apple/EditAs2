/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:35:03 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("/8Nvy", (SourceFile.Generator) null);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.SourceFile");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromGenerator("| *9KIa[d:;o#W`eBs", (SourceFile.Generator) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SourceFile sourceFile0 = SourceFile.fromReader("L6l.(>hhV", stringReader0);
      assertEquals("L6l.(>hhV", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("\n", "\n", "\n");
      sourceFile0.clearCachedSource();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("640!4{", "kYs,atIvH/4H");
      String string0 = sourceFile_Preloaded0.getCodeNoCache();
      assertEquals("kYs,atIvH/4H", string0);
      assertEquals("640!4{", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Generator0);
      sourceFile_Generated0.getName();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("Y!x'#PfvVK");
      try { 
        sourceFile0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("/", "/", "/");
      sourceFile_Preloaded0.setIsExtern(false);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("6x-", sourceFile_Generator0);
      sourceFile_Generated0.toString();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        SourceFile.fromInputStream("", "", (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromInputStream("9S`Yy$v8}Rq^V9", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("640!4{", "kYs,atIvH/4H");
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
      assertEquals("640!4{", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromCode((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromCode("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("Ukc&h|sM", "IOException thrown while closing Closeable.");
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(1, int0);
      
      sourceFile_Preloaded0.getLineOffset(1);
      assertEquals("Ukc&h|sM", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("5z\n", "5z\n", "5z\n");
      sourceFile_Preloaded0.getLineOffset(1);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("5z\n", "5z\n");
      // Undeclared exception!
      try { 
        sourceFile_Preloaded0.getLineOffset((-1287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -1287
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("\n", "\n", "\n");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(1544);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 0
         // Actual: 1544
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("5z\n", "5z\n", "5z\n");
      sourceFile_Preloaded0.getNumLines();
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(1, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("yc&a", "\nActual: ");
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals("yc&a", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(2, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-16LE", "");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, charset0);
      String string0 = sourceFile0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("UTF-16LE", "UTF-16LE");
      sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-16LE", "UTF-16LE");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.getNumLines();
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("SP*Vn\"lpt;9 \"*b", "SP*Vn\"lpt;9 \"*b");
      sourceFile_Preloaded0.getLine((-3466));
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("WAsUyJc])NK", sourceFile_Generator0);
      sourceFile_Generated0.getLine(2865);
      sourceFile_Generated0.getNumLines();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("5z\n", "5z\n", "5z\n");
      String string0 = sourceFile_Preloaded0.getLine(2373);
      assertNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("5z\n", "5z\n");
      String string0 = sourceFile_Preloaded0.getLine((-3466));
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertNotNull(string0);
      assertEquals("5z", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("WAsUyJc])NK", sourceFile_Generator0);
      Region region0 = sourceFile_Generated0.getRegion(1552);
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("\n", "\n", "\n");
      Region region0 = sourceFile0.getRegion(10);
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("yc&a", "\nActual: ");
      Region region0 = sourceFile_Preloaded0.getRegion(2);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertNull(region0);
      assertEquals("yc&a", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("\n", "", "");
      // Undeclared exception!
      try { 
        sourceFile0.getRegion((-15));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("yc&a", "\nActual: ");
      Region region0 = sourceFile_Preloaded0.getRegion((-15));
      assertEquals("\nActual: ", region0.getSourceExcerpt());
      assertEquals(2, region0.getEndingLineNumber());
      assertNotNull(region0);
      assertEquals("yc&a", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("5z\n", "5z\n", "5z\n");
      Region region0 = sourceFile_Preloaded0.getRegion((-494));
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals("5z", region0.getSourceExcerpt());
      assertNotNull(region0);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals(1, region0.getBeginningLineNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("5z\n", (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }
}
