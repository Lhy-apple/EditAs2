/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:37:56 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      assertFalse(templateType0.isRecordType());
      
      templateType0.getTypesUnderShallowEquality(noResolvedType0);
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isResolved());
      assertTrue(noResolvedType0.isEmptyType());
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", (String) null, 2, 2);
      assertFalse(namedType0.isResolved());
      
      namedType0.setValidator((Predicate<JSType>) null);
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "5BOivH5");
      boolean boolean0 = errorFunctionType0.isStringValueType();
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.unboxesTo();
      assertNull(jSType0);
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      ObjectType objectType0 = templateType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getJSDocInfo();
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{xV1YQ{i;");
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      linkedHashSet0.add(errorFunctionType0);
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{(function (this:{-2045453352}, {12}, {12}, {12}): {-2045453352})}", string0);
      assertFalse(unionType0.isEmptyType());
      assertFalse(unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isRegexpType();
      assertFalse(boolean0);
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isString();
      assertTrue(noResolvedType0.isEmptyType());
      assertTrue(boolean0);
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = templateType0.isDateType();
      assertFalse(boolean0);
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ":cRB#7_P");
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowInequality(stringType0);
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isUnionType());
      
      jSType_TypePair0.typeB.getTypesUnderEquality(stringType0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEmptyType());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "", templateType0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, enumType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Not declared as a type name");
      boolean boolean0 = enumElementType0.matchesObjectContext();
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
      boolean boolean0 = parameterizedType0.isNullable();
      assertTrue(objectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(proxyObjectType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = templateType0.isConstructor();
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Tye:dQ");
      boolean boolean0 = templateType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M(\".<*mE&z");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderEquality(errorFunctionType0);
      // Undeclared exception!
      try { 
        jSType_TypePair0.typeA.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      boolean boolean0 = recordType0.isBooleanValueType();
      assertFalse(recordType0.isAllType());
      assertFalse(boolean0);
      assertFalse(recordType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      boolean boolean0 = nullType0.canBeCalled();
      assertFalse(nullType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(nullType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.hasDisplayName();
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNumber();
      assertTrue(noResolvedType0.isEmptyType());
      assertTrue(boolean0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      boolean boolean0 = unionType0.isTemplateType();
      assertFalse(unionType0.isEmptyType());
      assertFalse(unionType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.isOrdinaryFunction();
      assertFalse(boolean0);
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "WHILE");
      boolean boolean0 = errorFunctionType0.isNamedType();
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.isInterface();
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", (String) null, 0, 0);
      boolean boolean0 = namedType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", noResolvedType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, enumType0);
      boolean boolean0 = indexedType0.isCheckedUnknownType();
      assertTrue(noResolvedType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(indexedType0.isEmptyType());
      assertFalse(indexedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", noResolvedType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, enumType0);
      indexedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(enumType0.isResolved());
      assertTrue(noResolvedType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isTheObjectType();
      assertFalse(boolean0);
      assertFalse(allType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "K]");
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", templateType0);
      enumType0.matchesUint32Context();
      assertFalse(enumType0.isEmptyType());
      assertFalse(enumType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(voidType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("7fR\"a'EZVV`yCKX5p-i", jSType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, jSType0);
      indexedType0.getTypesUnderInequality(jSType0);
      assertFalse(indexedType0.isEmptyType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
      boolean boolean0 = proxyObjectType0.matchesInt32Context();
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ":cRB#7_P");
      boolean boolean0 = errorFunctionType0.isEnumType();
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[5];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[3] = jSTypeNative0;
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      boolean boolean0 = jSType0.isNumberValueType();
      assertFalse(boolean0);
      assertFalse(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      templateType0.forgiveUnknownNames();
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "-Bw/'S%WI5=");
      errorFunctionType0.clearResolved();
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = templateType0.isFunctionPrototypeType();
      assertFalse(templateType0.isAllType());
      assertFalse(boolean0);
      assertFalse(templateType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = templateType0.hasDisplayName();
      assertFalse(templateType0.isEmptyType());
      assertTrue(boolean0);
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", (String) null, 2049, 2049);
      boolean boolean0 = namedType0.hasDisplayName();
      assertFalse(boolean0);
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noObjectType0, noObjectType0);
      indexedType0.getTypesUnderInequality(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(noResolvedType0.isEmptyType());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) noResolvedType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(templateType0, jSTypeArray0);
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "RETURN");
      JSType.isEquivalent(errorFunctionType0, errorFunctionType0);
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
      assertFalse(boolean0);
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = templateType0.equals(jSTypeRegistry0);
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "LABEL");
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", templateType0);
      boolean boolean0 = enumType0.equals(templateType0);
      assertFalse(boolean0);
      assertFalse(enumType0.isEmptyType());
      assertFalse(enumType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.findPropertyType((String) null);
      assertFalse(allType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Named type with empty name component");
      enumElementType0.findPropertyType("] [end line: ");
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      boolean boolean0 = nullType0.canAssignTo(objectType0);
      assertFalse(boolean0);
      assertFalse(objectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M(\".<*mE&z");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderEquality(errorFunctionType0);
      boolean boolean0 = jSType_TypePair0.typeB.canAssignTo(templateType0);
      assertFalse(templateType0.isEmptyType());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ObjectType objectType0 = booleanType0.dereference();
      assertFalse(objectType0.isEmptyType());
      assertFalse(objectType0.isAllType());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", allType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, allType0);
      indexedType0.getTypesUnderInequality(allType0);
      assertFalse(indexedType0.isEmptyType());
      assertFalse(indexedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      JSType jSType0 = jSTypeRegistry0.createOptionalType(templateType0);
      templateType0.getTypesUnderEquality(jSType0);
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", noResolvedType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, enumType0);
      indexedType0.getTypesUnderInequality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", allType0);
      allType0.testForEqualityHelper(allType0, enumType0);
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isEmptyType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "REF_NS_MEMBER");
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", templateType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) enumType0, (JSType) enumType0, (List<JSType>) linkedList0);
      enumType0.testForEqualityHelper(templateType0, functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(templateType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, noResolvedType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, enumType0);
      indexedType0.getTypesUnderInequality(enumType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("//O2!vm,-k:p-+d", noType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, noType0);
      indexedType0.getTypesUnderInequality(noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
      noType0.getTypesUnderEquality(functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "G|X:cRB#7_P");
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.testForEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{xV1YQ{i;");
      JSType jSType0 = errorFunctionType0.getReturnType();
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, jSType0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      linkedHashSet0.add(errorFunctionType0);
      indexedType0.testForEqualityHelper(unionType0, unionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, recordType0, ",c_3Rxkr![l");
      indexedType0.testForEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(recordType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(boolean0);
      assertTrue(noResolvedType0.isEmptyType());
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autoboxesTo();
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{xV1YQ{i;");
      JSType jSType0 = errorFunctionType0.getReturnType();
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, jSType0);
      recordType0.getLeastSupertype(indexedType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(recordType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      recordType0.getLeastSupertype(jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) noResolvedType0);
      assertTrue(jSType0.isEmptyType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      noResolvedType0.getGreatestSubtype(recordType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "eval");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSType jSType0 = recordType0.getGreatestSubtype(templateType0);
      JSType jSType1 = templateType0.getGreatestSubtype(jSType0);
      assertFalse(jSType1.isEmptyType());
      assertFalse(jSType1.isAllType());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noObjectType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(jSType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noObjectType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "can't use .skipNulls() with maps");
      errorFunctionType0.getGreatestSubtype(jSType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) objectType0, (JSType) nullType0);
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEmptyType());
      assertTrue(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noObjectType0);
      jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noObjectType0);
      proxyObjectType0.getTypesUnderEquality(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      
      jSType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = templateType0.differsFrom(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noObjectType0);
      boolean boolean0 = proxyObjectType0.differsFrom(noObjectType0);
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertTrue(proxyObjectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "REF_NS_MEMBER");
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", templateType0);
      boolean boolean0 = enumType0.differsFrom(templateType0);
      assertTrue(boolean0);
      assertFalse(enumType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", noResolvedType0);
      boolean boolean0 = noResolvedType0.differsFrom(enumType0);
      assertFalse(enumType0.isEmptyType());
      assertTrue(boolean0);
      assertTrue(noResolvedType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      errorFunctionType0.getGreatestSubtype(allType0);
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(voidType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("7fR\"a'EZVV`yCKX5p-i", jSType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, jSType0);
      indexedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(enumType0.isResolved());
      assertFalse(voidType0.isEmptyType());
  }
}
