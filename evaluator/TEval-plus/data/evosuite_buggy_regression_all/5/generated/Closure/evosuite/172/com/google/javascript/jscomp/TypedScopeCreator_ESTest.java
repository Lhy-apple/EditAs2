/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:47:30 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypedScopeCreator_ESTest extends TypedScopeCreator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION");
      Node node0 = compiler0.parse(sourceFile0);
      Node node1 = new Node(120, node0, node0, node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      // Undeclared exception!
      try { 
        typedScopeCreator0.createScope(node1, (Scope) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(CATCH): [source unknown]
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION");
      Node node0 = compiler0.parse(sourceFile0);
      Node node1 = new Node(37, node0, node0, node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION");
      Node node0 = compiler0.parse(sourceFile0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = compiler0.parseTestCode("com.google.javacript.rhino.head.ast.XmlPropRe");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node2 = new Node(1, nodeArray0, 39, 126);
      Scope scope1 = typedScopeCreator0.createScope(node2, scope0);
      scope1.resolveTypes();
      assertEquals(1, scope1.getVarCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_NVLID_MODIFIESANN+TAION", "JSC_NVLID_MODIFIESANN+TAION", "JSC_NVLID_MODIFIESANN+TAION");
      Node node0 = compiler0.parse(sourceFile0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION");
      Node node0 = compiler0.parse(sourceFile0);
      Node node1 = new Node(118, node0, node0, node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      // Undeclared exception!
      try { 
        typedScopeCreator0.createScope(node1, (Scope) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(VAR): [source unknown]
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = compiler0.parseTestCode("LoEN=egs%n1Y");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      Node node0 = compiler0.parseTestCode("LoEN=egs%n1Y");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION");
      Node node0 = compiler0.parse(sourceFile0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = compiler0.parseTestCode("Z,E4Yo1eS^u| 9");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
      assertTrue(scope1.isLocal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION");
      Node node0 = compiler0.parse(sourceFile0);
      Node node1 = new Node(43, node0, node0, node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
      assertEquals(32, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION", "JSC_INVALID_MODIFIESANNOTAION");
      Node node0 = compiler0.parse(sourceFile0);
      Node node1 = new Node(44, node0, node0, node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlPropRef");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      assertEquals(33, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("JSC_INVALID_MODFIESANNTAION", "first new child has existing parent", "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      Node node0 = compiler0.parse(sourceFile0);
      Scope scope0 = Scope.createGlobalScope(node0);
      compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlPropRef");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertFalse(node0.isNull());
  }
}
