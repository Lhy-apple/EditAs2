/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:46:29 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.InputId;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsAst_ESTest extends JsAst_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("Tracer should not be null at the end of a pass.", "");
      JsAst jsAst0 = new JsAst(sourceFile0);
      InputId inputId0 = jsAst0.getInputId();
      assertEquals("Tracer should not be null at the end of a pass.", inputId0.getIdName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("STRING, NAME, or ADD node expected; found: ", "com.google.javascript.jscomp.JsAst");
      JsAst jsAst0 = new JsAst(sourceFile0);
      SourceFile sourceFile1 = jsAst0.getSourceFile();
      assertEquals("STRING, NAME, or ADD node expected; found: ", sourceFile1.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("Tracer should not be null at the end of a pass.", charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      jsAst0.clearAst();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("t$]F[<{kG.q:F2z5");
      JsAst jsAst0 = new JsAst(sourceFile0);
      jsAst0.setSourceFile(sourceFile0);
      assertEquals("t$]F[<{kG.q:F2z5", sourceFile0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("Tracer should not be null at the end of a pass.", charset0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      jsAst0.getAstRoot(compiler0);
      jsAst0.getAstRoot(compiler0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }
}
