/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:46:15 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isLocal();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isGlobal();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("E$h==GCZv~C=B4", node0, (JSType) null, (CompilerInput) null, false);
      scope_Var0.getJSDocInfo();
      assertFalse(scope_Var0.isDefine());
      assertFalse(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = Node.newNumber(986.141189);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("<.qC9qC qT6L=>", node0, functionType0, (CompilerInput) null);
      String string0 = scope_Var0.getName();
      assertTrue(scope_Var0.isTypeInferred());
      assertNotNull(string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      Node node1 = scope_Var0.getNameNode();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      scope_Var0.getScope();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, (JSType) null, (CompilerInput) null, false);
      scope_Var0.getType();
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, compilerInput0, false);
      // Undeclared exception!
      try { 
        scope_Var0.setType((JSType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isDefine();
      assertFalse(boolean0);
      assertTrue(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.isBleedingFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      String string0 = scope_Var0.toString();
      assertEquals("Scope.Var Not declared as a constructor", string0);
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Compiler compiler0 = new Compiler();
      Scope scope0 = null;
      try {
        scope0 = new Scope(node0, compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      boolean boolean0 = scope0.isBottom();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      StaticSlot<JSType> staticSlot0 = scope0.getSlot("Not declared as a constructor");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = scope0.getRootNode();
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newNumber(986.141189);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      int int0 = scope0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newNumber(986.141189);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      int int0 = scope0.getVarCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      assertNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot("Unknown class name");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Iterator<Scope.Var> iterator0 = scope0.getVars();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      StaticScope<JSType> staticScope0 = scope0.getParentScope();
      assertNull(staticScope0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Unknown class name", "Not declared as a constructor");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, (JSType) null, compilerInput0, false);
      // Undeclared exception!
      try { 
        scope_Var0.getInitialValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Scope$Var", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isExtern();
      assertTrue(boolean0);
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, compilerInput0, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Named type with empty name component", scope_Var0.getInputName());
      assertTrue(scope_Var0.isTypeInferred());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, compilerInput0, false);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
      assertFalse(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Unknown class name", "Not declared as a constructor");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", (Node) null, (JSType) null, compilerInput0, true);
      boolean boolean0 = scope_Var0.isConst();
      assertTrue(scope_Var0.isTypeInferred());
      assertEquals("Unknown class name", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = new Node(86, node0, node0, node0, node0, 2, 12);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a type name", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, compilerInput0);
      Node node2 = scope_Var0.getInitialValue();
      assertEquals("Not declared as a type name", scope_Var0.getInputName());
      assertNotNull(node2);
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertFalse(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = new Node(51, node0, node0, node0, node0, 2, 12);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a type name", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, compilerInput0);
      Node node2 = scope_Var0.getInitialValue();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Not declared as a type name", scope_Var0.getInputName());
      assertTrue(scope_Var0.isTypeInferred());
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      scope_Var0.resolveType(simpleErrorReporter0);
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = Node.newNumber(986.141189);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("<.qC9qC qT6L=>", node0, functionType0, (CompilerInput) null);
      scope_Var0.resolveType(simpleErrorReporter0);
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("G{qXg/f?Z");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, (JSType) null, compilerInput0);
      String string0 = scope_Var0.getInputName();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertEquals("G{qXg/f?Z", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
      assertEquals("<non-file>", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(scope_Var0);
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(":BS3=t]z@p$+^#/<;ze");
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
      assertTrue(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = Node.newString(86, "Named type with empty name component", (-1483), (-1588));
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node1, (JSType) null, (CompilerInput) null);
      Scope.Var scope_Var1 = scope0.declare("Unknown class name", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(scope_Var1);
      assertFalse(boolean0);
      assertFalse(scope_Var1.isDefine());
      assertTrue(scope_Var1.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope scope1 = null;
      try {
        scope1 = new Scope(scope0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = Node.newString(1729, "Not declared as a type name", 8, 4);
      Scope scope1 = new Scope(scope0, node1);
      Scope scope2 = scope1.getGlobalScope();
      assertFalse(scope2.isLocal());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      // Undeclared exception!
      try { 
        scope0.declare((String) null, node0, (JSType) null, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      // Undeclared exception!
      try { 
        scope0.declare("", node0, (JSType) null, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope scope1 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope1.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, (JSType) null, (CompilerInput) null);
      scope0.undeclare(scope_Var0);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      Scope.Var scope_Var0 = scope0.getVar("Not declared as a type name");
      assertNotNull(scope_Var0);
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = Node.newString(1729, "Not declared as a type name", 8, 4);
      Scope scope1 = new Scope(scope0, node1);
      Scope.Var scope_Var0 = scope1.getVar("Unknown class name");
      assertNull(scope_Var0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("G{qXg/f?Z");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, (JSType) null, compilerInput0);
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertEquals("G{qXg/f?Z", scope_Var0.getInputName());
      
      boolean boolean0 = scope0.isDeclared("Unknown class name", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = Node.newString(1729, "Not declared as a type name", 8, 4);
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isDeclared("Not declared as a type name", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = Node.newString(1729, "Not declared as a type name", 8, 4);
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isDeclared("Too many elements to create power set: %s > 30", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = Node.newNumber(318.0);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = Node.newString(1729, "Not declared as a type name", 8, 4);
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isLocal();
      assertTrue(boolean0);
  }
}
