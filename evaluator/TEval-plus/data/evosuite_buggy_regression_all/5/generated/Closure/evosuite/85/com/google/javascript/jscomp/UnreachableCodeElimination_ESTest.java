/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:38:08 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = new Node(4);
      node0.addChildrenToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination((AbstractCompiler) null, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, unreachableCodeElimination0, (ScopeCreator) null);
      Node node0 = new Node(1626);
      Node node1 = new Node(105, node0, 19, 1);
      unreachableCodeElimination0.visit(nodeTraversal0, node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.LightweightMessageFormatter", "com.google.javascript.jscomp.LightweightMessageFormatter");
      Node node1 = new Node(18, node0);
      unreachableCodeElimination0.process(node0, node1);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "L0p", "L0p");
      Node node1 = new Node(4);
      node0.addChildrenToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("{SyntheticVarsDeclar}", "{SyntheticVarsDeclar}");
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6#V=8Ga(-O(jX?{", "6#V=8Ga(-O(jX?{");
      Node node1 = compiler0.parseSyntheticCode("6#V=8Ga(-O(jX?{", "6#V=8Ga(-O(jX?{");
      node0.addChildrenToFront(node1);
      unreachableCodeElimination0.process(node1, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "L0p", "L0p");
      Node node1 = new Node(4);
      Node node2 = Node.newNumber(631.2902);
      node0.addChildrenToFront(node1);
      node1.addChildrenToFront(node2);
      unreachableCodeElimination0.process(node2, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode(";", ";");
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6#V=8Ga(-O(jX?{", "6#V=8Ga(-O(jX?{");
      Node node1 = compiler0.parseSyntheticCode("6#V=8Ga(-O(jX?{", "6#V=8Ga(-O(jX?{");
      node0.addChildrenToFront(node1);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node2 = new Node(16, node0);
      unreachableCodeElimination0.process(node0, node2);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "UPUI", "UPUI");
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
  }
}
