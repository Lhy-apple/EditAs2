/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:43:02 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-25));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "WQV|K`d(Gn^~<[l", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-25));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("\"WQV|K`d\\(Gn^~<[l\"", (Node) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), 0);
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("yTn 'E", compiler0, node0, "6Wj1:Kv", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Node node1 = new Node((-1), node0, 35, 0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), 0);
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("WQV|K`d(Gn^~<[l", compiler0, node0, (String) null, (Scope) null);
      Node node1 = new Node((-3), node0, 39, 50);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-10), (-10));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("WQV|K`d(Gn^~<[l", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-10), (-10));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("WQV|K`d(Gn^~<[l", compiler0, node0, "WQV|K`d(Gn^~<[l", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferReturnType(jSDocInfo0);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-20), (-20));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), 0);
      compiler0.toSource(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("yTn 'E", compiler0, node0, "6Wj1:Kv", (Scope) null);
      functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-10), (-10));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("WQV|K`d(Gn^~<[l", compiler0, node0, "WQV|K`d(Gn^~<[l", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-25));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, objectType0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-25));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "k_amn", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, objectType0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("#WQV|K`d(Gn~<[l", (-25), (-25));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("#WQV|K`d(Gn~<[l", compiler0, node0, "#WQV|K`d(Gn~<[l", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-25));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-10), (-10));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "WQV|K`d(Gn^~<[l", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferThisType(jSDocInfo0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-25));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-25));
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("NV8");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), 0);
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("yTn 'E", compiler0, node0, "6Wj1:Kv", (Scope) null);
      Node node1 = new Node((-1), node0, 35, 0);
      functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-20), (-20));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(6, node0, 41, 1117);
      functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-25), (-3));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("WQV|K`d(Gn^~<[l", compiler0, node0, (String) null, (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-10), (-10));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("WQV|K`d(Gn^~<[l", compiler0, node0, "WQV|K`d(Gn^~<[l", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-20), (-20));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("WQV|K`d(Gn^~<[l", (-20), (-20));
      compiler0.toSource(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("\"WQV|K`d\\(Gn^~<[l\"", compiler0, node0, "\"WQV|K`d\\(Gn^~<[l\"", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
  }
}
