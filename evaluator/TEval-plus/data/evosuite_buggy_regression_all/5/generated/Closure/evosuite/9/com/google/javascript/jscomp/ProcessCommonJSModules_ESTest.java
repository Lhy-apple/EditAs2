/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:30:21 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("exports");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "exports");
      processCommonJSModules0.process(node0, node0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "", false);
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("module.exports");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "../ProcessCommonJSModbles supkorts only on invocation per CompilerInpu / script node");
      processCommonJSModules0.process(node0, node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./UnknownCharMatcher", "./UnknownCharMatcher");
      assertEquals("module$UnknownCharMatcher", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName("../ProcessCommonJSModules supports only one invocation per CompilerInput / script node", "../ProcessCommonJSModules supports only one invocation per CompilerInput / script node");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 25: ../ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("module$", "module$");
      assertEquals("module$module$", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "Only one parameter type must be the template type/", false);
      String string0 = processCommonJSModules0.guessCJSModuleName("Only one parameter type must be the template type/");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("LO%KP90tqR");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "../ProcessCommonJSModules supkorts only on invocation per CompilerInpu / script node");
      Node node1 = new Node(37, node0, node0, node0, node0);
      processCommonJSModules0.process(node0, node1);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("LO%KP90tqR");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "../ProcessCommonJSModules supkorts only on invocation per CompilerInpu / script node", "com.google.javascript.jscomp/");
      node0.addChildrenToBack(node1);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "../ProcessCommonJSModules supkorts only on invocation per CompilerInpu / script node");
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT): [testcode]:1:0
         // ../ProcessCommonJSModules supkorts only on invocation per CompilerInpu / script node
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("g<Jq");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "g<Jq", false);
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isOptionalArg());
  }
}
