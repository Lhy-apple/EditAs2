/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:27:49 GMT 2023
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class POJOPropertyBuilder_ESTest extends POJOPropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-107));
      PropertyName propertyName0 = new PropertyName("@^z\u0006wFC:", "@^z\u0006wFC:");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, true, true);
      POJOPropertyBuilder pOJOPropertyBuilder0 = null;
      try {
        pOJOPropertyBuilder0 = new POJOPropertyBuilder((POJOPropertyBuilder) null, pOJOPropertyBuilder_Linked0.name);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withSimpleName("2_89u..<");
      POJOPropertyBuilder.Linked<VirtualAnnotatedMember> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<VirtualAnnotatedMember>((VirtualAnnotatedMember) null, (POJOPropertyBuilder.Linked<VirtualAnnotatedMember>) null, propertyName1, true, true, false);
      POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember>(pOJOPropertyBuilder_Linked0);
      pOJOPropertyBuilder_MemberIterator0.next();
      assertFalse(pOJOPropertyBuilder_MemberIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember>((POJOPropertyBuilder.Linked<VirtualAnnotatedMember>) null);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder_MemberIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<AnnotatedParameter> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedParameter>((POJOPropertyBuilder.Linked<AnnotatedParameter>) null);
      boolean boolean0 = pOJOPropertyBuilder_MemberIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder.Linked<AnnotatedParameter> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedParameter>((AnnotatedParameter) null, (POJOPropertyBuilder.Linked<AnnotatedParameter>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.MemberIterator<AnnotatedParameter> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedParameter>(pOJOPropertyBuilder_Linked0);
      boolean boolean0 = pOJOPropertyBuilder_MemberIterator0.hasNext();
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(boolean0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember>((POJOPropertyBuilder.Linked<VirtualAnnotatedMember>) null);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder_MemberIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class0 = String.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      POJOPropertyBuilder.Linked<ObjectIdInfo> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<ObjectIdInfo>(objectIdInfo0, (POJOPropertyBuilder.Linked<ObjectIdInfo>) null, propertyName0, false, false, true);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      
      POJOPropertyBuilder.Linked<ObjectIdInfo> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<ObjectIdInfo> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.trimByVisibility();
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = AnnotationIntrospector.ReferenceProperty.Type.MANAGED_REFERENCE;
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = new AnnotationIntrospector.ReferenceProperty(annotationIntrospector_ReferenceProperty_Type0, "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder");
      POJOPropertyBuilder.Linked<AnnotationIntrospector.ReferenceProperty> pOJOPropertyBuilder_Linked0 = null;
      try {
        pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotationIntrospector.ReferenceProperty>(annotationIntrospector_ReferenceProperty0, (POJOPropertyBuilder.Linked<AnnotationIntrospector.ReferenceProperty>) null, (PropertyName) null, true, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass true for 'explName' if name is null/empty
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      PropertyName propertyName0 = new PropertyName("", "");
      POJOPropertyBuilder.Linked<Boolean> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Boolean>(boolean0, (POJOPropertyBuilder.Linked<Boolean>) null, propertyName0, true, true, true);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.AUTO;
      PropertyName propertyName0 = PropertyName.construct("5t<Fj?IxD D+!@i", "5t<Fj?IxD D+!@i");
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutNext();
      assertTrue(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-107));
      PropertyName propertyName0 = new PropertyName("@^z\u0006wFC:", "@^z\u0006wFC:");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withoutNext();
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.AUTO;
      PropertyName propertyName0 = PropertyName.construct("5t<Fj?IxD D+!@i", "5t<Fj?IxD D+!@i");
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, true, true, true);
      JsonProperty.Access jsonProperty_Access1 = JsonProperty.Access.READ_WRITE;
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withValue(jsonProperty_Access1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.AUTO;
      PropertyName propertyName0 = PropertyName.construct("5t<Fj?IxD D+!@i", "5t<Fj?IxD D+!@i");
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withValue(jsonProperty_Access0);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.AUTO;
      PropertyName propertyName0 = PropertyName.construct("5t<Fj?IxD D+!@i", "5t<Fj?IxD D+!@i");
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked0.name, false, false, false);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-107));
      PropertyName propertyName0 = new PropertyName("@^z\u0006wFC:", "@^z\u0006wFC:");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, true, true);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = new POJOPropertyBuilder.Linked<Integer>(integer0, pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked0.name, false, false, true);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertNull(pOJOPropertyBuilder_Linked2);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-107));
      PropertyName propertyName0 = new PropertyName("@^z\u0006wFC:", "@^z\u0006wFC:");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, true, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-107));
      PropertyName propertyName0 = new PropertyName("@^z\u0006wFC:", "@^z\u0006wFC:");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, true, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutNonVisible();
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-107));
      PropertyName propertyName0 = new PropertyName("@^z\u0006wFC:", "@^z\u0006wFC:");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withoutNonVisible();
      assertNull(pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.AUTO;
      PropertyName propertyName0 = PropertyName.construct("5t<Fj?IxD D+!@i", "5t<Fj?IxD D+!@i");
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.append(pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-107));
      PropertyName propertyName0 = new PropertyName("@^z\u0006wFC:", "@^z\u0006wFC:");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, true, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.trimByVisibility();
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.AUTO;
      PropertyName propertyName0 = PropertyName.construct("5t<Fj?IxD D+!@i", "5t<Fj?IxD D+!@i");
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      pOJOPropertyBuilder_Linked1.toString();
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
  }
}
