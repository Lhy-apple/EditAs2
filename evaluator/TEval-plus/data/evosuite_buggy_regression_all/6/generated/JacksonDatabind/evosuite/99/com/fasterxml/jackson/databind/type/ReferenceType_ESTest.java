/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:28:30 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.time.chrono.MinguoEra;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      Class<Object> class1 = Object.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class1, typeBindings0, mapLikeType0, javaTypeArray0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertSame(mapLikeType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      SimpleType simpleType0 = new SimpleType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<Integer> class0 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      String string0 = referenceType0.getTypeName();
      assertEquals("[reference type, class java.lang.Integer<$1<$1>]", string0);
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      SimpleType simpleType0 = new SimpleType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      String string0 = referenceType0.getErasedSignature();
      assertEquals("Ljava/time/chrono/MinguoEra;", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      Class<Integer> class1 = Integer.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0._narrow(class1);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      boolean boolean0 = referenceType0.hasContentType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      // Undeclared exception!
      try { 
        ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<Integer> class0 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      StringBuffer stringBuffer0 = new StringBuffer("mA3c(;0SS|>IDMq");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      referenceType0.getGenericSignature(stringBuilder0);
      assertEquals("mA3c(;0SS|>IDMqLjava/lang/Integer<$1>;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      JavaType javaType0 = referenceType0.getAnchorType();
      assertFalse(javaType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType0 = new MapType(mapLikeType0, simpleType0, mapLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      JavaType javaType0 = referenceType0.getContentType();
      assertTrue(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaType[] javaTypeArray0 = new JavaType[5];
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(javaTypeArray0[2], javaTypeArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionType0, simpleType0, collectionType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(simpleType0);
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(mapLikeType0);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) referenceType0, (JavaType) referenceType0);
      CollectionType collectionType0 = new CollectionType(referenceType0, simpleType0);
      MapType mapType1 = mapType0.withContentTypeHandler(collectionType0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionType0, simpleType0, collectionType0);
      ReferenceType referenceType0 = new ReferenceType(collectionType0, mapType0);
      Object object0 = new Object();
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(object0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(simpleType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType0 = new MapType(mapLikeType0, simpleType0, mapLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      ReferenceType referenceType0 = new ReferenceType(simpleType0, collectionType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertSame(referenceType2, referenceType1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      ReferenceType referenceType0 = new ReferenceType(simpleType0, collectionType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(referenceType0);
      boolean boolean0 = referenceType1.isAnchorType();
      assertTrue(referenceType0.isAnchorType());
      assertFalse(boolean0);
      assertTrue(referenceType0.equals((Object)referenceType1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isAnchorType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionType0, simpleType0, collectionType0);
      ReferenceType referenceType0 = new ReferenceType(collectionType0, mapType0);
      boolean boolean0 = referenceType0.equals(mapType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2267));
      ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionType0, simpleType0, collectionType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(collectionType0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-662));
      Class<CollectionType> class0 = CollectionType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      ReferenceType referenceType1 = new ReferenceType(placeholderForType0, javaTypeArray0[0]);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertTrue(referenceType0.isAnchorType());
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }
}
