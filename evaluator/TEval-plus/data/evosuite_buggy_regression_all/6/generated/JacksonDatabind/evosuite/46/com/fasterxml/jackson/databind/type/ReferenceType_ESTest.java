/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:23:12 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<ReferenceType> class0 = ReferenceType.class;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, object0);
      String string0 = referenceType0.getErasedSignature();
      assertEquals("Lcom/fasterxml/jackson/databind/type/ReferenceType;", string0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, mapType0, object0, "DHx9[3Eieylqp(lw", false);
      String string0 = referenceType0.getGenericSignature();
      assertEquals("Ljava/lang/Object<Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;;", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, mapType0, object0, "DHx9[3Eieylqp(lw", false);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertTrue(javaType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, mapType0, object0, "DHx9[3Eieylqp(lw", false);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class java.lang.Object<java.util.HashMap<java.lang.Object,java.lang.Object><[map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]>]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = objectMapper0.constructType(class0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, javaType0);
      ReferenceType referenceType0 = new ReferenceType(class0, collectionLikeType0, objectMapper0, typeFactory0, true);
      Class<?> class1 = referenceType0.getParameterSource();
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<ReferenceType> class1 = ReferenceType.class;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) simpleType0, (Object) simpleType0, object0);
      JavaType javaType0 = referenceType0._narrow(class0);
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
      int int0 = referenceType0.containedTypeCount();
      assertFalse(referenceType0.useStaticType());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<ReferenceType> class0 = ReferenceType.class;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, object0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(object0);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Integer integer0 = new Integer(137);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, integer0, false);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(integer0);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<ReferenceType> class0 = ReferenceType.class;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, object0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(simpleType0);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Class<Object> class2 = Object.class;
      ReferenceType referenceType0 = new ReferenceType(class2, simpleType0, collectionType0, class1, false);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, mapType0, object0, "DHx9[3Eieylqp(lw", false);
      ReferenceType referenceType1 = referenceType0.withValueHandler(class0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) "Duplicate property '", (Object) null);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Class<Object> class2 = Object.class;
      ReferenceType referenceType0 = new ReferenceType(class2, simpleType0, collectionType0, class1, false);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(simpleType0);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Class<Object> class2 = Object.class;
      ReferenceType referenceType0 = new ReferenceType(class2, simpleType0, collectionType0, class1, false);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertTrue(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Integer integer0 = new Integer(0);
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, integer0, class0, true);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) simpleType0);
      JavaType javaType0 = referenceType0.containedTypeOrUnknown(2312);
      assertFalse(referenceType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = objectMapper0.constructType(class0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, javaType0);
      ReferenceType referenceType0 = new ReferenceType(class0, collectionLikeType0, objectMapper0, typeFactory0, true);
      JavaType javaType1 = referenceType0.containedType(0);
      assertTrue(javaType1.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Integer> class1 = Integer.class;
      Class<Object> class2 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class2);
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, object0, collectionType0, false);
      String string0 = referenceType0.containedTypeName(193);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Integer> class1 = Integer.class;
      Class<Object> class2 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class2);
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, object0, collectionType0, false);
      String string0 = referenceType0.containedTypeName(0);
      assertEquals("T", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Integer> class1 = Integer.class;
      Class<Object> class2 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class2);
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, object0, collectionType0, false);
      boolean boolean0 = referenceType0.equals(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Class<Object> class2 = Object.class;
      ReferenceType referenceType0 = new ReferenceType(class2, simpleType0, collectionType0, class1, false);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<ReferenceType> class0 = ReferenceType.class;
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, object0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Object object0 = new Object();
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class1, (JavaType) referenceType0, object0, (Object) "1-bp5gen%5>'-^H`W");
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(boolean0);
      assertFalse(referenceType1.useStaticType());
  }
}
