/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:22:28 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NullSerializer;
import com.fasterxml.jackson.databind.ser.std.RawSerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.HashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdSerializer_ESTest extends StdSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct(simpleType0, object0, simpleType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(arrayType0);
      assertFalse(beanSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<ClassKey> class0 = ClassKey.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView((Class<?>) class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashSet> class1 = HashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      JsonNode jsonNode0 = stdKeySerializers_StringKeySerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) collectionType0, true);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      RawSerializer<Integer> rawSerializer0 = new RawSerializer<Integer>(class0);
      Class<Integer> class1 = rawSerializer0.handledType();
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullSerializer nullSerializer0 = NullSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = nullSerializer0.isDefaultSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
      JavaType javaType0 = stdArraySerializers_IntArraySerializer0.getContentType();
      StdArraySerializers.ShortArraySerializer stdArraySerializers_ShortArraySerializer0 = new StdArraySerializers.ShortArraySerializer();
      JsonNode jsonNode0 = stdArraySerializers_ShortArraySerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) javaType0, false);
      assertEquals(3, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdArraySerializers.ShortArraySerializer stdArraySerializers_ShortArraySerializer0 = new StdArraySerializers.ShortArraySerializer();
      ObjectNode objectNode0 = stdArraySerializers_ShortArraySerializer0.createSchemaNode("", false);
      assertEquals(2, objectNode0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockError mockError0 = new MockError(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        stdKeySerializers_StringKeySerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) mockError0, (Object) sQLTimeoutException0, "P");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        stdKeySerializers_StringKeySerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, " with arguments");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdArraySerializers.ByteArraySerializer stdArraySerializers_ByteArraySerializer0 = new StdArraySerializers.ByteArraySerializer();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 809, hashMap0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 7, invocationTargetException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 809, sQLTransientException0);
      try { 
        stdArraySerializers_ByteArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) sQLTimeoutException0, (Object) invocationTargetException0, ">");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTimeoutException) (through reference chain: java.lang.reflect.InvocationTargetException[\">\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ToStringSerializer toStringSerializer0 = new ToStringSerializer();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      RawSerializer<Integer> rawSerializer0 = new RawSerializer<Integer>(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`+!VnS;A\"", "`+!VnS;A\"", 3598);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      try { 
        rawSerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) sQLTransactionRollbackException0, (Object) toStringSerializer0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLTransientConnectionException: `+!VnS;A\" (through reference chain: com.fasterxml.jackson.databind.ser.std.ToStringSerializer[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ToStringSerializer toStringSerializer0 = ToStringSerializer.instance;
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        toStringSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) mockError0, (Object) deserializationFeature0, 1089);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ToStringSerializer toStringSerializer0 = ToStringSerializer.instance;
      Integer integer0 = new Integer(634);
      // Undeclared exception!
      try { 
        toStringSerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) sQLTimeoutException0, (Object) integer0, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }
}
