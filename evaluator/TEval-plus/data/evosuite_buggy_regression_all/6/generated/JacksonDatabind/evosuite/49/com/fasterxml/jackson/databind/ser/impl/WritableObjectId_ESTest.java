/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:24:54 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WritableObjectId_ESTest extends WritableObjectId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      WritableObjectId writableObjectId0 = new WritableObjectId((ObjectIdGenerator<?>) null);
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      boolean boolean0 = writableObjectId0.writeAsId(jsonGenerator0, defaultSerializerProvider_Impl0, (ObjectIdWriter) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rfP@l\u0004Q?UQTRm|h_");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class0 = Float.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
      writableObjectId0.generateId(class0);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, (PropertyName) null, writableObjectId0.generator, true);
      // Undeclared exception!
      try { 
        writableObjectId0.writeAsId(jsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.WritableObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rfP@l\u0004Q?UQTRm|h_");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class0 = Float.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
      writableObjectId0.generateId(class0);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, (PropertyName) null, writableObjectId0.generator, true);
      writableObjectId0.writeAsField(jsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
      // Undeclared exception!
      try { 
        writableObjectId0.writeAsId(jsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.WritableObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 3273);
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("VLE!Iy^CqUxe5[%");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      Object object0 = writableObjectId0.generateId(objectIdGenerators_UUIDGenerator0);
      assertNotNull(object0);
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, writableObjectId0.generator, false);
      boolean boolean0 = writableObjectId0.writeAsId(jsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      WritableObjectId writableObjectId0 = new WritableObjectId((ObjectIdGenerator<?>) null);
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      PropertyName propertyName0 = new PropertyName("JSON", (String) null);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, propertyName0, (ObjectIdGenerator<?>) null, true);
      // Undeclared exception!
      try { 
        writableObjectId0.writeAsField(jsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.WritableObjectId", e);
      }
  }
}
