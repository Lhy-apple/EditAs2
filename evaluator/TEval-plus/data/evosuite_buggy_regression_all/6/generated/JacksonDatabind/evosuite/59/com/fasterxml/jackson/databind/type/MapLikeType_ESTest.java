/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:26:02 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.TemporalField;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapLikeType_ESTest extends MapLikeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      String string0 = mapLikeType0.getGenericSignature();
      assertEquals("Ljava/lang/String<Ljava/lang/Object;Ljava/lang/Object;>;", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Class<TemporalField> class0 = TemporalField.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyTypeHandler(class0);
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Class<ReferenceType> class0 = ReferenceType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler(class0);
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(class0);
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      SimpleType simpleType0 = new SimpleType(mapLikeType0);
      MapType mapType0 = new MapType(simpleType0, simpleType0, mapLikeType0);
      mapType0.getContentTypeHandler();
      assertTrue(mapType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Class<Module> class0 = Module.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      JavaType javaType0 = mapLikeType0._narrow(class0);
      assertTrue(javaType0.equals((Object)mapLikeType0));
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.isMapLikeType();
      assertFalse(mapType0.hasHandlers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      String string0 = mapType0.getErasedSignature();
      assertEquals("Ljava/util/HashMap;", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(mapLikeType0);
      assertTrue(referenceType1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType javaType0 = mapType0.getKeyType();
      assertFalse(javaType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      JavaType javaType0 = mapType0.getContentType();
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, (JavaType) simpleType0);
      Object object0 = mapType0.getContentValueHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[3];
      mapLikeType0.refine(class0, typeBindings0, (JavaType) null, javaTypeArray0);
      assertTrue(mapLikeType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      boolean boolean0 = mapType0.isContainerType();
      assertTrue(boolean0);
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler(mapLikeType0);
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      String string0 = mapLikeType0.toString();
      assertEquals("[map-like type; class com.fasterxml.jackson.databind.type.ArrayType, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler(simpleType0);
      assertFalse(mapLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      mapLikeType0.isTrueMapType();
      assertTrue(mapLikeType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, referenceType0, mapType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(mapLikeType0);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertFalse(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(mapLikeType1.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(mapType0);
      assertFalse(mapLikeType1.hasHandlers());
      assertSame(mapLikeType1, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleType> class0 = SimpleType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JavaType javaType0 = mapLikeType0.withContentType(mapLikeType0);
      assertFalse(javaType0.equals((Object)mapLikeType0));
      assertNotSame(javaType0, mapLikeType0);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      JavaType javaType0 = mapLikeType0.withContentType(simpleType0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      MapLikeType mapLikeType2 = mapLikeType1.withStaticTyping();
      assertTrue(mapLikeType2.useStaticType());
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertFalse(mapLikeType2.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) null, (JavaType) mapType0);
      String string0 = mapLikeType0.buildCanonicalName();
      assertEquals("java.lang.Integer", string0);
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      String string0 = mapLikeType0.buildCanonicalName();
      assertEquals("java.lang.Integer<java.lang.Object,java.lang.Object>", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withValueHandler(typeFactory0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, mapType1, mapType0);
      MapLikeType mapLikeType1 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) mapType0, (JavaType) mapLikeType0);
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType1.equals((Object)mapType1));
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      boolean boolean0 = mapLikeType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(mapLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Class<ShortNode> class0 = ShortNode.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Month> class1 = Month.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = typeFactory0.constructRawMapLikeType(class0);
      boolean boolean0 = mapLikeType0.equals(mapLikeType1);
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(boolean0);
      assertFalse(mapLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      boolean boolean0 = mapType0.equals(mapType1);
      assertTrue(boolean0);
      assertFalse(mapType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      MapType mapType1 = typeFactory0.constructMapType(class0, class0, class1);
      boolean boolean0 = mapType0.equals(mapType1);
      assertFalse(mapType0.hasHandlers());
      assertFalse(boolean0);
      assertFalse(mapType1.equals((Object)mapType0));
  }
}
