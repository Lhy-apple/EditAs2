/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:22:45 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionType_ESTest extends CollectionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionType collectionType0 = new CollectionType(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      Class<Integer> class1 = Integer.class;
      Object object0 = new Object();
      MapLikeType mapLikeType0 = new MapLikeType(class1, typeBindings0, collectionType0, javaTypeArray0, collectionType0, collectionType0, "", object0, false);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) mapLikeType0);
      CollectionType collectionType1 = CollectionType.construct((Class<?>) class0, (JavaType) mapType0);
      JavaType javaType0 = collectionType1.withContentType(mapType0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, collectionType1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      String string0 = collectionType0.toString();
      assertFalse(collectionType0.useStaticType());
      assertEquals("[collection type; class java.lang.String, contains [simple type, class java.lang.Object]]", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      JavaType javaType0 = collectionType0._narrow(class0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      Class<Integer> class1 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      Object object0 = new Object();
      CollectionType collectionType1 = collectionType0.withValueHandler(object0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler("com.fasterxml.jackson.databind.ObjectWriter");
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withTypeHandler("com.fasterxml.jackson.databind.ObjectWriter");
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[2] = (JavaType) mapLikeType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapLikeType0, javaTypeArray0, javaTypeArray0[2]);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(mapLikeType0);
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      JavaType javaType0 = collectionType0.withContentType(collectionType0);
      assertNotSame(javaType0, collectionType0);
      assertFalse(javaType0.equals((Object)collectionType0));
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertTrue(collectionType2.useStaticType());
  }
}
