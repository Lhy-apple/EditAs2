/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:27:40 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.Charset;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTimeoutException;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      // Undeclared exception!
      try { 
        beanPropertyMap0.find((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null property name
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
      assertEquals(0, settableBeanPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      int int0 = beanPropertyMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(", ", ", ");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", ", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, (-414));
      Integer integer0 = new Integer((-414));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, ", ", integer0, ", ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 10, annotationMap0, propertyMetadata0);
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, priorityQueue0);
      beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(", , , No native support for writing Type IdsNo native support for writing Type Ids");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      PropertyName propertyName0 = PropertyName.construct("' missing from _propsInOrder", "' missing from _propsInOrder");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "objec-i-info", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 3332);
      Integer integer0 = new Integer(3332);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "objec-i-info", integer0, "objec-i-info");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 4, jsonTypeInfo_As0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("objec-i-info", ",j'=");
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.renameAll(nameTransformer0);
      assertEquals(1, beanPropertyMap2.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.setSize(2047);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
      assertEquals(2047, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      PropertyName propertyName0 = PropertyName.construct("' missing from _propsInOrder", "' missing from _propsInOrder");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "objec-i-info", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 3332);
      Integer integer0 = new Integer(3332);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "objec-i-info", integer0, "objec-i-info");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 4, jsonTypeInfo_As0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap3 = beanPropertyMap2.withProperty(creatorProperty0);
      beanPropertyMap3.withProperty(creatorProperty0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BeanPropertyMap beanPropertyMap4 = beanPropertyMap0.withoutProperties(set0);
      assertEquals(4, beanPropertyMap4.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      assertEquals(6, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      PropertyName propertyName0 = PropertyName.construct("b[:pS&$e3;']D|VgE", "b[:pS&$e3;']D|VgE");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "b[:pS&$e3;']D|VgE", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 3332);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 500, beanPropertyMap0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap0.withProperty(creatorProperty0);
      assertSame(beanPropertyMap2, beanPropertyMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(linkedHashSet0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      arrayList0.add((SettableBeanProperty) null);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      PropertyName propertyName0 = PropertyName.construct("b[:pT&$e3;']D|VgE", "b[:pT&$e3;']D|VgE");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "b[:pT&$e3;']D|VgE", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 33);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 33, beanPropertyMap0, propertyMetadata0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.replace(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry 'b[:pT&$e3;']D|VgE' found, can't replace
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      PropertyName propertyName0 = PropertyName.construct((String) null, "$VALUES");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$VALUES", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 653);
      Integer integer0 = new Integer((-2990));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "object-id-info", integer0, "JSON");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 3332, integer0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find((-1));
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      PropertyName propertyName0 = PropertyName.construct("' missing from _propsInOrder", "' missing from _propsInOrder");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "' missing from _propsInOrder", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 3332);
      Integer integer0 = new Integer(3332);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "object-id-info", integer0, "object-id-info");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 4, jsonTypeInfo_As0, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(3332);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = PropertyName.construct("' missing from _propsInOrder", "' missing from _propsInOrder");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "object-id-info", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 3332);
      Integer integer0 = new Integer(3332);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "object-id-info", integer0, "object-id-info");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 4, jsonTypeInfo_As0, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      IntNode intNode0 = new IntNode(93);
      // Undeclared exception!
      try { 
        beanPropertyMap0.findDeserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, intNode0, "' missing from _propsInOrder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(", ", ", ");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", ", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, (-414));
      Integer integer0 = new Integer((-414));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, ", ", integer0, ", ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 10, annotationMap0, propertyMetadata0);
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, priorityQueue0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.remove(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry ', ' found, can't remove
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(", ", ", ");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", ", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, (-414));
      Integer integer0 = new Integer((-414));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, ", ", integer0, ", ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 10, annotationMap0, propertyMetadata0);
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, priorityQueue0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.remove(creatorProperty0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      PropertyName propertyName0 = PropertyName.construct("' missing from _propsInOrder", "' missing from _propsInOrder");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "object-id-info", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 3332);
      Integer integer0 = new Integer(3332);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "object-id-info", integer0, "object-id-info");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 4, jsonTypeInfo_As0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.withProperty(creatorProperty0);
      beanPropertyMap1.remove(creatorProperty0);
      assertEquals(2, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      boolean boolean0 = beanPropertyMap0.findDeserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null, "dq)^kx23JGV-N}} ,v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      PropertyName propertyName0 = PropertyName.construct("' missing from _propsInOrder", "' missing from _propsInOrder");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "object-id-info", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 3332);
      Integer integer0 = new Integer(3332);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "object-id-info", integer0, "object-id-info");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 4, jsonTypeInfo_As0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
      String string0 = beanPropertyMap2.toString();
      assertEquals("Properties=[' missing from _propsInOrder(null), ' missing from _propsInOrder(null)]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, nameTransformer0);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "b[:pT&$e3;']D|VgE", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, 33);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 33, beanPropertyMap0, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonDeserializer) null).when(jsonDeserializer0).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
      CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("oE{)\".+C^e", "oE{)\".+C^e");
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer_Chained0);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, (Object) null, "' missing from _propsInOrder", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.reflect.InvocationTargetException) (through reference chain: UNKNOWN[\"' missing from _propsInOrder\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("dq)^kx23JGV-N}} ,v", "dq)^kx23JGV-N}} ,v", (-2225));
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTimeoutException0, "dq)^kx23JGV-N}} ,v");
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, beanDeserializerFactory0, "fO_Uy", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // dq)^kx23JGV-N}} ,v (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"fO_Uy\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      MockError mockError0 = new MockError((String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockError0, linkedList0, "", defaultDeserializationContext_Impl0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow((Throwable) null, (Object) null, "", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("SqjIT+VMd``m?<");
      try { 
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, jsonMappingException0, "SqjIT+VMd``m?<", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // SqjIT+VMd``m?< (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"SqjIT+VMd``m?<\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("dL{L");
      try { 
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, jsonMappingException0, "dL{L", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // dL{L
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".");
      MockIOException mockIOException0 = new MockIOException(sQLIntegrityConstraintViolationException0);
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, (Object) null, "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_KebabCaseStrategy0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotNull(objectReader0);
  }
}
