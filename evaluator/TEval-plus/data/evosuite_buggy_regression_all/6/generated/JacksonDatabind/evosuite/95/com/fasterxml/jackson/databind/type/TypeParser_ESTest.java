/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:30:17 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeParser_ESTest extends TypeParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeParser typeParser1 = typeParser0.withFactory(typeFactory0);
      assertSame(typeParser1, typeParser0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      JavaType javaType0 = typeParser0.parse("com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer");
      assertFalse(javaType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      try { 
        typeParser0.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type '' (remaining: ''): Unexpected end-of-string
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("<");
      typeParser_MyTokenizer0.pushBack("com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer");
      try { 
        typeParser0.parseTypes(typeParser_MyTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type '<' (remaining: ''): Unexpected end-of-string
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer(">");
      typeParser_MyTokenizer0.pushBack("com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer");
      typeParser0.parseTypes(typeParser_MyTokenizer0);
      assertEquals("", typeParser_MyTokenizer0.getRemainingInput());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("com.fasterxml.jackson.databind.type.ReferenceType");
      try { 
        typeParser0.parseTypes(typeParser_MyTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'com.fasterxml.jackson.databind.type.ReferenceType' (remaining: ''): Unexpected end-of-string
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("com.fasterxml.jackson.databind.type.ReferenceType");
      typeParser_MyTokenizer0.pushBack("com.fasterxml.jackson.databind.type.ReferenceType");
      try { 
        typeParser0.parseTypes(typeParser_MyTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'com.fasterxml.jackson.databind.type.ReferenceType' (remaining: ''): Unexpected token 'com.fasterxml.jackson.databind.type.ReferenceType', expected ',' or '>')
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("QM-98nZ,*x%t<E");
      try { 
        typeParser0.parseTypes(typeParser_MyTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'QM-98nZ,*x%t<E' (remaining: ',*x%t<E'): Can not locate class 'QM-98nZ', problem: Class 'QM-98nZ.class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TypeParser typeParser0 = new TypeParser((TypeFactory) null);
      // Undeclared exception!
      try { 
        typeParser0.parse(" bytes");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }
}
