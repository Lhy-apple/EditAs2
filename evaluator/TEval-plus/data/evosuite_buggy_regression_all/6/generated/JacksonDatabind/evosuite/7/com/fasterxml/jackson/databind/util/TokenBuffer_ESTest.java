/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:23:18 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals("[TokenBuffer: ]", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("", 512, 512);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.close();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      // Undeclared exception!
      try { 
        jsonFactory0.createParser((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[2] = mapperFeature2;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeObjectId(jsonFactory0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'p';
      tokenBuffer0.disable(jsonGenerator_Feature0);
      charArray0[2] = 'U';
      charArray0[3] = '1';
      charArray0[4] = 'P';
      int int0 = 40;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 40, 40);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer0.configure(jsonGenerator_Feature0, false);
      Class<Long> class0 = Long.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      objectMapper1.isEnabled(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      
      JsonGenerator jsonGenerator0 = tokenBuffer0.useDefaultPrettyPrinter();
      assertFalse(jsonGenerator0.canWriteObjectId());
      assertEquals(79, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber("");
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      NumericNode numericNode0 = arrayNode0.numberNode(bigDecimal0);
      tokenBuffer0.writeTree(numericNode0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        tokenBuffer1.writeObject(objectMapper0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.setFeatureMask((-2039));
      tokenBuffer0.writeBooleanField("", true);
      assertEquals((-2039), tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BooleanNode.valueOf(false);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      BooleanNode.getFalse();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.writeEndArray();
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.setFeatureMask((-201));
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      int int0 = 3375;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
      byte byte0 = (byte)79;
      Byte byte1 = new Byte((byte)79);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((-201), jsonToken1, (Object) jsonToken0, (Object) byte1, (Object) long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -201
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SerializedString> class0 = SerializedString.class;
      ObjectReader objectReader0 = objectMapper0.reader(class0);
      ObjectReader objectReader1 = objectReader0.withType((Type) class0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<Integer> class1 = Integer.class;
      Long long0 = new Long((-1L));
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class1, (Object) long0);
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue("[constructor for ", (Object) "[constructor for ");
      ObjectReader objectReader2 = objectMapper0.reader((InjectableValues) injectableValues_Std2);
      objectReaderArray0[0] = objectReader2;
      ObjectReader objectReader3 = objectReader1.withFormatDetection(objectReaderArray0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader4 = objectReader3.with(jsonNodeFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader4);
      ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(objectCodec0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer0._append(jsonToken0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = tokenBuffer1.enable(jsonGenerator_Feature0);
      tokenBuffer0.serialize(jsonGenerator0);
      assertEquals(207, tokenBuffer1.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BigInteger bigInteger1 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger1);
      Integer integer0 = new Integer((byte)39);
      tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("READ_UNKNOWN_ENUM_VALUES_AS_NULL");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer_Segment1.appendRaw(54, 54, (Object) jsonParser0, (Object) tokenBuffer0, (Object) tokenBuffer_Segment0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = 'F';
      charArray0[2] = '[';
      charArray0[3] = 'O';
      charArray0[4] = 'n';
      charArray0[5] = 'V';
      jsonFactory1.createParser(charArray0, 2112, 2112);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (byte)0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer_Segment0.append(829, jsonToken0, (Object) jsonToken0, (Object) jsonToken0, (Object) bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTypeId();
      Integer integer0 = new Integer((-4301));
      tokenBuffer0._appendRaw((-4301), tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      
      tokenBuffer_Parser0.getEmbeddedObject();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      Short short0 = new Short((short)92);
      tokenBuffer0._appendRaw(16, short0);
      assertTrue(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = false;
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.close();
      tokenBuffer0.close();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(3621, 1676, (Object) ",1ZY");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      String string0 = "8E";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("8E", ",1ZY", true, 'I', 3621);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 4)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber("");
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      tokenBuffer0._appendRaw(16, objectMapper0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer0.canWriteBinaryNatively();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer1.writeStartArray();
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer_Parser0.peekNextToken();
      try { 
        tokenBuffer_Parser1.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.setFeatureMask((-201));
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer_Segment0.append(3375, jsonToken0, (Object) tokenBuffer0, (Object) null, (Object) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      try { 
        Byte.valueOf("8oHL60bTe]B", 16);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8oHL60bTe]B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber((-2686));
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      Long long0 = new Long(10);
      Long long1 = new Long(0L);
      Object object0 = tokenBuffer0._typeId;
      tokenBuffer_Segment1.appendRaw(5, (-2652), (Object) null, (Object) jsonParser0, (Object) null);
      assertTrue(tokenBuffer_Segment1.hasIds());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber("");
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      tokenBuffer0._appendRaw(16, tokenBuffer_Segment1);
      assertTrue(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTypeId();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      arrayNode0.numberNode(bigDecimal0);
      tokenBuffer0.writeTree(arrayNode0);
      assertTrue(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TimeZone timeZone0 = TimeZone.getTimeZone("|?lV(32Tq ,BZ");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      TimeZone.getDefault();
      objectMapper3.reader(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      objectMapper1.isEnabled(mapperFeature0);
      objectMapper3.setTypeFactory(typeFactory1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('L');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("{Nh=EG1,;()XX-R+@6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTypeId();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      Integer integer0 = new Integer((-795));
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.firstToken();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      SerializedString serializedString0 = new SerializedString("uF7+ Jp@dC");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.writeString("uF7+ Jp@dC");
      tokenBuffer0.writeNumber((-26.667259));
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.serialize(tokenBuffer1);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer0.toString();
      Double double0 = new Double((-1.0));
      tokenBuffer0.writeObject(double0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.writeNumber("");
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.writeString("Ip@,=LH");
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      objectMapper1.writerWithType((TypeReference<?>) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("*");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, byteArray0, 586, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Integer integer0 = new Integer((-4301));
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.toString();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.append(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-13);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jsonParser0.close();
      tokenBuffer0.getFeatureMask();
      Class<Long> class0 = Long.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(bigInteger0);
      ObjectIdGenerator<Byte> objectIdGenerator0 = (ObjectIdGenerator<Byte>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) collectionLikeType0, (PropertyName) null, (ObjectIdGenerator<?>) objectIdGenerator0, true);
      SerializableString serializableString0 = objectIdWriter0.propertyName;
      tokenBuffer0.writeString((SerializableString) null);
      assertTrue(jsonParser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      objectMapper0.configure(jsonGenerator_Feature0, true);
      tokenBuffer0.close();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTypeId();
      tokenBuffer0.writeNull();
      Integer integer0 = new Integer(1263);
      tokenBuffer0._appendRaw((byte)47, integer0);
      tokenBuffer_Parser0.getEmbeddedObject();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Object object0 = tokenBuffer0._objectId;
      tokenBuffer0.writeObjectField("6]bi2`*b$W&?(Sl#Um\"", (Object) null);
      tokenBuffer0.writeBooleanField("5Lc2E?WdvJ", true);
      BigDecimal bigDecimal0 = new BigDecimal((long) 16);
      bigDecimal0.longValue();
      tokenBuffer0.writeNumberField("6X", bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      tokenBuffer0.flush();
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      Long long0 = new Long(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer_Segment0.appendRaw(9, 9, (Object) tokenBuffer0, (Object) long0, (Object) bigInteger0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(54, 1627, (Object) "");
      tokenBuffer_Segment1._tokenTypes = (long) 16;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer0.writeEndArray();
      Short short0 = new Short((short)144);
      tokenBuffer0.getOutputTarget();
      tokenBuffer_Segment2.append(16, jsonToken0, (Object) short0, (Object) null, (Object) null);
      tokenBuffer_Segment2._tokenTypes = (long) 16;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer0.canWriteBinaryNatively();
      tokenBuffer0.writeStartArray();
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setFeatureMask((-2039));
      Double double0 = new Double((-3059));
      tokenBuffer1.writeObjectField("l", double0);
      tokenBuffer0.writeBooleanField("", true);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-3059));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      tokenBuffer1.flush();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Byte byte0 = new Byte((byte)16);
      tokenBuffer_Segment0.append((-4040), jsonToken0, (Object) bigDecimal0, (Object) byte0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.overrideCurrentName(" ... (truncated ");
      tokenBuffer1.firstToken();
      assertEquals((-2039), tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      BigDecimal bigDecimal1 = new BigDecimal(1831);
      bigDecimal0.remainder(bigDecimal1);
      tokenBuffer0.writeNumberField("b%1xY/Fe", bigDecimal0);
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      byte[] byteArray1 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append((int) (byte)52, jsonToken0, (Object) jsonParser0, (Object) bigInteger0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment1.hasIds());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      BooleanNode.valueOf(true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer4 = new TokenBuffer(objectMapper0);
      tokenBuffer4.writeNumber(16);
      TokenBuffer tokenBuffer5 = tokenBuffer2.append(tokenBuffer4);
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer5.canWriteObjectId());
      assertEquals(79, tokenBuffer5.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode booleanNode1 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode1.serialize(tokenBuffer0, serializerProvider0);
      tokenBuffer_Segment0.appendRaw(16, 243, (Object) booleanNode0, (Object) tokenBuffer0, (Object) booleanNode1);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeEndObject();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, true);
      tokenBuffer2.append(tokenBuffer3);
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      tokenBuffer_Segment0.append(59, jsonToken0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._currentObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jsonParser0.close();
      Class<Long> class0 = Long.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      jsonParser0.getTypeId();
      ArrayType arrayType0 = ArrayType.construct(collectionType0, (Object) null, class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(bigInteger0);
      ArrayType arrayType2 = arrayType1.withTypeHandler((Object) null);
      ArrayType arrayType3 = arrayType2.withContentTypeHandler("");
      StringBuilder stringBuilder0 = new StringBuilder((byte)47);
      StringBuilder stringBuilder1 = arrayType3.getErasedSignature(stringBuilder0);
      collectionType0.getGenericSignature(stringBuilder1);
      CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(bigInteger0);
      ObjectIdGenerator<Byte> objectIdGenerator0 = (ObjectIdGenerator<Byte>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) collectionLikeType0, (PropertyName) null, (ObjectIdGenerator<?>) objectIdGenerator0, true);
      SerializableString serializableString0 = objectIdWriter0.propertyName;
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      boolean boolean0 = tokenBuffer0.isClosed();
      assertTrue(jsonParser0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode booleanNode1 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode1.serialize(tokenBuffer0, serializerProvider0);
      tokenBuffer_Segment0.appendRaw(16, 16, (Object) booleanNode0, (Object) tokenBuffer0, (Object) booleanNode1);
      tokenBuffer0.flush();
      String string0 = tokenBuffer0.toString();
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals("[TokenBuffer: VALUE_FALSE]", string0);
      
      jsonParser0.getCurrentLocation();
      tokenBuffer_Parser0.overrideCurrentName("[TokenBuffer: VALUE_FALSE]");
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      
      Byte byte0 = new Byte((byte)40);
      tokenBuffer0.writeObject(byte0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber("");
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      tokenBuffer0.flush();
      tokenBuffer0.toString();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      tokenBuffer_Parser0.getCurrentLocation();
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode booleanNode1 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode1.serialize(tokenBuffer0, serializerProvider0);
      tokenBuffer_Segment0.appendRaw(16, 16, (Object) booleanNode0, (Object) tokenBuffer0, (Object) booleanNode1);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("iS3", 16, 8000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode.valueOf(true);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode0.serialize(tokenBuffer0, serializerProvider0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Parser0.hasTextCharacters();
      tokenBuffer_Parser0.hasTextCharacters();
      tokenBuffer0.close();
      assertTrue(tokenBuffer0.isClosed());
      
      jsonParser0.getTextCharacters();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer0.configure(jsonGenerator_Feature0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Class<Long> class0 = Long.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      objectMapper0.canSerialize(class0, atomicReference0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'l';
      charArray0[2] = 'h';
      charArray0[3] = '\'';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode booleanNode1 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode1.serialize(tokenBuffer0, serializerProvider0);
      tokenBuffer_Segment1.appendRaw(16, 243, (Object) booleanNode0, (Object) tokenBuffer0, (Object) booleanNode1);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(54, 57, (Object) jsonParser0, (Object) tokenBuffer0, (Object) tokenBuffer_Segment0);
      tokenBuffer_Segment2.hasIds();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append(54, jsonToken0, (Object) serializerProvider0, (Object) null);
      assertNotNull(tokenBuffer_Segment3);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment3, objectMapper0, false, true);
      tokenBuffer_Parser1.hasTextCharacters();
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.close();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer_Parser0.getTextCharacters();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      BooleanNode.valueOf(true);
      BooleanNode.getTrue();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      tokenBuffer_Parser2.peekNextToken();
      tokenBuffer0.canWriteBinaryNatively();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)100;
      tokenBuffer0.writeBinary(byteArray0);
      tokenBuffer0.writeStartArray();
      try { 
        tokenBuffer_Parser2.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory2.createParser("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setFeatureMask((-2039));
      tokenBuffer0.writeBooleanField("", true);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.flush();
      ((TokenBuffer) jsonGenerator0).toString();
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<Long> class0 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType.construct(class0, simpleType0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Double double0 = new Double((-888.20546277));
      tokenBuffer_Segment0.appendRaw(813, (-3403), (Object) simpleType0, (Object) bigDecimal0, (Object) double0);
      tokenBuffer_Segment0.rawType((byte)47);
      ObjectMapper objectMapper1 = new ObjectMapper();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      tokenBuffer0.flush();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.close();
      MockFile mockFile0 = new MockFile("", ";JK PKd#y$0KRb");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      tokenBuffer2.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode.valueOf(false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
      tokenBuffer2.writeEndObject();
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer4 = new TokenBuffer(objectMapper0);
      tokenBuffer4.writeNumber(16);
      tokenBuffer2.append(tokenBuffer4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTypeId();
      Integer integer0 = new Integer((-4301));
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.close();
      MockFile mockFile0 = new MockFile("", ";JK PKd#y$0KRb");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      jsonParser0.getTextLength();
      jsonParser0.nextToken();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer_Parser0.version();
      Long.getLong("@D8{mU-z&yug>+Il;z4");
      tokenBuffer1.writeObject((Object) null);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer1._append(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer_Parser0.close();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      tokenBuffer_Parser1.getTextLength();
      jsonParser0.nextToken();
      ObjectMapper objectMapper2 = objectMapper0.enableDefaultTyping();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      Class<Double> class0 = Double.class;
      objectMapper2.findAndRegisterModules();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper2);
      tokenBuffer1.append(tokenBuffer0);
      tokenBuffer_Segment0.next();
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      int int0 = (-201);
      tokenBuffer0.setFeatureMask((-201));
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0.getOutputTarget();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.databind.util.TokenBuffer$Segment");
      tokenBuffer_Segment0.append(9, jsonToken0, (Object) null, (Object) bigInteger0, (Object) serializedString0);
      try { 
        Byte.valueOf("", (-320));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -320 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.configure(jsonGenerator_Feature1, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer2.writeNumber(bigDecimal0);
      tokenBuffer1.writeStartArray();
      tokenBuffer1.writeStringField("\"7h", "%w!K]N.RGC]R@<F$(~");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeNumberField("$I", Double.NEGATIVE_INFINITY);
      tokenBuffer0.writeNumberField("", 61);
      tokenBuffer0.writeStartObject();
      SerializedString serializedString0 = new SerializedString(", ");
      byte[] byteArray0 = new byte[0];
      serializedString0.asUnquotedUTF8();
      serializedString0.appendUnquotedUTF8(byteArray0, 61);
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.writeString("$I");
      tokenBuffer0.writeNumber((double) 61);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer3 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.append(tokenBuffer3);
      tokenBuffer2.getOutputContext();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      BooleanNode.valueOf(true);
      BooleanNode.getTrue();
      tokenBuffer0.writeNumber(6);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      tokenBuffer_Parser2.disable(jsonParser_Feature1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      tokenBuffer_Parser2.peekNextToken();
      tokenBuffer0.toString();
      tokenBuffer0.canWriteBinaryNatively();
      tokenBuffer0.writeStartArray();
      Integer integer0 = new Integer(6);
      tokenBuffer_Parser2.hasTextCharacters();
      tokenBuffer_Parser1.hasTextCharacters();
      tokenBuffer0.close();
      jsonParser0.getTextCharacters();
      jsonParser0.getTextOffset();
      try { 
        jsonParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer_Parser0.close();
      Class<Long> class0 = Long.class;
      SimpleType.constructUnsafe(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumberField(".=;AKd|~j", (-1.0));
      tokenBuffer0.writeNumberField("Current token (", 16);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParserSequence0);
      SerializedString serializedString0 = new SerializedString("$I");
      byte[] byteArray1 = serializedString0.asUnquotedUTF8();
      serializedString0.appendUnquotedUTF8(byteArray1, 47);
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.writeString("ZC");
      tokenBuffer1.writeNumber((-1.0));
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(10, (-1), (Object) ".=;AKd|~j");
      tokenBuffer1.toString();
      jsonParser0.close();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0.writeNullField("'Pvhe%!PJA");
      tokenBuffer0.writeNumberField("'Pvhe%!PJA", 1551.0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeStartObject();
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.flush();
      tokenBuffer1.toString();
      tokenBuffer_Segment0.findObjectId(54);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      tokenBuffer_Parser0.close();
      Class<Long> class0 = Long.class;
      SimpleType.constructUnsafe(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer0.canWriteBinaryNatively();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeStartArray();
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = tokenBuffer0.disable(jsonGenerator_Feature0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.writeNumber(bigDecimal0);
      jsonGenerator0.writeStartArray();
      jsonGenerator0.writeStringField("\"7h", "\"7h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeNumberField("$I", Double.NEGATIVE_INFINITY);
      tokenBuffer0.writeNumberField("", 61);
      tokenBuffer0.writeStartObject();
      SerializedString serializedString0 = new SerializedString(", ");
      byte[] byteArray0 = new byte[0];
      serializedString0.asUnquotedUTF8();
      serializedString0.appendUnquotedUTF8(byteArray0, 10);
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.writeString("$I");
      tokenBuffer0.writeNumber((double) 10);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.findModules();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber("");
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      SerializedString serializedString0 = new SerializedString("-KYnK%C>|Q");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.writeString("Ip@,=LH");
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.writeNumber(bigDecimal0);
      tokenBuffer0.writeStartArray();
      tokenBuffer0.writeStringField("string value", "\"7h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeNullField("\"7h");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeNumberField("string value", Double.NEGATIVE_INFINITY);
      tokenBuffer0.writeStartObject();
      tokenBuffer1.writeNumberField("string value", bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer1.flush();
      tokenBuffer1.toString();
      tokenBuffer_Segment0.findObjectId(47);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.writeNumber("JSON");
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      SerializedString serializedString0 = new SerializedString("JSON");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.writeString("com.fasterxml.jackson.databind.type.SimpleType");
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.serialize(tokenBuffer2);
      tokenBuffer1.toString();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setFeatureMask((-2039));
      tokenBuffer0.writeBooleanField("", true);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1578));
      tokenBuffer0.setHighestNonEscapedChar((-1578));
      tokenBuffer0.writeNumberField("6X", bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.flush();
      ((TokenBuffer) jsonGenerator0).toString();
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setFeatureMask((-2039));
      Double double0 = new Double((-1578));
      jsonGenerator0.writeObjectField("", double0);
      boolean boolean0 = true;
      tokenBuffer0.writeBooleanField("", true);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1578));
      bigDecimal0.longValue();
      tokenBuffer0.writeNumberField("6X", bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.flush();
      ((TokenBuffer) jsonGenerator0).toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-69);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (-2039), (byte)1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.writeNumber(bigDecimal0);
      tokenBuffer1.writeStartArray();
      tokenBuffer1.writeStringField("\"7h", "\"7h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer1.writeNullField("[objectId=");
      tokenBuffer0.writeNumberField("\"7h", Double.NEGATIVE_INFINITY);
      tokenBuffer0.writeStartObject();
      tokenBuffer0.writeNumberField("\"7h", bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.flush();
      tokenBuffer0.toString();
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser1.getEmbeddedObject();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Byte byte0 = new Byte((byte) (-116));
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(serializedString0, byte0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      serializedString0.appendUnquotedUTF8(byteArray0, 1663);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ObjectReader objectReader0 = objectMapper2.reader(contextAttributes1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      tokenBuffer0.writeBinary(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) bufferedWriter0);
      tokenBuffer0.serialize(jsonGenerator0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.toString();
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("k!5m#V");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.configure(jsonGenerator_Feature0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Class<Long> class0 = Long.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      objectMapper0.canSerialize(class0, atomicReference0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer3 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer3.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<Long> class0 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType.construct(class0, simpleType0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeEndArray();
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale_Category0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 925, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectMapper0, bytesToNameCanonicalizer0, byteArray0, (-67), 1043, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(uTF8StreamJsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      Long long0 = new Long(0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(long0);
      objectReader0.createObjectNode();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ", can not serialize");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, false, true);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[3];
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<Long> class0 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Short> class1 = Short.class;
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      SimpleType.constructUnsafe(class1);
      Class<BigInteger> class2 = BigInteger.class;
      CollectionType.construct(class2, collectionType0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeEndArray();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer3 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer3.append(tokenBuffer1);
      tokenBuffer1.serialize(tokenBuffer2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(mapperFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      objectMapper2.isEnabled(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer0.useDefaultPrettyPrinter();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer0._append(jsonToken0);
      boolean boolean0 = true;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = tokenBuffer1.enable(jsonGenerator_Feature0);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumberField("", 0.0);
      TokenBuffer tokenBuffer3 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer3.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jsonGenerator0.writeNumberField((String) null, bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer4 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      try { 
        tokenBuffer1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      Version version0 = new Version(101, 101, 1853, "[objectId=", "[objectId=", "[objectId=");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<Collection> class0 = Collection.class;
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleModule0.setSerializers(simpleSerializers0);
      SimpleModule simpleModule1 = simpleModule0.addKeySerializer((Class<? extends Collection<Short>>) class0, (JsonSerializer<Collection<Short>>) null);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule1);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      objectMapper3.disable(serializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      tokenBuffer0.version();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      tokenBuffer_Parser0.isClosed();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BigInteger bigInteger1 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger1);
      Integer integer0 = new Integer((byte)39);
      JsonParser jsonParser0 = tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      jsonParser0.isExpectedStartArrayToken();
      tokenBuffer_Segment0.append((int) (byte)47, jsonToken0);
      jsonParser0.getObjectId();
      tokenBuffer0.writeTypeId((Object) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      BigDecimal bigDecimal1 = new BigDecimal(1831);
      bigDecimal0.remainder(bigDecimal1);
      JsonFactory jsonFactory0 = new JsonFactory();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer1.close();
      ObjectMapper objectMapper1 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      Integer integer0 = new Integer(16);
      tokenBuffer1._appendRaw(1, integer0);
      tokenBuffer0.setCodec(objectMapper0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Class<Long> class0 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType.construct(class0, simpleType0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.setCodec((ObjectCodec) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      booleanNode0.serialize(jsonGeneratorDelegate0, serializerProvider0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Parser0.hasTextCharacters();
      jsonParser0.hasTextCharacters();
      tokenBuffer0.close();
      jsonParser0.getTextCharacters();
      tokenBuffer_Segment1.rawType((-2686));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.close();
      MockFile mockFile0 = new MockFile("", ";JK PKd#y$0KRb");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      try { 
        tokenBuffer_Parser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getObjectId();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      iOContext0.allocNameCopyBuffer(243);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 16);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-447), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      tokenBuffer0.writeNumber((float) 1);
      int int0 = (-2739);
      String string0 = "!nKLr9P)\\X1K{y";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "!nKLr9P)X1K{y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode booleanNode1 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode1.serialize(tokenBuffer0, serializerProvider0);
      tokenBuffer_Segment0.appendRaw(16, 243, (Object) booleanNode0, (Object) tokenBuffer0, (Object) booleanNode1);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      tokenBuffer1.writeString((SerializableString) serializedString0);
      tokenBuffer0.writeString(") not numeric, can not use numeric value accessors");
      tokenBuffer1.writeNumber((double) 243);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
      tokenBuffer2._hasNativeId = true;
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.serialize(tokenBuffer3);
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '.';
      charArray0[2] = 'D';
      charArray0[3] = '>';
      charArray0[4] = 'h';
      // Undeclared exception!
      try { 
        tokenBuffer3.writeRawValue(charArray0, 243, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<Long> class0 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType.construct(class0, simpleType0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      Double double0 = new Double((byte)47);
      ObjectNode objectNode1 = objectNode0.put("", double0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ObjectNode objectNode2 = objectNode1.remove((Collection<String>) linkedList0);
      ObjectNode objectNode3 = objectNode2.put("", (int) (byte)78);
      tokenBuffer0.writeTree(objectNode3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer0.close();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer0._appendRaw(1263, objectMapper_DefaultTyping0);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer0.writeNumber((long) 1263);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.writeNumber(bigDecimal0);
      tokenBuffer0.writeStartArray();
      tokenBuffer0.writeStringField("!B ", "\"7h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeNullField("\"7h");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeNumberField("!B ", Double.NEGATIVE_INFINITY);
      tokenBuffer0.writeStartObject();
      tokenBuffer1.writeNumberField("!B ", bigDecimal0);
      tokenBuffer1.writeEndObject();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer2.writeEndArray();
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer_Parser0.peekNextToken();
      JsonGenerator jsonGenerator0 = tokenBuffer0.setHighestNonEscapedChar(3652);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(jsonGenerator0);
      tokenBuffer_Parser1.overrideCurrentName("Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeStartArray();
      tokenBuffer0.writeStringField("", (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeNumberField("", Double.NEGATIVE_INFINITY);
      tokenBuffer0.writeStartObject();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext0 = new MathContext(224, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0, mathContext0);
      tokenBuffer0.writeNumberField("", bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.flush();
      tokenBuffer0.toString();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 16, objectMapper1, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode.valueOf(false);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = tokenBuffer0.enable(jsonGenerator_Feature0);
      booleanNode0.serialize(jsonGenerator0, serializerProvider0);
      jsonGenerator0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeEndArray();
      tokenBuffer1.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode.valueOf(true);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      booleanNode0.traverse((ObjectCodec) objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode0.serialize(tokenBuffer0, serializerProvider0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      tokenBuffer0.flush();
      jsonParser0.overrideCurrentName("fP1]KY]r5e;WC");
      tokenBuffer0.writeNumber((short)4661);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setFeatureMask((-2039));
      Double double0 = new Double((-3059));
      tokenBuffer1.writeObjectField("l", double0);
      boolean boolean0 = true;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        tokenBuffer1.writeBinary((InputStream) pipedInputStream0, 19);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      jsonGeneratorDelegate0.getCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("JSON");
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory4);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      arrayNode0.numberNode(bigDecimal0);
      DoubleNode doubleNode0 = new DoubleNode(16);
      DoubleNode.valueOf(95.239679);
      BigInteger bigInteger0 = doubleNode0.bigIntegerValue();
      NumericNode numericNode0 = arrayNode0.numberNode(bigInteger0);
      tokenBuffer0.writeTree(numericNode0);
      jsonParser0.getParsingContext();
      jsonParser0.getEmbeddedObject();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode booleanNode1 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode1.serialize(tokenBuffer0, serializerProvider0);
      tokenBuffer_Segment0.appendRaw(16, 16, (Object) booleanNode0, (Object) tokenBuffer0, (Object) booleanNode1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      TreeMap<String, JsonNode> treeMap0 = new TreeMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, treeMap0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayNode arrayNode0 = objectNode0.withArray(", can not serialize");
      arrayNode0.numberNode(bigDecimal0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeTree(objectNode0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode.valueOf(true);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      booleanNode0.traverse((ObjectCodec) objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode0.serialize(tokenBuffer0, serializerProvider0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      Integer integer0 = new Integer(16);
      tokenBuffer0.writeNumberField(";}%`u:@-]pA(vb", (BigDecimal) null);
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer1.flush();
      tokenBuffer1.toString();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      tokenBuffer0.enable(jsonGenerator_Feature1);
      booleanNode0.serialize(tokenBuffer0, serializerProvider0);
      jsonGenerator0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
      tokenBuffer2.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("Gr");
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonFactory_Feature1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory5);
      ObjectMapper objectMapper1 = new ObjectMapper();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      arrayNode0.numberNode(bigDecimal1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)12;
      ObjectNode objectNode1 = objectNode0.put("JSON", byteArray0);
      ObjectNode objectNode2 = objectNode1.put("]", "F");
      objectNode2.get((-303));
      tokenBuffer1.writeTree((TreeNode) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '<';
      charArray0[2] = 'x';
      charArray0[3] = '&';
      charArray0[4] = 'Z';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, 1439, 1439);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer0.getOutputTarget();
      tokenBuffer_Segment0.append(15, jsonToken0, (Object) null, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("JSON", "", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "+wR4YQhb5GU:}He6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"+wR4YQhb5GU:}He6\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode.valueOf(true);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      booleanNode0.serialize(tokenBuffer0, serializerProvider0);
      tokenBuffer_Parser0.getTextCharacters();
      Double double0 = Double.valueOf(2664.4854107873252);
      JsonLocation jsonLocation0 = new JsonLocation(double0, (-310L), 16, 16);
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      MockFile mockFile0 = new MockFile(", ", "cCH'C@HY");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      try { 
        jsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.Double@0000000021; line: 16, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer_Parser1.peekNextToken();
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000020; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.close();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber(4);
      tokenBuffer0.append(tokenBuffer2);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      byteArray0[1] = (byte)40;
      tokenBuffer0.close();
      byteArray0[2] = (byte)5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)2;
      jsonFactory0.createParser(byteArray0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.nextToken();
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.getNumberValue();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      BooleanNode booleanNode1 = BooleanNode.getFalse();
      objectMapper0.getSerializerProvider();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) booleanNode0, (Object) tokenBuffer0, (Object) booleanNode1);
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment2._nativeIds = treeMap0;
      tokenBuffer0.flush();
      tokenBuffer0.toString();
      tokenBuffer_Segment1.findObjectId(16);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Double double0 = new Double(2.147483647E9);
      tokenBuffer1.writeTypeId(double0);
      tokenBuffer0.writeNumber(bigDecimal0);
      JsonWriteContext jsonWriteContext0 = tokenBuffer0._writeContext;
      tokenBuffer1._writeContext = jsonWriteContext0;
      tokenBuffer1.writeStartArray();
      tokenBuffer1.writeStringField("\"7h", "\"7h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)100;
      jsonFactory0.createParser(byteArray0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.nextToken();
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.getNumberValue();
      tokenBuffer_Parser0.peekNextToken();
  }
}
