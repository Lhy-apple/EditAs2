/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:35:22 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.structuralevaluator$immediatfp'rent", attributes0);
      formElement0.toggleClass("br");
      String string0 = formElement0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.append("br");
      formElement0.appendChild(element0);
      Pattern pattern0 = Pattern.compile("br");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("java.lang.String@0000000053 |:-WbTv_%d4FCu,/");
      // Undeclared exception!
      try { 
        document0.child(60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("br");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("a^");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document(" />");
      // Undeclared exception!
      try { 
        document0.html(" />");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValue("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getElementsByAttributeValueStarting("r", "r");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document(">>UQ1<+");
      Element element0 = document0.prependElement(">>UQ1<+");
      element0.reparentChild(document0);
      String string0 = document0.cssSelector();
      assertEquals(">>uq1<+ > #root", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("'/^mDk<");
      Document document1 = (Document)document0.prepend("'/^mDk<");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("Cf5qEfr y!-qpsEI");
      Pattern pattern0 = Pattern.compile("Cf5qEfr y!-qpsEI", 0);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Element element0 = document0.insertChildren(0, elements0);
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("(");
      // Undeclared exception!
      try { 
        document0.after("(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("VhlV]ed");
      Elements elements0 = document0.getElementsByIndexLessThan(1305);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("VhlV]ed");
      Elements elements0 = document0.getElementsByAttributeStarting("VhlV]ed");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("(");
      Elements elements0 = document0.getElementsByIndexEquals(2399);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("vw*R;");
      Elements elements0 = document0.getElementsMatchingOwnText("vw*R;");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("java.lang.String@0000000053 |:-WbTv_%d4FCu,/");
      // Undeclared exception!
      try { 
        document0.wrap("java.lang.String@0000000053 |:-WbTv_%d4FCu,/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell("W.qk");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("?F-biL6uiIwP]v(D");
      Document document1 = (Document)document0.val("?F-biL6uiIwP]v(D");
      assertEquals("?F-biL6uiIwP]v(D", document1.location());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("bogusdoctype");
      Elements elements0 = document0.getElementsByAttributeValueMatching("bogusdoctype", "bogusdoctype");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document(" />");
      Elements elements0 = document0.getElementsByAttributeValueEnding(" />", " />");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("t<");
      Elements elements0 = document0.getElementsByAttributeValueContaining("t<", "t<");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("t<");
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("a^");
      Elements elements0 = document0.getElementsByAttributeValueNot("a^", "a^");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("t<");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttribute("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.before("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("+%=h=_jxu");
      Element element0 = document0.removeClass("+%=h=_jxu");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("IB?=");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("D(");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("D(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: D(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("cecked");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("sv>bONw,$$*AMdd/9");
      Elements elements0 = document0.getElementsByIndexGreaterThan(373);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("+%=h=_jXU");
      Element element0 = document0.prependElement("+%=h=_jXU");
      // Undeclared exception!
      try { 
        element0.append("+%=h=_jXU");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("+%=h=_jXU");
      Element element0 = document0.prependElement("+%=h=_jXU");
      document0.tagName("+%=h=_jXU");
      // Undeclared exception!
      try { 
        element0.append("+%=h=_jXU");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("y<-");
      Element element0 = document0.append("y<-");
      document0.setParentNode(element0);
      Element element1 = document0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document(">>UQ1<+");
      document0.prependElement(">>UQ1<+");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("E^");
      Element element0 = document0.prependElement("E^");
      element0.text("E^");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("E^");
      DataNode dataNode0 = new DataNode("2|1kg6aJcp", "2|1kg6aJcp");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("E^");
      document0.prependElement("E^");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("+%=h=_jxu");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-5404), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("#.fD");
      Elements elements0 = document0.getElementsByClass("#.fD");
      // Undeclared exception!
      try { 
        document0.insertChildren(20, elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("X<=");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("IB?=");
      Element element0 = document0.prependElement("IB?=");
      Element element1 = element0.after((Node) document0);
      Elements elements0 = element1.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.comment");
      Element element0 = document0.prependElement("org.jsoup.nodes.comment");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("yJ<-");
      Element element0 = document0.prependElement("yJ<-");
      document0.appendChild(document0);
      element0.nextElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("IB?");
      Element element0 = document0.prependElement("IB?");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("2d2");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("IB?");
      Element element0 = document0.prependElement("IB?");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      element0.addChildren(nodeArray0);
      Document document1 = (Document)element0.previousElementSibling();
      assertEquals("IB?", document1.location());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("9/^");
      document0.appendChild(document0);
      Element element0 = document0.prependElement("9/^");
      Element element1 = element0.firstElementSibling();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("a^");
      Element element0 = document0.prependElement("a^");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document(".qk");
      Element element0 = document0.prependElement(".qk");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("IB?");
      Element element0 = document0.prependElement("IB?");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.lastElementSibling();
      assertEquals("ib?", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document(".qk");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("s+");
      DataNode dataNode0 = new DataNode("e1&", "e1&");
      Element element0 = document0.prependChild(dataNode0);
      Elements elements0 = element0.getElementsContainingText("e1&");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("a^");
      Element element0 = document0.append("a^");
      document0.appendChild(element0);
      Pattern pattern0 = Pattern.compile("a^");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("~Zza5wmKU1!=F");
      DocumentType documentType0 = new DocumentType("C|1#YU5Nk.lI_Le/", " cx0VGFF,@[c~a", "~Zza5wmKU1!=F", "h'n2\"P BT*,QqzL)sDD");
      document0.appendChild(documentType0);
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("(>aUQ1<+");
      document0.appendText("textarea");
      Elements elements0 = document0.getElementsContainingOwnText("textarea");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("(>aUQ1<+");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.appendText("textarea");
      assertEquals("textarea", element1.tagName());
      
      Elements elements0 = document0.getElementsContainingOwnText("textarea");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("/@M", "/@M");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("s+");
      DataNode dataNode0 = new DataNode("e1&", "e1&");
      Element element0 = document0.prependChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("\"");
      document0.append(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("Cf5qEfrV y!-q4SsEI");
      Element element0 = document0.prependElement("textarea");
      assertEquals("textarea", element0.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("Cf5qEfrV y!-q4SsEI");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.appendText("textarea");
      assertEquals("textarea", element1.nodeName());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("y<-");
      Element element0 = document0.append("y<-");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("i#EIY=");
      DataNode dataNode0 = DataNode.createFromEncoded("nZ", "nZ");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("nZ", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("i#EIY=");
      document0.prependElement("i#EIY=");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.structuralevaluator$immediatfp'rent", attributes0);
      formElement0.toggleClass("br");
      Elements elements0 = formElement0.getElementsByClass("org.jsoup.select.structuralevaluator$immediatfp'rent");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("^");
      Element element0 = document0.toggleClass("^");
      Elements elements0 = element0.getElementsByClass("^");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S`c.'gy|");
      TextNode textNode0 = TextNode.createFromEncoded("Pattern syntax error: ", "java.lang.string@0000000043 character outside of valid range");
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000043 character outside of valid range", attributes0);
      Element element0 = formElement0.prependText("M6kD=>Qfv");
      element0.append("org.jsoup.select.evaluator$matches");
      Element element1 = element0.addClass("typemustmatch");
      element1.addClass("|:-WbTv_%d4FCu,/");
      boolean boolean0 = formElement0.hasClass("java.lang.string@0000000043");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.toggleClass("E-Qd*.");
      document0.toggleClass("?=TC*hG");
      Document document1 = (Document)element0.toggleClass("?=TC*hG");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("IB?=");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("Cf5qEfrV y!-q4SsEI");
      Element element0 = document0.prependElement("textarea");
      element0.val();
      assertEquals("textarea", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("(>aUQ1<+");
      Element element0 = document0.createElement("textarea");
      // Undeclared exception!
      try { 
        element0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("Cf5qEfrV y!-q4SsEI");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Cf5qEfrV y!-q4SsEI");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 3433, document_OutputSettings1);
      assertEquals("Cf5qEfrV y!-q4SsEI<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("br");
      StringBuilder stringBuilder0 = new StringBuilder("br");
      document0.outerHtml(stringBuilder0);
      assertEquals("br\n<#root></#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder("br");
      document0.outerHtml(stringBuilder0);
      assertEquals("br\n<#root>\n <br>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder0, (-1), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings1);
      assertEquals("br<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("be");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 399, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      element0.appendText("br");
      String string0 = document0.html();
      assertEquals("<br>br</br>", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("IB?=");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("br");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("t<");
      Document document1 = new Document("t<");
      boolean boolean0 = document1.equals(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("yJ<-");
      document0.prependElement("yJ<-");
      Document document1 = new Document("");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("s+");
      document0.hashCode();
  }
}
