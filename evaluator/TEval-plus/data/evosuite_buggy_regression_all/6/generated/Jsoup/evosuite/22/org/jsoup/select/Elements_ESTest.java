/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:34:06 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("UOG<");
      Elements elements0 = document0.getAllElements();
      Object[] objectArray0 = elements0.toArray();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = elements0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("UOG<");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.remove((-1199));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("UOG<");
      Elements elements0 = document0.getAllElements();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = elements0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("csup");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.add(163, (Element) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 163, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("UOG<");
      Elements elements0 = document0.getAllElements();
      Predicate<Element> predicate0 = Predicate.isEqual((Object) elements0);
      boolean boolean0 = elements0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      ListIterator<Element> listIterator0 = elements0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.remove((Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("UOG<");
      Elements elements0 = document0.getAllElements();
      elements0.clear();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.not((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elements elements0 = new Elements();
      LinkedHashSet<Elements> linkedHashSet0 = new LinkedHashSet<Elements>();
      int int0 = elements0.indexOf(linkedHashSet0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("csup");
      Elements elements0 = document0.getAllElements();
      int int0 = elements0.lastIndexOf(document0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elements elements0 = new Elements();
      LinkedHashSet<Elements> linkedHashSet0 = new LinkedHashSet<Elements>();
      boolean boolean0 = linkedHashSet0.remove(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.addAll((-1325), (Collection<? extends Element>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1325, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("UOG<");
      Elements elements0 = document0.getAllElements();
      ListIterator<Element> listIterator0 = elements0.listIterator();
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell(">");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.subList(103, 4344);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 4344
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("csup");
      Elements elements0 = document0.getAllElements();
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      boolean boolean0 = elements0.addAll((Collection<? extends Element>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("j5");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("j5");
      assertFalse(elements0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell(">");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.set(2517, (Element) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2517, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      LinkedHashSet<Elements> linkedHashSet0 = new LinkedHashSet<Elements>();
      boolean boolean0 = elements0.retainAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("887@");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.clone();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("j5");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.attr("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("v887@s");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.attr("v887@s", "v887@s");
      String string0 = elements1.attr("v887@s");
      assertEquals("v887@s", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("j5");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("UOG<");
      Elements elements0 = document0.getAllElements();
      elements0.attr("UOG<", "UOG<");
      boolean boolean0 = elements0.hasAttr("UOG<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("csup");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeAttr("filig");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("v887@s");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.addClass("v887@s");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("\n");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeClass("\n");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("msup");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.toggleClass("msup");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("csup");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("csup");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("8O87@");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("msup");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.val("msup");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("v887@s");
      Elements elements0 = document0.getAllElements();
      document0.text("v887@s");
      String string0 = elements0.text();
      assertEquals("v887@s v887@s  v887@s", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("j5");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("v887@s");
      Elements elements0 = document0.getAllElements();
      elements0.html("eK,'/q}c=");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("j5");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getAllElements();
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("j5");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getAllElements();
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.tagName("@dl");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("@dl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("UOG<");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prepend("UOG<");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.append("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.before("Y");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("Y");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.before("Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.after("Mb");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document(">");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.after(">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("summar");
      Pattern pattern0 = Pattern.compile("summar");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Elements elements1 = elements0.wrap("summar");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("v8v7@-");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.wrap("v8v7@-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.unwrap();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("XQ<");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("887@");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.empty();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      Elements elements1 = elements0.remove();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("v887@s");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("csup");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.eq(587);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("v887@s");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.eq((-2078));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("j5");
      Elements elements0 = document0.getAllElements();
      document0.prependElement("j5");
      boolean boolean0 = elements0.is("j5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell(">");
      document0.title(">");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("6(V");
      Elements elements0 = document0.getElementsByAttributeValueNot("6(V", "6(V");
      Element element0 = elements0.last();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("p6_'1m{rs2R*)o");
      Elements elements0 = document0.getElementsByIndexEquals((-1));
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Elements elements0 = document0.children();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("v887@s");
      Elements elements0 = document0.getElementsMatchingOwnText("%ID~u?#$x");
      Integer integer0 = new Integer((-599));
      boolean boolean0 = elements0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-384));
      boolean boolean0 = elements0.contains(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("vu{V?F[-<*R<$?", "");
      Elements elements1 = document0.getElementsMatchingOwnText("");
      boolean boolean0 = elements0.containsAll(elements1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("summar");
      Pattern pattern0 = Pattern.compile("summar");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = elements0.containsAll(linkedList0);
      assertTrue(boolean0);
  }
}
