/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:37:33 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.wrap(":nth-child(%d)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.appendText("id");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.appendText("|;dOo");
      document0.appendTo(document0);
      element0.getElementsMatchingText("|;dOo");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.child((-2224));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("V,cio3fIH +gIFA");
      Element element0 = document0.tagName("V,cio3fIH +gIFA");
      assertEquals(1, element0.childNodeSize());
      assertEquals("V,cio3fIH +gIFA", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("textarea");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("Zvn(,J");
      document0.dataset();
      assertEquals("Zvn(,J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("Zvn(,J");
      Elements elements0 = document0.getElementsContainingOwnText("Zvn(,J");
      assertEquals("Zvn(,J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("cgUfesN.} M]y9");
      Element element0 = document0.addClass("cgUfesN.} M]y9");
      assertEquals(1, element0.childNodeSize());
      assertEquals("cgUfesN.} M]y9", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.prependElement("?;b(sZ$HOn");
      boolean boolean0 = Element.preserveWhitespace(element1);
      assertEquals(1, element0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("CB\"%");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.html("m");
      assertEquals(1, document0.childNodeSize());
      assertEquals("m", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.attr("id", true);
      assertEquals("id", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("cgUfesN.} M]y9");
      document0.getElementsByAttributeValue("cgUfesN.} M]y9", "cgUfesN.} M]y9");
      assertEquals("cgUfesN.} M]y9", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("CB\"%");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "h3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("[nWMGH");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
      assertEquals("[nWMGH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("</");
      document0.prepend("strong");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("VUzQC[jaI");
      Elements elements0 = document0.getElementsByIndexLessThan((-655));
      assertEquals("VUzQC[jaI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.getElementsByAttributeStarting("value");
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("m/ism^hnLSG@zg%@");
      Elements elements0 = document0.getElementsByIndexEquals(1552);
      assertEquals(0, elements0.size());
      assertEquals("m/ism^hnLSG@zg%@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("Y");
      document0.getElementsByAttributeValueMatching("Y", "Y");
      assertEquals("Y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("m", "m");
      document0.is((Evaluator) evaluator_AttributeWithValueEnding0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("n@W-,[gz9uv%k$>BHn");
      document0.getElementsByAttributeValueEnding("n@W-,[gz9uv%k$>BHn", "n@W-,[gz9uv%k$>BHn");
      assertEquals("n@W-,[gz9uv%k$>BHn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("arg.j*oup.nodes.Elemen$NodeLit");
      Elements elements0 = document0.getElementsByClass("arg.j*oup.nodes.Elemen$NodeLit");
      assertEquals("arg.j*oup.nodes.Elemen$NodeLit", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsContainingText("br");
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("cgUfesN.} M]y9");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("cgUfesN.} M]y9", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("cgUfesN.} M]y9");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("+JCB\"%");
      document0.doSetBaseUri("+JCB\"%");
      assertEquals("+JCB\"%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("CB\"%");
      Elements elements0 = document0.getElementsByAttributeValueNot("CB\"%", " ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("CB\"%", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("id");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("7*~~So<E+Dhs<,R1k");
      document0.getElementsByAttribute("7*~~So<E+Dhs<,R1k");
      assertEquals(1, document0.childNodeSize());
      assertEquals("7*~~So<E+Dhs<,R1k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("CB\"%");
      // Undeclared exception!
      try { 
        document0.before("ScriptDataDoubleEscapedDashDash");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagName");
      Element element0 = document0.removeClass("ScriptDataEndTagName");
      assertEquals(1, element0.childNodeSize());
      assertEquals("ScriptDataEndTagName", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("n@W-,[gz9uv%k$>Hn");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("n@W-,[gz9uv%k$>Hn", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("cgUfesN.} M]y9");
      // Undeclared exception!
      try { 
        document0.is("K");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'K': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.head();
      element0.after("java.lang.string@0000000007 children collection to be inserted must not id null.");
      String string0 = element0.cssSelector();
      assertEquals("id", element0.baseUri());
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("=T");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Elements elements0 = element0.parents();
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("+JCB\"%");
      document0.appendText("+JCB\"%");
      document0.getElementsByIndexGreaterThan(26);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("id");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.prependText("org.jsoup.nodes.Element$NodeList");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("id");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("cgUfesN.} M]y9");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(576, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("Yi");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1585), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("$=jk&");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("w^a^;i`$GbB");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(69, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.Token$Tag");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3211), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("Unexpected count of entities loaded for ");
      document0.toggleClass("Unexpected count of entities loaded for ");
      document0.cssSelector();
      assertEquals("Unexpected count of entities loaded for ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("id", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.appendElement("id");
      Element element1 = element0.appendText("|;dOo");
      Elements elements0 = element1.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("CB\"%");
      document0.siblingElements();
      assertEquals("CB\"%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("9");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertEquals("9", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.nextElementSibling();
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("org.jsorp.paser.Token$Ta");
      Element element0 = document0.appendTo(document0);
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals("org.jsorp.paser.Token$Ta", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("Y");
      Element element0 = document0.appendElement("Y");
      Element element1 = element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("%A8@$>");
      document0.previousElementSibling();
      assertEquals("%A8@$>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.Token$Tag");
      Element element0 = new Element("org.jsoup.parser.Token$Tag");
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      document0.previousElementSibling();
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("org.jsorp.paser.Token$Ta");
      Element element0 = document0.appendTo(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
      assertEquals("org.jsorp.paser.Token$Ta", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("CB\"%");
      document0.appendTo(document0);
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("org.jsorp.parser.Token$Tag");
      Element element0 = document0.appendTo(document0);
      Element element1 = element0.lastElementSibling();
      assertEquals("org.jsorp.parser.Token$Tag", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.appendElement("id");
      assertEquals(2, document0.childNodeSize());
      
      Element element1 = element0.lastElementSibling();
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes)Element$NodeList");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.getElementsByIndexGreaterThan(1297);
      assertEquals(0, elements0.size());
      assertEquals("org.jsoup.nodes)Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("Unexpected count of entities loaded for ");
      Element element0 = document0.getElementById("id");
      assertNull(element0);
      assertEquals("Unexpected count of entities loaded for ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("=N");
      Element element0 = document0.text("=N");
      Elements elements0 = element0.getElementsMatchingOwnText("=N");
      assertEquals(1, elements0.size());
      assertEquals("=N", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("Y");
      Comment comment0 = new Comment(" ");
      document0.prependChild(comment0);
      Elements elements0 = document0.getElementsMatchingOwnText("Y");
      assertEquals("Y", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.title("id");
      document0.getElementsMatchingText("|;dOo");
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("r^", "r^");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("T&=SfswdW#=tl?3");
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertEquals("T&=SfswdW#=tl?3", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.title("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("=N");
      document0.text("=N");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("=N", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Element$NodeList", "JJ{,~Mq=;:~86'7e", true);
      document0.prependChild(xmlDeclaration0);
      boolean boolean0 = document0.hasText();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("CB\"%");
      DataNode dataNode0 = DataNode.createFromEncoded("3o;@^v<apUG>yE", "ScriptDataEscapeStart");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("3o;@^v<apUG>yE", string0);
      assertEquals("CB\"%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("Unexpected count of entities loaded for ");
      document0.toggleClass("Unexpected count of entities loaded for ");
      boolean boolean0 = document0.hasClass("Unexpected count of entities loaded for ");
      assertEquals("Unexpected count of entities loaded for ", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("Unexpected count of entities loaded for ");
      document0.toggleClass("Unexpected count of entities loaded for ");
      document0.hasClass("id");
      assertEquals("Unexpected count of entities loaded for ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("8MvOy1b,>nb");
      document0.toggleClass("br");
      document0.toggleClass(" ");
      document0.hasClass("br");
      assertEquals("8MvOy1b,>nb", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("Unexpected count of entities loaded for ");
      Element element0 = document0.toggleClass("Unexpected count of entities loaded for ");
      element0.toggleClass("Unexpected count of entities loaded for ");
      boolean boolean0 = document0.hasClass("id");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token$Tag");
      document0.toggleClass("org.jsoup.parser.Token$Tag");
      document0.toggleClass("f{@l!P!1K82&55");
      boolean boolean0 = document0.hasClass("f{@l!P!1K82&55");
      assertTrue(boolean0);
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("=T");
      Element element0 = document0.val("html > head");
      assertEquals("=T", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("=N");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("=N", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Element element0 = new Element("textarea");
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(charBuffer0, 22, document_OutputSettings0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Element element0 = new Element("textarea");
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      element0.appendTo(formElement0);
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(charBuffer0, 22, document_OutputSettings0);
      assertEquals(12, charBuffer0.remaining());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.title("");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title></title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document0.title("");
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("<html>\n <head>\n  <title></title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("");
      PipedWriter pipedWriter0 = document0.html((PipedWriter) null);
      assertNull(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell("CB\"s%");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
      assertEquals("CB\"s%", document1.baseUri());
  }
}
