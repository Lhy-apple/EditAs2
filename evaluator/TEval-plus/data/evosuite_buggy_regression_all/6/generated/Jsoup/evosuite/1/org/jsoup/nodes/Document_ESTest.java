/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:30:13 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document document0 = Document.createShell(":cQ>!Lx*~mVG");
      Element element0 = document0.text("WWp");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = new Document("=H$p");
      String string0 = document0.nodeName();
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Document document0 = Document.createShell("biHwH`HPB");
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated string is empty
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      document1.title("");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document document0 = Document.createShell("Q%h_[");
      document0.title("Q%h_[");
      document0.title("Q%h_[");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document document0 = Document.createShell("Q%h_[");
      Document document1 = (Document)document0.prepend("Q%h_[");
      Document document2 = document1.normalise();
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Document document0 = Document.createShell("biHwH`HPB");
      document0.prependText("");
      Document document1 = document0.normalise();
      assertSame(document0, document1);
  }
}
