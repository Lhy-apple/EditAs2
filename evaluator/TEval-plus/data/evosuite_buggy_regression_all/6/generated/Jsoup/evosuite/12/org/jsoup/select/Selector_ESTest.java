/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:32:53 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("z[%s*=%s!");
      Elements elements0 = Selector.select("z[%s*=%s!", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell(":eq(");
      // Undeclared exception!
      try { 
        Selector.select(":eq(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(":has(el) subselect must not be empty");
      Elements elements0 = Selector.select(":has(el) subselect must not be empty", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("CGoO.AH4=6G#x");
      // Undeclared exception!
      try { 
        Selector.select("CGoO.AH4=6G#x", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'CGoO.AH4=6G#x': unexpected token at '=6G#x'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell(":lt(");
      // Undeclared exception!
      try { 
        Selector.select(":lt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell(":gt(");
      // Undeclared exception!
      try { 
        Selector.select(":gt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("0XH|y>n?^[b");
      Elements elements0 = Selector.select("0XH|y>n?^[b", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document(",");
      // Undeclared exception!
      try { 
        Selector.select(",", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown combinator: ,
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("g#4i+V<kNe4Z$");
      // Undeclared exception!
      try { 
        Selector.select("g#4i+V<kNe4Z$", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'V<kNe4Z$': unexpected token at '<kNe4Z$'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document(":contains(text) query must not be empty");
      Elements elements0 = Selector.select(":contains(text) query must not be empty", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell(":containsOwn(");
      // Undeclared exception!
      try { 
        Selector.select(":containsOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :contains(text) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document(":matches(regex) query must not be empty");
      Elements elements0 = Selector.select(":matches(regex) query must not be empty", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell(":matchesOwn(");
      // Undeclared exception!
      try { 
        Selector.select(":matchesOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :matches(regex) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("0Hfyn3[b");
      Elements elements0 = Selector.select("0Hfyn3[b", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("rr~Xr");
      Elements elements0 = Selector.select("[^\"ihT9^9~-QSsT", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("[9pK=`+y)E)kw");
      Elements elements0 = Selector.select("[9pK=`+y)E)kw", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("+*");
      Element element0 = document0.body();
      element0.appendElement("+*");
      Elements elements0 = Selector.select("+*", element0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("+*");
      Element element0 = document0.head();
      Elements elements0 = Selector.select("+*", element0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("b+L,~*");
      Element element0 = document0.body();
      element0.appendElement("b+L,~*");
      Elements elements0 = Selector.select("b+L,~*", element0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("5*a![L)0eKmm;A~*kP");
      // Undeclared exception!
      try { 
        Selector.select("5*a![L)0eKmm;A~*kP", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '5*a![L)0eKmm;A~*kP': unexpected token at '![L)0eKmm;A~*kP'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("0XHfy>n3E^[b");
      Elements elements0 = Selector.select("ECmc,**3WX", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document(":not(selector) subselect must not be empty");
      Elements elements0 = Selector.select(":not(selector) subselect must not be empty", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertEquals(0, elements1.size());
  }
}
