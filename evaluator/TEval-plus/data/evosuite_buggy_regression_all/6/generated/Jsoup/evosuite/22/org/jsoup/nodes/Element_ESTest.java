/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:32:31 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("T!8OS\"");
      Elements elements0 = document0.getElementsMatchingText("T!8OS\"");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("OxWpz>j?o <");
      Element element0 = document0.appendElement("plaintext");
      assertEquals("plaintext", element0.tagName());
      
      Element element1 = document0.prependText("OxWpz>j?o <");
      assertEquals(0, element1.siblingIndex());
      
      String string0 = document0.text();
      assertEquals("OxWpz>j?o <", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("Tag name must not e8empty.");
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("L1Sf4rf&%)1?A2");
      Element element0 = document0.appendElement("textarea");
      element0.val("L1Sf4rf&%)1?A2");
      String string0 = document0.html();
      assertEquals("<textarea>L1Sf4rf&amp;%)1?A2</textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("V~bmnkE");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("HJOHW.0p!;8");
      Element element0 = document0.addClass("HJOHW.0p!;8");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("Kj~CEmn83");
      // Undeclared exception!
      try { 
        document0.html("Kj~CEmn83");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("KV~Cmnk8");
      Elements elements0 = document0.getElementsByAttributeValue("KV~Cmnk8", "KV~Cmnk8");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("|1");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("KV~Cmnk8");
      Elements elements0 = document0.getElementsByAttributeValueStarting("j!Mq&y.rgMYg", "KV~Cmnk8");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("ScriptData");
      Elements elements0 = document0.select("ScriptData");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("~$,a\"hsv?|vwj~");
      Element element0 = document0.prepend("value");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("Pe");
      Elements elements0 = document0.getElementsMatchingOwnText("Aring");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("j5:r'");
      // Undeclared exception!
      try { 
        document0.after("j5:r'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("-1OI*Ju2E");
      Elements elements0 = document0.getElementsByIndexLessThan(1003);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("# {z8n;myi+|%");
      Element element0 = document0.prependElement("# {z8n;myi+|%");
      element0.appendText("# {z8n;myi+|%");
      String string0 = document0.html();
      assertEquals("<# {z8n;myi+|%>\n # {z8n;myi+|%\n</# {z8n;myi+|%>", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("VbmnkE");
      Elements elements0 = document0.getElementsByAttributeStarting("VbmnkE");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("oa");
      Elements elements0 = document0.getElementsByIndexEquals((-1774));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("sU%7COC%z<6!");
      // Undeclared exception!
      try { 
        document0.wrap("sU%7COC%z<6!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("2dsz+/EGpV}");
      Element element0 = document0.val("2dsz+/EGpV}");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z^1");
      Element element0 = new Element(tag0, "bumpeq");
      Elements elements0 = element0.getElementsByAttributeValueEnding("bumpeq", "bumpeq");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("VyOma");
      Elements elements0 = document0.getElementsByClass("VyOma");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("barwedge");
      Elements elements0 = document0.getElementsContainingText("barwedge");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("VyOma");
      Elements elements0 = document0.getElementsByAttributeValueMatching("VyOma", "VyOma");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("ScriptData");
      Elements elements0 = document0.getElementsByAttributeValueContaining("ScriptData", "ScriptData");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("jV~bm");
      Elements elements0 = document0.getElementsByAttributeValueNot("jV~bm", "v~bmk`e");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("Tag name must not e8empty.");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("V~bmnkE");
      Elements elements0 = document0.getElementsByAttribute("V~bmnkE");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("HJOHW.0p!;8");
      // Undeclared exception!
      try { 
        document0.before("HJOHW.0p!;8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("V~bmnkE");
      Element element0 = document0.removeClass("p~/");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("|1");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("Z+IPH0");
      // Undeclared exception!
      try { 
        document0.title("Z+IPH0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("L1Sf4rf&%)1\"A2");
      Elements elements0 = document0.getElementsByIndexGreaterThan(102);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("Pe");
      Element element0 = document0.getElementById("Pe");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("Kj~CEmn83");
      Element element0 = document0.appendElement("Kj~CEmn83");
      Elements elements0 = element0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("Kj~CEmn83");
      document0.tagName("`U]k6}j\"8TQ");
      Element element0 = document0.appendElement("Kj~CEmn83");
      element0.parents();
      assertEquals("`u]k6}j\"8tq", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("# {z8n;9myi+|%");
      Element element0 = document0.prependElement("m@9Lj?`e/MX{<");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("KV~Cmnk8");
      document0.appendText("KV~Cmnk8");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("|1");
      document0.appendElement("|1");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z^1");
      Element element0 = new Element(tag0, "bumpeq");
      DataNode dataNode0 = new DataNode("z^1", "z^1");
      Element element1 = element0.appendChild(dataNode0);
      List<DataNode> list0 = element1.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("V~bnkE");
      document0.prependElement("V~bnkE");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("sU%7COC%z<6!");
      Element element0 = document0.appendElement("sU%7COC%z<6!");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("sU%7COC%z<6!");
      Element element0 = document0.appendElement("sU%7COC%z<6!");
      element0.before((Node) document0);
      Document document1 = (Document)element0.previousElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("|1");
      Element element0 = document0.prependElement("|1");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("s+");
      Element element0 = document0.prependElement("jo:^,aNV;u 9oK6-U");
      Element element1 = element0.before((Node) document0);
      Element element2 = element1.firstElementSibling();
      assertNotNull(element2);
      assertEquals("jo:^,anv;u 9ok6-u", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("|1");
      Element element0 = document0.prependElement("|1");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("Kj~CEmn83");
      Element element0 = document0.prependElement("Kj~CEmn83");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.prependElement("Tag name must not be empty.");
      element0.after((Node) document0);
      Element element1 = element0.lastElementSibling();
      assertSame(element1, document0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document(">e");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("fzln5c*4+x*hhac");
      document0.prependText("fzln5c*4+x*hhac");
      Elements elements0 = document0.getElementsContainingOwnText("fzln5c*4+x*hhac");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("9]Uu-UYV4O'uz&");
      Element element0 = document0.appendElement("plaintext");
      Element element1 = element0.prependText("b>+`+-(z^2>");
      String string0 = element1.text();
      assertTrue(element1.isBlock());
      assertEquals("b>+`+-(z^2>", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("KV~Cmnk8");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(0, nodeArray0);
      document0.prependElement("br");
      // Undeclared exception!
      document0.text();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z^1");
      Element element0 = new Element(tag0, "bumpeq");
      DataNode dataNode0 = new DataNode("z^1", "z^1");
      Element element1 = element0.appendChild(dataNode0);
      boolean boolean0 = element1.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendText((String) null);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("L1Sf4rf&%)1\"A2");
      document0.appendElement("L1Sf4rf&%)1\"A2");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("L1Sf4rf&%)1\"A2");
      Element element0 = document0.appendElement("L1Sf4rf&%)1\"A2");
      element0.appendText("L1Sf4rf&%)1\"A2");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z^1");
      Element element0 = new Element(tag0, "bumpeq");
      DataNode dataNode0 = new DataNode("z^1", "z^1");
      Element element1 = element0.appendChild(dataNode0);
      String string0 = element1.data();
      assertEquals("z^1", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("L1Sf4rf&%)1?A2");
      document0.appendText("L1Sf4rf&%)1?A2");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("L1Sf4rf&%)1?A2");
      Element element0 = document0.appendElement("textarea");
      assertEquals("textarea", element0.nodeName());
      
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("@np:V@iil&RRH");
      Document document1 = document0.clone();
      Element element0 = document1.toggleClass("17.>3Q&`");
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("V~bmnkE");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document(";x4&HLquqv6uDnF-K");
      Document document1 = (Document)document0.toggleClass("");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("V~bmnkE");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("k$ylf:.adc>c");
      Element element0 = document0.appendElement("textarea");
      element0.val();
      assertEquals("textarea", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("Kj~CEmn83");
      Element element0 = document0.appendText("Kj~CEmn83");
      element0.appendElement("Kj~CEmn83");
      String string0 = document0.html();
      assertEquals("Kj~CEmn83\n<kj~cemn83></kj~cemn83>", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("V~bnkE");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "V~bnkE");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-1), document_OutputSettings1);
      assertEquals("V~bnkE<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("k$ylf:.adc>c");
      document0.appendText("k$ylf:.adc>c");
      document0.appendElement("textarea");
      String string0 = document0.html();
      assertEquals("k$ylf:.adc&gt;c\n<textarea></textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("class");
      document0.appendElement("br");
      String string0 = document0.html();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("Kj~CEmn83");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtmlTail(stringBuilder0, 1958, document_OutputSettings0);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("imagpart");
      document0.hashCode();
  }
}
