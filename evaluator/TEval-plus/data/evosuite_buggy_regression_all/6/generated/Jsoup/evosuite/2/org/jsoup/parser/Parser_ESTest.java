/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:32:06 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("99<b[e:=sT^</b>T_|", "99<b[e:=sT^</b>T_|");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!-", "<!-");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!--%s-->", "<!--%s-->");
      assertEquals("<!--%s-->", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+'`ma2%g<?Kx13", "+'`ma2%g<?Kx13");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("<I/1`7-Zjl(LqI=N]T_<", "<I/1`7-Zjl(LqI=N]T_<");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("<1`'4qx-,6=]C_J", "<1`'4qx-,6=]C_J");
      assertEquals("<1`'4qx-,6=]C_J", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9<bs:=sT^<D5/>2_J", "9<bs:=sT^<D5/>2_J");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parse("@|cm<pO}v~b%)T='", "@|cm<pO}v~b%)T='");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",\u0004<bbse:=\"T^</R]T_J", ",\u0004<bbse:=\"T^</R]T_J");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("<IlOL`-Z\"j0L8qI=N]l ", "<IlOL`-Z\"j0L8qI=N]l ");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parse("99<br;e:=sT^</b>TR|", "99<br;e:=sT^</b>TR|");
      assertEquals("99<br;e:=sT^</b>TR|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@D\n</sk:+0~", "@D\n</sk:+0~");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Parser.parse("@D<n</szK+0~", "@D<n</szK+0~");
      assertEquals("#document", document0.nodeName());
  }
}
