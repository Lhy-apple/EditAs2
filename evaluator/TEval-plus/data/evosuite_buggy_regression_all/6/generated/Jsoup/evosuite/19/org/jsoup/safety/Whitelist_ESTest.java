/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:33:23 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      assertNotNull(whitelist0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("u", "u", "u");
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("u", "u", "u");
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "blockquote";
      stringArray0[1] = "blockquote";
      whitelist0.addAttributes("blockquote", stringArray0);
      Document document0 = Document.createShell("blockquote");
      Attribute attribute0 = Attribute.createFromEncoded("blockquote", "blockquote");
      boolean boolean0 = whitelist0.isSafeAttribute("blockquote", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      boolean boolean0 = whitelist0.isSafeTag("BO,pVpyvRSy K2[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = "p";
      Whitelist whitelist1 = whitelist0.addAttributes("p", stringArray0);
      Document document0 = Document.createShell("p");
      whitelist0.addProtocols("p", "p", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded("p", "p");
      boolean boolean0 = whitelist1.isSafeAttribute("p", document0, attribute0);
      assertEquals("", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addProtocols("gtrless", "BVV\"A?NSR;UkF4", stringArray0);
      Whitelist whitelist2 = whitelist1.addProtocols("gtrless", "BVV\"A?NSR;UkF4", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      boolean boolean0 = whitelist0.isSafeTag("em");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Document document0 = new Document("u");
      Attribute attribute0 = new Attribute("u", "u");
      boolean boolean0 = whitelist0.isSafeAttribute("u", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Document document0 = Document.createShell("q");
      Attribute attribute0 = new Attribute("q", "q");
      boolean boolean0 = whitelist0.isSafeAttribute("q", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = "p";
      whitelist0.addAttributes("p", stringArray0);
      Document document0 = Document.createShell("p");
      Attribute attribute0 = new Attribute("p", "p");
      boolean boolean0 = whitelist0.isSafeAttribute("p", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = "p";
      Whitelist whitelist1 = whitelist0.addAttributes("p", stringArray0);
      Document document0 = Document.createShell("p");
      whitelist0.addProtocols("p", "p", stringArray0);
      whitelist0.preserveRelativeLinks(true);
      Attribute attribute0 = Attribute.createFromEncoded("p", "p");
      boolean boolean0 = whitelist1.isSafeAttribute("p", document0, attribute0);
      assertFalse(boolean0);
      assertEquals("p", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("+Vp");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("a");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("Zscr");
      boolean boolean0 = whitelist_Protocol0.equals(whitelist_Protocol0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("7E4A^aF&xn0pA");
      boolean boolean0 = whitelist_AttributeKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("a");
      boolean boolean0 = whitelist_AttributeKey0.equals(whitelist0);
      assertFalse(boolean0);
  }
}
