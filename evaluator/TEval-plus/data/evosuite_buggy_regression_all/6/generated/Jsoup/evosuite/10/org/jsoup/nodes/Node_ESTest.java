/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:33:20 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("hOG4vy4dpG&G}c", "hOG4vy4dpG&G}c");
      textNode0.setBaseUri("hOG4vy4dpG&G}c");
      assertEquals("hOG4vy4dpG&G}c", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("QWZ/");
      document0.attr("QWZ/", "QWZ/");
      String string0 = document0.absUrl("QWZ/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("pWc`;`p!H>;9yM9`");
      Node node0 = document0.removeAttr("pWc`;`p!H>;9yM9`");
      assertSame(node0, document0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("b,");
      assertEquals(0, (int)document0.siblingIndex());
      
      Element element0 = document0.append("b,");
      Element element1 = element0.clone();
      assertNotSame(element1, document0);
      assertEquals(0, (int)element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("oabs:a:abs:'");
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:'");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("b,");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("b,");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("%nMc(nwXd5c=?");
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("abs:qjaz{*(t");
      String string0 = document0.absUrl("abs:qjaz{*(t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("b,");
      assertEquals(0, (int)document0.siblingIndex());
      
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("pWc`;`p!H>;9yM9`");
      Element element0 = document0.appendElement("pWc`;`p!H>;9yM9`");
      element0.setParentNode(document0);
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("fRVJxC%sg]Nz");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:'");
      Element element0 = document0.prependElement("&mKL{|W:^");
      document0.replaceChild(element0, element0);
      assertEquals("abs:abs:'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell(",.tV}P|r%");
      TextNode textNode0 = new TextNode("u5", "u5");
      Element element0 = document0.appendChild(textNode0);
      document0.replaceChild(textNode0, element0);
      assertEquals(1, (int)textNode0.siblingIndex());
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("oabs:a:abs:'");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("abs:qjaz{*(t");
      Node node0 = document0.doClone(document0);
      assertNotSame(node0, document0);
      
      node0.previousSibling();
      assertEquals(0, (int)node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataNode dataNode0 = new DataNode("l!>dHF j@+ekU_v[", "l!>dHF j@+ekU_v[");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) dataNode0;
      TextNode textNode0 = new TextNode("", "");
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) dataNode0;
      dataNode0.addChildren(nodeArray0);
      dataNode0.previousSibling();
      assertEquals(1, (int)dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("b,", "b,", false);
      boolean boolean0 = xmlDeclaration0.equals("b,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("4eG", "4eG");
      boolean boolean0 = comment0.equals(comment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("x<P%|%\"BZn^j]Z/)");
      Element element0 = document0.prependElement("NotTilde");
      element0.select("NotTilde");
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("#text", ":B*");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode("'Az#", "'Az#");
      String string0 = textNode0.toString();
      assertEquals("'Az#", string0);
  }
}
