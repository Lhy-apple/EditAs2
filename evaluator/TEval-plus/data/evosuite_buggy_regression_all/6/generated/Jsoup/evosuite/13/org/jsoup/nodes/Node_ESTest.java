/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:33:28 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("4#tex");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("bPFcyMhq^e");
      document0.setBaseUri("bPFcyMhq^e");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("teDxt");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("org.j#oup.nFdes.Node$uterHtmlVisitor");
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals(1, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("4#tex");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "4#tex");
      DocumentType documentType0 = new DocumentType("s}", "s}", "fBau\"w!%!tptBCSmc", "{");
      stringBuilder0.append((Object) documentType0);
      assertEquals("4#tex<!DOCTYPE html PUBLIC \"s}\" fBau\"w!%!tptBCSmc\">", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("#text");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("4#tex");
      // Undeclared exception!
      try { 
        document0.before("doub");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      // Undeclared exception!
      try { 
        textNode0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("7Y=vP Y_", "7Y=vP Y_");
      // Undeclared exception!
      try { 
        comment0.wrap("7Y=vP Y_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:abs:\"*04j9:&", "abs:abs:\"*04j9:&");
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("44#text");
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("+s=p]YrQe4P)~[");
      Elements elements0 = document0.getElementsByAttributeStarting("+s=p]YrQe4P)~[");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("abs:\n");
      String string0 = document0.absUrl("abs:\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("4#tex");
      Element element0 = document0.attr("4#tex", "4#tex");
      String string0 = element0.absUrl("4#tex");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("4#tex");
      document0.setParentNode(document0);
      document0.after("4#tex");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("4#tex");
      document0.setParentNode(document0);
      document0.wrap("<o3>:");
      document0.previousSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("abs:tyjq6k");
      document0.setParentNode(document0);
      Element element0 = document0.wrap("abs:tyjq6k");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("abs:f+k/qtqxy");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.wrap("abs:f+k/qtqxy");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("4#tex");
      document0.setParentNode(document0);
      document0.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("abs:tyjq6k");
      Comment comment0 = new Comment("abs:tyjq6k", "abs:tyjq6k");
      // Undeclared exception!
      try { 
        comment0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("44#text");
      document0.setParentNode(document0);
      Document document1 = Document.createShell("44#text");
      document0.replaceWith(document1);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("bPFcyMhq_e");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("abs:f+k/qtqxy");
      document0.setParentNode(document0);
      Node node0 = document0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextNode textNode0 = new TextNode("&**03d", "&**03d");
      boolean boolean0 = textNode0.equals("&**03d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = new TextNode("bPocM_e", "bPocM_e");
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode("&**03d", "&**03d");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("abs:tyjq6k");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("org.j#oup.nFdes.Node$uterHtmlVisitor");
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      Node node0 = textNode0.clone();
      assertEquals(0, node0.siblingIndex());
      assertNotSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextNode textNode0 = new TextNode("&**03d", "&**03d");
      String string0 = textNode0.outerHtml();
      assertEquals("&amp;**03d", string0);
  }
}
