/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:36:24 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      Element element1 = element0.prepend("textarea");
      // Undeclared exception!
      try { 
        element1.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document(":lastchild");
      Elements elements0 = document0.getElementsMatchingText(":lastchild");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(" E\"");
      Document document1 = (Document)document0.prependChild(document0);
      document1.wrap(" E\"");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("MT%li]VQ+");
      document0.appendChild(document0);
      document0.prependText(" ");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("f;2J@N");
      // Undeclared exception!
      try { 
        document0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("MT%li]VQ+");
      Element element0 = document0.tagName("textarea");
      document0.prependText("textarea");
      String string0 = element0.text();
      assertEquals("textarea", document0.tagName());
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document(" \"");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document(" \"");
      Elements elements0 = document0.getElementsContainingOwnText(".");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("*<tY{ymBk}+neNaq}Y");
      Element element0 = document0.addClass("*<tY{ymBk}+neNaq}Y");
      assertEquals("*<tY{ymBk}+neNaq}Y", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("_coo0hD");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document(" \"");
      // Undeclared exception!
      try { 
        document0.html(" \"");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("value");
      Elements elements0 = document0.getElementsByAttributeValue("class", "value");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("ra_coo0hID");
      Elements elements0 = document0.getElementsByAttributeValueStarting("ra_coo0hID", "ra_coo0hID");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("</");
      Element element0 = document0.createElement("tt");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      element0.addChildren(nodeArray0);
      String string0 = document0.cssSelector();
      assertEquals("tt > #root", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document(" />");
      // Undeclared exception!
      try { 
        document0.after(" />");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document(":rmx,_~ra");
      Elements elements0 = document0.getElementsByAttributeStarting(":rmx,_~ra");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("MT%li]VQ+");
      Elements elements0 = document0.getElementsByIndexEquals((-1159));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("T4oN`iX;Rvc");
      Elements elements0 = document0.getElementsMatchingOwnText("T4oN`iX;Rvc");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document(" E\"");
      // Undeclared exception!
      try { 
        document0.wrap(" E\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("<");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.val("AQ");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("@AR20vT");
      Elements elements0 = document0.getElementsByAttributeValueMatching("hmhynqsnu;g", "L$S6Pu@6");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document(" />");
      Elements elements0 = document0.getElementsByAttributeValueEnding(" />", " />");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document(" \"");
      Elements elements0 = document0.getElementsByClass(" \"");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("Queue not long enough to consume sequence");
      Elements elements0 = document0.getElementsContainingText("Queue not long enough to consume sequence");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(" \"");
      Elements elements0 = document0.getElementsByAttributeValueContaining(" \"", " \"");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("value");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("id");
      Elements elements0 = document0.getElementsByAttributeValueNot("id", "id");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("irstxgo'zjr.kpyp");
      Elements elements0 = document0.getElementsByAttribute("irstxgo'zjr.kpyp");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("_coo0hD");
      // Undeclared exception!
      try { 
        document0.before("_coo0hD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document(" E\"");
      Element element0 = document0.removeClass(" E\"");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document(":lastchild");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("_coo0hD");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document(" \"");
      Elements elements0 = document0.getElementsByIndexGreaterThan(415);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document(" E\"");
      Element element0 = document0.prependChild(document0);
      element0.tagName(" E\"");
      element0.prepend("(JN2EOIUGoJuRir");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("MT%m]VDd");
      document0.appendChild(document0);
      document0.prependText("menu");
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document(" E\"");
      Element element0 = document0.prependChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document(" \"");
      document0.prependText("");
      List<TextNode> list0 = document0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document(" E\"");
      DataNode dataNode0 = DataNode.createFromEncoded(" E\"", " E\"");
      document0.appendChild(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("=");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document(" />");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        document0.insertChildren(971, elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("ra_coo0hID");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      Element element0 = document0.insertChildren((-1), linkedHashSet0);
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("ra_coo0hID");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-899), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document(" E\"");
      Element element0 = document0.toggleClass(" E\"");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document(" E\"");
      document0.prependChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document(" \"");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document(" \"");
      Document document1 = new Document("|-H]fkv{%v<D0c");
      TextNode textNode0 = new TextNode("#comment", ".");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) textNode0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document1.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("l");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document(" \"");
      Document document1 = new Document(" \"");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      document0.addChildren(nodeArray0);
      Element element0 = document0.nextElementSibling();
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document(" E\"");
      document0.prependChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("x^{v'f");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document(" E\"");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("D?/#L37yt3e");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      Document document1 = document0.clone();
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document1.firstElementSibling();
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("MT%m]VDd");
      Element element0 = document0.createElement("menu");
      document0.appendChild(element0);
      document0.appendChild(document0);
      element0.lastElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("G`NJ ~.SJ;");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(2529);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IndexLessThan", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("@^bpG7UfT/B");
      Element element0 = document0.getElementById("@^bpG7UfT/B");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document(" E\"");
      DataNode dataNode0 = DataNode.createFromEncoded(" E\"", " E\"");
      document0.appendChild(dataNode0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("MT%li]VQ+");
      Element element0 = document0.createElement("menu");
      document0.appendChild(element0);
      assertEquals(0, element0.siblingIndex());
      
      document0.prependText(" ");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("MT%m]VDd");
      Element element0 = document0.createElement("br");
      document0.appendChild(element0);
      assertEquals(0, element0.siblingIndex());
      
      document0.prependText("<");
      String string0 = document0.text();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("MT%m]VDd");
      document0.prependText("menu");
      Pattern pattern0 = Pattern.compile("MT%m]VDd");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document(" E\"");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      DataNode dataNode0 = DataNode.createFromEncoded(" E\"", " E\"");
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      Pattern pattern0 = Pattern.compile(" E\"");
      // Undeclared exception!
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Comment comment0 = new Comment(" E\"", " E\"");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("id");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("id");
      Comment comment0 = new Comment("id", "id");
      document0.appendChild(comment0);
      assertEquals(0, comment0.siblingIndex());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = new Document("br");
      document1.prependChild(document0);
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("=");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      Tag tag0 = Tag.valueOf("=");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "=", attributes0);
      element0.appendText("=");
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("z8yn%Lg34\" f^^)");
      DataNode dataNode0 = new DataNode(" E\"", "z8yn%Lg34\" f^^)");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals(" E\"", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document(" \"");
      TextNode textNode0 = TextNode.createFromEncoded(" \"", " \"");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document(" \"");
      Element element0 = document0.toggleClass(" \"");
      boolean boolean0 = element0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("^=");
      Element element0 = document0.toggleClass("textanea");
      document0.toggleClass("IRstXGo'zJR.Kpyp");
      boolean boolean0 = element0.hasClass("IRstXGo'zJR.Kpyp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document(" \"");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "2>ebX)x{[+I");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.val("U4s*Rz}74~qe|s");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("x^{v'f");
      StringBuilder stringBuilder0 = new StringBuilder(6526);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder1, 6526, document_OutputSettings1);
      assertEquals("false<#root>", stringBuilder1.toString());
      assertEquals("false<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("v6lue");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      Element element0 = document0.createElement("data");
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("MT%li]VQ+");
      Element element0 = document0.tagName("textarea");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Document$OutputSettings$Syntax");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-401), document_OutputSettings1);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tKXLaO`5Q");
      Element element0 = new Element(tag0, "tKXLaO`5Q");
      Element element1 = element0.prepend("tKXLaO`5Q");
      // Undeclared exception!
      try { 
        element1.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("v6lue");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document(" \"");
      String string0 = document0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("MT%li]VQ+");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document(" \"");
      TextNode textNode0 = TextNode.createFromEncoded(" \"", " \"");
      Attributes attributes0 = textNode0.attributes();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document0;
      Tag tag0 = Tag.valueOf(" \"");
      Element element0 = new Element(tag0, "/F+31g6*b80KAy{`Ts", attributes0);
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element1 = document0.previousElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document(" \"");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      Document document2 = new Document("");
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      document0.addChildren(nodeArray0);
      Element element0 = document1.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("x^{v'f");
      document0.hashCode();
  }
}
