/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:38:50 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes1.equals(attributes0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("p", "p");
      Attribute attribute0 = Attribute.createFromEncoded("k?A-eX$U", "data-");
      attributes0.put(attribute0);
      Attribute attribute1 = new Attribute("menuitem", "p", attributes1);
      Attributes attributes2 = attributes1.put(attribute1);
      attributes1.addAll(attributes2);
      assertEquals(3, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("i#yo>#n", "i#yo>#n");
      Attributes attributes2 = attributes1.put("CommentEndDash", "org.jsoup.nodes.Attributes$Dataset");
      Attribute attribute0 = new Attribute("_", "_", attributes2);
      Attributes attributes3 = attributes2.put(attribute0);
      attributes3.clone();
      attributes3.addAll(attributes1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("0/hgt59},uu");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("i#yo>#n", "i#yo>#n");
      attributes0.put("org.jsoup.nodes.Attributes$Dataset", true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes.checkNotNull((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("k?A-eX$U", "data-");
      attributes0.put(attribute0);
      attributes0.get("k?A-eX$U");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.get(" iZoW&[thq!=\"F=h~w2ig^(Q\" F=h~w2ig^(Q=\"data-\"");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("CommentEndDash", "org.jsoup.nodes.Attributes$Dataset");
      attributes0.getIgnoreCase("CommentEndDash");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.getIgnoreCase("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("allowfullscreen", "allowfullscreen");
      attributes1.putIgnoreCase("allowfullscreen", "allowfullscreen");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Ez Sf", "Ez Sf");
      attributes1.normalize();
      attributes1.putIgnoreCase("Ez Sf", (String) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("CommentEndDash", false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("p", "p");
      Attribute attribute0 = Attribute.createFromEncoded("k?A-eX$U", "data-");
      attributes0.put(attribute0);
      attributes1.removeIgnoreCase("p");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("0/hgt59},uu", "0/hgt59},uu");
      attributes1.remove("0/hgt59},uu");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasKey("hS)_-!.;");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("<", "<");
      attributes1.hasKey("<");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasKeyIgnoreCase("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("iZoW&[thq!", "F=h~w2ig^(Q");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.hasKeyIgnoreCase("iZoW&[thq!");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("$5Nb2PST)M >7 yu", "$5Nb2PST)M >7 yu");
      attributes1.asList();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("$5Nb2PST)M >7 yu", true);
      attributes0.asList();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("i#yo>#n", "i#yo>#n");
      attributes1.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("org.jsoup.nodes.Attributes$Dataset", true);
      attributes0.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("dKUB", (String) null);
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes0.html((Appendable) stringWriter0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.equals(attributes0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      Attributes attributes2 = attributes1.put("F2", "F2");
      attributes0.equals(attributes2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.equals("org.jsoup.nodes.Attributes");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("v}a$", "v}a$");
      Attributes attributes2 = attributes1.clone();
      attributes2.equals(attributes1);
  }
}
