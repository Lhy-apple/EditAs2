/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:38:08 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = new Element("(");
      Element element1 = element0.getElementById("org.jsoup.select.Evaluator$AttributeWithValueContaining");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Element element0 = new Element("title");
      element0.prependElement("title");
      element0.toString();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.text("br");
      document0.appendElement("br");
      document0.getElementsMatchingText("br");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("=D'5xuz,~uYF;u^");
      // Undeclared exception!
      try { 
        document0.child(91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("br");
      assertFalse(document0.hasParent());
      
      document0.text("br");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>", string0);
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("`o[|PP9_");
      document0.prependText("t5.\"j");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.tagName("#root");
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("Yh");
      document0.dataset();
      assertEquals("Yh", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error:");
      Element element0 = document0.addClass("Pattern syntax error:");
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("U+7");
      Comment comment0 = new Comment("U+7", "data-");
      // Undeclared exception!
      try { 
        document0.before((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("mg");
      Element element0 = document0.attr("mg", false);
      assertEquals("mg", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("+U");
      assertFalse(document0.hasParent());
      
      document0.getElementsByAttributeValueStarting("+U", "+U");
      assertEquals(1, document0.childNodeSize());
      assertEquals("+U", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals(1, element0.siblingIndex());
      assertEquals("html > body", string0);
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell(" m");
      Element element0 = document0.prepend(" m");
      element0.appendElement(" m");
      element0.getElementsMatchingText(" m");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("#,LK9  W\".nTY491");
      Elements elements0 = document0.getElementsMatchingOwnText("#,LK9  W\".nTY491");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#,LK9  W\".nTY491", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("A}JZ");
      // Undeclared exception!
      try { 
        document0.after("A}JZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsByIndexLessThan(4);
      assertEquals("br", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("`o[p|PP9_");
      document0.getElementsByAttributeStarting("`o[p|PP9_");
      assertEquals("`o[p|PP9_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("=D'5xuz,~uYF;u^");
      Elements elements0 = document0.getElementsByIndexEquals(4);
      assertEquals("=D'5xuz,~uYF;u^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("orr.jsoup.nodes.FormElement");
      // Undeclared exception!
      try { 
        document0.wrap("orr.jsoup.nodes.FormElement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("SDy',QKr)");
      Element element0 = document0.val("SDy',QKr)");
      assertEquals(1, element0.childNodeSize());
      assertEquals("SDy',QKr)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      Elements elements0 = element0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("g");
      document0.is("g");
      assertEquals("g", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = new Element("W");
      Elements elements0 = element0.getElementsByAttributeValueEnding("W", "W");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByClass("br");
      assertEquals("br", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsContainingText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttributeValueContaining("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element element0 = new Element("b");
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("s&k8s,&y'{!xb/^`GT7");
      document0.doSetBaseUri("s&k8s,&y'{!xb/^`GT7");
      assertEquals(1, document0.childNodeSize());
      assertEquals("s&k8s,&y'{!xb/^`GT7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell(" -ci%zp2*,FsowU~");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals(" -ci%zp2*,FsowU~", document1.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("SDF',*7");
      Element element0 = document0.shallowClone();
      assertEquals("SDF',*7", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("`o[p|PP9_");
      Element element0 = document0.appendTo(document0);
      element0.nextElementSibling();
      assertEquals(1, document0.siblingIndex());
      assertEquals("`o[p|PP9_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Element element0 = new Element("K#bs~");
      Elements elements0 = element0.getElementsByAttributeValueNot("K#bs~", "K#bs~");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttribute("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell(">F;=");
      Element element0 = document0.removeClass(">F;=");
      assertEquals(">F;=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("2[)");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("2[)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.title("org.jsoup.HttpStatusException");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals("br", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      // Undeclared exception!
      try { 
        document0.selectFirst(" > ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      element0.append("br");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("H,xz&");
      document0.prependText("H,xz&");
      document0.getElementsByIndexGreaterThan((-2301));
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("!Ju");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("!Ju", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("~_f#\"M+J!~4*");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(9, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("ZE#+qVry");
      Elements elements0 = document0.getElementsByAttributeValue("ZE#+qVry", "ZE#+qVry");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1748), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("select");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals("select", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(82, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("g");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-654), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("#,LK9  W\".nTY491");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("sdf',kr)");
      document0.toggleClass("sdf',kr)");
      document0.cssSelector();
      assertEquals("sdf',kr)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before(".&8Wf6r");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("b");
      document0.siblingElements();
      assertEquals("b", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("F/ZmVL5");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("F/ZmVL5", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("!Ju");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals("!Ju", element1.baseUri());
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("R\"%P$@xs:v|");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("R\"%P$@xs:v|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("SDy',QKr)");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      Element element2 = element1.previousElementSibling();
      assertEquals("SDy',QKr)", element1.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Element element0 = new Element("tite");
      Element element1 = element0.prependElement("tite");
      Element element2 = element1.firstElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Element element0 = new Element("(");
      Element element1 = element0.prependElement("br");
      Element element2 = element1.lastElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("GR)IH4$8V!C\"");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertEquals("GR)IH4$8V!C\"", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("34");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1836));
      assertEquals("34", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("+U");
      document0.prepend("+U");
      document0.getElementsContainingOwnText("+U");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Comment comment0 = new Comment("", "org.jsoup.nodes.Element$1");
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("f\"<-{VR*O^");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextNode textNode0 = new TextNode("%Z(o");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("`o[|PP9_");
      document0.prependText("t5.\"j");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("#,LK9  W\".nTY491");
      TextNode textNode0 = new TextNode("");
      document0.appendChild(textNode0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("=D'5xuz,~uYF;u^");
      Comment comment0 = new Comment("MUiCE&'cN", "s+");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.text("textarea");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("SDy',QKr)");
      DataNode dataNode0 = DataNode.createFromEncoded("java.lang.string@0000000017 java.lang.string@0000000007 mhildren ^ollection +f be inse#ted must not be null.", "k%*_i3qPd");
      document0.prependChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("SDy',QKr)");
      Comment comment0 = new Comment("SDy',QKr)");
      document0.appendChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("SDy',QSKr)");
      document0.html("SDy',QSKr)");
      document0.data();
      assertEquals("SDy',QSKr)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error:");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      boolean boolean0 = element0.hasClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("Pattern syntax error:", element0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell(")0");
      Element element0 = document0.toggleClass(")0");
      boolean boolean0 = element0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(")0", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("`o[|PP9_");
      document0.toggleClass("`o[|PP9_");
      Element element0 = document0.toggleClass("`o[|PP9_");
      boolean boolean0 = element0.hasClass("`o[|PP9_");
      assertEquals("`o[|PP9_", element0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("8io>+P");
      Element element0 = document0.toggleClass("8io>+P");
      element0.toggleClass("java.lang.string@0000000007 java.lang.string@0000000007 mhildren ^ollection f\"  m inse#ted must n)t be null.");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000007 java.lang.string@0000000007 mhildren ^ollection f\"  m inse#ted must n)t be null.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("8io>+P", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("8io>+P");
      Element element0 = document0.toggleClass("8io>+P");
      element0.toggleClass("java.lang.string@0000000007 mhildren ^ollection f\" be inse#ted must not be null.");
      boolean boolean0 = document0.hasClass("f\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell(")0");
      Element element0 = document0.toggleClass(")0");
      element0.toggleClass("java.lang.string@0000000007 mhildren ^ollection f\" be inse#ted must not be null.");
      boolean boolean0 = document0.hasClass(")0");
      assertEquals(")0", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.toggleClass("#bH?>cWXU~");
      Element element1 = element0.toggleClass("");
      boolean boolean0 = element1.hasClass("+F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("`o[|PP9_");
      document0.toggleClass("`o[|PP9_");
      document0.toggleClass("`o[|PP9_");
      Element element0 = document0.toggleClass("`o[|PP9_");
      assertEquals(1, element0.childNodeSize());
      assertEquals("`o[|PP9_", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Element element0 = new Element("br");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "fWL,L;L]]MOq;awoF", (Attributes) null);
      element0.val();
      assertEquals("fWL,L;L]]MOq;awoF", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "%:tFf}yAVwpNE/", (Attributes) null);
      formElement0.val("a(+d.d~");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell(" -ci%zp2*,FsowU~");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.toString();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals(" -ci%zp2*,FsowU~", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      String string0 = element0.toString();
      assertEquals(2, document0.childNodeSize());
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Element element0 = new Element("title");
      String string0 = element0.toString();
      assertEquals("<title></title>", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuilder0, (-889), document_OutputSettings0);
      assertEquals("<br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000007 mhildren ^ollection f\" be inse#ted must not be null.");
      MockFileWriter mockFileWriter0 = new MockFileWriter("java.lang.string@0000000007 mhildren ^ollection f\" be inse#ted must not be null.", true);
      document0.html(mockFileWriter0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, (-889), document_OutputSettings1);
      assertEquals("<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, (-1000), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }
}
