/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:39:01 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("-TN,R", "-TN,R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-TN,R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("2+dYiMW[Z5ztAi%)#eb", "2+dYiMW[Z5ztAi%)#eb");
      Attribute attribute1 = new Attribute("2+dYiM[Z5ztAi%)eb", "2+dYiMW[Z5ztAi%)#eb");
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertEquals("2+dYiMW[Z5ztAi%)#eb", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded(".a", ".a");
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("N,R", "N,R");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("typemustmatch", "typemustmatch");
      String string0 = attribute0.html();
      assertEquals("typemustmatch", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("77E_#KX|@x97^|0", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("        ", "        ");
      String string0 = attribute0.toString();
      assertEquals("=\"        \"", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("uiLW*>WJ:qMF;sg", (String) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("oDM)A,ZwbOV{", "oDM)A,ZwbOV{");
      attribute0.setKey("oDM)A,ZwbOV{");
      assertEquals("oDM)A,ZwbOV{", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&#x", "&#x", attributes0);
      attribute0.setKey("&#x");
      assertEquals("&#x", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("&#x", "&#x");
      Attribute attribute0 = new Attribute("&#x", "&#x", attributes0);
      attribute0.setKey("&#x");
      assertEquals("&#x", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&#x", "&#x", attributes0);
      String string0 = attribute0.setValue("&#x");
      assertEquals("", string0);
      assertEquals("&#x", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("&#x", "&#x");
      Attribute attribute0 = new Attribute("&#x", "&#x", attributes0);
      String string0 = attribute0.setValue("&#x");
      assertEquals("&#x", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-thead");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("-TN,R", "-TN,R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-TN,R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings1);
      assertEquals("-TN,R", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("truespeed", "");
      String string0 = attribute0.toString();
      assertEquals("truespeed", string0);
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noresize", "noresize");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attribute attribute0 = new Attribute("TY^UB", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("N,R", "N,R");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("-TN,R", "-TN,R");
      Attribute attribute1 = new Attribute("-TN,R", "-TN,R");
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("N,R", "N,R");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("-TN,R", "-TN,R");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("-TN,R", "-TN,R");
      boolean boolean0 = attribute0.equals("-TN,R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("TY^UB", "TY^UB");
      Attribute attribute1 = new Attribute("TY^UB", (String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("typemustmatch", "typemustmatch");
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("&#x", (String) null);
      attribute0.hashCode();
  }
}
