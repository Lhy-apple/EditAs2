/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:38:14 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.helper.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtil.resolve("             ", "             ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>();
      String string0 = StringUtil.join((Collection) linkedList0, "?wA)i 4nxWcK&t?p%");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WFR#`.9B6V6RM%Y=n,w";
      String string0 = StringUtil.join(stringArray0, "WFR#`.9B6V6RM%Y=n,w");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WFR#`.9B6V6RM%Y=n,w";
      String string0 = StringUtil.join(stringArray0, "WFR#`.9B6V6RM%Y=n,w");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtil.padding(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-4537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtil.padding(1996);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank(":/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("        ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("245#7 ``");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "`G_?BBsS kp^6i7", true);
      assertEquals("`G_?BBsS kp^6i7", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("jydX A ");
      assertEquals("jydX A ", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringUtil.appendNormalisedWhitespace((StringBuilder) null, "           ", true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("             ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtil.in("?CXSE7Kt\"^-", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      // Undeclared exception!
      try { 
        StringUtil.in("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "        @      ";
      boolean boolean0 = StringUtil.in("        @      ", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[2] = "!!0|5Jw@'Q:Tq-rD";
      stringArray0[4] = "java.lang.String@0000000001";
      boolean boolean0 = StringUtil.inSorted("                 ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(".p\"y*=jjKRDU$s<", ".p\"y*=jjKRDU$s<", 17, ".p\"y*=jjKRDU$s<", uRLStreamHandler0);
      try { 
        StringUtil.resolve(uRL0, ".p\"y*=jjKRDU$s<");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: .p\"y*=jjkrdu$s<
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = StringUtil.resolve(uRL0, "?jzJc");
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample?jzJc", uRL1.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = StringUtil.resolve(uRL0, ".p\"y*=jjKRGU$s/<");
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/.p\"y*=jjKRGU$s/.p\"y*=jjKRGU$s/<", uRL1.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      boolean boolean0 = StringUtil.isWhitespace((-1931));
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.append("}9,>#o{gZ6yTj8}");
      StringBuilder stringBuilder3 = stringBuilder1.append((Object) uRL0);
      stringBuilder3.append(false);
      StringBuilder stringBuilder4 = stringBuilder2.append((Object) uRL0);
      stringBuilder1.append((CharSequence) stringBuilder4);
      Object object0 = new Object();
      StringBuilder stringBuilder5 = stringBuilder4.append((CharSequence) stringBuilder1);
      StringBuilder stringBuilder6 = stringBuilder4.append(object0);
      stringBuilder4.append((Object) stringBuilder0);
      stringBuilder2.append((Object) stringBuilder1);
      stringBuilder6.append((Object) stringBuilder6);
      StringBuilder stringBuilder7 = StringUtil.stringBuilder();
      assertSame(stringBuilder7, stringBuilder5);
  }
}
