/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:37:41 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("En\tF{lcSmwe^<sEXu");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "En\tF{lcSmwe^<sEXu", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Comment comment0 = new Comment("En\tF{lcSmwe^<sEXu");
      Attributes attributes0 = comment0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("td", attributes0);
      token_StartTag1.selfClosing = true;
      htmlTreeBuilder0.insertEmpty(token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("&quot;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Element element0 = new Element("itemscope");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(element0, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("td", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("moKf].+#/pzY*", element0, "tbody", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("En\tF{lcSmwe^<sEXu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("IHeao2cri!'");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "IHeao2cri!'", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.processEndTag("IHeao2cri!'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("table");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("table", element0, "table", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setPendingTableCharacters((List<String>) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Element element0 = new Element("itemscope");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k\"O5bU`Z}H{TS<?");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(144);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "itemscope", parseErrorList0, parseSettings0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("itemscope");
      // Undeclared exception!
      try { 
        document0.wrap("itemscope");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "9v>-sWA9BD36E*2uP");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("div", element0, "YT~*#G-", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("P^9&6*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscriSt");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1881929145));
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "InHeadNoscriSt", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("style");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("0X(z1.6\"va", element0, "hgroup", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("script");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`", attributes0);
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", formElement0, "`", parseErrorList0, parseSettings0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("noscript", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "noscript", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("|fm7#9}klqua_.zg", element0, "noscript", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("YT~*#G-");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "YT~*#G-", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals("YT~*#G-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("ZP~U*Yhm?~\b", attributes0);
      token_StartTag1.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("hMm");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "hMm", parseErrorList0, parseSettings0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("hMm", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("En\tF{lcSmwe^<sEXu");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "En\tF{lcSmwe^<sEXu", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Comment comment0 = new Comment("En\tF{lcSmwe^<sEXu");
      Attributes attributes0 = comment0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("En\tF{lcSmwe^<sEXu", attributes0);
      token_StartTag1.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("<GZJ1}t,<4v;,;4I");
      stringReader0.skip(100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "<GZJ1}t,<4v;,;4I", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.parser.HtmlTreeBuilder");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.parser.HtmlTreeBuilder", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertNull(token_Character0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscriSt");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1881929145));
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "InHeadNoscriSt", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.parse.HtmlTreeBuilder");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.parse.HtmlTreeBuilder", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("select");
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("&");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "&", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("YT~*#G-");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "YT~*#G-", (ParseErrorList) null, parseSettings0);
      Element element0 = document0.body();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("YT~*#G-", element1, "YT~*#G-", (ParseErrorList) null, parseSettings0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("YT~*#G-");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "YT~*#G-", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("`%[@Y+>");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "`%[@Y+>", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.insertInFosterParent(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Element element0 = new Element("itemcp");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("itemcp", element0, "itemcp", parseErrorList0, (ParseSettings) null);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("En\tF{lcSmwe^<sEXu");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "En\tF{lcSmwe^<sEXu", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insert(document0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToClose("InHeadNoscript");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadN scip");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadN scip", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("InHeadN scip");
      htmlTreeBuilder0.popStackToClose("InHeadN scip");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("&");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "&", (ParseErrorList) null, parseSettings0);
      String[] stringArray0 = new String[6];
      stringArray0[2] = "&";
      stringArray0[4] = "&";
      stringArray0[5] = "&";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "G8Dsc2T'4RF.hYI", (ParseErrorList) null, parseSettings0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Comment comment0 = new Comment("InHeadNoscript");
      Attributes attributes0 = comment0.attributes();
      token_StartTag0.nameAttr("G8Dsc2T'4RF.hYI", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "G8Dsc2T'4RF.hYI";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNOscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadNOscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("Text");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("P!");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "P!", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("data");
      htmlTreeBuilder0.popStackToBefore("data");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("&");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "embed", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("&");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "embed", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("tr");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.parser.HtmlTreeBuilder");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.parser.HtmlTreeBuilder", parseErrorList0, parseSettings0);
      Element element0 = document0.body();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "G8Dsc2T'4RF.hYI", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("P!");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "P!", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Comment comment0 = new Comment("P!");
      Attributes attributes0 = comment0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("Wjqo", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      htmlTreeBuilder0.insertOnStackAfter(formElement0, formElement0);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("&");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "embed", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNOscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadNOscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("Text");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("select");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "!-FO;:=`YL", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("YT~*G-");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "YT~*G-", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("th", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("YT~*G-");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "YT~*G-", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("th", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", formElement0, "th", (ParseErrorList) null, parseSettings0);
      assertEquals(1, formElement0.siblingIndex());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("tr");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tr", element0, "tr", parseErrorList0, parseSettings0);
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsou1.parse.HtmlTreeuilder", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsou1.parse.HtmlTreeuilder", formElement0, "tbody", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("thead");
      htmlTreeBuilder0.parseFragment("org.jsoup.helper.ChangeNotifyingArrayList", element0, "org.jsoup.helper.ChangeNotifyingArrayList", parseErrorList0, parseSettings0);
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(2, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Element element0 = new Element("tfoot");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("wbr", element0, "knAqDp", parseErrorList0, parseSettings0);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("caption");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", element0, "caption", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Element element0 = new Element("colgroup");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "colgroup", parseErrorList0, parseSettings0);
      assertTrue(list0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Element element0 = new Element("head");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("html", element0, "table", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("frameset");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parseFragment("oUt9,p", element0, "oUt9,p", parseErrorList0, parseSettings0);
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("M]E`L5W$By6");
      boolean boolean0 = htmlTreeBuilder0.inTableScope("InHeadNoscript");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("+d;j\"17*:>Q`");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("InHeadNoscript");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("colgroup");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "colgroup", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("colgroup");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = new ArrayList<Element>();
      htmlTreeBuilder0.stack = arrayList0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("yN5\"Wmj5y>vq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("YT~*#G-");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "YT~*#G-", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.generateImpliedEndTags("table");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "math", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.insertStartTag("option");
      htmlTreeBuilder0.generateImpliedEndTags("K7b;Gw\"6q=} qo");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadN scip");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadN scip", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("mgE)a1nAo");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "mgE)a1nAo", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      document0.val("Vw&Vk'@tMp6$)+");
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("colgroup");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "colgroup", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("P!");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "P!", (ParseErrorList) null, parseSettings0);
      Document document1 = new Document("P!");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.push(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "G8Dsc2T'4RF.hYI", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "RhFoc=xD:rElf`_Y", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", parseErrorList0, parseSettings0);
      Document document1 = document0.clone();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InHeadNoscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "InHeadNoscript", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("AfterBody");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("mgE)a1nAo");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "mgE)a1nAo", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("InTableText");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Element element0 = new Element("itemscope");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parseFragment("itemscope", element0, "itemscope", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("itemscope");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("`%[@Y+>");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`%[@Y+>", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      element0.replaceWith(document0);
      htmlTreeBuilder0.insertInFosterParent(element0);
      assertEquals(2, element0.siblingIndex());
  }
}
