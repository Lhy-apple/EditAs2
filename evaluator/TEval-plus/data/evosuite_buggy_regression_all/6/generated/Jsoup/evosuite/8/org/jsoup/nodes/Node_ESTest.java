/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:32:43 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      textNode0.setBaseUri("lP_qUIeF1F-k");
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("lP%qUIeF1F-k", "lP%qUIeF1F-k");
      textNode0.attr("lP%qUIeF1F-k", "lP%qUIeF1F-k");
      String string0 = textNode0.absUrl("lP%qUIeF1F-k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      Node node0 = textNode0.removeAttr("lP_qUIeF1F-k");
      assertSame(textNode0, node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("lP_qUIeF1F-k");
      Element element0 = document0.append("lP_qUIeF1F-k");
      String string0 = element0.html();
      assertEquals("lP_qUIeF1F-k", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      // Undeclared exception!
      try { 
        textNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      String string0 = textNode0.attr("abs:]vq");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("1y");
      Element element0 = document0.head();
      element0.setParentNode((Node) null);
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("nP_?qUIeF1#-k", "nP_?qUIeF1#-k");
      DataNode dataNode0 = DataNode.createFromEncoded("nP_?qUIeF1#-k", "nP_?qUIeF1#-k");
      // Undeclared exception!
      try { 
        dataNode0.replaceChild(textNode0, textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("rkf=]08!0|MlG");
      Element element0 = document0.appendElement("rkf=]08!0|MlG");
      element0.replaceWith(document0);
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      DataNode dataNode0 = DataNode.createFromEncoded("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      dataNode0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.replaceChild(dataNode0, dataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("nP_?qUIeF1#-k", "nP_?qUIeF1#-k");
      DataNode dataNode0 = DataNode.createFromEncoded("nP_?qUIeF1#-k", "nP_?qUIeF1#-k");
      // Undeclared exception!
      try { 
        dataNode0.removeChild(textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("1y");
      Element element0 = document0.prependChild(document0);
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      DataNode dataNode0 = DataNode.createFromEncoded("lP_qUIeF1F-k", "lP_qUIeF1F-k");
      dataNode0.parentNode = (Node) textNode0;
      Node node0 = dataNode0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      document0.previousSibling();
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("B]_42", "B]_42");
      boolean boolean0 = textNode0.equals("B]_42");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = new TextNode("PJT6s$6bfvlsj", "1y");
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode("comment", "comment");
      Document document0 = new Document("VX5jy#");
      textNode0.setParentNode(document0);
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("lP_lqUIeF1F-k");
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }
}
