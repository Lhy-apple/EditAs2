/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:36:44 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.getElementById("oa#&3dG|`a<s");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("br");
      document0.toggleClass("#root");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      String string0 = formElement0.outerHtml();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendText("br");
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("#");
      Elements elements0 = document0.getElementsMatchingText("#");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      document0.setParentNode(element0);
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("#");
      // Undeclared exception!
      try { 
        document0.child((-1880152602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      CharBuffer charBuffer0 = CharBuffer.allocate(50);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element1.outerHtmlHead(charBuffer0, 39, document_OutputSettings0);
      assertEquals(46, charBuffer0.remaining());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("hN1LRK1g/");
      Element element0 = document0.prependText("hN1LRK1g/");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = (Document)document0.tagName("br");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.text("textarea");
      String string0 = element1.text();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("#");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Element element0 = new Element("{Q$G}P|WxAW,#$");
      Element element1 = element0.addClass("{Q$G}P|WxAW,#$");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("blockquote");
      // Undeclared exception!
      try { 
        document0.html("blockquote");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("datalist");
      Element element0 = document0.attr("datalist", true);
      assertEquals("datalist", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Element element0 = new Element("datalist");
      Elements elements0 = element0.getElementsByAttributeValue("datalist", "datalist");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("Cm#[~t, b<_l{LHm*1");
      Elements elements0 = document0.getElementsByAttributeValueStarting("Cm#[~t, b<_l{LHm*1", "Cm#[~t, b<_l{LHm*1");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document(" ^");
      Elements elements0 = document0.getElementsMatchingOwnText(" ^");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.after("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document(": se^Ig9H~rNdX%F");
      Elements elements0 = document0.getElementsByIndexLessThan(46);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("f=rap@2Fbs=u+~");
      Elements elements0 = document0.getElementsByAttributeStarting("f=rap@2Fbs=u+~");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("#");
      Elements elements0 = document0.getElementsByIndexEquals((-2021447029));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("datlist");
      // Undeclared exception!
      try { 
        document0.wrap("datlist");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element element0 = new Element("datalist");
      Element element1 = element0.val("datalist");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("jr");
      Elements elements0 = document0.getElementsByAttributeValueMatching("jr", "jr");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element element0 = new Element("br");
      boolean boolean0 = element0.is("br");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("datalist");
      Elements elements0 = element0.getElementsByAttributeValueEnding("datalist", "datalist");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Element element0 = new Element(".");
      Elements elements0 = element0.getElementsByClass("Cm#[~t, b<_l{LHm*1");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("limitIdQuirks");
      Elements elements0 = document0.getElementsContainingText("limitIdQuirks");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueContaining("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("Mhr,_.CN%r");
      Document document1 = document0.clone();
      Element element0 = document1.appendChild(document0);
      assertEquals(0, document0.siblingIndex());
      
      document0.after((Node) document1);
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("jr");
      Elements elements0 = document0.getElementsByAttributeValueNot("jr", "jr");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("datalist");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("ins");
      Elements elements0 = document0.getElementsByAttribute("ins");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("zKp{}Ml\"vqs3Fl_mQ");
      // Undeclared exception!
      try { 
        document0.before("y_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.removeClass("#");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1879848313), elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("#");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByIndexGreaterThan((-677));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      // Undeclared exception!
      try { 
        element1.append("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      // Undeclared exception!
      try { 
        element0.append("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.prepend("#");
      document0.reparentChild(element0);
      Element element1 = document0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Element element0 = new Element("br");
      Document document0 = new Document("br");
      document0.appendChild(element0);
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document(" m");
      Element element0 = document0.prepend(" m");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.prepend("#");
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("Mhr,_.CN%r");
      DataNode dataNode0 = new DataNode(",TS4kc9B+5|c4xZupk", "");
      Element element0 = document0.appendChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("t4}g(W#L,");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(37, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("#");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren(0, linkedHashSet0);
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Element element0 = new Element("attributeDoubleValueCharsSorted");
      Elements elements0 = element0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("#");
      Document document1 = new Document("svKnJ");
      Element element0 = document0.appendChild(document1);
      document0.appendChild(element0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.prependElement("#");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Ld");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("#");
      Document document1 = new Document("svKnJ");
      Element element0 = document0.appendChild(document1);
      document0.appendChild(element0);
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = document1.nextElementSibling();
      assertNotSame(document1, element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("datalist");
      Element element0 = document0.prependElement("datalist");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("datalist");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("#");
      Document document1 = new Document("svKnJ");
      Element element0 = document0.appendChild(document1);
      document0.appendChild(element0);
      document0.previousElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("ZQi!Iw");
      Element element0 = document0.prependElement("ZQi!Iw");
      element0.after((Node) document0);
      Element element1 = element0.lastElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("#");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("jRr");
      DataNode dataNode0 = DataNode.createFromEncoded("jRr", "</");
      document0.appendChild(dataNode0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("02}7KR.>I");
      Element element0 = new Element("del");
      document0.appendChild(element0);
      document0.prepend("Children cole-tion to be insertd must not be null.");
      String string0 = document0.text();
      assertEquals("Children cole-tion to be insertd must not be null.", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Element element0 = new Element("t4C}(W#,");
      Document document0 = new Document("t4C}(W#,");
      document0.appendChild(element0);
      document0.prepend("t4C}(W#,");
      String string0 = document0.text();
      assertEquals("t4C}(W#,", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = document0.appendChild(formElement0);
      FormElement formElement1 = new FormElement(tag0, "br", attributes0);
      document0.appendChild(formElement1);
      assertEquals(1, formElement1.siblingIndex());
      
      document0.prepend("#root");
      String string0 = element0.text();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("t4C}(W#,");
      DataNode dataNode0 = new DataNode("t4C}(W#,", "t4C}(W#,");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsContainingOwnText("frameset");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("datalist");
      Element element0 = document0.prepend("datalist");
      String string0 = element0.ownText();
      assertEquals("datalist", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("?");
      document0.prependElement("?");
      Elements elements0 = document0.getElementsContainingOwnText("?");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = document0.appendChild(formElement0);
      element0.prependElement("br");
      Elements elements0 = element0.getElementsContainingOwnText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("!xwC]9`,#sIA", "!xwC]9`,#sIA");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Element element0 = new Element("plaintext");
      Element element1 = element0.appendElement("br");
      boolean boolean0 = Element.preserveWhitespace(element1);
      assertTrue(boolean0);
      assertEquals("br", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document(" ^");
      Element element0 = document0.prependElement(" ^");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Element element0 = new Element("datalist");
      element0.text("    ");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("C}1Cxp6P9wL:");
      DataNode dataNode0 = DataNode.createFromEncoded("fcS", "C}1Cxp6P9wL:");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("#");
      document0.prependElement("#");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.prependElement("S)bkk`CJj1J");
      Element element1 = element0.text("#");
      assertEquals("S)bkk`CJj1J", element1.tagName());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      document0.appendChild(formElement0);
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = new DataNode("br", "br");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prepend("#root");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document(":not(selector) subselect must not be empty");
      document0.toggleClass(":not(selector) subselect must not be empty");
      boolean boolean0 = document0.hasClass(":not(selector) subselect must not be empty");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      boolean boolean0 = document0.hasClass("java.lang.string@0000000005 9cz8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document(" 4");
      document0.toggleClass("?=rUhF|*");
      document0.toggleClass(" 4");
      boolean boolean0 = document0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("}o");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.toggleClass("java.lang.string@0000000011 utf8 children colection to }o inserted must not be null.");
      boolean boolean0 = document0.hasClass("}o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("br");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.toggleClass("");
      boolean boolean0 = document0.hasClass("br");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("a=");
      Element element0 = document0.toggleClass("a=");
      element0.toggleClass("a=");
      boolean boolean0 = document0.hasClass("a=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("a=");
      Element element0 = document0.toggleClass("a=");
      Element element1 = element0.toggleClass("a=");
      Element element2 = element1.toggleClass("a=");
      assertSame(document0, element2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Element element0 = new Element("datalist");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      TextNode textNode0 = TextNode.createFromEncoded("i'qM5Z<wd[`h}3", "i'qM5Z<wd[`h}3");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("3mc");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000011 utf8 children collection to be inserted must not }o null.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 2922, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("datalist");
      document0.prependElement("datalist");
      String string0 = document0.html();
      assertEquals("<datalist></datalist>", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Element element0 = new Element("br");
      CharBuffer charBuffer0 = CharBuffer.allocate(50);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(charBuffer0, 39, document_OutputSettings0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Element element0 = new Element("{M+");
      Element element1 = element0.appendElement("{M+");
      String string0 = element0.outerHtml();
      assertEquals("<{M+>\n <{M+></{M+>\n</{M+>", string0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder("UA{CDD<&{;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 3975, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Document document0 = new Document("br");
      CharBuffer charBuffer0 = CharBuffer.allocate(50);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(charBuffer0, 50, document_OutputSettings1);
      assertEquals(42, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.text("textarea");
      String string0 = element0.outerHtml();
      assertEquals("<textarea>textarea</textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Element element0 = new Element("br");
      element0.appendElement("br");
      CharBuffer charBuffer0 = CharBuffer.allocate(50);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 50, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element1.before((Node) element0);
      CharBuffer charBuffer0 = CharBuffer.allocate(50);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 50, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Document document0 = new Document("#");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prepend("br");
      MockFileWriter mockFileWriter0 = new MockFileWriter("br");
      MockFileWriter mockFileWriter1 = element0.html(mockFileWriter0);
      assertSame(mockFileWriter1, mockFileWriter0);
  }
}
