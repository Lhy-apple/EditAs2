/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:38:16 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        DataUtil.readToByteBuffer((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = DataUtil.load((InputStream) null, "", "");
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
      assertEquals(0, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("Must set charset arg(to character set of file to parse. Set to null to attempt to detect from HTML", "Must set charset arg(to character set of file to parse. Set to null to attempt to detect from HTML");
      Document document0 = DataUtil.load(file0, (String) null, "Must set charset arg(to character set of file to parse. Set to null to attempt to detect from HTML");
      assertEquals("Must set charset arg(to character set of file to parse. Set to null to attempt to detect from HTML", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = DataUtil.load((InputStream) null, "", "", parser0);
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("2CD`oJkP+$", "AMSj`ZW~}C-bPBH<*E$");
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataUtil.crossStreams(byteArrayInputStream0, mockFileOutputStream0);
      assertEquals(3L, file0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.jsoup.helper.DataUtil", "org.jsoup.helper.DataUtil");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Parser parser0 = Parser.xmlParser();
      Document document0 = DataUtil.parseInputStream(pushbackInputStream0, (String) null, "_6", parser0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("_6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"zB<*G_uV~8nr", "q`ka0U:6Q");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        DataUtil.readToByteBuffer(pushbackInputStream0, (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("2CD`oJkP+$", "AMSj`ZW~}C-bPBH<*E$");
      ByteBuffer byteBuffer0 = DataUtil.readFileToByteBuffer(file0);
      assertEquals(0, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtil.readFileToByteBuffer((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        DataUtil.readFileToByteBuffer(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType("InHeadNoscript");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType("charset=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = DataUtil.mimeBoundary();
      assertEquals("--------------------------------", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML0Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
      File file0 = MockFile.createTempFile("Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML", "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
      try { 
        DataUtil.load(file0, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML", "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }
}
