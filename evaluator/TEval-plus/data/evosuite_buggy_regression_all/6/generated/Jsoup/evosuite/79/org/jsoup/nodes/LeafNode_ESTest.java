/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:36:53 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DataNode dataNode0 = new DataNode("xx");
      DataNode dataNode1 = dataNode0.setWholeData("xx");
      assertEquals("#data", dataNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#OAhBY!4.>)M+.");
      String string0 = cDataNode0.toString();
      assertEquals("<![CDATA[#OAhBY!4.>)M+.]]>", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("xx");
      Node node0 = textNode0.removeAttr("xx");
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("xV*96Yv.Sz|#Pc");
      // Undeclared exception!
      try { 
        textNode0.childNode(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TextNode textNode0 = new TextNode("PdU]XZ!", "PdU]XZ!");
      String string0 = textNode0.absUrl("PdU]XZ!");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("xx");
      textNode0.doSetBaseUri("d}/%y]|URkg&:^");
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "<??>", (String) null, "&");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DataNode dataNode0 = new DataNode("xx");
      String string0 = dataNode0.attr("xx");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Comment comment0 = new Comment("");
      DataNode dataNode0 = DataNode.createFromEncoded("M", "6-_)LNX 3d>1v7&Y");
      dataNode0.parentNode = (Node) comment0;
      String string0 = dataNode0.baseUri();
      assertEquals("", string0);
  }
}
