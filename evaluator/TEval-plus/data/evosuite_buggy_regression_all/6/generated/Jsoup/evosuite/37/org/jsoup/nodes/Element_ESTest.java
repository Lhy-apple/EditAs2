/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:34:59 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Element element0 = formElement0.prependElement("option");
      formElement0.text("option");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("(j}|*");
      document0.prepend("<e94Zgvg0>v9O~");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("bio;");
      document0.appendText((String) null);
      // Undeclared exception!
      try { 
        document0.ownText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      formElement0.prependElement("ol");
      formElement0.prependText("option");
      Elements elements0 = formElement0.getElementsMatchingText("option");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document(".AF");
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("]kB{HX4NWR2CH^YW-");
      Element element0 = document0.tagName("]kB{HX4NWR2CH^YW-");
      assertEquals("]kb{hx4nwr2ch^yw-", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      formElement0.text("option");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "option");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, (-3635), document_OutputSettings1);
      assertEquals("option</option>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("option");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("oto");
      Element element0 = document0.addClass("oto");
      assertEquals("oto", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("/v'@O(u]#o");
      Elements elements0 = document0.getElementsByAttributeValue("/v'@O(u]#o", "/v'@O(u]#o");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document(">");
      Elements elements0 = document0.getElementsByAttributeValueStarting(">", ">");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("<fk@!mg=");
      // Undeclared exception!
      try { 
        document0.select("<fk@!mg=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<fk@!mg=': unexpected token at '<fk@!mg='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("$ptiox");
      // Undeclared exception!
      try { 
        document0.after("$ptiox");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("/v'@O(u]#o");
      Elements elements0 = document0.getElementsByIndexLessThan(4371);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("(T@");
      Elements elements0 = document0.getElementsByAttributeStarting("(T@");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Elements elements0 = formElement0.getElementsByIndexEquals((-1908874351));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("Auu([j6`N");
      // Undeclared exception!
      try { 
        document0.wrap("Auu([j6`N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/v@(u]#o");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "/v@(u]#o", attributes0);
      Element element0 = formElement0.val("/v@(u]#o");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("4$Y#jUlRWs<y`$");
      Elements elements0 = document0.getElementsByAttributeValueMatching("4$Y#jUlRWs<y`$", "4$Y#jUlRWs<y`$");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("otion");
      Elements elements0 = document0.getElementsByAttributeValueEnding("otion", "otion");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("Do+g#9#fy`@c");
      Elements elements0 = document0.getElementsByClass("Do+g#9#fy`@c");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("</");
      Elements elements0 = document0.getElementsByAttributeValueContaining("</", "</");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("option");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("v:C(+<=qwDy~sBoc<");
      Elements elements0 = document0.getElementsByAttributeValueNot("v:C(+<=qwDy~sBoc<", "v:C(+<=qwDy~sBoc<");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("%tion");
      Elements elements0 = document0.getElementsByAttribute("%tion");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("%=:Q");
      // Undeclared exception!
      try { 
        document0.before("%=:Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("$ptiox");
      Elements elements0 = document0.getAllElements();
      Document document1 = (Document)document0.insertChildren((-1), elements0);
      assertEquals("$ptiox", document1.location());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("otion");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("s%R4/^$H_");
      Elements elements0 = document0.getElementsByIndexGreaterThan(682);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document(":ImmediateParent%s");
      Element element0 = document0.getElementById(":ImmediateParent%s");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("%tion");
      Element element0 = document0.appendElement("%tion");
      // Undeclared exception!
      try { 
        element0.html("textarea");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otio", attributes0);
      Element element0 = formElement0.prependElement("otio");
      // Undeclared exception!
      try { 
        element0.html("otio");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(" P4=-Q0)TNC");
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      FormElement formElement0 = new FormElement(tag0, " P4=-Q0)TNC", attributes0);
      formElement0.appendChild(textNode0);
      List<TextNode> list0 = formElement0.textNodes();
      assertTrue(list0.contains(textNode0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("=v*C 3M?-\"Fb");
      DataNode dataNode0 = DataNode.createFromEncoded("=v*C 3M?-\"Fb", "%IC'kn");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      TextNode textNode0 = TextNode.createFromEncoded("option", "option");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      formElement0.prependElement("option");
      List<DataNode> list0 = formElement0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("%tioAn");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2992, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("p4=-q0)tnc");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-395602985), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("option");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otion");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otion", attributes0);
      formElement0.appendChild(formElement0);
      Element element0 = formElement0.prependElement("otion");
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Doption");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Doption", attributes0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      Element element0 = formElement0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("tion");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Doption");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Doption", attributes0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      Element element0 = formElement0.prependElement("Doption");
      Element element1 = element0.nextElementSibling();
      assertEquals("doption", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otion");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otion", attributes0);
      Element element0 = formElement0.prependElement("otion");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("%tioAn");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Document document0 = new Document("http");
      Element element0 = formElement0.appendChild(document0);
      Element element1 = formElement0.appendChild(element0);
      Element element2 = element1.previousElementSibling();
      assertSame(element2, document0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Doption");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Doption", attributes0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.prependElement("Doption");
      Element element0 = formElement0.firstElementSibling();
      assertEquals("doption", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otion");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otion", attributes0);
      Element element0 = formElement0.prependElement("otion");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Element element0 = formElement0.prependElement("option");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("%tion");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "%tion", attributes0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      Element element0 = formElement0.prependElement("%tion");
      Element element1 = element0.lastElementSibling();
      assertSame(element1, formElement0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.setParentNode(formElement0);
      // Undeclared exception!
      try { 
        formElement0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$VALUES");
      TextNode textNode0 = TextNode.createFromEncoded("I43vg;Mr,u8:?qA", "");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "$VALUES", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Wia'bWnPuD6 ", "Wia'bWnPuD6 ", true);
      element0.prependChild(xmlDeclaration0);
      Elements elements0 = element0.getElementsContainingText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/v@(u]#o");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "/v@(u]#o", attributes0);
      formElement0.prependElement("br");
      formElement0.prependText(" ");
      Elements elements0 = formElement0.getElementsMatchingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otio", attributes0);
      formElement0.prependElement("otio");
      formElement0.prependText("otio");
      Elements elements0 = formElement0.getElementsMatchingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document(":ImmediateParent%s");
      document0.prependElement(":ImmediateParent%s");
      Elements elements0 = document0.getElementsContainingOwnText(":ImmediateParent%s");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otio", attributes0);
      formElement0.prependText("textarea");
      Elements elements0 = formElement0.getElementsMatchingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.prependElement("br");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) formElement0;
      DataNode dataNode0 = new DataNode("br", "br");
      nodeArray0[3] = (Node) dataNode0;
      element0.addChildren(nodeArray0);
      // Undeclared exception!
      element0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comment comment0 = new Comment("9t~", "textarea");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("(j}|*");
      document0.prepend("<e94Zgvg0>v9O~");
      String string0 = document0.text();
      assertEquals("v9O~", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      TextNode textNode0 = new TextNode("textarea", "9x2aj");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Element element0 = formElement0.prependElement("#root");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      formElement0.prependText(" ");
      boolean boolean0 = formElement0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Tag tag0 = Tag.valueOf("vmY3");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "vmY3", attributes0);
      Element element0 = formElement0.prependElement("vmY3");
      Comment comment0 = new Comment(")\bFW?a&R`Y;j.L", "");
      element0.before((Node) comment0);
      boolean boolean0 = formElement0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Element element0 = formElement0.prependElement("option");
      element0.appendText("option");
      boolean boolean0 = formElement0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Element element0 = formElement0.appendText("option");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("V");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode("V", "V");
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      String string0 = document0.data();
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otion");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otion", attributes0);
      formElement0.prependElement("otion");
      String string0 = formElement0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("4+Dq(r* I4t|)hP");
      document0.removeClass("method");
      Element element0 = document0.removeClass("option");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("tB@G#S*(ETP8C");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("F[Ko.vp>w");
      Document document1 = (Document)document0.toggleClass("F[Ko.vp>w");
      assertEquals("F[Ko.vp>w", document1.location());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Data collection must not be null", attributes0);
      Element element0 = formElement0.toggleClass("");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/v@(u]#o");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "/v@(u]#o", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("otio");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      formElement0.prependElement("option");
      // Undeclared exception!
      try { 
        formElement0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Element element0 = new Element(tag0, "option");
      StringBuilder stringBuilder0 = new StringBuilder("option");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlHead(stringBuilder0, 1138, document_OutputSettings1);
      assertEquals("option<option>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otion");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otion", attributes0);
      formElement0.prependElement("otion");
      // Undeclared exception!
      try { 
        formElement0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "option");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlHead(stringBuilder0, (-1908874351), document_OutputSettings0);
      assertEquals("option<option>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("otion");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "otion", attributes0);
      formElement0.prependElement("textarea");
      // Undeclared exception!
      try { 
        formElement0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "option");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead(stringBuilder0, (-1908874351), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      String string0 = formElement0.toString();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Tag tag0 = Tag.valueOf("?a/");
      FormElement formElement0 = new FormElement(tag0, "?a/", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "?a/");
      formElement0.outerHtmlTail(stringBuilder0, 497, document_OutputSettings0);
      assertEquals("?a/</?a/>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Element element0 = formElement0.prependElement("option");
      element0.after((Node) formElement0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 81, document_OutputSettings0);
      assertEquals("\n                                                                                 </option>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("G)VK}D,2C)I");
      document0.appendText("org.jsoup.nodes.Element");
      String string0 = document0.toString();
      assertEquals("org.jsoup.nodes.Element", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("(j}|*");
      document0.hashCode();
  }
}
