/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:52:21 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Constant;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(724.944403, 724.944403, 724.944403);
      assertEquals(724.944403, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(354.511735111, 354.511735111);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Constant constant0 = new Constant(1073);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1073, (UnivariateRealFunction) constant0, (double) 1073, (double) 1073, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,073, 1,073]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Sin sin0 = new Sin();
      regulaFalsiSolver0.solve(2845, (UnivariateRealFunction) sin0, 0.0, (double) 2845, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) sin0, (double) 197, 0.0, 0.0, allowedSolution0);
      assertEquals(197.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(216, (UnivariateRealFunction) cos0, (-1.3746672955140689), (double) 216, (-1.3746672955140689), allowedSolution0);
      assertEquals((-1.3746672955140689), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(58.119464091415836, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Identity identity0 = new Identity();
      double double0 = pegasusSolver0.solve(2074461191, (UnivariateRealFunction) identity0, (-2620.3313314615984), (double) 197, (-2620.3313314615984), allowedSolution0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.5150751704514277);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1480421684, 0.9878755687832452, 1480421684);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1480421684, (UnivariateRealFunction) harmonicOscillator0, 0.9878755687832452, (double) 1480421684, 122.69879150876366, allowedSolution0);
      assertEquals(122.69879150876366, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(8.979983905188394, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2845, (UnivariateRealFunction) cos0, (-543.13757059), 0.0, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,845) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, 0.149823, (double) 197, 0.149823, allowedSolution0);
      assertEquals(0.149823, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(7.853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, 1.0935551717708762, (double) 197, 1.0935551717708762, allowedSolution0);
      assertEquals(20.420352248333653, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, 1.0935551717708762, (double) 197, 1.0935551717708762, allowedSolution0);
      assertEquals(1.0935551717708762, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(20.420352248333653, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, 0.149823, (double) 197, 0.149823, allowedSolution0);
      assertEquals(0.149823, pegasusSolver0.getMin(), 0.01);
      assertEquals(7.853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, 1.0935551717708762, (double) 197, 1.0935551717708762, allowedSolution0);
      assertEquals(1.0935551717708762, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(20.420352248333657, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, (-0.10221636133203671), (double) 197, (-0.10221636133203671), allowedSolution0);
      assertEquals((-0.10221636133203671), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.5707963267948968, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, (-0.2499999701976776), (double) 197, (double) 197, allowedSolution0);
      assertEquals(197.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(229, (UnivariateRealFunction) cos0, 1.0935551717708762, (double) 229, 1.0935551717708762, allowedSolution0);
      assertEquals(1.0935551717708762, pegasusSolver0.getMin(), 0.01);
      assertEquals(133.5176877775662, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(55353124, (UnivariateRealFunction) cos0, 1.0935551717708762, (double) 55353124, 1.0935551717708762, allowedSolution0);
      assertEquals(7866568.424941089, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, 0.53434456659228, (double) 197, 0.53434456659228, allowedSolution0);
      assertEquals(0.53434456659228, pegasusSolver0.getMin(), 0.01);
      assertEquals(83.25220532012953, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(677, (UnivariateRealFunction) cos0, 1.0935551717708762, (double) 677, (double) 677, allowedSolution0);
      assertEquals(677.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(636.1725123519332, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cos cos0 = new Cos();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(197, (UnivariateRealFunction) cos0, 0.0, (double) 197, 0.0, allowedSolution0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(20.42035224832264, double0, 0.01);
  }
}
