/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:52:44 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(226.4, 226.4, 226.4);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(2983, (UnivariateRealFunction) tan0, 226.4, (double) 2983, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-316), (UnivariateRealFunction) cbrt0, (double) (-316), (double) (-316), (double) (-316));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-316) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(207, (UnivariateRealFunction) tan0, 0.0, (double) 207, allowedSolution0);
      assertEquals(207.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1374, (UnivariateRealFunction) cbrt0, (double) 1374, -0.0, allowedSolution0);
      assertEquals(1374.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2983, (UnivariateRealFunction) tan0, 9.78296714923684E-30, (double) 2983, allowedSolution0);
      assertEquals(9.78296714923684E-30, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3602.662111039696), (-3602.662111039696));
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(286, (UnivariateRealFunction) cbrt0, (-3602.662111039696), (double) 286, allowedSolution0);
      assertEquals((-1658.331055519848), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(7.728185623514198E-47, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-879982.8504658559));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3219, (UnivariateRealFunction) tan0, (-2026.018209506), (double) 3219, allowedSolution0);
      assertEquals(596.490895247, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1233.0751165339852), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3547.1998955952645));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1358, (UnivariateRealFunction) cbrt0, (-3547.1998955952645), (double) 1358, allowedSolution0);
      assertEquals((-1094.5999477976325), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2.620117511702307E-46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3565.2506076));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1386, (UnivariateRealFunction) cbrt0, (-3565.2506076), (double) 1386, allowedSolution0);
      assertEquals((-1089.6253038), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-5.180893721195311E-46), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3602.662111039696), (-3602.662111039696));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1359, (UnivariateRealFunction) cbrt0, (-3602.662111039696), (double) 1359, allowedSolution0);
      assertEquals((-1121.8310555198482), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-7.129726181191924E-46), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3565.2506076));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1386, (UnivariateRealFunction) cbrt0, (-3565.2506076), (double) 1386, allowedSolution0);
      assertEquals((-1089.6253038), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(5.395884961725536E-46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(1386, (UnivariateRealFunction) cbrt0, (-3565.2506076), (double) 1386, allowedSolution0);
      assertEquals((-1089.6253038), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.3677072832762257E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(3022, (UnivariateRealFunction) tan0, 226.886333941243, (double) 3022, allowedSolution0);
      assertEquals(1624.4431669706216, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3017.499743010553, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1395, (UnivariateRealFunction) cbrt0, (-3565.251), (double) 1395, allowedSolution0);
      assertEquals((-1085.1255), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-7.330098363673037E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(3002, (UnivariateRealFunction) tan0, 224.4665061828141, (double) 3002, allowedSolution0);
      assertEquals(1613.233253091407, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2093.8715030028247, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1359, (UnivariateRealFunction) cbrt0, (-3565.2506076), (double) 1359, allowedSolution0);
      assertEquals((-1103.1253038), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2.841578019261046E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1386, (UnivariateRealFunction) cbrt0, (-3565.251), (double) 1386, allowedSolution0);
      assertEquals((-1089.6255), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3.561684037509664E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1386, (UnivariateRealFunction) cbrt0, (-3565.2506076), (double) 1386, allowedSolution0);
      assertEquals((-1089.6253038), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.3677072832762257E-7, double0, 0.01);
  }
}
