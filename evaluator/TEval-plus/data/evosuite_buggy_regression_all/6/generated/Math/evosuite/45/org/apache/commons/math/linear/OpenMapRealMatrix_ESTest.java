/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:52:41 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      openMapRealMatrix0.setEntry(4434, 4434, (-1));
      openMapRealMatrix0.multiplyEntry(4434, 4434, 4463.0);
      assertEquals(4471, openMapRealMatrix0.getRowDimension());
      assertEquals(4471, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4472, 4472);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      assertEquals(4472, openMapRealMatrix1.getColumnDimension());
      assertEquals(4472, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      openMapRealMatrix0.setEntry(4434, 4434, 4459);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(4471, openMapRealMatrix1.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(4471, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      // Undeclared exception!
      openMapRealMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(332, 2055);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertEquals(332, openMapRealMatrix1.getRowDimension());
      assertEquals(2055, openMapRealMatrix1.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      openMapRealMatrix0.setEntry(4434, 4434, 4459);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(4471, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(4471, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4463, 4463);
      openMapRealMatrix0.setEntry(1, 1, 4463);
      assertEquals(4463, openMapRealMatrix0.getColumnDimension());
      
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.createMatrix(4463, 4463);
      RealMatrix realMatrix1 = openMapRealMatrix0.multiply(realMatrix0);
      assertEquals(4463, realMatrix1.getRowDimension());
      assertEquals(4463, openMapRealMatrix0.getRowDimension());
      assertEquals(4463, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      openMapRealMatrix0.setEntry(4434, 4434, 4459);
      assertEquals(4471, openMapRealMatrix0.getRowDimension());
      
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) openMapRealMatrix0);
      assertEquals(4471, realMatrix0.getColumnDimension());
      assertEquals(4471, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      openMapRealMatrix0.addToEntry(1302, 4466, 4466);
      assertEquals(4471, openMapRealMatrix0.getColumnDimension());
      assertEquals(4471, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      openMapRealMatrix0.addToEntry(1302, 1302, 0);
      assertEquals(4471, openMapRealMatrix0.getColumnDimension());
      assertEquals(4471, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4471, 4471);
      openMapRealMatrix0.multiplyEntry(202, 4434, 4434);
      assertEquals(4471, openMapRealMatrix0.getColumnDimension());
      assertEquals(4471, openMapRealMatrix0.getRowDimension());
  }
}
