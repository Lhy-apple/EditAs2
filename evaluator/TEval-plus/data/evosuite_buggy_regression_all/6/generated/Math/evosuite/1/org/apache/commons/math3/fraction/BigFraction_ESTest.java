/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:48:43 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      double double0 = bigFraction0.pow(0.0019701901833286684);
      assertEquals(1.0, double0, 0.01);
      
      bigFraction0.bigDecimalValue();
      bigFraction0.reduce();
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1);
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.add((-3122));
      assertEquals((short) (-3123), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.negate();
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.FOUR_FIFTHS.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply((long) 5);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.subtract((-3077L));
      assertEquals((short)3078, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.153243064880371);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.reduce();
      int int0 = bigFraction1.ONE.compareTo(bigFraction0);
      assertEquals((-1), int0);
      
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.reduce();
      bigFraction0.bigDecimalValue();
      String string0 = bigFraction0.toString();
      assertEquals("1209263 / 1048576", string0);
      
      bigFraction1.percentageValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.reduce();
      BigFraction.getReducedFraction(0, (-1));
      bigFraction1.hashCode();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction3.negate();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.MINUS_ONE.subtract(bigInteger0);
      bigFraction2.ONE_HALF.multiply((long) 1209263);
      BigDecimal bigDecimal0 = bigFraction4.TWO.bigDecimalValue(1209263, 1);
      assertEquals((short)2, bigDecimal0.shortValue());
      
      bigFraction2.ONE.toString();
      double double0 = bigFraction4.ONE.percentageValue();
      assertEquals(100.0, double0, 0.01);
      
      bigFraction2.add((long) 1209263);
      bigFraction3.getField();
      assertTrue(bigFraction3.equals((Object)bigFraction2));
      
      BigFraction bigFraction5 = BigFraction.getReducedFraction(1209263, (-1));
      assertEquals((short) (-29615), bigFraction5.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.THREE_FIFTHS.divide(2147171740);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE.getField();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.reciprocal();
      bigFraction1.ONE_QUARTER.percentageValue();
      bigFraction1.pow((-3846));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      bigFraction1.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.MINUS_ONE.hashCode();
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.add(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction1.FOUR_FIFTHS.add(bigFraction0);
      bigFraction0.divide(bigFraction1);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO.pow(100L);
      bigFraction1.THREE_FIFTHS.hashCode();
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction0);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.getNumeratorAsInt();
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigFraction bigFraction0 = BigFraction.ONE;
      Object object0 = new Object();
      bigFraction0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE.divide(1L);
      bigFraction0.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2177, 2177);
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction1.divide(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.THREE_QUARTERS.toString();
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      bigFraction0.compareTo(bigFraction2);
      bigFraction1.doubleValue();
      bigFraction2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.004743316524240981);
      bigFraction0.subtract(0);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.TWO.add(35184372088832L);
      BigFraction bigFraction1 = bigFraction0.subtract((-3077L));
      bigFraction1.floatValue();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.bigDecimalValue(1714, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction2 = bigFraction1.TWO_QUARTERS.add(1);
      BigFraction bigFraction3 = bigFraction0.TWO_QUARTERS.reciprocal();
      bigFraction0.floatValue();
      bigFraction0.TWO.equals("_2}tNJ%mt-(2(VSlLy");
      bigFraction0.doubleValue();
      BigFraction bigFraction4 = bigFraction0.reduce();
      bigFraction2.getDenominatorAsInt();
      bigFraction0.pow(0.0);
      bigFraction2.TWO_FIFTHS.reduce();
      bigFraction1.TWO_THIRDS.getDenominatorAsInt();
      bigFraction4.equals(bigFraction2);
      bigFraction4.multiply(1141L);
      bigFraction2.ZERO.multiply(bigFraction3);
      bigFraction0.getDenominator();
      bigFraction1.percentageValue();
      bigFraction1.doubleValue();
      bigFraction2.getDenominator();
      bigFraction2.getDenominator();
      bigFraction0.getField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1024.3463890968771, 1);
      bigFraction0.subtract(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.ZERO.intValue();
      BigFraction bigFraction1 = new BigFraction((double) 0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.MINUS_ONE.longValue();
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2177);
      BigFraction bigFraction1 = new BigFraction(2177, 2045.44830561079, 2177);
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1668.92740920877, 2147421997);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,668.927 to fraction (52,449,777,225/31,427,237)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO.pow(2381);
      bigFraction0.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_QUARTER.multiply((-950));
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((-872.6049394604), (-872.6049394604), (-301));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -872.605 to fraction after -301 iterations
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2935890503282001226L, 2935890503282001226L);
      bigFraction0.floatValue();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction((-1.0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2084L), (-2084L));
      bigFraction0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.MINUS_ONE.getDenominatorAsLong();
      bigFraction0.subtract(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction((long) 2177);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = BigFraction.TWO;
      BigFraction bigFraction3 = BigFraction.TWO_THIRDS;
      bigFraction2.equals(bigFraction3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2181);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      bigFraction0.ONE.add(bigFraction1);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-444), (-444));
      BigFraction bigFraction1 = BigFraction.ONE;
      bigFraction0.equals(bigFraction1);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-721);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-721), 1366);
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((long) (-721));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2187);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-222);
      BigFraction bigFraction0 = new BigFraction((-222), (-222));
      BigFraction bigFraction1 = new BigFraction((double) (-222));
      bigFraction1.ONE_HALF.negate();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction1.THREE_QUARTERS.divide((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2346.07);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.ONE.divide(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.subtract((-742));
      bigFraction0.THREE_FIFTHS.percentageValue();
      bigFraction1.divide(9007199254740990L);
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction2.TWO_FIFTHS.multiply(bigFraction3);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction5 = bigFraction4.divide((-742));
      bigFraction5.FOUR_FIFTHS.equals((Object) null);
      bigFraction2.equals(bigFraction4);
      bigFraction1.reduce();
      bigFraction5.getDenominatorAsLong();
      bigFraction1.getNumerator();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ZERO.add(bigFraction1);
      bigFraction0.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1024.3463890968771, 1);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      bigFraction2.toString();
      bigFraction2.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.subtract((long) 1);
      bigFraction4.abs();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_FIFTHS.compareTo(bigFraction1);
      bigFraction0.toString();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) 1, (-3233));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2346.07);
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-451), (-451));
      bigFraction0.equals(bigFraction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-127);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.intValue();
      bigFraction0.floatValue();
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.multiply(bigFraction1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = new BigFraction(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(1.7976931348623157E308, (-142));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.2746974629105807, 2127031422);
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      bigFraction0.subtract(bigFraction2);
      bigFraction2.floatValue();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.THREE_QUARTERS.toString();
      bigFraction0.ONE_QUARTER.toString();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.multiply(1388);
      bigFraction2.TWO_THIRDS.pow((-2664L));
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction4 = bigFraction0.THREE_FIFTHS.multiply(bigFraction3);
      BigFraction bigFraction5 = bigFraction1.THREE_QUARTERS.abs();
      bigFraction4.TWO_THIRDS.divide(bigFraction5);
      BigFraction bigFraction6 = bigFraction4.subtract(bigFraction0);
      bigFraction0.doubleValue();
      bigFraction6.TWO_FIFTHS.subtract(bigFraction2);
      bigFraction0.TWO_QUARTERS.add(Integer.MAX_VALUE);
      BigFraction bigFraction7 = bigFraction1.THREE_FIFTHS.add(Integer.MAX_VALUE);
      bigFraction1.toString();
      bigFraction4.toString();
      bigFraction0.doubleValue();
      bigFraction1.doubleValue();
      bigFraction7.hashCode();
      bigFraction7.THREE_QUARTERS.add(629);
      bigFraction6.floatValue();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = new BigFraction((long) 2177, (long) 2177);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-127);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.pow(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-411.341));
      BigFraction bigFraction1 = new BigFraction(629, 1721);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      bigFraction1.floatValue();
      bigFraction1.doubleValue();
      bigFraction1.toString();
      Random.setNextRandom(1721);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      bigFraction2.floatValue();
      bigFraction3.THREE_QUARTERS.subtract(bigFraction1);
      bigFraction1.multiply(bigFraction3);
      bigFraction3.floatValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigFraction3.pow(bigInteger1);
      Random.setNextRandom(629);
      bigFraction2.doubleValue();
      bigFraction1.toString();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2177);
      Random.setNextRandom(2177);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-411.341));
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.pow((-2664L));
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction4 = bigFraction2.abs();
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      bigFraction1.ONE_HALF.divide(1479);
      BigFraction bigFraction6 = bigFraction3.subtract(bigFraction5);
      bigFraction2.doubleValue();
      bigFraction0.add(Integer.MAX_VALUE);
      BigFraction.getReducedFraction(2147483387, 2147483387);
      bigFraction4.toString();
      bigFraction0.toString();
      bigFraction6.doubleValue();
      bigFraction4.doubleValue();
      bigFraction6.hashCode();
      bigFraction1.add(2147483623);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigFraction3.pow(bigInteger0);
  }
}
