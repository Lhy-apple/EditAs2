/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:47:03 GMT 2023
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      long long0 = mersenneTwister0.nextLong();
      assertEquals((-8322921849960486353L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      int int0 = well19937a0.nextInt();
      assertEquals((-665010286), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      float float0 = well19937a0.nextFloat();
      assertEquals(0.84516513F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      byte[] byteArray0 = new byte[0];
      well19937a0.nextBytes(byteArray0);
      boolean boolean0 = well19937a0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = 4132;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      boolean boolean0 = iSAACRandom0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well1024a well1024a0 = new Well1024a(intArray0);
      byte[] byteArray0 = new byte[4];
      well1024a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-52), (byte)83, (byte)57}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1232);
      byte[] byteArray0 = new byte[1];
      mersenneTwister0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-122)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      double double0 = well19937a0.nextGaussian();
      assertEquals(0.5702243273718136, double0, 0.01);
      
      double double1 = well19937a0.nextGaussian();
      assertEquals((-0.8371887727439412), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      try { 
        well1024a0.nextInt((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      int int0 = well1024a0.nextInt(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      int int0 = mersenneTwister0.nextInt(1153879222);
      assertEquals(909791748, int0);
  }
}
