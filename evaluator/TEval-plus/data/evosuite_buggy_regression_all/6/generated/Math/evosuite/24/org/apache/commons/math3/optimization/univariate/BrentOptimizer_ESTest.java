/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:49:46 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asinh;
import org.apache.commons.math3.analysis.function.Expm1;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.analysis.function.Tan;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-496.787575), (-496.787575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -496.788 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(370.629458, (-496.787575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -496.788 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.25, 0.25);
      Asinh asinh0 = new Asinh();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2146874884, (UnivariateFunction) asinh0, goalType0, (-12.678096808459), 1025.413461);
      assertEquals((-9.702701684470394), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.8501758014048575, 0.8501758014048575);
      GoalType goalType0 = GoalType.MINIMIZE;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-1930.5), 2146874884, 870.9);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2146874884, (UnivariateFunction) harmonicOscillator0, goalType0, (-1930.5), 0.8501758014048575, 2095.0);
      assertEquals((-1216.2937097601975), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(6.2768392938602675, 6.2768392938602675);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(250, (UnivariateFunction) expm1_0, goalType0, (-30.0), (double) 250, (-1.0));
      assertEquals((-13.553678587720535), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.25, 370.629458);
      Tan tan0 = new Tan();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2048154605, (UnivariateFunction) tan0, goalType0, 0.25, 7.641196081170936E153, (-3963.71));
      assertEquals(1.6530798524684386E150, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.601686954498291, 0.601686954498291);
      Expm1 expm1_0 = new Expm1();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(467, (UnivariateFunction) expm1_0, goalType0, 768.5549558342661, (-2712.0245954286));
      assertEquals((-492.3248287593864), univariatePointValuePair0.getPoint(), 0.01);
  }
}
