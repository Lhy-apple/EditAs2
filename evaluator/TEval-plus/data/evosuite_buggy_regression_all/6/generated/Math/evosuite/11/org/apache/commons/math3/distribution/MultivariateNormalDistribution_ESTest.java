/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:47:08 GMT 2023
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.MultivariateNormalDistribution;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultivariateNormalDistribution_ESTest extends MultivariateNormalDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[2][8];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.3848605155944824;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(jDKRandomGenerator0, doubleArray0, doubleArray1);
      double double0 = multivariateNormalDistribution0.density(doubleArray0);
      assertEquals(0.6475428439717773, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.8812783F;
      doubleArray0[1] = 0.8812782764434814;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
      RealMatrix realMatrix0 = multivariateNormalDistribution0.getCovariances();
      assertEquals(2, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][0];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-652.06732);
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(well44497a0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -652.067 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -652.067 at index 0
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.3848605155944824;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(jDKRandomGenerator0, doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[4];
      try { 
        multivariateNormalDistribution0.density(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.distribution.MultivariateNormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.3848605155944824;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(jDKRandomGenerator0, doubleArray0, doubleArray1);
      double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
      assertArrayEquals(new double[] {1.5442993607440503}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.3848605155944824;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(jDKRandomGenerator0, doubleArray0, doubleArray1);
      double[] doubleArray2 = multivariateNormalDistribution0.sample();
      assertArrayEquals(new double[] {2.3848605155944824}, doubleArray2, 0.01);
  }
}
