/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:48:13 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.ClassValidator;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "--", "\"--", 2680, 2680);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(0, argumentImpl0.getMaximum());
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals('%', argumentImpl0.getInitialSeparator());
      assertEquals('z', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "Passes properties and values to the application", 0, 0, '.', 'i', dateValidator0, "$x", list0, 41);
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals(0, argumentImpl0.getMaximum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', 'Q', "Passes properties and values to the application", list0);
      char char0 = sourceDestArgument0.getInitialSeparator();
      assertEquals('Q', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("$x", argumentImpl0.getConsumeRemaining());
      assertEquals("Passes properties and values to the application", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "Passes properties and values to the application", 0, 0, '.', 'i', dateValidator0, "$x", list0, 41);
      argumentImpl0.getDefaultValues();
      assertEquals("$x", argumentImpl0.getConsumeRemaining());
      assertEquals('i', argumentImpl0.getSubsequentSeparator());
      assertEquals("Passes properties and values to the application", argumentImpl0.getDescription());
      assertEquals('.', argumentImpl0.getInitialSeparator());
      assertEquals("Passes properties and values to the application", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 453, 453, '<', '<', numberValidator0, "", linkedList0, 453);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      boolean boolean0 = argumentImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "r5wGXJ}/VV");
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertTrue(boolean0);
      assertEquals('<', argumentImpl0.getSubsequentSeparator());
      assertTrue(argumentImpl0.isRequired());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals(453, argumentImpl0.getMaximum());
      assertEquals('<', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "value", (-20), 0, 'J', 'J', (Validator) null, "--", linkedList0, (-20));
      char char0 = argumentImpl0.getSubsequentSeparator();
      assertEquals("value", argumentImpl0.getDescription());
      assertEquals((-20), argumentImpl0.getMinimum());
      assertEquals("--", argumentImpl0.getConsumeRemaining());
      assertEquals('J', argumentImpl0.getInitialSeparator());
      assertEquals("arg", argumentImpl0.getPreferredName());
      assertEquals('J', char0);
      assertEquals(0, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      argumentImpl0.helpLines((-160), set0, comparator0);
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('%', argumentImpl0.getInitialSeparator());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('z', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "value", (-20), 0, 'J', 'J', (Validator) null, "--", linkedList0, (-20));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals(0, argumentImpl0.getMaximum());
      
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals("--", argumentImpl0.getConsumeRemaining());
      assertEquals('J', argumentImpl0.getSubsequentSeparator());
      assertEquals("value", argumentImpl0.getDescription());
      assertEquals((-20), argumentImpl0.getMinimum());
      assertEquals('J', argumentImpl0.getInitialSeparator());
      assertEquals("arg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("arg", "org.apache.commons.cli2.OptionException", 0, 0, 'l', 'l', (Validator) null, "", linkedList0, 782);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'e', 'U', "org.apache.commons.cli2.OptionException", linkedList0);
      sourceDestArgument0.getConsumeRemaining();
      assertEquals("org.apache.commons.cli2.OptionException", argumentImpl0.getDescription());
      assertEquals('U', sourceDestArgument0.getSubsequentSeparator());
      assertEquals('e', sourceDestArgument0.getInitialSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("arg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "value", (-20), 0, 'J', 'J', (Validator) null, "--", linkedList0, (-20));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-20), argumentImpl0.getMinimum());
      assertEquals("arg", argumentImpl0.getPreferredName());
      assertEquals("--", argumentImpl0.getConsumeRemaining());
      assertEquals('J', argumentImpl0.getInitialSeparator());
      assertEquals('J', argumentImpl0.getSubsequentSeparator());
      assertEquals("value", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Enum.illegal.value", "Enum.illegal.value", 0, 0, 'd', '#', dateValidator0, "6~821dl'X?)_x", linkedList0, (-77));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '>', '>', "--", linkedList0);
      sourceDestArgument0.getValidator();
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('d', argumentImpl0.getInitialSeparator());
      assertEquals('#', argumentImpl0.getSubsequentSeparator());
      assertEquals("6~821dl'X?)_x", argumentImpl0.getConsumeRemaining());
      assertEquals("Enum.illegal.value", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("n+P},M4", "n+P},M4", 95, (-1506), ']', ']', (Validator) null, "6\">M+z'$:{", linkedList0, 95);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(682);
      linkedList0.add(integer0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("", "", 7, 7, 'E', 'E', (Validator) null, "", linkedList0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(682);
      linkedList0.add(integer0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'E', 'E', (Validator) null, "", linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "|V:>Y[mfYR#", 0, 93, 'w', 'w', dateValidator0, "|V:>Y[mfYR#", linkedList0, 1);
      assertEquals("arg", argumentImpl0.getPreferredName());
      assertEquals('w', argumentImpl0.getInitialSeparator());
      assertEquals("|V:>Y[mfYR#", argumentImpl0.getDescription());
      assertEquals("|V:>Y[mfYR#", argumentImpl0.getConsumeRemaining());
      assertEquals('w', argumentImpl0.getSubsequentSeparator());
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals(93, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("M@", "M@", 2972, 2972, 'P', 'P', (Validator) null, "M@", linkedList0, 2972);
      assertEquals(2972, argumentImpl0.getMaximum());
      assertTrue(argumentImpl0.isRequired());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      sourceDestArgument0.processValues(writeableCommandLineImpl0, listIterator0, argumentImpl0);
      assertEquals('P', argumentImpl0.getInitialSeparator());
      assertEquals('P', argumentImpl0.getSubsequentSeparator());
      assertEquals("M@", argumentImpl0.getConsumeRemaining());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("M@", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.missing.vlus", "Argument.missing.vlus", 1644, 1644, '.', '.', dateValidator0, "Argument.missing.vlus", linkedList0, '.');
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      ListIterator<Locale.LanguageRange> listIterator0 = (ListIterator<Locale.LanguageRange>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Locale.LanguageRange) null).when(listIterator0).next();
      // Undeclared exception!
      try { 
        sourceDestArgument0.processValues(writeableCommandLineImpl0, listIterator0, sourceDestArgument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', '%', fileValidator0, "", linkedList0, 0);
      ArgumentImpl argumentImpl1 = new ArgumentImpl("--", "--", 5, 60, '%', '\"', fileValidator0, "--", linkedList0, 13);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      SourceDestArgument sourceDestArgument1 = new SourceDestArgument(argumentImpl1, sourceDestArgument0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl1, linkedList0);
      try { 
        sourceDestArgument1.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) argumentImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) -- -- -- -- -- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [--]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArgumentImpl argumentImpl1 = new ArgumentImpl("w<zX<u*", "", (-1332), (-262), '\u0000', '%', fileValidator0, "\"Argument.too.few.defaults", linkedList1, 93);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl1, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      // Undeclared exception!
      try { 
        sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) argumentImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -262
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "--", "\"--", 2680, 2680);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) null);
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('z', argumentImpl0.getSubsequentSeparator());
      assertEquals('%', argumentImpl0.getInitialSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.missing.values", "?gdHboC%", 1644, 1644, '.', '.', dateValidator0, "Argument.missing.values", linkedList0, '.');
      argumentImpl0.toString();
      assertEquals("Argument.missing.values", argumentImpl0.getPreferredName());
      assertEquals('.', argumentImpl0.getInitialSeparator());
      assertEquals("?gdHboC%", argumentImpl0.getDescription());
      assertEquals("Argument.missing.values", argumentImpl0.getConsumeRemaining());
      assertEquals('.', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "en-US", 1, 1, '0', 'Z', classValidator0, (String) null, (List) null, 4);
      StringBuffer stringBuffer0 = new StringBuffer();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(15);
      argumentImpl0.appendUsage(stringBuffer0, linkedHashSet0, (Comparator) null);
      assertEquals(3, stringBuffer0.length());
      assertEquals("arg", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("en-US", "Argument.too.many.defaults", (-16), 39, '~', '~', fileValidator0, "j", linkedList0, 39);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Argument.too.many.defaults");
      argumentImpl0.appendUsage(stringBuffer0, set0, (Comparator) null);
      assertEquals("Argument.too.many.defaultsen-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US [en-US]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", stringBuffer0.toString());
      assertEquals("en-US", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "value", (-20), 0, 'J', 'J', (Validator) null, "--", linkedList0, (-20));
      String string0 = argumentImpl0.stripBoundaryQuotes("Switch.preferredName.too.short");
      assertEquals("--", argumentImpl0.getConsumeRemaining());
      assertEquals('J', argumentImpl0.getSubsequentSeparator());
      assertEquals("Switch.preferredName.too.short", string0);
      assertEquals("value", argumentImpl0.getDescription());
      assertEquals((-20), argumentImpl0.getMinimum());
      assertEquals('J', argumentImpl0.getInitialSeparator());
      assertEquals("arg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      String string0 = argumentImpl0.stripBoundaryQuotes("\"--");
      assertEquals('%', argumentImpl0.getInitialSeparator());
      assertEquals('z', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("\"--", string0);
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      String string0 = sourceDestArgument0.stripBoundaryQuotes("\"--\"");
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("--", string0);
      assertEquals('z', argumentImpl0.getSubsequentSeparator());
      assertEquals('%', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('%', argumentImpl0.getInitialSeparator());
      assertFalse(boolean0);
      assertEquals('z', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, '%', 'z', fileValidator0, "", linkedList0, 0);
      ArgumentImpl argumentImpl1 = new ArgumentImpl("org.apache.commons.cli2.option.Switch", "", 32, 32, '5', '*', fileValidator0, "7", linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl1, argumentImpl0, '\u0000', ']', "org.apache.commons.cli2.option.Switch", linkedList0);
      boolean boolean0 = sourceDestArgument0.isRequired();
      assertEquals("", argumentImpl1.getDescription());
      assertFalse(argumentImpl0.isRequired());
      assertEquals("7", argumentImpl1.getConsumeRemaining());
      assertEquals("org.apache.commons.cli2.option.Switch", argumentImpl1.getPreferredName());
      assertTrue(boolean0);
      assertEquals('5', argumentImpl1.getInitialSeparator());
      assertEquals(']', sourceDestArgument0.getSubsequentSeparator());
  }
}
