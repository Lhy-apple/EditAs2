/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:48:36 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionImpl_ESTest extends OptionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-D", "Passes properties and values to the application", (-1110), 2077, '@', '@', fileValidator0, "-D", linkedList0, (-1110));
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "De,X}V^B)8", (-625), 2077);
      Command command0 = new Command("-D", (String) null, linkedHashSet0, true, argumentImpl0, groupImpl0, 2587);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        command0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option -D
         //
         verifyException("org.apache.commons.cli2.option.Command", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      propertyOption0.defaults((WriteableCommandLine) null);
      assertFalse(propertyOption0.isRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      boolean boolean0 = propertyOption0.equals(propertyOption0);
      assertTrue(boolean0);
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      String string0 = propertyOption0.toString();
      assertEquals("-D<property>=<value>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      ListIterator<Command> listIterator0 = linkedList0.listIterator();
      boolean boolean0 = propertyOption0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (ListIterator) listIterator0);
      assertFalse(boolean0);
      assertFalse(propertyOption0.isRequired());
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "xJ*z[Cr?S#", "xJ*z[Cr?S#", 695, 93);
      linkedList1.add(groupImpl0);
      ListIterator<GroupImpl> listIterator0 = linkedList1.listIterator(0);
      // Undeclared exception!
      try { 
        propertyOption0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (ListIterator) listIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli2.option.GroupImpl cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      boolean boolean0 = propertyOption0.equals((Object) null);
      assertEquals(68, propertyOption0.getId());
      assertFalse(propertyOption0.isRequired());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      PropertyOption propertyOption1 = new PropertyOption("-D", "Passes properties and values to the application", 1464);
      boolean boolean0 = propertyOption0.equals(propertyOption1);
      assertEquals(1464, propertyOption1.getId());
      assertFalse(propertyOption1.isRequired());
      assertFalse(boolean0);
      assertFalse(propertyOption1.equals((Object)propertyOption0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.missing.values", "Passes properties and values to the application", 68, 68, ',', ',', dateValidator0, "%L", linkedList0, 68);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.defaults", "Passes properties and values to the application", 68, Integer.MAX_VALUE);
      Boolean boolean0 = Boolean.valueOf("%L");
      Switch switch0 = new Switch("bG\".mh33Q:", "Passes properties and values to the application", "Passes properties and values to the application", linkedHashSet0, "Argument.missing.values", false, argumentImpl0, groupImpl0, 68, boolean0);
      boolean boolean1 = propertyOption0.equals(switch0);
      assertFalse(switch0.isRequired());
      assertEquals(68, switch0.getId());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 41, (-1710));
      groupImpl0.hashCode();
      assertEquals(0, groupImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      propertyOption0.hashCode();
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      Option option0 = propertyOption0.findOption("Passes properties and values to the application");
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      Option option0 = propertyOption0.findOption("-D");
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertEquals(68, option0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
      propertyOption0.checkPrefixes(linkedHashSet0);
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        propertyOption0.checkPrefixes(set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trigger -D must be prefixed with a value from java.util.HashSet@0000000003
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }
}
