/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:48:05 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "jL-X>#xf%{IFSGCwy9", "jL-X>#xf%{IFSGCwy9", 1436, 1436);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.setDefaultValues(groupImpl0, linkedList0);
      assertEquals(1436, groupImpl0.getMaximum());
      assertEquals(1436, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "]", (String) null, 91, 32);
      groupImpl0.getAnonymous();
      assertEquals(91, groupImpl0.getMinimum());
      assertEquals(32, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      LinkedList<ArgumentImpl> linkedList1 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "jL-X>#xf%{IFSGCwy9", "jL-X>#xf%{IFSGCwy9", 1436, 1436);
      linkedList0.add(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "", "", 2145, 0);
      try { 
        groupImpl1.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option jL-X>#xf%{IFSGCwy9
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 2593, 2593);
      int int0 = groupImpl0.getMaximum();
      assertEquals(2593, int0);
      assertEquals(2593, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("z^;Z|G#WXiiEYu5,|", "Switch.preferredName.too.short", (-2429), (-1053), '8', '8', numberValidator0, "&yL *l/g3J=&G:CsPX", linkedList0, (-2429));
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Lqq\"U5tO%gV,.,Q8~", "k(2mn4c", (-3349), (-3315));
      DefaultOption defaultOption0 = new DefaultOption("", "", true, "z^;Z|G#WXiiEYu5,|", "Lqq\"U5tO%gV,.,Q8~", (Set) null, (Set) null, false, argumentImpl0, groupImpl0, (-2429));
      linkedList0.add((Object) defaultOption0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "z^;Z|G#WXiiEYu5,|", "z^;Z|G#WXiiEYu5,|", (-1053), (-1053));
      assertEquals(1, linkedList0.size());
      assertEquals((-1053), groupImpl1.getMaximum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 2593, 2593);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "8&Q<w/");
      assertEquals(2593, groupImpl0.getMaximum());
      assertFalse(boolean0);
      assertEquals(2593, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "=f><%S\"$GF", "=f><%S\"$GF", 467, (-5755));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals(467, groupImpl0.getMinimum());
      assertEquals((-5755), groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", "-xbFR!/I`Qs>DvmbeT9", 0, 0);
      PropertyOption propertyOption0 = new PropertyOption("", "", 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "M;Bm\":6pWxV(");
      assertEquals("-xbFR!/I`Qs>DvmbeT9", groupImpl0.getDescription());
      assertEquals(" (", groupImpl0.getPreferredName());
      assertFalse(boolean0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
      ListIterator<DefaultOption> listIterator0 = linkedList1.listIterator(0);
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "jL-X>#xf%{IFSGCwy9", "jL-X>#xf%{IFSGCwy9", 1436, 1436);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(1436, groupImpl0.getMinimum());
      assertEquals(1436, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "", (-1845), (-1845));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("7l%2").when(listIterator0).next();
      doReturn("").when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-1845), groupImpl0.getMaximum());
      assertEquals((-1845), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "xbFR!/I`Qs>Dvmb#T9", "xbFR!/I`Qs>Dvmb#T9", 0, 0);
      linkedList0.add(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Missing.option", "S>AZn$%a1*`em", 0, 0, '#', '#', numberValidator0, "lXJY", linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '', '\u0000', "", linkedList0);
      linkedList0.add((ArgumentImpl) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, " pdAH<$jEm.D", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-xbFR!/I`Qs>DvmbeT9", "-xbFR!/I`Qs>DvmbeT9", 0, 0);
      linkedList0.add(groupImpl0);
      // Undeclared exception!
      groupImpl0.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 3080, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "-xbFR!/I`Qs>Dvmb#T9", 2280, 2280);
      LinkedHashSet<DisplaySetting> linkedHashSet0 = new LinkedHashSet<DisplaySetting>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
      assertEquals(2280, groupImpl0.getMaximum());
      assertEquals(2280, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "il7cuW(UjS", (-3540), 0);
      linkedList0.add(groupImpl0);
      linkedList0.addLast(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "-xbFR!/I`Qs>Dvmb#T9", "-xbFR!/I`Qs>Dvmb#T9", 0, 0);
      String string0 = groupImpl1.toString();
      assertEquals(2, linkedList0.size());
      assertEquals("[-xbFR!/I`Qs>Dvmb#T9 ( ()| ())]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "z^;Z|G#WXiiEYu5,|", "z^;Z|G#WXiiEYu5,|", (-1076), (-1076));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      List list0 = groupImpl0.helpLines((-1076), linkedHashSet0, (Comparator) null);
      assertEquals((-1076), groupImpl0.getMinimum());
      assertEquals((-1076), groupImpl0.getMaximum());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Missing.option", "Missing.option", 1436, 1436);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      linkedList1.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "$J|vzfvun7Gab{", "$J|vzfvun7Gab{", 1436, 1436);
      groupImpl1.findOption("Missing.option");
      assertTrue(linkedList1.contains(groupImpl0));
      assertEquals(1436, groupImpl1.getMaximum());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("z^;Z|G#WXiiEYu5,|", "Switch.preferredName.too.short", (-2429), (-1053), '8', '8', numberValidator0, "&yL *l/g3J=&G:CsPX", linkedList0, (-2429));
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Lqq\"U5tO%gV,.,Q8~", "k(2mn4c", (-3349), (-3315));
      DefaultOption defaultOption0 = new DefaultOption("", "", true, "z^;Z|G#WXiiEYu5,|", "Lqq\"U5tO%gV,.,Q8~", (Set) null, (Set) null, false, argumentImpl0, groupImpl0, (-2429));
      linkedList0.add((Object) defaultOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<ArgumentImpl> linkedList1 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("|", "DISPLAY_PARENT_CHILDREN", (-274), (-274), 'v', 'A', (Validator) null, "DISPLAY_PARENT_CHILDREN", linkedList1, 93);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList1.add((ArgumentImpl) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "IEYJ[{oHXb;", "|", (-1053), (-1677));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(0, linkedList1.size());
      assertEquals((-1677), groupImpl0.getMaximum());
  }
}
