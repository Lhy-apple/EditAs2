/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:46:44 GMT 2023
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+;R8IL^{3j2pTzf");
      strBuilder0.deleteCharAt(0);
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(43, strBuilder0.capacity());
      assertEquals("nS$v|w&'aA/", stringBuffer0.toString());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('6');
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      strBuilder0.setNewLineText("+K%{");
      strBuilder0.appendNewLine();
      assertEquals(8, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" [`=_0vSS}-3R8");
      int int0 = strBuilder0.indexOf('Y');
      assertEquals(14, strBuilder0.length());
      assertEquals((-1), int0);
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf('L');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_NoMatcher0, "+K%{");
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      int int0 = strBuilder0.indexOf("~25");
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      strBuilder0.append(0);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      strBuilder0.append((-844L));
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      strBuilder0.asReader();
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"@g2J*");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) null);
      assertEquals(6, strBuilder1.length());
      assertEquals(38, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      strBuilder0.asTokenizer();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1641);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 1641, 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      strBuilder0.insert(4, (long) 4);
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert((-4520), (-4520));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4520
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(110, (float) 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 110
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      strBuilder0.insert(0, (-673.104));
      assertEquals(12, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      int int0 = strBuilder0.lastIndexOf((String) null);
      assertEquals(48, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      strBuilder0.append((-1.0F));
      assertEquals(6, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      strBuilder0.append((-2237.229143));
      strBuilder0.replaceAll('-', '&');
      assertEquals(28, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 0, 't');
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(30, '0');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 30
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1349));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9#*.Hg|u]gc@y");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("'; the SystemUtils property value will default to null.");
      assertEquals(71, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#[2v;<g5Qu>+");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = strBuilder0.toCharArray(5, 5);
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-169), 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 116
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nd < start");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("nd < start", 33, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%{");
      strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("n$v|w&'aA/");
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-97));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -97
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#[2v;<g5Qu>+");
      assertEquals(44, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.minimizeCapacity();
      assertEquals(12, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9#*.Hg|u]gc@y");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1228));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1228
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(4, strBuilder0.size());
      assertEquals(43, int0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(4976);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4976
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-1), 'i');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, 'E');
      StrBuilder strBuilder2 = new StrBuilder("F+&;R8L^{3j2pTzf");
      boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder1);
      assertFalse(boolean0);
      assertEquals(17, strBuilder2.length());
      assertEquals(49, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(1038, 'H');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1038
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+;R8IL^{3j2pTzf");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1094));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1094
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(428);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 428
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(";]kU':xTZf#> B}].");
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, charArray0.length);
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      char[] charArray0 = strBuilder0.toCharArray(0, 97);
      assertEquals(17, charArray0.length);
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertEquals(16, charArray0.length);
      assertTrue(boolean0);
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrBuilder strBuilder0 = new StrBuilder("^1dkZ/im$p}YF_D3O*D");
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(19, charArray1.length);
      assertEquals(51, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+;R8IL^{3@2p/zf");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 1);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-229), (-229), (char[]) null, 1138);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -229
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1372, (-100), (char[]) null, (-1747));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -100
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.getChars(500, 500, (char[]) null, (-1054));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 500
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(116, 9, charArray0, 288);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.setNullText("&YFj2kMvb&N%kWj|r6");
      strBuilder1.appendNull();
      assertEquals(34, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer((Object) null);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+5;R8L^3j2pzf");
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null, (-1622), (-1622));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      // Undeclared exception!
      try { 
        strBuilder0.append("nS$v|w&'aA/", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StrBuilder strBuilder1 = strBuilder0.append("+K%{", 0, 0);
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZvCu|Q*{{U'i");
      // Undeclared exception!
      try { 
        strBuilder0.append("S=c8jJ", 0, (-349));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      // Undeclared exception!
      try { 
        strBuilder0.append("nS$v|w&'aA/", 0, 3806);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      strBuilder0.append("nS$v|w&'aA/", 4, 4);
      assertEquals(15, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "nS$v|w&'aA/");
      strBuilder0.append(stringBuffer0);
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "+K%{");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-1967));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 115, 115);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Ea&]}nF@Kw^.!2eL");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1), 2470);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("A9");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 71, 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StringBuffer stringBuffer0 = new StringBuffer("Ea&]}nF@Kw^.!2eL");
      strBuilder0.append(stringBuffer0, 5, 5);
      assertEquals(21, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(1158);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, Integer.MAX_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+;R8IL^{3j2pTzf");
      strBuilder0.append(strBuilder0);
      assertEquals(34, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+;R8IL^{3j2pTzf");
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, 0, 0);
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea]}nF@Kw!2e");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 1, (-4053));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 10, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("LJKTQL1]");
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.offerLast(strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "LJKTQL1]");
      strBuilder0.append(strBuilder0, 16, 16);
      assertEquals(74, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nd < start");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, 33, (-2492));
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, (-569));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -569
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#[2v;<g5Qu>+");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 5, (-1540));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1540
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 1434);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1434
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[2];
      strBuilder_StrBuilderWriter0.write(charArray0, 1, 0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(false);
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "{z332{gqZB5}@$/xr");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Object[] objectArray0 = new Object[3];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+;R8IL^{3j2pTzf");
      Object[] objectArray0 = new Object[2];
      strBuilder0.appendWithSeparators(objectArray0, "1.1");
      assertEquals(20, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1536));
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$CharSetMatcher");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "org.apache.commons.lang.text.StrMatcher$CharSetMatcher");
      assertEquals(54, strBuilder1.length());
      assertEquals(86, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      linkedList0.offer(strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+;R8IL^{3@2p/zf");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "");
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-5622));
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("@ ,-$+;3y%XfIi#7");
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      assertEquals(54, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-1122), 'P');
      assertEquals(4, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      strBuilder0.appendPadding(375, 'p');
      assertEquals(392, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(550);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 0, '^');
      assertEquals(550, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2p?Tzf");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 5, 'S');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("M.:`");
      strBuilder0.appendFixedWidthPadLeft(4, 4, '1');
      assertEquals(8, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      Object object0 = new Object();
      strBuilder0.appendFixedWidthPadRight(object0, 32, 'Y');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert((-94), (Object) "Invalid length: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -94
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      char[] charArray0 = new char[6];
      strBuilder0.insert(12, charArray0);
      assertEquals(23, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.insert(6, (char[]) null);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      char[] charArray0 = strBuilder0.toCharArray(5, 5);
      StrBuilder strBuilder1 = strBuilder0.insert(5, charArray0);
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      char[] charArray0 = new char[6];
      strBuilder0.insert(5, charArray0, 0, 5);
      assertEquals(22, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("UFk~*V+Hl");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null, 0, 0);
      assertEquals(9, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-1785), (-1785));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1785
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 2514, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 2514
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 19
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(4, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      strBuilder0.insert(0, true);
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8IL^{3j2pTzf");
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$CharSetMatcher");
      strBuilder0.appendNewLine();
      strBuilder0.trim();
      assertEquals(54, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.deleteAll('\"');
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" \t\n\r\f");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      strBuilder1.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder1.deleteAll('^');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(')');
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder1.deleteAll(')');
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" \t\n\r\f");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      strBuilder1.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder1.deleteAll('^');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8IL^{3j2pTzf");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('E');
      assertEquals(50, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8IL^{3j2pTzf");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, 'E');
      strBuilder1.deleteFirst('E');
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      strBuilder0.deleteAll("+K%{");
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("Invalid startIndex: ");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("LJKTQL1]");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(40, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nd < start");
      strBuilder0.deleteFirst("nd < start");
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("nS$v|w&'aA/", "nS$v|w&'aA/");
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      strBuilder0.replaceFirst("F+&;R8L^{3j2pTzf", (String) null);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(5, 5, '(');
      strBuilder1.replace(5, 5, "3us5FH]692PI9k|LP]");
      assertEquals(23, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.replace(9, 9, (String) null);
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("os.name");
      StrBuilder strBuilder1 = strBuilder0.replaceAll(']', ']');
      assertEquals(7, strBuilder1.length());
      assertEquals(39, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('-', '&');
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$CharSetMatcher");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('A', 'A');
      assertEquals(86, strBuilder1.capacity());
      assertEquals(54, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("os.name");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('z', 'Z');
      assertEquals(39, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("/>/>2Kz&8ldr<;KM");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('z', 'Z');
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("UFk~*V+Hl");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("dcWt", (String) null);
      assertEquals(9, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w7)k'hKNW:");
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("M.:`");
      strBuilder0.replaceAll("M.:`", "-\"A[5=qfpip3Jv");
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("UFk~*V+Hl");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(9, strBuilder1.length());
      assertEquals(41, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("UFk~*V+Hl");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("', is neither of type Map.Entry nor an Array", "`YW@z:>'|/Wr");
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, (String) null);
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(368, 1269, '2');
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("Ea&]}nF@Kw^.!2eL");
      strBuilder1.deleteFirst(strMatcher0);
      assertEquals(1285, strBuilder0.capacity());
      assertEquals(1269, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charMatcher('[');
      StrBuilder strBuilder0 = new StrBuilder("5@k[2NOX[vi1iby5LIFM");
      // Undeclared exception!
      try { 
        strBuilder0.replaceAll(strMatcher0, "5@k[2NOX[vi1iby5LIFM");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(640);
      strBuilder0.setLength(640);
      strBuilder0.reverse();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(4, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.setLength(16);
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder1.trim();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      boolean boolean0 = strBuilder0.startsWith("end < start");
      assertTrue(boolean0);
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1434);
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(1434, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3);
      boolean boolean0 = strBuilder0.startsWith("");
      assertEquals(3, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("Invalid length: ");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      boolean boolean0 = strBuilder1.startsWith("O*hWR");
      assertEquals(5, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(742);
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertFalse(boolean0);
      assertEquals(742, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      boolean boolean0 = strBuilder0.endsWith("<s\"Cq?>");
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith("n9)Qd-0~&01ZS64MO:");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|Btn3Wyl");
      boolean boolean0 = strBuilder0.endsWith("|Btn3Wyl");
      assertTrue(boolean0);
      assertEquals(40, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.leftString(65);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      strBuilder0.leftString((-1706));
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      String string0 = strBuilder0.leftString(44);
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrB", string0);
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(1282);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.rightString((-175));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      String string0 = strBuilder0.rightString(1);
      assertEquals(36, strBuilder0.capacity());
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      String string0 = strBuilder0.midString(0, 115);
      assertEquals("+K%{", string0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString((-1210), (-1210));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(97, 97);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      String string0 = strBuilder0.midString(1, 1);
      assertEquals("S", string0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      boolean boolean0 = strBuilder0.contains('A');
      assertFalse(boolean0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZvCu|Q*{{U'9i");
      boolean boolean0 = strBuilder0.contains('Q');
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains("yFPtpUp");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      boolean boolean0 = strBuilder0.contains("x3vR\"R>!\";#AI-k\"Z");
      assertEquals(49, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.indexOf('*', 277);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#[2v;<g5Qu>+");
      strBuilder0.append(1931.1);
      int int0 = strBuilder0.indexOf('1', (-491));
      assertEquals(18, strBuilder0.length());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf("", (-1));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1142));
      int int0 = strBuilder0.indexOf((String) null, 434);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("C", "C");
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft((Object) "", 1470, '?');
      int int0 = strBuilder0.indexOf("", 1442);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1442, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"@g2J*");
      int int0 = strBuilder0.indexOf((StrMatcher) null, (-1425));
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      strBuilder_StrBuilderWriter0.write(charArray0);
      int int0 = strBuilder0.lastIndexOf('_', 640);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(".er");
      int int0 = strBuilder0.lastIndexOf(".er", 2468);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf("Ea&]}nF@Kw^.!2eL");
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(15, int0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      int int0 = strBuilder1.lastIndexOf("z'.]+`t+g A");
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^1dkZ/im$p}YF_D3O*D");
      int int0 = strBuilder0.lastIndexOf("r");
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      int int0 = strBuilder0.lastIndexOf("os.arch");
      assertEquals(43, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$|w&'aA");
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, (-1406));
      assertEquals(41, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft((Object) "", 1470, '?');
      StrMatcher strMatcher0 = StrMatcher.charMatcher('?');
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(1470, strBuilder0.capacity());
      assertEquals(1442, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea]}nF@Kw.!2e");
      StrMatcher strMatcher0 = StrMatcher.charMatcher('8');
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(14, strBuilder0.length());
      assertEquals((-1), int0);
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertTrue(boolean0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nS$v|w&'aA/");
      StrBuilder strBuilder1 = new StrBuilder("M) CZ?X){C6/Zde");
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      StrBuilder strBuilder1 = new StrBuilder("F+&;R8L^{3j2pTzf");
      strBuilder0.setCharAt(7, 'l');
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertTrue(boolean0);
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder strBuilder1 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      StrBuilder strBuilder1 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertTrue(boolean0);
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      strBuilder0.setCharAt(0, 'a');
      StrBuilder strBuilder1 = new StrBuilder("x3vR\"R>!\";#AI-k\"Z");
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ea&]}nF@Kw^.!2eL");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderWriter0);
      assertFalse(boolean0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1434);
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(1434, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(')');
      strBuilder1.hashCode();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("VhqU0*FFG}I");
      // Undeclared exception!
      try { 
        strBuilder0.validateRange((-841), (-841));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -841
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9#*.Hg|u]gc@y");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "9#*.Hg|u]gc@y");
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(45, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[7];
      strBuilder_StrBuilderTokenizer0.reset(charArray0);
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read((char[]) null, (-201), (-4640));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("uxOVwd");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, (-2590));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 22, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8IL^{3j2pTzf");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 396);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 10, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+&;R8L^{3j2pTzf");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[18];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 4, 4);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+K%{");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(3138L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-1L));
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0L, long0);
  }
}
