/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:45:08 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("g", "", (-3138));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("IllegalAccessException occurred during 1.6 backcompat code", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("I^0{5KE;',{y");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = StringUtils.length("|y>YE\"=N\"_|3z=a$i^%");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("34cNpQ>@6-^65O.Y");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "LL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("y+T/g7I].O5LFZQk", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("g", (String) null);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("8;;g73p", stringArray0, stringArray0);
      assertEquals("8;;g73p", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("SecurityExcepgion omcurred during 1.6 backcompat code", "SecurityExcepgion omcurred during 1.6 backcompat code", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("        R                      ^      9               <h           C         mT]                        R                      ^      9               <h           C         mT]                        R                      ^      9               <h           C         mT]                        R                      ^      9               <h           C         mT]                ", "pInCombiningDiacriticalMarks}+");
      assertEquals("        R                      ^      9               <h           C         mT]                        R                      ^      9               <h           C         mT]                        R                      ^      9               <h           C         mT]                        R                      ^      9               <h           C         mT]                ", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.center("NoSuchMethodException occurred during 1.6 backcompat code", 48);
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Q<hbJ1^U`(Wt oFNa");
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{", '{');
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.rightPad("2", 1);
      assertNotNull(string0);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.leftPad("_Dv(qG,m+J3wA>P", 3);
      assertNotNull(string0);
      assertEquals("_Dv(qG,m+J3wA>P", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.strip("F!");
      assertNotNull(string0);
      assertEquals("F!", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 30);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("red during 1.6 bac", "?p@veS%K%U[MA|p", (-303));
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("red during 1.6 bac", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: red during 1.6 bac
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("vhA_TeF<.3!rN}qx_", 'F');
      assertNotNull(string0);
      assertEquals("<.3!rN}qx_FvhA_Te", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf(" ", " ", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.replace("cc", "cc", (String) null);
      assertEquals("cc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("TQOFvb", "TQOFvb");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("?Drfn'27h.\"avt?Drfn'27h.\"avt", (String) null, 59);
      assertEquals("?Drfn'27h.\"avt?Drfn'27h.\"avt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.isNotEmpty(stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("user.region");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("tud*h.4G2caWo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.trimToNull("!FXS1aP1KbP:]7cB");
      assertNotNull(string0);
      assertEquals("!FXS1aP1KbP:]7cB", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("8Va");
      assertEquals("8Va", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripToNull("backcompat code");
      assertEquals("backcompat code", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals("IllegalAccessException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.strip("os.name", "");
      assertEquals("os.name", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripStart("g", "g");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripStart("n@b$uYtcO#>REF", "L");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "dlQ_}`7LQ]?1mWjsP@g");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.stripEnd("5+&KJQ#r", "5+&KJQ#r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Q#r", "dEQ&GQ[");
      assertEquals("Q#r", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.stripAccents("?Drfn'27h.\"avt?Drfn'27h.\"avt");
      assertEquals("?Drfn'27h.\"avt?Drfn'27h.\"avt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "~*@", (CharSequence) "iLLEGALaRGUMENTeXCEPTION OCCURRED DURING 1.6 BACKCOMPAT CODE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "className must not be null.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("(pI{", "(pI{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "hks`(0t%th){7-va5-q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("cannot pad a negativ", 'h');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'Q');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("x63r(qN~>@", '\u0080', 1948);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '5', (-2450));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "e]z9]QYLA|hRAC`");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOf("Invoca+ionTargetException occurred during 1.6 backcompat code", "Invoca+ionTargetException occurred during 1.6 backcompat code");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf("org.apache.commons.lang3.StringUtils", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, ",ld_", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf("p(kOwwp(kOwwww", "p(kOwwp(kOwwww", 30);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.lang.Object@7f2298b7s`H`G{java.lang.Object@334ee927s`H`G{java.lang.Object@790b3172s`H`G{java.lang.Object@3e715cbas`H`G{java.lang.Object@55fd8ce3s`H`G{java.lang.Object@11be40aas`H`G{java.lang.Object@311e734e", (String) null, 3140);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((String) null, (String) null, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.lastOrdinalIndexOf(" =i ", stringArray0[0], 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("AbJ$L1^", "AbJ$L1^", (-5216));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("m", "m", 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, "", (-1298));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("e tostring of a null ident", (String) null, 127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("g", "java.specification.name", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(" is less than 0: ", "BxsL");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("Mu", "Mu");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(" is less than 0: ", '%');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, '2');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("(pI{", '{', 2797);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'j', 4825);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "krf-");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("l}En2MTyo]l}XBEn2MTyo]", "l}En2MTyo]l}XBEn2MTyo]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("className must not be null.", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, (-1462));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null, 37);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("g", "boo", (-1462));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "d?%6hVPnl1I3dd");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[5];
      int int0 = StringUtils.lastIndexOfIgnoreCase("s=(:Kk@iK.", stringArray0[2]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "ljM", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("ca", (String) null, (-1462));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("x/~-", "x/~-", 28);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "Index: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase(";3-DH*3Y", "1.3");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("{", '{');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", '\u00E9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("x63lt-qIzN~=@", '\u00A9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "/fV\"FmG:a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("lt2Kb!-C\"95Sc:>vHX%", "boolean");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("FtzpXg `;Y", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(",", ",");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("boolean", "...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "C\"", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "ld5Way4>C_ySVs =", "KbPx?uH^PwX+8AMj/s");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "~~", "user.country");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "r6#\"3'brd!}u5", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "?Drfn'27h.\"avt?Drfn'27h.\"avt", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "?Drfn'27h.\"avt?Drfn'27h.\"avt", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = StringUtils.containsAny((CharSequence) charBuffer0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'h';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";9thln]n}[ph ;9thln]n}[ph ", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "(pI{", "(pI{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "et the tostring of a null ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "java.text.Normalizer$Form", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Vo$Oe)TPM4b-_%_", "Vo$Oe)TPM4b-_%_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "normalize", "classname must not b>~t6.q*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Ti}", "}?8pOw+Lk+g");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("java.text.Normalizer", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("b>3z", "b>3z");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "p{InCombiningDiacriticalMarks}+", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "e tostring of a null ident");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "zt1", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "zt1", "s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.text.Normalizer", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("\\u000", string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "[AL(hX]h04eKHR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "*:#diQT", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("sUlRzpKfE8Uq", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "classname mst not b>~t6.q*";
      int int0 = StringUtils.indexOfAny("cannot pad a negativ", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "className must not be null.";
      stringArray0[1] = "className must not be null.";
      int int0 = StringUtils.indexOfAny("className must not be null.", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[5];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("sUlRzpKfE8Uq", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cannot gjava.vm.specification.nameidentity";
      stringArray0[1] = "cannot gjava.vm.specification.nameidentity";
      int int0 = StringUtils.lastIndexOfAny("cannot gjava.vm.specification.nameidentity", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substring("g", 1906);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1906);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring("{", (-739));
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring("\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9\u00A9{", 7, 7);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-1112), 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substring("-nY`A/.*BZR22,eEd", (-723), (-723));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substring("r4,s@}2e K0,z3", 30, 30);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.left("Wm}D{f2}x#YF", 4);
      assertNotNull(string0);
      assertEquals("Wm}", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 32);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.left(" is less than 0: ", (-552));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.left("V<(ysnZ\"v.z,", 48);
      assertEquals("V<(ysnZ\"v.z,", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.right("TimeToLive of tring of a null i", 25);
      assertNotNull(string0);
      assertEquals("Live of tring of a null i", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-1368));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.right("", (-3837));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.right("'", 2);
      assertNotNull(string0);
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 5, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.mid("[", (-3528), (-3528));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.mid("", 17, 17);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.mid(" ", (-3077), 11);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.mid("_Dv(qG,m+J3wA>P", 3, 3);
      assertEquals("(qG", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBefore("normalize", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBefore("l4NL65Xo'C0M4#hh-", (String) null);
      assertEquals("l4NL65Xo'C0M4#hh-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBefore("f", "f");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBefore("f", " mmjc");
      assertEquals("f", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Cannot store ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringAfter(",?t|6 ", ",?t|6 ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfter("hS", "GU0;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("FBTs_99\u00009ado", "boolean");
      assertEquals("FBTs_99\u00009ado", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("IllegalAccessException occurred during 1.6 backcompat code", "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("#wp$e??O", "boo");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Cannot pad a negative amount: ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("ng 1.6 backcompat", "g");
      assertEquals(" 1.6 backcompat", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("EmP4gF_+t#Q_.|", "EmP4gF_+t#Q_.|");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringBetween("...", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.substringBetween("!\"0/1D~&", "!\"0/1D~&", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" ", "org.apache.commons.lang3.StringUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.substringBetween("c", "c");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("short", "nl", "nl");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "jk'F|n.7ajrFj");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("v{7(H$B\"#9Z ?y", "java.text.Normalizer$Form", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "A5d[", " vs ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" in a rray of ", " ", " ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, " vs ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SecurityException occurred during 1.6 backcompat code", " ", 4);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("sOFy", "sOFy", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'O');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("{", '{');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "f");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is 4", (String) null, 3);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("g", "g");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Q_.|", "|", Integer.MAX_VALUE);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("!", "!", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "\\u00s";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, "NO%STPvqM#B~Ps\"=U0A");
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(",? ", ",? ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ", " vs ", 3);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'C');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '%', 96, 96);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, '$', 448, 448);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.join((Object[]) stringArray0, '%');
      assertEquals("%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "8}`*xLh&n/+V#*N_Kb3");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ">~t6.q*", 788, 17);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, "u'*7NqiVg`", 1651, 64);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(3);
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, '[');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'b');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("tud*h.4G2caWo");
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      String string0 = StringUtils.join(iterator0, '\\');
      assertFalse(linkedHashSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("tud*h.4G2caWo");
      linkedHashSet0.add((String) null);
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      String string0 = StringUtils.join(iterator0, '\\');
      assertEquals("tud*h.4G2caWo\\", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(603, 603);
      linkedHashSet0.add((String) null);
      linkedHashSet0.add("ClassNotFoundException occurred during 1.6 backcompat code");
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      String string0 = StringUtils.join(iterator0, '\\');
      assertEquals("\\ClassNotFoundException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Object> iterator0 = arrayList0.iterator();
      String string0 = StringUtils.join(iterator0, "Y},T=t+UHvEc:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize(2681);
      String string0 = StringUtils.join((Iterable<?>) stack0, "#,BznO!!s@");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertFalse(linkedHashSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      linkedHashSet0.add(" ");
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      linkedHashSet0.add("Cannot pad a negative amount: ");
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, (String) null);
      assertNotNull(string0);
      assertEquals("Cannot pad a negative amount: ", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'P');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeStart("NKx*Y(-", (String) null);
      assertNotNull(string0);
      assertEquals("NKx*Y(-", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeStart("|Zo2uSM$CmF", "R^#A}nTO+k:{s");
      assertEquals("|Zo2uSM$CmF", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.removeStart("SecurityException occurred during 1.6 backcompab code", "SecurityException occurred during 1.6 backcompab code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("4.0", (String) null);
      assertEquals("4.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" i+ leas t7an 0: ", " i+ leas t7an 0: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("yk@haWTa u03", "U5|][|GWi");
      assertEquals("yk@haWTa u03", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.removeEnd("awt.toolkit", "");
      assertEquals("awt.toolkit", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.removeEnd("+&KJQ#r,t ", "\"");
      assertEquals("+&KJQ#r,t ", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.removeEndIgnoreCase(stringArray0[7], "NO%STPvqM#B~Ps\"=U0A");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("F7m*", (String) null);
      assertNotNull(string0);
      assertEquals("F7m*", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("H?t ", "H?t ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.remove("!!!!x63lt'qIzN~=@", (String) null);
      assertNotNull(string0);
      assertEquals("!!!!x63lt'qIzN~=@", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("X.p)eKFE3Lso?", "X.p)eKFE3Lso?");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'c');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.remove("c.Pww", 'w');
      assertEquals("c.P", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.remove("v.`8 W", 'b');
      assertEquals("v.`8 W", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replace("pa2LuB?", (String) null, "pa2LuB?", (-762));
      assertEquals("pa2LuB?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replace("|y>YE\"=N\"_|3z=a$i^%", "98", "98", 0);
      assertEquals("|y>YE\"=N\"_|3z=a$i^%", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replace("java.text.Normalizer$Form", "IllegalAccessException occurred during 1.6 backcoDpat code", "IllegalAccessException occurred during 1.6 backcoDpat code");
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replace("org.apach7.commons.lang3.StringUtils", "org.apach7.commons.lang3.StringUtils", "org.apach7.commons.lang3.StringUtils", 73);
      assertEquals("org.apach7.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("lasName must notgbe null.", "lasName must notgbe null.", "lasName must notgbe null.");
      assertEquals("lasName must notgbe null.", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("(pI{", (String[]) null, (String[]) null);
      assertEquals("(pI{", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[23];
      String string0 = StringUtils.replaceEachRepeatedly(stringArray0[0], stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("pat code", stringArray0, stringArray0);
      assertEquals("pat code", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("}", stringArray0, (String[]) null);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("SUDwmm6=", stringArray0, stringArray1);
      assertEquals("SUDwmm6=", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+&KJQ#r55555555555555555555555555555555555555555555555555555555555555,? 55555555555555555555555555555555555555555555555555555555555555", " u", 2544);
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("1.3", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "osrnof  ";
      String[] stringArray1 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("                                                                                                    ", stringArray0, stringArray1);
      assertEquals("                                                                                                    ", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "l%`>qn],dxq=";
      String string0 = StringUtils.replaceEach(" ", stringArray0, stringArray0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "w";
      stringArray0[1] = "/1tCHw!cU.C*a";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("/1tCHw!cU.C*a", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: /1tCHw!cU.C*a
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NoSuchMethodException occurred during 1.6 backcompat code";
      stringArray0[3] = "|W2H<[o";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Ft}GwnT)@\b#7bH}J";
      stringArray1[3] = "Ft}GwnT)@\b#7bH}J";
      String string0 = StringUtils.replaceEachRepeatedly("NoSuchMethodException occurred during 1.6 backcompat code", stringArray0, stringArray1);
      assertEquals("Ft}GwnT)@\b#7bH}J", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ClassNotFoundException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code", (-303));
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("ClassNotFoundException occurred during 1.6 backcompat code", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: ClassNotFoundException occurred during 1.6 backcompat code
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.replaceChars("qws3>N^q$", 'E', 'N');
      assertNotNull(string0);
      assertEquals("qws3>N^q$", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '%', '%');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.replaceChars("`nuswH!0G$%0hRA:9", (String) null, (String) null);
      assertEquals("`nuswH!0G$%0hRA:9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.replaceChars("3vCjlns H", "98", (String) null);
      assertEquals("3vCjlns H", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.replaceChars("NoSuchMethodException occurred during 1.6 backcompat cgde", "NoSuchMethodException occurred during 1.6 backcompat cgde", "9 ");
      assertEquals("9     ", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", (-1783), (-1783));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 123, 123);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.removeStartIgnoreCase(stringArray0[0], stringArray0[0]);
      assertNull(string0);
      
      String string1 = StringUtils.overlay("                                                      ZG.&KBw!C[", string0, 256, 38);
      assertNotNull(string1);
      assertEquals("                                      ", string1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.overlay("{", "{", 2, 2);
      assertEquals("{{", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.chomp("IllegalArgumentException occurred during 1.6 backcompat code", "curred during 1.6");
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.chomp("8Va", (String) null);
      assertNotNull(string0);
      assertEquals("8Va", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chomp("]", "]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.chop("2E(,F5hLD7SX;Si?T");
      assertEquals("2E(,F5hLD7SX;Si?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.chop(" ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.repeat("NoSuchMethodException occurred during 1.6 backcompat code", (-3557));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.repeat(";Sg1$5Y27-)3DMe]", 1);
      assertEquals(";Sg1$5Y27-)3DMe]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 3);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apach7.commons.lang3.StringUtils", "org.apach7.commons.lang3.StringUtils", 73);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 9959);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.repeat("[=", 264);
      assertEquals("[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=[=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "v", (-136));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.repeat("Akgyd@)I1rU", (String) null, 6);
      assertNotNull(string0);
      assertEquals("Akgyd@)I1rUAkgyd@)I1rUAkgyd@)I1rUAkgyd@)I1rUAkgyd@)I1rUAkgyd@)I1rU", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 8192, 'h');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("", 55296, '`');
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 2, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1368), (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 23, '\u00C4');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad("Windows 9", 55296, '4');
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 4, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.leftPad("IGe~(MWBXiL{:v%.Yt", 3054, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.leftPad("red during 1.6 bac", 0, "red during 1.6 bac");
      assertEquals("red during 1.6 bac", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.center("Ri_i", 13, "Ri_i");
      assertEquals("Ri_iRi_iRi_iR", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.center("SecurityException occurred during 1.6 backcompat code", 67, "SecurityException occurred during 1.6 backcompat code");
      assertEquals("SecuritSecurityException occurred during 1.6 backcompat codeSecurit", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.center(" =i ", 18, " =i ");
      assertEquals(" =i  =i =i  =i  =i", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-3917), 'P');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.center(",?t ", (-1368), '$');
      assertEquals(",?t ", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.center("boole.n", 1891);
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.center("", 29, "");
      assertEquals("                             ", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.center("R", 1, "R");
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.upperCase(" is less than 0: ");
      assertEquals(" IS LESS THAN 0: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("&}?e LjfcC");
      String string0 = StringUtils.upperCase("[]", locale0);
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.lowerCase("jaxvawclass.path");
      assertEquals("jaxvawclass.path", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      String string0 = StringUtils.lowerCase("AIX", locale0);
      assertNotNull(string0);
      assertEquals("aix", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.capitalize("wKLn!");
      assertNotNull(string0);
      assertEquals("WKLn!", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.swapCase("!\"0/1D~&");
      assertEquals("!\"0/1d~&", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.swapCase(",?t ");
      assertEquals(",?T ", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = StringUtils.countMatches("normalize", "normalize");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = StringUtils.countMatches("NO%STPvqM#B~Ps\"=U0A", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("fJJF(WIZHEbM~x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Solaris");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("IllegalAccessException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("c.P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("boolean");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j]Aa?d3:/6.j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("7&p3~`g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.isNumericSpace(stringArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("7&p3~`g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase(":,^Q)}8;@C`<Z>68");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("g");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("8Ws");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("G");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.ObjectUtils");
      assertEquals("org.apache.commons.lang3.ObjectUtils", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.defaultString("qsWI+\"w}Cy", "qsWI+\"w}Cy");
      assertEquals("qsWI+\"w}Cy", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "awt.toolkitawt.toolkit", (CharSequence) "awt.toolkitawt.toolkit");
      assertEquals("awt.toolkitawt.toolkit", charSequence0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) ";9thln]n}[ph ;9thln]n}[ph ");
      assertEquals(";9thln]n}[ph ;9thln]n}[ph ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.reverse("g");
      assertEquals("g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'B');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 118, 118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.chomp("num4rr'2h;]qoEQAQy*");
      String string1 = StringUtils.abbreviate(string0, 137, 2637);
      assertEquals("num4rr'2h;]qoEQAQy*", string1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.repeat("num4rr'2h;]qoEQAQy*", 1615);
      String string1 = StringUtils.abbreviate(string0, 137, 2637);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.repeat("num4rr'2h;]qoEQAQy*", 1615);
      String string1 = StringUtils.abbreviate(string0, Integer.MAX_VALUE, 2654);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("}rinwis@^}|@vc", 64, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 85);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("2E(,F5hLD7SX;Si?T", "IllegalAccessException occurred during 1.6 backcompat code", (-303));
      assertEquals("2E(,F5hLD7SX;Si?T", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("w", "w", 2);
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("A6qH`}gS?%/J>PUc", "ww&u", 6);
      assertEquals("Aww&uc", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.difference("java.text.Normalizer$Form", "java.text.Normalizer$Form");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.difference(",", (String) null);
      assertEquals(",", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.difference("IllegalAccessException occurred during 1.6 backcompat code", " is less than 0: ");
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "1(E}M/mU[p)Y/<&<");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "cannot get tjava.vm.specification.nametity");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "securityexcept9sqxc'7d-)hjrvxqng 1.6 backcompat code", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.center("cannot get tjava.vm.specification.nametity", (-1306), "cannot get tjava.vm.specification.nametity");
      int int0 = StringUtils.indexOfDifference((CharSequence) "cannot get tjava.vm.specification.nametity", (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(",? ", ",? ");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.repeat("f", 1906);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f";
      stringArray0[1] = "f";
      stringArray0[2] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("f", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(NG3iJ)Z.7";
      stringArray0[1] = "(NG3iJ)Z.7";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("(NG3iJ)Z.7", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("`nuswH!0G$%0hRA:9", (String) null);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("b^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGVb^-bdmXGV", "b^-bdmXGV");
      assertEquals(351, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "\\u000";
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(string0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "classname musjava.io.tmpdir");
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("cannot get tjava.vm.specification.nametity", "");
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("cannot get tjava.vm.specification.nametity", "cannot get tjava.vm.specification.nametity");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("zS`6#*\"V)eULcaU6[>I", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "`nuswH!0G$%0hRA:9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5U}!DrB'3\"#6R";
      boolean boolean0 = StringUtils.startsWithAny("AM=*!\"Ln ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.startsWithAny(":~I", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = "1";
      boolean boolean0 = StringUtils.startsWithAny("1", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith(" vs ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "classname must not b>~t6.q*");
      assertFalse(boolean0);
  }
}
