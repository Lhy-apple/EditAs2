/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:45:07 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 3795.164, 124.0482271609);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1003));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short) (-78));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-78.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.add(charArray0, 'y');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'y'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short)0);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-931), (long) (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -931, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1311.138904476));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.add(intArray0, 57);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 57}, intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 253, (-1139.408));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 253, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short[] shortArray0 = new short[7];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1641), 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1641, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (byte)5;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (byte)5);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1475.8577F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2928.8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, (int) (short)0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Character character0 = Character.valueOf('w');
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (char)character0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 119);
      assertArrayEquals(new int[] {119, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 57);
      assertArrayEquals(new int[] {57}, intArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2784), (byte)122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2784, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isEquals(objectArray0[0], object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 98.0);
      assertArrayEquals(new double[] {98.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-674));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -674, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short[] shortArray0 = new short[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 4, (short) (-1710));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer(133);
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)48);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) 0, (-1277));
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int) 0, (-645));
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int)  (-83), Integer.MAX_VALUE);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-70), 1576);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1), (-2222));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2, 2);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2147483622, 2147483622);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 2, 1546);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2147483629), (-2147483629));
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[2];
      Character character0 = new Character('\u0085');
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2130), (int) character0);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)657, (-2017));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 67, (-765));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (int) (short)512);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 2, 856);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1277), (-1277));
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray2);
      assertSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 454);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 4616, 6065);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 0, (int) (byte)88);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-378), (int) (byte)13);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-5818), (int) (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (-1004));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)0, (int) (byte) (-127));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1641), 748);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-385), 2);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) (-22));
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (-22), 1262);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-22.0F), (-22.0F), (-22.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 0, 0);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1466), 0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, Integer.MAX_VALUE, 8);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 8);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) integerArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer[] integerArray0 = new Integer[18];
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[9];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertTrue(boolean0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (int) short0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-1));
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayUtils.reverse(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[8];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf((Object[]) null, object0, 1724);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(452);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-1131));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 452);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[22];
      Object object0 = new Object();
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[4], 2);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)5;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[0]);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 8);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (-2644));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) short1, (int) short0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) "JNHP%#vN|FU&q", 454);
      assertEquals(4, characterArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)88;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 17);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer((-2390));
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, (long) 3616, (-173));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L, 3120);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long long0 = 0L;
      Long[] longArray0 = new Long[3];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long0);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-528L), (-1));
      assertEquals((-1), int0);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(intArray0, (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1233), 873);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1606, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2028);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2028), 3328);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1141, (int) (short)1141);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-607), (int) (short) (-60));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-158), (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2779);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2779));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'n');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-3118));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '2', 417);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'l', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o', 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'c';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'c');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'I');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'B');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-72), 1120);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-21), (int) (byte) (-21));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)88);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (-2585));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-58), (-1310));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-83), (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2182), (-5818));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Integer integer0 = new Integer((-1430));
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) integer0, (double) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1), 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1360;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 512, (-472.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2416.8356208), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2, 1849.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (byte) (-88), (-163.24632686879886));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Double double0 = new Double((-0.06720378764777157));
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2559.0544912874);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) doubleArray0[0], 2, (double) doubleArray0[1]);
      assertArrayEquals(new double[] {(-0.06720378764777157), (-0.06720378764777157), 2559.0544912874, 2559.0544912874, 2559.0544912874, 2559.0544912874, 2559.0544912874}, doubleArray1, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 879.839);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 1744.37910447);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.indexOf(floatArray0, 101.0F, (-342));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 262.29F, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, (-1538));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 262.29F, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[0] = (float) 1360;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1360, 512);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-21);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-21.0F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-847));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)0);
      integerArray0[0] = integer0;
      boolean[] booleanArray0 = new boolean[4];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) integerArray0[0]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)0);
      integerArray0[1] = integer0;
      integerArray0[2] = integerArray0[1];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) integerArray0[2]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Character character0 = new Character('\u0085');
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'\u0085', '\u0085', '\u0085'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'N');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'e');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('w');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '%');
      assertArrayEquals(new char[] {'w', '%', '%', '%', '%', '%', '%', '%', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(127L);
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = longArray0[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {127L, 127L, 127L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 581L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1457L));
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      Long[] longArray0 = new Long[6];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long0);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 364;
      integerArray0[1] = (Integer) 364;
      integerArray0[2] = (Integer) 364;
      integerArray0[3] = (Integer) 364;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {364, 364, 364, 364}, intArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 415);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)124);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Integer integer0 = new Integer((-1430));
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 873);
      assertArrayEquals(new int[] {(-1430), 873, 873, 873, 873, 873, 873}, intArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Short short0 = new Short((short)657);
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)657, (short)657, (short)657}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-20560));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-10));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)0);
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)7);
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byteArray0[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)57);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)11);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte byte0 = (byte)5;
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = (Byte) (byte)5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5, (byte)5}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      Integer integer0 = new Integer((-2059));
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) byteArray1, (Object) integer0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Double double0 = new Double(61.0);
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      short short0 = (short)0;
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) short0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1181.952174708);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-2562));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-1));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 99.0F);
      assertArrayEquals(new float[] {(-1.0F), 99.0F, 99.0F, 99.0F, 99.0F, 99.0F, 99.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      float[] floatArray0 = new float[6];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = true;
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = (Boolean) true;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Integer[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      long[] longArray0 = new long[8];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-1.0F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integerArray0[1]);
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) null);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (-2017), (Object) null);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) floatArray0, (-1), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 364, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 364, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.add(charArray0, 1, '4');
      assertArrayEquals(new char[] {'\u0000', '4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)14);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)14, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)3);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'l');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.5);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, Integer.MAX_VALUE);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertEquals(4, longArray1.length);
  }
}
