/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:45:17 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.XML.entityName(416);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("!c&lt;$&quot;-Zg])");
      assertEquals("!c<$\"-Zg])", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.escape("!c<$\"-Zg])");
      assertEquals("!c&lt;$&quot;-Zg])", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      int int0 = entities_HashEntityMap0.value("a_rvJ ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("org.apache.commons.lan.ex=eptionNestableRuntimExeption", 130);
      int int0 = entities_TreeEntityMap0.value("org.apache.commons.lan.ex=eptionNestableRuntimExeption");
      assertEquals(130, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("].:&$;&I`Q` ");
      assertEquals("].:&$;&I`Q` ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(102);
      entities_BinaryEntityMap0.size = 102;
      entities_BinaryEntityMap0.add("WQ>nCTM\"*ete6| IJh{", 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.add("8211", (-539));
      int int0 = entities_ArrayEntityMap0.value("8211");
      assertEquals((-539), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.add("8211", (-539));
      int int0 = entities_ArrayEntityMap0.value("_<?");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(102);
      entities_BinaryEntityMap0.size = 102;
      entities_BinaryEntityMap0.add("e2vUS,tBw", 2994);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(3001);
      entities_BinaryEntityMap0.add("e2vUS,tBw", 90);
      entities_BinaryEntityMap0.add("e2vUS,tBw", (-2210));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(3001);
      entities_BinaryEntityMap0.add("e2vUS,tBw", 90);
      String string0 = entities_BinaryEntityMap0.name(90);
      assertEquals("e2vUS,tBw", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("3");
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.XML;
      entities0.HTML32.unescape((Writer) stringWriter0, "b0~<[9H/y&{!f");
      assertEquals("b0~<[9H/y&{!f", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = new Entities();
      entities0.unescape((Writer) stringWriter0, "i7Y");
      assertEquals("i7Y", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape(" G].:&(Q$W&#yQ;l{ ");
      assertEquals(" G].:&(Q$W&#yQ;l{ ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("z.:&;&I4Q` ");
      assertEquals("z.:&;&I4Q` ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("G]:Y$;&#;{ ");
      assertEquals("G]:Y$;&#;{ ", string0);
  }
}
