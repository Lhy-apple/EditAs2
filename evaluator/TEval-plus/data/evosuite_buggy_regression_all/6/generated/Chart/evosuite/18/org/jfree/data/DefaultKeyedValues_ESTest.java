/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:45:26 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultKeyedValues_ESTest extends DefaultKeyedValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = new Integer(3150);
      defaultKeyedValues0.setValue((Comparable) integer0, (double) 3150);
      Object object0 = defaultKeyedValues0.clone();
      boolean boolean0 = defaultKeyedValues0.equals(object0);
      assertNotSame(object0, defaultKeyedValues0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(0, (Comparable) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      List list0 = defaultKeyedValues0.getKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = Integer.getInteger("4JU(,md%CbJ_W5q][", 3150);
      defaultKeyedValues0.setValue((Comparable) integer0, (double) 3150);
      Number number0 = defaultKeyedValues0.getValue((Comparable) integer0);
      assertEquals(3150.0, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((Comparable) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 1
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.addValue((Comparable) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Long long0 = new Long(0);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue((-1795), (Comparable) long0, (Number) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = new Integer(29);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(29, (Comparable) integer0, (double) 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Long long0 = new Long(0);
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      Integer integer0 = new Integer(0);
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) integer0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Float float0 = new Float((float) 0);
      Float float1 = new Float((-1.0));
      defaultKeyedValues0.setValue((Comparable) float1, (Number) float1);
      defaultKeyedValues0.insertValue(0, (Comparable) float0, (double) 0);
      defaultKeyedValues0.insertValue(0, (Comparable) float1, 1159.229);
      assertEquals(2, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = new Integer(3149);
      defaultKeyedValues0.setValue((Comparable) integer0, (double) 3149);
      defaultKeyedValues0.removeValue((Comparable) integer0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Float float0 = new Float((float) 0);
      Float float1 = new Float((-1.0));
      defaultKeyedValues0.setValue((Comparable) float1, (Number) float1);
      defaultKeyedValues0.insertValue(0, (Comparable) float0, (double) 0);
      defaultKeyedValues0.removeValue(0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.removeValue((Comparable) 0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Long long0 = new Long(0);
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Double double0 = new Double(0.0);
      defaultKeyedValues0.setValue((Comparable) double0, (Number) double0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Byte byte0 = new Byte((byte)9);
      boolean boolean0 = defaultKeyedValues0.equals(byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = new Integer(3146);
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      defaultKeyedValues1.addValue((Comparable) integer0, (double) 3146);
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertFalse(boolean0);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Float float0 = new Float((-3606.15021));
      defaultKeyedValues0.setValue((Comparable) float0, (Number) float0);
      Short short0 = new Short((short)29);
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      defaultKeyedValues1.addValue((Comparable) short0, (Number) short0);
      boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues0);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = new Integer(3150);
      defaultKeyedValues0.setValue((Comparable) integer0, (Number) null);
      Object object0 = defaultKeyedValues0.clone();
      boolean boolean0 = defaultKeyedValues0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultKeyedValues0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = new Integer(3150);
      defaultKeyedValues0.setValue((Comparable) integer0, (Number) null);
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      defaultKeyedValues1.addValue((Comparable) integer0, (Number) integer0);
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = new Integer(3146);
      Float float0 = new Float((double) 3146);
      defaultKeyedValues0.setValue((Comparable) integer0, (Number) float0);
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      defaultKeyedValues1.addValue((Comparable) integer0, (-4273.9687937));
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertFalse(boolean0);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.hashCode();
  }
}
