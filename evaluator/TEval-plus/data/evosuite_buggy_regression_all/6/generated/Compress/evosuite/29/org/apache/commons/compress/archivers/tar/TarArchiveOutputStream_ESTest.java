/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:14:33 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      int int0 = tarArchiveOutputStream0.getRecordSize();
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", "{=C:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      tarArchiveOutputStream0.getCount();
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x}@cBK");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      tarArchiveOutputStream0.setBigNumberMode(2);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x}@cBK");
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TAPE");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, (-1));
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveConstants", true);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, (-3143), "org.apache.commons.compress.archivers.dump.DumpArchiveConstants");
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TAPE");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, "TAPE");
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.write((byte[]) null, 8319, (-406));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      tarArchiveOutputStream0.setLongFileMode(33188);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*hF");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      tarArchiveOutputStream0.flush();
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@c]K");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, "Yl");
      tarArchiveOutputStream0.close();
      try { 
        tarArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*hF");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      try { 
        tarArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archives contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@c]K");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, "Yl");
      tarArchiveOutputStream0.close();
      tarArchiveOutputStream0.close();
      assertEquals(10240, tarArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x!}$@cBK");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertNotNull(tarArchiveEntry0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.close();
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(10240L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(10240, tarArchiveOutputStream0.getCount());
      
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "x!}$@cBK", map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Jb");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Jb");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("Jb", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveEntry0.setLinkName((String) null);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertNull(tarArchiveEntry0.getLinkName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("Jb", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Jb");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Jb");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("Jb", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(tarArchiveEntry0.isFile());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveEntry0.setLinkName("Jb");
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals("Jb", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("Jb", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertTrue(tarArchiveEntry0.isFile());
      
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals("Jb", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("Jb", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x}@cBK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.setBigNumberMode(1);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x}@cBK");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("x}@cBK", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertNotNull(tarArchiveEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "x}@cBK", hashMap0);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("x}@cBK", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x!}$@cBK");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertNotNull(tarArchiveEntry0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "x!}$@cBK", map0);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(1536, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x!}$@cBK");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertNotNull(tarArchiveEntry0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertNotNull(tarArchiveOutputStream0);
      
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // request to write '637' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/'
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@c]K");
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, "Yl");
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.close();
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(10240, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(10240L, tarArchiveOutputStream0.getBytesWritten());
      
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertNotNull(tarArchiveOutputStream0);
      
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Jb");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Jb");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Jb", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertNotNull(tarArchiveOutputStream0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "Zip64 extended information must contain both size values in the local file header.", hashMap0);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("Jb", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1024L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(1024, tarArchiveOutputStream0.getCount());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*hF");
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertNotNull(tarArchiveEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1940, 569.0F);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "BM~Cg}VVrFNQ7fY/", hashMap0);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x!}$@cBK");
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertNotNull(tarArchiveEntry0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "\u0000", map0);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(1536, tarArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@cBK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("x!}$@cBK");
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertNotNull(tarArchiveEntry0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertNotNull(tarArchiveOutputStream0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "e0/", map0);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("x!}$@cBK", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(1536, tarArchiveOutputStream0.getCount());
      assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertNotNull(tarArchiveOutputStream0);
      
      MockFile mockFile0 = new MockFile(", extendedHeaders=");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry)tarArchiveOutputStream0.createArchiveEntry(mockFile0, ", extendedHeaders=");
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertFalse(mockFile0.exists());
      assertEquals(", extendedHeaders=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(", extendedHeaders=", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(", extendedHeaders=", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertNotNull(tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", "{=C:");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals("/data/lhy/TEval-plus/org.apache.commons.compress.archivers.zip.ZipArchiveEntry/{=C:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/data/lhy/TEval-plus/org.apache.commons.compress.archivers.zip.ZipArchiveEntry", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("{=C:", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.finish();
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals("/data/lhy/TEval-plus/org.apache.commons.compress.archivers.zip.ZipArchiveEntry/{=C:", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/data/lhy/TEval-plus/org.apache.commons.compress.archivers.zip.ZipArchiveEntry", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("{=C:", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(10240L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10240L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(10240, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      
      try { 
        tarArchiveOutputStream0.createArchiveEntry((File) null, " '9^ &FVj");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x!}$@c]K");
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 1, 1);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.close();
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, tarArchiveOutputStream0.getRecordSize());
      assertEquals(2, tarArchiveOutputStream0.getCount());
      assertEquals(2L, tarArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("x}@cBbK");
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setMode((-1714));
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals((-1714), tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // mode '-1714' is too big ( > 2097151 ).
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertNotNull(tarArchiveOutputStream0);
      
      MockFile mockFile0 = new MockFile(")Xz#CvU})7~f");
      assertNotNull(mockFile0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ")Xz#CvU})7~f");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(")Xz#CvU})7~f", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(")Xz#CvU})7~f", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(")Xz#CvU})7~f", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setModTime((-2948L));
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(")Xz#CvU})7~f", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(")Xz#CvU})7~f", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(")Xz#CvU})7~f", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ")Xz#CvU})7~f", map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingOutputStream", e);
      }
  }
}
