/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:04:01 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodCompilerPass_ESTest extends MethodCompilerPass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      // Undeclared exception!
      try { 
        inlineGetters0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(35, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods", "com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node2 = new Node(33, node0, node0, node0, node1);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.goole.jvascipt.jscomp.MethodCompilerPass$GetExternMethods", "com.goole.jvascipt.jscomp.MethodCompilerPass$GetExternMethods");
      Node node1 = new Node(64, node0, node0, node0, node0);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Node node0 = new Node(64, 64, 64);
      Node node1 = Node.newString("javascriptMjscompMethodCompilerPaws$GetExternMethods");
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascriptMjscomp.MethodCompilerPaws$GetExternMethods", "com.google.javascriptMjscomp.MethodCompilerPaws$GetExternMethods");
      Node node1 = new Node(36, node0, node0, node0, node0);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      inlineGetters0.process(node0, node0);
      assertFalse(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      Node node0 = new Node(64);
      Node node1 = new Node(37, node0);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
