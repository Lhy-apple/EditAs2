/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:57:39 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CheckAccessControls_ESTest extends CheckAccessControls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.CheckAccessControls", "com.google.javascript.jscomp.CheckAccessControls");
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      checkAccessControls0.hotSwapScript(node0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.CheckAccessControls", "com.google.javascript.jscomp.CheckAccessControls");
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      checkAccessControls0.process(node0, node0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      checkAccessControls0.process(node0, node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("N;Zh)y_3vrq)5r:", "N;Zh)y_3vrq)5r:");
      Node node1 = Node.newString(30, "N;Zh)y_3vrq)5r:");
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      checkAccessControls0.process(node0, node1);
      assertFalse(node1.hasChildren());
  }
}
