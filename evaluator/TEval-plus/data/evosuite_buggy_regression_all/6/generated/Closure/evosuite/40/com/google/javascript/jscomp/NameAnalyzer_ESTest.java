/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:54:57 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("com.oogle.javascript.jscomp.NameAnalyzer$JsNameRefNode", "com.oogle.javascript.jscomp.NameAnalyzer$JsNameRefNode");
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(147, 147, 147);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("comwoogle9javascript.jBcomp.NameAnalyzer$JsNameRefNode", "comwoogle9javascript.jBcomp.NameAnalyzer$JsNameRefNode");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(118, node0, node0, node0, 46, 49);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("comwoogle9javascript.jBcomp.NameAnalyzer$JsNameRefNode", "comwoogle9javascript.jBcomp.NameAnalyzer$JsNameRefNode");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      node0.detachChildren();
      Node node1 = new Node(118, node0, node0, node0, 46, 49);
      nameAnalyzer0.process(node0, node1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("yJSw0Eg", "yJSw0Eg");
      Node node1 = new Node(42, 12, 16);
      Node node2 = new Node(37, node1, node1, node1, 37, 52);
      Node node3 = new Node(49, node2, node0, 0, 53);
      nameAnalyzer0.process(node2, node3);
      assertFalse(node2.isNot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(115, (-1443579309), 115);
      Node node1 = new Node(12, node0, node0, node0, 46, 48);
      // Undeclared exception!
      try { 
        nameAnalyzer0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString("-`]g", 100, 100);
      Node node1 = new Node(4, node0, node0, node0, 37, 32);
      nameAnalyzer0.process(node0, node1);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseTestCode("d=i");
      Node node1 = new Node(108, node0, node0, node0, (-1792429496), 42);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Node.newString("!_|w0{g", 113, 113);
      Node node1 = new Node(113, node0, node0, node0, node0, 782, 16);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString("F", 130, 130);
      Node node1 = Node.newString("b|<J(T,;;6N*ljH");
      Node node2 = new Node(108, node0, node1, node1, node1, (-1469810257), 3307);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isRegExp());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("window", "window");
      nameAnalyzer0.process(node0, node0);
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("comwoogle9javascript.jBcomp.NameAnalyzer$JsNameRefNode", "comwoogle9javascript.jBcomp.NameAnalyzer$JsNameRefNode");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("yJSw0Eg", "yJSw0Eg");
      Node node1 = new Node(35, node0);
      Node node2 = new Node(37, node1, node1, node1, 37, 52);
      nameAnalyzer0.process(node0, node2);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }
}
