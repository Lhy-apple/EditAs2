/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:07:05 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import java.io.PrintStream;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiagnosticGroups_ESTest extends DiagnosticGroups_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.registerGroup("deprecated", diagnosticTypeArray0);
      assertNotNull(diagnosticGroup0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      DiagnosticGroups diagnosticGroups0 = compiler0.getDiagnosticGroups();
      Map<String, DiagnosticGroup> map0 = diagnosticGroups0.getRegisteredGroups();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.registerGroup("invalidCasts", diagnosticGroups0.CHECK_REGEXP);
      assertNotNull(diagnosticGroup0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[2];
      // Undeclared exception!
      try { 
        DiagnosticGroups.registerGroup("quoted", diagnosticGroupArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DiagnosticGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Stack<String> stack0 = new Stack<String>();
      diagnosticGroups0.setWarningLevels(compilerOptions0, stack0, compilerOptions0.checkShadowVars);
      assertFalse(compilerOptions0.checkCaja);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      // Undeclared exception!
      try { 
        diagnosticGroups0.setWarningLevels((CompilerOptions) null, list0, checkLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No warning class for name: java.class
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
